generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model adresses {
  id            Int             @id @default(autoincrement())
  street        String?
  zip_code      String?
  district      String?
  complement    String?
  city          String?
  state         String?
  number        String?
  active        Boolean         @default(true)
  professionals professionals[]
  students      students[]
}

model books {
  id         Int          @id @default(autoincrement())
  courses_id Int
  name       String
  position   Int
  courses    courses      @relation(fields: [courses_id], references: [id], onDelete: Cascade)
  classrooms classrooms[]
  lessons    lessons[]

  @@index([courses_id])
}

model classes {
  id               Int           @id @default(autoincrement())
  theme            String
  start_date       DateTime
  end_date         DateTime
  professionals_id Int
  classrooms_id    Int
  presence_list_id Int
  classrooms       classrooms    @relation(fields: [classrooms_id], references: [id], onDelete: Cascade)
  presence_list    presence_list @relation(fields: [presence_list_id], references: [id], onDelete: Cascade)
  professionals    professionals @relation(fields: [professionals_id], references: [id], onDelete: Restrict)

  @@index([professionals_id])
  @@index([classrooms_id])
  @@index([presence_list_id])
}

model classrooms {
  id                      Int                       @id @default(autoincrement())
  date                    String
  hour                    String
  books_id                Int
  created_at              DateTime                  @default(now())
  classes                 classes[]
  books                   books                     @relation(fields: [books_id], references: [id], onDelete: Cascade)
  students_has_classrooms students_has_classrooms[]

  @@index([books_id])
}

model courses {
  id            Int             @id @default(autoincrement())
  name          String
  price         Float
  created_at    DateTime        @default(now())
  books         books[]
  registrations registrations[]
}

model professionals {
  id            Int       @id @default(autoincrement())
  role_id       Int
  adresses_id  Int
  cpf           String    @unique
  name          String?
  first_name    String
  last_name     String
  phone         String
  email         String    @unique
  gender        String
  date_of_birth DateTime
  active        Boolean   @default(true)
  admin         Boolean   @default(true)
  avatar_url    String?
  password      String
  user          String
  hour_value    Float?
  created_at    DateTime? @default(now())
  updated_at    DateTime?
  classes       classes[]
  adresses     adresses @relation(fields: [adresses_id], references: [id], onDelete: Restrict)
  role          role      @relation(fields: [role_id], references: [id], onDelete: Restrict)

  @@index([adresses_id])
  @@index([role_id])
}

model role {
  id            Int             @id
  name          String
  professionals professionals[]
}

model students {
  id                  Int                   @id @default(autoincrement())
  adresses_id        Int
  email               String                @unique
  name                String?
  first_name          String
  last_name           String
  cpf                 String
  phone               String
  gender              String
  date_of_birth       DateTime
  password            String
  user                String                @unique
  created_at          DateTime?             @default(now())
  created_by          Int?
  avatar_url          String?
  updated_at          DateTime?
  updated_by          Int?
  active              Boolean               @default(true)
  records_of_students records_of_students[]
  registrations       registrations[]
  adresses           adresses             @relation(fields: [adresses_id], references: [id], onDelete: Restrict)

  @@index([adresses_id])
}

model students_has_classrooms {
  id               Int           @id @default(autoincrement())
  registrations_id Int           @unique
  classrooms_id    Int
  classrooms       classrooms    @relation(fields: [classrooms_id], references: [id], onDelete: Cascade)
  registrations    registrations @relation(fields: [registrations_id], references: [id], onDelete: Cascade)

  @@index([classrooms_id])
  @@index([registrations_id])
}

model auth {
  token         String   @id @unique
  type          String   @default("Bearer")
  expires_at    DateTime
  refresh_token String
}

model boleto_api {
  id                        Int    @id @default(autoincrement())
  developer_application_key String
  client_id                 String
  client_secret             String
}

model configs {
  id                 Int  @id @default(autoincrement())
  registrations_time Int? @default(6)
}

model lessons {
  id       Int     @id @default(autoincrement())
  books_id Int
  name     String?
  url      String?
  position Int?
  books    books   @relation(fields: [books_id], references: [id], onDelete: Cascade)
  tasks    tasks[]

  @@index([books_id])
}

model monthly_fee {
  id                Int           @id @default(autoincrement())
  registrations_id  Int
  due_date          DateTime?
  amount_to_be_paid Float?
  amount_paid       Float?        @default(0)
  date_of_paid      DateTime?
  payment_method    String?
  paid              Boolean?      @default(false)
  registrations     registrations @relation(fields: [registrations_id], references: [id], onDelete: Cascade)

  @@index([registrations_id])
}

model permissions {
  id                   Int      @id @default(autoincrement())
  create_classes       Boolean? @default(false)
  update_classes       Boolean? @default(false)
  delete_classes       Boolean? @default(false)
  update_students      Boolean? @default(false)
  delete_students      Boolean?
  create_students      Boolean? @default(false)
  update_professionals Boolean? @default(false)
  create_professionals Boolean? @default(false)
  delete_professionals Boolean? @default(false)
  create_registrations Boolean? @default(false)
  update_registrations Boolean? @default(false)
  delete_registrations Boolean? @default(false)
  dashboard            Boolean? @default(false)
  create_courses       Boolean? @default(false)
  update_courses       Boolean? @default(false)
  delete_courses       Boolean? @default(false)
  create_classrooms    Boolean? @default(false)
  update_classrooms    Boolean? @default(false)
  delete_classrooms    Boolean? @default(false)
}

model presence_list {
  id           Int       @id @default(autoincrement())
  date         DateTime?
  is_present   Boolean?  @default(false)
  time_arrived DateTime?
  classes      classes[]
}

model records_of_students {
  id          Int       @id @default(autoincrement())
  students_id Int
  description String?
  title       String?
  date        DateTime? @default(now())
  students    students  @relation(fields: [students_id], references: [id], onDelete: Cascade)

  @@index([students_id])
}

model registrations {
  id                      Int                      @id @default(autoincrement())
  students_id             Int
  courses_id              Int
  start_date              DateTime                 @default(now())
  end_date                DateTime
  monthly_fee_amount      Float?                   @default(0)
  created_by              Int?
  created_at              DateTime?                @default(now())
  locked                  Boolean                  @default(false)
  completed               Boolean                  @default(false)
  monthly_fee             monthly_fee[]
  courses                 courses                  @relation(fields: [courses_id], references: [id], onDelete: Cascade)
  students                students                 @relation(fields: [students_id], references: [id], onDelete: Cascade)
  students_has_classrooms students_has_classrooms?
  tasks                   tasks[]

  @@index([courses_id])
  @@index([students_id])
}

model tasks {
  scores_id        Int           @id
  registrations_id Int
  lessons_id       Int
  date             DateTime      @default(now())
  response         String?
  score_obtained   Float?
  question         String?
  total_score      Float?
  lessons          lessons       @relation(fields: [lessons_id], references: [id], onDelete: Cascade)
  registrations    registrations @relation(fields: [registrations_id], references: [id], onDelete: Cascade)

  @@index([lessons_id])
  @@index([registrations_id])
}
