generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

model adresses {
  id            Int             @id @unique(map: "id_UNIQUE") @default(autoincrement())
  street        String?         @db.VarChar(45)
  zip_code      String?         @db.VarChar(45)
  district      String?         @db.VarChar(45)
  complement    String?         @db.VarChar(45)
  city          String?         @db.VarChar(45)
  state         String?         @db.VarChar(45)
  number        String?         @db.VarChar(45)
  active        Boolean         @default(dbgenerated("b'1'")) @db.Bit(1)
  professionals professionals[]
  students      students[]
}

model books {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(45)
  number     Int
  classrooms classrooms[]
}

model classes {
  id               Int           @id @default(autoincrement())
  theme            String        @db.VarChar(200)
  start_date       DateTime      @db.DateTime(0)
  end_date         DateTime      @db.DateTime(0)
  professionals_id Int
  classrooms_id    Int
  presence_list_id Int
  classrooms       classrooms    @relation(fields: [classrooms_id], references: [id], onUpdate: Restrict, map: "fk_classes_classrooms1")
  presence_list    presence_list @relation(fields: [presence_list_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_classes_presence_list1")
  professionals    professionals @relation(fields: [professionals_id], references: [id], onUpdate: Restrict, map: "fk_classes_professionals1")

  @@index([classrooms_id], map: "fk_classes_classrooms1_idx")
  @@index([presence_list_id], map: "fk_classes_presence_list1_idx")
  @@index([professionals_id], map: "fk_classes_professionals1_idx")
  @@index([classrooms_id], map: "fk_classes_classrooms1_idx")
}

model classrooms {
  id           Int            @id @unique(map: "id_UNIQUE") @default(autoincrement())
  books_id     Int
  courses_id   Int
  date         String         @db.VarChar(45)
  hour         String         @db.VarChar(45)
  classes      classes[]
  books        books          @relation(fields: [books_id], references: [id], onUpdate: Restrict, map: "fk_classes_books1")
  courses      courses        @relation(fields: [courses_id], references: [id], onUpdate: Restrict, map: "fk_classes_courses1")
  registration registration[]

  @@index([books_id], map: "fk_classes_books1_idx")
  @@index([courses_id], map: "fk_classes_courses1_idx")
}

model courses {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(45)
  price      Float        @db.Float
  classrooms classrooms[]
}

model presence_list {
  id      Int       @id
  classes classes[]
}

model professionals {
  id            Int       @id @default(autoincrement())
  cpf           String    @unique(map: "cpf_UNIQUE") @db.VarChar(11)
  name          String?   @db.VarChar(90)
  first_name    String    @db.VarChar(45)
  last_name     String    @db.VarChar(45)
  phone         String    @db.VarChar(11)
  email         String    @unique(map: "email_UNIQUE") @db.VarChar(100)
  gender        String    @db.VarChar(1)
  date_of_birth DateTime  @db.Date
  created_at    DateTime? @default(now()) @db.DateTime(0)
  updated_at    DateTime? @db.DateTime(0)
  active        Boolean   @default(dbgenerated("(b'1')")) @db.Bit(1)
  admin         Boolean   @default(dbgenerated("(b'1')")) @db.Bit(1)
  role_id       Int
  avatar_url    String?   @db.VarChar(200)
  password      String    @db.VarChar(128)
  user          String    @db.VarChar(128)
  adresses_id   Int
  classes       classes[]
  adresses      adresses  @relation(fields: [adresses_id], references: [id], onUpdate: Restrict, map: "fk_professionals_adresses1")
  role          role      @relation(fields: [role_id], references: [id], onUpdate: Restrict, map: "fk_professionals_role1")

  @@index([adresses_id], map: "fk_professionals_adresses1_idx")
  @@index([role_id], map: "fk_professionals_role1_idx")
}

model registration {
  id                 Int        @id @default(autoincrement())
  students_id        Int
  classrooms_id      Int
  registration_time  Int
  start_date         DateTime   @default(now()) @db.DateTime(0)
  end_date           DateTime   @db.DateTime(0)
  monthly_fee_amount Float?     @db.Float
  active             Boolean    @default(dbgenerated("(b'1')")) @db.Bit(1)
  created_by         Int?
  created_at         DateTime?  @default(now()) @db.DateTime(0)
  classrooms         classrooms @relation(fields: [classrooms_id], references: [id], onUpdate: Restrict, map: "fk_registration_classrooms1")
  students           students   @relation(fields: [students_id], references: [id], onUpdate: Restrict, map: "fk_registration_students1")

  @@index([classrooms_id], map: "fk_registration_classrooms1_idx")
  @@index([students_id], map: "fk_registration_students1_idx")
  @@index([classrooms_id], map: "fk_registration_classrooms1_idx")
}

model role {
  id            Int             @id
  name          String          @db.VarChar(45)
  professionals professionals[]
}

model students {
  id                    Int            @id @unique(map: "id_UNIQUE") @default(autoincrement())
  email                 String         @unique(map: "email_UNIQUE") @db.VarChar(45)
  name                  String?        @db.VarChar(90)
  first_name            String         @db.VarChar(45)
  last_name             String         @db.VarChar(45)
  cpf                   String         @db.VarChar(11)
  phone                 String         @db.VarChar(11)
  gender                String         @db.VarChar(1)
  date_of_birth         DateTime       @db.DateTime(0)
  created_at            DateTime?      @default(now()) @db.DateTime(0)
  created_by            Int?
  avatar_url            String?        @db.VarChar(500)
  updated_at            DateTime?      @db.DateTime(0)
  updated_by            Int?
  active                Boolean        @default(dbgenerated("(b'1')")) @db.Bit(1)
  password              String         @db.VarChar(128)
  user                  String         @unique(map: "user_UNIQUE") @db.VarChar(128)
  adresses_id           Int
  amount_paid_for_month Float?         @db.Float
  registration          registration[]
  adresses              adresses       @relation(fields: [adresses_id], references: [id], onUpdate: Restrict, map: "fk_students_adresses1")

  @@index([adresses_id], map: "fk_students_adresses1_idx")
}
