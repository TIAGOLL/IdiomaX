generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

model adresses {
  id            Int             @id @unique(map: "id_UNIQUE") @default(autoincrement())
  street        String?         @db.VarChar(45)
  zip_code      String?         @db.VarChar(45)
  district      String?         @db.VarChar(45)
  complement    String?         @db.VarChar(45)
  city          String?         @db.VarChar(45)
  state         String?         @db.VarChar(45)
  number        String?         @db.VarChar(45)
  active        Boolean         @default(dbgenerated("b'1'")) @db.Bit(1)
  professionals professionals[]
  students      students[]
}

model auth {
  token         String   @id @unique(map: "token_UNIQUE") @db.VarChar(500)
  type          String   @default("Bearer") @db.VarChar(45)
  expires_at    DateTime @db.DateTime(0)
  refresh_token String   @db.VarChar(45)
}

model books {
  id         Int          @id @default(autoincrement())
  courses_id Int
  name       String       @db.VarChar(45)
  number     Int
  courses    courses      @relation(fields: [courses_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_books_courses1")
  classrooms classrooms[]
  scores     scores[]

  @@index([courses_id], map: "fk_books_courses1_idx")
}

model classes {
  id               Int           @id @default(autoincrement())
  theme            String        @db.VarChar(200)
  start_date       DateTime      @db.DateTime(0)
  end_date         DateTime      @db.DateTime(0)
  professionals_id Int
  classrooms_id    Int
  presence_list_id Int
  classrooms       classrooms    @relation(fields: [classrooms_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_classes_classrooms1")
  presence_list    presence_list @relation(fields: [presence_list_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_classes_presence_list1")
  professionals    professionals @relation(fields: [professionals_id], references: [id], onUpdate: Restrict, map: "fk_classes_professionals1")

  @@index([classrooms_id], map: "fk_classes_classrooms1_idx")
  @@index([presence_list_id], map: "fk_classes_presence_list1_idx")
  @@index([professionals_id], map: "fk_classes_professionals1_idx")
}

model classrooms {
  id                      Int                       @id @unique(map: "id_UNIQUE") @default(autoincrement())
  date                    String                    @db.VarChar(45)
  hour                    String                    @db.VarChar(45)
  books_id                Int
  created_at              DateTime                  @default(now()) @db.DateTime(0)
  classes                 classes[]
  books                   books                     @relation(fields: [books_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_classrooms_books1")
  students_has_classrooms students_has_classrooms[]

  @@index([books_id], map: "fk_classrooms_books1_idx")
}

model configs {
  id                 Int  @id @unique(map: "id_UNIQUE") @default(autoincrement())
  registrations_time Int? @default(6)
}

model courses {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(45)
  price         Float           @db.Float
  created_at    DateTime        @default(now()) @db.DateTime(0)
  books         books[]
  registrations registrations[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model monthly_fee {
  id                Int           @id @unique(map: "id_UNIQUE") @default(autoincrement())
  registrations_id  Int
  due_date          DateTime?     @db.DateTime(0)
  amount_to_be_paid Float?        @db.Float
  amount_paid       Float?        @default(0) @db.Float
  date_of_paid      DateTime?     @db.DateTime(0)
  payment_method    String?       @db.VarChar(45)
  paid              Boolean?      @default(dbgenerated("b'0'")) @db.Bit(1)
  registrations     registrations @relation(fields: [registrations_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_monthly_fee_registrations1")

  @@index([registrations_id], map: "fk_monthly_fee_registrations1_idx")
}

model presence_list {
  id      Int       @id
  classes classes[]
}

model professionals {
  id            Int       @id @default(autoincrement())
  role_id       Int
  adresses_id   Int
  cpf           String    @unique(map: "cpf_UNIQUE") @db.VarChar(11)
  name          String?   @db.VarChar(90)
  first_name    String    @db.VarChar(45)
  last_name     String    @db.VarChar(45)
  phone         String    @db.VarChar(11)
  email         String    @unique(map: "email_UNIQUE") @db.VarChar(100)
  gender        String    @db.VarChar(1)
  date_of_birth DateTime  @db.Date
  active        Boolean   @default(dbgenerated("b'1'")) @db.Bit(1)
  admin         Boolean   @default(dbgenerated("b'1'")) @db.Bit(1)
  avatar_url    String?   @db.VarChar(200)
  password      String    @db.VarChar(128)
  user          String    @db.VarChar(128)
  hour_value    Float?    @db.Float
  created_at    DateTime? @default(now()) @db.DateTime(0)
  updated_at    DateTime? @db.DateTime(0)
  classes       classes[]
  adresses      adresses  @relation(fields: [adresses_id], references: [id], onUpdate: Restrict, map: "fk_professionals_adresses1")
  role          role      @relation(fields: [role_id], references: [id], onUpdate: Restrict, map: "fk_professionals_role1")

  @@index([adresses_id], map: "fk_professionals_adresses1_idx")
  @@index([role_id], map: "fk_professionals_role1_idx")
}

model registrations {
  id                      Int                      @id @unique(map: "id_UNIQUE") @default(autoincrement())
  students_id             Int
  courses_id              Int
  start_date              DateTime                 @default(now()) @db.DateTime(0)
  end_date                DateTime                 @db.DateTime(0)
  monthly_fee_amount      Float?                   @default(0) @db.Float
  created_by              Int?
  created_at              DateTime?                @default(now()) @db.DateTime(0)
  locked                  Boolean                  @default(dbgenerated("b'0'")) @db.Bit(1)
  completed               Boolean                  @default(dbgenerated("b'0'")) @db.Bit(1)
  monthly_fee             monthly_fee[]
  courses                 courses                  @relation(fields: [courses_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_registrations_courses1")
  students                students                 @relation(fields: [students_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_registrations_students1")
  responses               responses[]
  students_has_classrooms students_has_classrooms?

  @@index([courses_id], map: "fk_registrations_courses1_idx")
  @@index([students_id], map: "fk_registrations_students1_idx")
}

model responses {
  scores_id        Int           @id
  registrations_id Int
  date             DateTime      @default(now()) @db.DateTime(0)
  response         String?       @db.VarChar(1000)
  score_obtained   Float?        @db.Float
  total_score      Float?        @db.Float
  registrations    registrations @relation(fields: [registrations_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_scores_has_registrations_registrations1")
  scores           scores        @relation(fields: [scores_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_scores_has_registrations_scores1")

  @@index([scores_id], map: "fk_scores_has_registrations_scores1_idx")
  @@index([registrations_id], map: "fk_responses_registrations1_idx")
}

model role {
  id            Int             @id
  name          String          @db.VarChar(45)
  professionals professionals[]
}

model scores {
  id          Int        @id
  books_id    Int
  question    String?    @db.VarChar(1000)
  total_score Float?     @db.Float
  updated_at  DateTime?  @db.DateTime(0)
  responses   responses?
  books       books      @relation(fields: [books_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_scores_books1")

  @@index([books_id], map: "fk_scores_books1_idx")
}

model students {
  id                    Int             @id @unique(map: "id_UNIQUE") @default(autoincrement())
  adresses_id           Int
  email                 String          @unique(map: "email_UNIQUE") @db.VarChar(45)
  name                  String?         @db.VarChar(90)
  first_name            String          @db.VarChar(45)
  last_name             String          @db.VarChar(45)
  cpf                   String          @db.VarChar(11)
  phone                 String          @db.VarChar(11)
  amount_paid_for_month Float?          @default(0) @db.Float
  gender                String          @db.VarChar(1)
  date_of_birth         DateTime        @db.DateTime(0)
  password              String          @db.VarChar(128)
  user                  String          @unique(map: "user_UNIQUE") @db.VarChar(128)
  created_at            DateTime?       @default(now()) @db.DateTime(0)
  created_by            Int?
  avatar_url            String?         @db.VarChar(500)
  updated_at            DateTime?       @db.DateTime(0)
  updated_by            Int?
  active                Boolean         @default(dbgenerated("b'1'")) @db.Bit(1)
  registrations         registrations[]
  adresses              adresses        @relation(fields: [adresses_id], references: [id], onUpdate: Restrict, map: "fk_students_adresses1")

  @@index([adresses_id], map: "fk_students_adresses1_idx")
}

model students_has_classrooms {
  id               Int           @id @unique(map: "id_UNIQUE") @default(autoincrement())
  registrations_id Int           @unique(map: "registrations_id_UNIQUE")
  classrooms_id    Int
  classrooms       classrooms    @relation(fields: [classrooms_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_students_has_classrooms_classrooms1")
  registrations    registrations @relation(fields: [registrations_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_students_has_classrooms_registrations1")

  @@index([classrooms_id], map: "fk_students_has_classrooms_classrooms1_idx")
  @@index([registrations_id], map: "fk_students_has_classrooms_registrations1_idx")
}

model boleto_api {
  id                        Int    @id @default(autoincrement())
  developer_application_key String @db.VarChar(200)
  client_id                 String @db.VarChar(200)
  client_secret             String @db.VarChar(200)
}
