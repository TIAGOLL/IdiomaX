generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

model books {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(45)
  number     Int
  classrooms classrooms[]
  students   students[]
}

model cities {
  id        Int     @id
  name      String? @db.VarChar(95)
  states_id Int
  states    states  @relation(fields: [states_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_cities_states1")

  @@index([states_id], map: "fk_cities_states1_idx")
}

model classes {
  id          Int      @id
  theme       String   @db.VarChar(200)
  start_date  DateTime @db.DateTime(0)
  end_date    DateTime @db.DateTime(0)
  students_id String   @db.VarChar(200)
  classes_id  Int

  @@index([classes_id], map: "fk_classes_classes1_idx")
  @@index([students_id], map: "fk_classes_students1_idx")
}

model classrooms {
  id               Int           @id @unique(map: "id_UNIQUE") @default(autoincrement())
  books_id         Int
  courses_id       Int
  professionals_id String        @db.VarChar(200)
  books            books         @relation(fields: [books_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_classes_books1")
  courses          courses       @relation(fields: [courses_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_classes_courses1")
  professionals    professionals @relation(fields: [professionals_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_classrooms_professionals1")

  @@index([books_id], map: "fk_classes_books1_idx")
  @@index([courses_id], map: "fk_classes_courses1_idx")
  @@index([professionals_id], map: "fk_classrooms_professionals1_idx")
}

model countries {
  id     Int      @id
  name   String?  @db.VarChar(95)
  states states[]
}

model courses {
  id         Int          @id
  name       String       @db.VarChar(45)
  classrooms classrooms[]
}

model professionals {
  id            String       @id @db.VarChar(200)
  cpf           String       @unique(map: "cpf_UNIQUE") @db.VarChar(11)
  name          String?      @db.VarChar(90)
  first_name    String       @db.VarChar(45)
  last_name     String       @db.VarChar(45)
  phone         String       @db.VarChar(11)
  email         String       @db.VarChar(100)
  gender        String       @db.VarChar(1)
  date_of_birth DateTime     @db.Date
  created_at    DateTime     @default(now()) @db.DateTime(0)
  updated_at    DateTime?    @default(now()) @db.DateTime(0)
  active        Boolean      @default(dbgenerated("b'1'")) @db.Bit(1)
  admin         Boolean      @default(dbgenerated("b'0'")) @db.Bit(1)
  role_id       Int
  avatar_url    String?      @db.VarChar(200)
  classrooms    classrooms[]
  role          role         @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_professionals_role1")

  @@index([role_id], map: "fk_professionals_role1_idx")
}

model role {
  id            Int             @id
  name          String          @db.VarChar(45)
  professionals professionals[]
}

model states {
  id           Int       @id
  abbr         String?   @db.VarChar(2)
  name         String?   @db.VarChar(45)
  countries_id Int
  cities       cities[]
  countries    countries @relation(fields: [countries_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_states_countries1")

  @@index([countries_id], map: "fk_states_countries1_idx")
}

model students {
  id            String    @id @unique(map: "id_UNIQUE") @db.VarChar(200)
  email         String    @db.VarChar(45)
  name          String?   @db.VarChar(45)
  first_name    String    @db.VarChar(45)
  last_name     String    @db.VarChar(45)
  cpf           String    @db.VarChar(11)
  phone         String    @db.VarChar(11)
  gender        String    @db.VarChar(1)
  date_of_birth DateTime  @db.DateTime(0)
  created_at    DateTime  @default(now()) @db.DateTime(0)
  created_by    String?   @db.VarChar(45)
  avatar_url    String?   @db.VarChar(500)
  updated_at    DateTime? @db.DateTime(0)
  updated_by    String?   @db.VarChar(45)
  active        Boolean   @default(dbgenerated("b'1'")) @db.Bit(1)
  books_id      Int
  books         books     @relation(fields: [books_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_students_books1")

  @@index([books_id], map: "fk_students_books1_idx")
}

model students_has_classrooms {
  students_id   String @db.VarChar(200)
  classrooms_id Int

  @@id([students_id, classrooms_id])
  @@index([classrooms_id], map: "fk_students_has_classrooms_classrooms1_idx")
  @@index([students_id], map: "fk_students_has_classrooms_students1_idx")
}

model adresses {
  id          Int     @id @unique(map: "id_UNIQUE") @default(autoincrement())
  students_id String  @unique(map: "students_id_UNIQUE") @db.VarChar(200)
  street      String? @db.VarChar(45)
  zip_code    String? @db.VarChar(45)
  district    String? @db.VarChar(45)
  complement  String? @db.VarChar(45)
  city        String? @db.VarChar(45)
  state       String? @db.VarChar(45)

  @@index([students_id], map: "fk_adresses_students1_idx")
}
