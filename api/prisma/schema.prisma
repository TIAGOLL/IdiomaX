generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Renamedclass {
  id             String           @id @db.VarChar(256)
  nome           String           @db.VarChar(256)
  vacancies      Decimal          @db.Decimal(10, 0)
  courses_id     String           @db.VarChar(256)
  class_days     class_days[]
  classes        classes[]
  users_in_class users_in_class[]

  courses courses @relation("class_courses", fields: [courses_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "courses_fk")

  @@map("class")
}

model class_days {
  id           String   @id @db.VarChar(256)
  initial_date DateTime
  final_date   DateTime
  class_id     String   @db.VarChar(256)

  class Renamedclass @relation(fields: [class_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "class_fk")
}

model classes {
  id         String   @id @db.VarChar(256)
  theme      String   @db.VarChar(256)
  start_date DateTime
  end_date   DateTime
  class_id   String   @db.VarChar(256)

  class          Renamedclass    @relation(fields: [class_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "class_fk")
  presence_lists presence_list[] @relation("presence_list_classes")
}

model classrooms {
  id                   String     @id @db.VarChar(256)
  number               Decimal    @db.Decimal(5, 0)
  created_at           DateTime   @default(now())
  block                String?    @db.VarChar(256)
  companies_id         String?    @db.VarChar(256)
  companies_classrooms companies? @relation("companies_classrooms", fields: [companies_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "companies_fk")
}

model companies {
  id         String    @id
  name       String
  created_at DateTime? @default(now())
  updated_at DateTime?
  users_id   String
  address    String

  classrooms    classrooms[]    @relation("companies_classrooms")
  owner_user    users           @relation("companies_owner_user", fields: [users_id], references: [id])
  configs       configs[]       @relation("companies_configs")
  courses       courses[]       @relation("companies_courses")
  registrations registrations[] @relation("companies_registrations")
  users_many    users[]         @relation("companies_users")
}

model configs {
  id                 String    @id @db.VarChar(256)
  registrations_time Decimal   @default(6) @db.Decimal(256, 0)
  companies_id       String    @db.VarChar(256)
  companies_configs  companies @relation("companies_configs", fields: [companies_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "companies_fk")
}

model courses {
  id                                         String         @id @db.VarChar(256)
  description                                String?        @db.VarChar(256)
  created_at                                 DateTime       @default(now())
  name                                       String         @db.VarChar(256)
  registration_value                         Decimal        @db.Decimal(20, 2)
  companies                                  String         @db.VarChar(256)
  workload                                   Decimal        @db.Decimal(5, 0)
  monthly_fee_value                          Decimal        @db.Decimal(20, 2)
  minimum_grade                              Decimal        @db.Decimal(20, 0)
  maximum_grade                              Decimal        @db.Decimal(20, 0)
  minimum_frequency                          Decimal        @db.Decimal(20, 0)
  syllabus                                   Bytes?
  class_courses Renamedclass[] @relation("class_courses")
  courses_companies     companies      @relation("courses_companies", fields: [companies], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "companies_fk")
  levels_courses             levels[]       @relation("levels_courses")
}

model discipline {
  id                               String  @id @db.VarChar(256)
  name                             String  @db.VarChar(256)
  levels                           String  @db.VarChar(256)
  levels_discipline_levelsTolevels levels  @relation("discipline_levelsTolevels", fields: [levels], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "levels_fk")
  tasks                            tasks[]
}

model levels {
  id                                   String       @id @db.VarChar(256)
  name                                 String       @db.VarChar(256)
  level                                Decimal      @db.Decimal(5, 0)
  courses                              String?      @db.VarChar(256)
  discipline_discipline_levelsTolevels discipline[] @relation("discipline_levelsTolevels")
  courses_levels_coursesTocourses      courses?     @relation("levels_coursesTocourses", fields: [courses], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "courses")
  materials_materials_levelsTolevels   materials[]  @relation("materials_levelsTolevels")
}

model materials {
  id                              String  @id(map: "books_pkey") @db.VarChar(256)
  name                            String  @db.VarChar(256)
  file                            Bytes
  levels                          String? @db.VarChar(256)
  levels_materials_levelsTolevels levels? @relation("materials_levelsTolevels", fields: [levels], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "levels_fk")
}

model monthly_fee {
  id                                                     String        @id @db.VarChar(256)
  due_date                                               DateTime
  value                                                  Decimal       @db.Decimal(20, 2)
  paid                                                   Boolean       @default(false)
  discount_payment_before_due_date                       Decimal       @default(0) @db.Decimal(3, 2)
  registrations                                          String        @db.VarChar(256)
  payment_method                                         String?       @db.VarChar(256)
  date_of_payment                                        DateTime?     @db.Timestamptz(3)
  registrations_monthly_fee_registrationsToregistrations registrations @relation("monthly_fee_registrationsToregistrations", fields: [registrations], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "registrations_fk")
}

model presence_list {
  id                                     String  @id @db.VarChar(256)
  is_present                             Boolean @default(false)
  users                                  String  @db.VarChar(256)
  classes                                String  @db.VarChar(256)
  classes_presence_list_classesToclasses classes @relation("presence_list_classesToclasses", fields: [classes], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "classes_fk")
  users_presence_list_usersTousers       users   @relation("presence_list_usersTousers", fields: [users], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "users_fk")
}

model records_of_students {
  id                                                             Int           @id @default(autoincrement())
  registrations                                                  String        @db.VarChar(256)
  description                                                    String?       @db.VarChar(512)
  title                                                          String?       @db.VarChar(256)
  created_at                                                     DateTime?     @default(now())
  registrations_records_of_students_registrationsToregistrations registrations @relation("records_of_students_registrationsToregistrations", fields: [registrations], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "registrations_fk")
}

model registrations {
  id                                                                   String                @id @db.VarChar(256)
  start_date                                                           DateTime              @default(now())
  monthly_fee_amount                                                   Decimal               @default(0) @db.Decimal(20, 2)
  created_at                                                           DateTime?             @default(now())
  locked                                                               Boolean?              @default(false)
  completed                                                            Boolean?              @default(false)
  users                                                                String?               @db.VarChar(256)
  companies                                                            String?               @db.VarChar(256)
  monthly_fee_monthly_fee_registrationsToregistrations                 monthly_fee[]         @relation("monthly_fee_registrationsToregistrations")
  records_of_students_records_of_students_registrationsToregistrations records_of_students[] @relation("records_of_students_registrationsToregistrations")
  companies_registrations_companiesTocompanies                         companies?            @relation("registrations_companiesTocompanies", fields: [companies], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "companies_fk")
  users_registrations_usersTousers                                     users?                @relation("registrations_usersTousers", fields: [users], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "users_fk")
  tasks_delivery                                                       tasks_delivery[]      @ignore
}

model roles {
  id          String        @id @db.VarChar(256)
  name        String        @db.VarChar(256)
  users_roles users_roles[]
}

model tasks {
  id             String           @id @db.VarChar(256)
  created_at     DateTime         @default(now())
  file           Bytes?
  score          Float?
  description    String?          @db.VarChar(1024)
  title          String           @db.VarChar(256)
  disciplines    String           @db.VarChar(256)
  due_date       DateTime?        @db.Time(3)
  discipline     discipline       @relation(fields: [disciplines], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "disciplines_fk")
  tasks_delivery tasks_delivery[] @ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model tasks_delivery {
  tasks_id         String        @db.VarChar(256)
  registrations_id String        @db.VarChar(256)
  date             DateTime      @default(now())
  file             Bytes?
  link             String?       @db.VarChar(512)
  registrations    registrations @relation(fields: [registrations_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tasks            tasks         @relation(fields: [tasks_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@ignore
}

model tokens {
  id                        String   @id @db.VarChar(256)
  type                      String   @db.VarChar(256)
  expires_at                DateTime
  createdAt_                DateTime @default(now()) @map("createdAt ")
  users                     String   @db.VarChar(256)
  users_tokens_usersTousers users    @relation("tokens_usersTousers", fields: [users], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_fk")
}

model users {
  id                                       String           @id @db.VarChar(256)
  name                                     String           @db.VarChar(256)
  email                                    String           @unique @db.VarChar(256)
  password                                 String           @db.VarChar(1024)
  avatar_url                               String?          @db.VarChar(256)
  created_at                               DateTime?        @default(now())
  updated_at                               DateTime?
  cpf                                      String?          @db.VarChar(256)
  phone                                    String?          @db.VarChar(256)
  username                                 String           @unique @db.VarChar(256)
  gender                                   String?          @db.VarChar(256)
  date_of_birth                            DateTime?
  active                                   Boolean?         @default(true)
  address                                  String?          @db.VarChar(256)
  companies_id                             String           @db.VarChar(256)
  companies                                companies[]      @relation("companies_usersTousers")
  presence_list_presence_list_usersTousers presence_list[]  @relation("presence_list_usersTousers")
  registrations_registrations_usersTousers registrations[]  @relation("registrations_usersTousers")
  tokens                                   tokens[]         @relation("tokens_usersTousers")
  companies_users_companiesTocompanies     companies        @relation("users_companiesTocompanies", fields: [companies_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "companies_fk")
  users_in_class                           users_in_class[] @ignore
  users_roles                              users_roles[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model users_in_class {
  class_id     String       @db.VarChar(256)
  users_id     String       @db.VarChar(256)
  teacher      Boolean
  Renamedclass Renamedclass @relation(fields: [class_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "class_fk")
  users        users        @relation(fields: [users_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "users_fk")

  @@ignore
}

model users_roles {
  id       String @id @db.VarChar(256)
  users_id String @db.VarChar(256)
  role_id  String @db.VarChar(256)
  roles    roles  @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "roles_fk")
  users    users  @relation(fields: [users_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_fk")
}
