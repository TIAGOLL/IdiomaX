generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Renamedclass {
  id         String  @id @default(uuid()) @db.VarChar(256)
  nome       String  @db.VarChar(256)
  vacancies  Decimal @db.Decimal(10, 0)
  courses_id String  @db.VarChar(256)

  class_days     class_days[]
  classes        classes[]
  users_in_class users_in_class[]

  courses courses @relation(fields: [courses_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "courses_fk")

  @@map("class")
}

model class_days {
  id           String   @id @default(uuid()) @db.VarChar(256)
  initial_date DateTime
  final_date   DateTime
  class_id     String   @db.VarChar(256)

  class Renamedclass @relation(fields: [class_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "class_fk")
}

model classes {
  id         String   @id @default(uuid()) @db.VarChar(256)
  theme      String   @db.VarChar(256)
  start_date DateTime
  end_date   DateTime
  class_id   String   @db.VarChar(256)

  class         Renamedclass    @relation(fields: [class_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "class_fk")
  presence_list presence_list[]
}

model classrooms {
  id           String   @id @default(uuid()) @db.VarChar(256)
  number       Decimal  @db.Decimal(5, 0)
  created_at   DateTime @default(now())
  block        String?  @db.VarChar(256)
  companies_id String?  @db.VarChar(256)

  companies   companies? @relation(fields: [companies_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "companies_fk")
  companiesId String?
}

model companies {
  id         String    @id @default(uuid()) @db.VarChar(256)
  name       String    @db.VarChar(256)
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
  users_id   String    @db.VarChar(256)
  address    String    @db.VarChar(256)

  classrooms         classrooms[]
  users_in_companies users_in_companies[]
  configs            configs[]
  registrations      registrations[]
  courses            courses[]
  users              users                @relation(fields: [users_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "users_fk")
}

model configs {
  id                 String  @id @default(uuid()) @db.VarChar(256)
  registrations_time Decimal @default(6) @db.Decimal(256, 0)
  companies_id       String  @db.VarChar(256)

  companies   companies @relation(fields: [companies_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "companies_fk")
  companiesId String?
}

model courses {
  id                 String   @id @default(uuid()) @db.VarChar(256)
  description        String?  @db.VarChar(256)
  created_at         DateTime @default(now())
  name               String   @db.VarChar(256)
  registration_value Decimal  @db.Decimal(20, 2)
  workload           Decimal  @db.Decimal(5, 0)
  monthly_fee_value  Decimal  @db.Decimal(20, 2)
  minimum_grade      Decimal  @db.Decimal(20, 0)
  maximum_grade      Decimal  @db.Decimal(20, 0)
  minimum_frequency  Decimal  @db.Decimal(20, 0)
  syllabus           Bytes?
  companies_id       String   @db.VarChar(256)

  class       Renamedclass[]
  levels      levels[]
  companies   companies      @relation(fields: [companies_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "companies_fk")
  companiesId String?
}

model disciplines {
  id        String @id @default(uuid()) @db.VarChar(256)
  name      String @db.VarChar(256)
  levels_id String @db.VarChar(256)

  tasks    tasks[]
  levels   levels? @relation(fields: [levelsId], references: [id])
  levelsId String? @db.VarChar(256)
}

model levels {
  id         String  @id @default(uuid()) @db.VarChar(256)
  name       String  @db.VarChar(256)
  level      Decimal @db.Decimal(5, 0)
  courses_id String? @db.VarChar(256)

  disciplines disciplines[]
  courses     courses?      @relation(fields: [courses_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "courses_fk")
  materials   materials[]
  coursesId   String?       @db.VarChar(256)
}

model materials {
  id        String  @id @default(uuid()) @db.VarChar(256)
  name      String  @db.VarChar(256)
  file      Bytes
  levels_id String? @db.VarChar(256)

  levels   levels? @relation(fields: [levels_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "levels_fk")
  levelsId String? @db.VarChar(256)
}

model monthly_fee {
  id                               String    @id @default(uuid()) @db.VarChar(256)
  due_date                         DateTime
  value                            Decimal   @db.Decimal(20, 2)
  paid                             Boolean   @default(false)
  discount_payment_before_due_date Decimal   @default(0) @db.Decimal(3, 2)
  registrations_id                 String    @db.VarChar(256)
  payment_method                   String?   @db.VarChar(256)
  date_of_payment                  DateTime? @db.Timestamptz(3)

  registrations   registrations @relation(fields: [registrations_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "registrations_fk")
  registrationsId String?       @db.VarChar(256)
}

model presence_list {
  id         String  @id @default(uuid()) @db.VarChar(256)
  is_present Boolean @default(false)
  users_id   String  @db.VarChar(256)
  classes_id String  @db.VarChar(256)

  classes classes @relation(fields: [classes_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "classes_fk")
  users   users   @relation(fields: [users_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "users_fk")
}

model records_of_students {
  id               String    @id @default(uuid()) @db.VarChar(256)
  registrations_id String    @db.VarChar(256)
  description      String?   @db.VarChar(512)
  title            String?   @db.VarChar(256)
  created_at       DateTime? @default(now())

  registrations   registrations @relation(fields: [registrations_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "registrations_fk")
  registrationsId String?       @db.VarChar(256)
}

model registrations {
  id                 String    @id @default(uuid()) @db.VarChar(256)
  start_date         DateTime  @default(now())
  monthly_fee_amount Decimal   @default(0) @db.Decimal(20, 2)
  created_at         DateTime? @default(now())
  locked             Boolean?  @default(false)
  completed          Boolean?  @default(false)
  users_id           String?   @db.VarChar(256)
  companies_id       String?   @db.VarChar(256)
  usersId            String?   @db.VarChar(256)

  monthly_fee         monthly_fee[]
  records_of_students records_of_students[]
  companies           companies?            @relation(fields: [companies_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "companies_fk")
  users               users?                @relation(fields: [users_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "users_fk")
  tasks_delivery      tasks_delivery[]
  companiesId         String?
}

model roles {
  id                 String               @id @default(uuid()) @db.VarChar(256)
  name               String               @db.VarChar(256)
  users_in_companies users_in_companies[]
}

model tasks {
  id             String    @id @default(uuid()) @db.VarChar(256)
  created_at     DateTime  @default(now())
  file           Bytes?
  score          Float?
  description    String?   @db.VarChar(1024)
  title          String    @db.VarChar(256)
  disciplines_id String    @db.VarChar(256)
  due_date       DateTime? @db.Time(3)

  disciplines    disciplines      @relation(fields: [disciplines_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "disciplines_fk")
  tasks_delivery tasks_delivery[]
}

model tasks_delivery {
  id               String   @id @default(uuid()) @db.VarChar(256)
  tasks_id         String   @db.VarChar(256)
  registrations_id String   @db.VarChar(256)
  date             DateTime @default(now())
  file             Bytes?
  link             String?  @db.VarChar(512)

  registrations registrations @relation(fields: [registrations_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tasks         tasks         @relation(fields: [tasks_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model tokens {
  id         String   @id @default(uuid()) @db.VarChar(256)
  type       String   @db.VarChar(256)
  expires_at DateTime
  created_at DateTime @default(now())
  users_id   String   @db.VarChar(256)

  users   users   @relation(fields: [users_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_fk")
  usersId String? @db.VarChar(256)
}

model users {
  id            String    @id @default(uuid()) @db.VarChar(256)
  name          String    @db.VarChar(256)
  email         String    @unique @db.VarChar(256)
  password      String    @db.VarChar(1024)
  cpf           String    @db.VarChar(256)
  phone         String    @db.VarChar(256)
  username      String    @unique @db.VarChar(256)
  gender        String    @db.VarChar(256)
  date_of_birth DateTime
  address       String    @db.VarChar(256)
  active        Boolean?  @default(true)
  avatar_url    String?   @db.VarChar(256)
  created_at    DateTime? @default(now())
  updated_at    DateTime? @updatedAt

  presence_list      presence_list[]
  registrations      registrations[]
  tokens             tokens[]
  users_in_class     users_in_class[]
  users_in_companies users_in_companies[]
  companies          companies[]
}

model users_in_class {
  id       String  @id @default(uuid()) @db.VarChar(256)
  class_id String  @db.VarChar(256)
  users_id String  @db.VarChar(256)
  teacher  Boolean

  class Renamedclass @relation(fields: [class_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "class_fk")
  users users        @relation(fields: [users_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "users_fk")
}

model users_in_companies {
  id           String @id @default(uuid()) @db.VarChar(256)
  users_id     String @db.VarChar(256)
  role_id      String @db.VarChar(256)
  companies_id String @db.VarChar(256)

  companies companies @relation(fields: [companies_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "companies_fk")
  roles     roles     @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "roles_fk")
  users     users     @relation(fields: [users_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_fk")
}
