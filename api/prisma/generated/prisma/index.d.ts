
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Renamedclass
 * 
 */
export type Renamedclass = $Result.DefaultSelection<Prisma.$RenamedclassPayload>
/**
 * Model class_days
 * 
 */
export type class_days = $Result.DefaultSelection<Prisma.$class_daysPayload>
/**
 * Model classes
 * 
 */
export type classes = $Result.DefaultSelection<Prisma.$classesPayload>
/**
 * Model classrooms
 * 
 */
export type classrooms = $Result.DefaultSelection<Prisma.$classroomsPayload>
/**
 * Model companies
 * 
 */
export type companies = $Result.DefaultSelection<Prisma.$companiesPayload>
/**
 * Model configs
 * 
 */
export type configs = $Result.DefaultSelection<Prisma.$configsPayload>
/**
 * Model courses
 * 
 */
export type courses = $Result.DefaultSelection<Prisma.$coursesPayload>
/**
 * Model discipline
 * 
 */
export type discipline = $Result.DefaultSelection<Prisma.$disciplinePayload>
/**
 * Model levels
 * 
 */
export type levels = $Result.DefaultSelection<Prisma.$levelsPayload>
/**
 * Model materials
 * 
 */
export type materials = $Result.DefaultSelection<Prisma.$materialsPayload>
/**
 * Model monthly_fee
 * 
 */
export type monthly_fee = $Result.DefaultSelection<Prisma.$monthly_feePayload>
/**
 * Model presence_list
 * 
 */
export type presence_list = $Result.DefaultSelection<Prisma.$presence_listPayload>
/**
 * Model records_of_students
 * 
 */
export type records_of_students = $Result.DefaultSelection<Prisma.$records_of_studentsPayload>
/**
 * Model registrations
 * 
 */
export type registrations = $Result.DefaultSelection<Prisma.$registrationsPayload>
/**
 * Model roles
 * 
 */
export type roles = $Result.DefaultSelection<Prisma.$rolesPayload>
/**
 * Model tasks
 * 
 */
export type tasks = $Result.DefaultSelection<Prisma.$tasksPayload>
/**
 * Model tokens
 * 
 */
export type tokens = $Result.DefaultSelection<Prisma.$tokensPayload>
/**
 * Model users
 * 
 */
export type users = $Result.DefaultSelection<Prisma.$usersPayload>
/**
 * Model users_roles
 * 
 */
export type users_roles = $Result.DefaultSelection<Prisma.$users_rolesPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Renamedclasses
 * const renamedclasses = await prisma.renamedclass.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Renamedclasses
   * const renamedclasses = await prisma.renamedclass.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.renamedclass`: Exposes CRUD operations for the **Renamedclass** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Renamedclasses
    * const renamedclasses = await prisma.renamedclass.findMany()
    * ```
    */
  get renamedclass(): Prisma.RenamedclassDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.class_days`: Exposes CRUD operations for the **class_days** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Class_days
    * const class_days = await prisma.class_days.findMany()
    * ```
    */
  get class_days(): Prisma.class_daysDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.classes`: Exposes CRUD operations for the **classes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Classes
    * const classes = await prisma.classes.findMany()
    * ```
    */
  get classes(): Prisma.classesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.classrooms`: Exposes CRUD operations for the **classrooms** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Classrooms
    * const classrooms = await prisma.classrooms.findMany()
    * ```
    */
  get classrooms(): Prisma.classroomsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.companies`: Exposes CRUD operations for the **companies** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Companies
    * const companies = await prisma.companies.findMany()
    * ```
    */
  get companies(): Prisma.companiesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.configs`: Exposes CRUD operations for the **configs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Configs
    * const configs = await prisma.configs.findMany()
    * ```
    */
  get configs(): Prisma.configsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.courses`: Exposes CRUD operations for the **courses** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Courses
    * const courses = await prisma.courses.findMany()
    * ```
    */
  get courses(): Prisma.coursesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.discipline`: Exposes CRUD operations for the **discipline** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Disciplines
    * const disciplines = await prisma.discipline.findMany()
    * ```
    */
  get discipline(): Prisma.disciplineDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.levels`: Exposes CRUD operations for the **levels** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Levels
    * const levels = await prisma.levels.findMany()
    * ```
    */
  get levels(): Prisma.levelsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.materials`: Exposes CRUD operations for the **materials** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Materials
    * const materials = await prisma.materials.findMany()
    * ```
    */
  get materials(): Prisma.materialsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.monthly_fee`: Exposes CRUD operations for the **monthly_fee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Monthly_fees
    * const monthly_fees = await prisma.monthly_fee.findMany()
    * ```
    */
  get monthly_fee(): Prisma.monthly_feeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.presence_list`: Exposes CRUD operations for the **presence_list** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Presence_lists
    * const presence_lists = await prisma.presence_list.findMany()
    * ```
    */
  get presence_list(): Prisma.presence_listDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.records_of_students`: Exposes CRUD operations for the **records_of_students** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Records_of_students
    * const records_of_students = await prisma.records_of_students.findMany()
    * ```
    */
  get records_of_students(): Prisma.records_of_studentsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.registrations`: Exposes CRUD operations for the **registrations** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Registrations
    * const registrations = await prisma.registrations.findMany()
    * ```
    */
  get registrations(): Prisma.registrationsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.roles`: Exposes CRUD operations for the **roles** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.roles.findMany()
    * ```
    */
  get roles(): Prisma.rolesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tasks`: Exposes CRUD operations for the **tasks** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tasks
    * const tasks = await prisma.tasks.findMany()
    * ```
    */
  get tasks(): Prisma.tasksDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tokens`: Exposes CRUD operations for the **tokens** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tokens
    * const tokens = await prisma.tokens.findMany()
    * ```
    */
  get tokens(): Prisma.tokensDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.users_roles`: Exposes CRUD operations for the **users_roles** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users_roles
    * const users_roles = await prisma.users_roles.findMany()
    * ```
    */
  get users_roles(): Prisma.users_rolesDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.15.0
   * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Renamedclass: 'Renamedclass',
    class_days: 'class_days',
    classes: 'classes',
    classrooms: 'classrooms',
    companies: 'companies',
    configs: 'configs',
    courses: 'courses',
    discipline: 'discipline',
    levels: 'levels',
    materials: 'materials',
    monthly_fee: 'monthly_fee',
    presence_list: 'presence_list',
    records_of_students: 'records_of_students',
    registrations: 'registrations',
    roles: 'roles',
    tasks: 'tasks',
    tokens: 'tokens',
    users: 'users',
    users_roles: 'users_roles'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "renamedclass" | "class_days" | "classes" | "classrooms" | "companies" | "configs" | "courses" | "discipline" | "levels" | "materials" | "monthly_fee" | "presence_list" | "records_of_students" | "registrations" | "roles" | "tasks" | "tokens" | "users" | "users_roles"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Renamedclass: {
        payload: Prisma.$RenamedclassPayload<ExtArgs>
        fields: Prisma.RenamedclassFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RenamedclassFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RenamedclassPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RenamedclassFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RenamedclassPayload>
          }
          findFirst: {
            args: Prisma.RenamedclassFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RenamedclassPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RenamedclassFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RenamedclassPayload>
          }
          findMany: {
            args: Prisma.RenamedclassFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RenamedclassPayload>[]
          }
          create: {
            args: Prisma.RenamedclassCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RenamedclassPayload>
          }
          createMany: {
            args: Prisma.RenamedclassCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RenamedclassCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RenamedclassPayload>[]
          }
          delete: {
            args: Prisma.RenamedclassDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RenamedclassPayload>
          }
          update: {
            args: Prisma.RenamedclassUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RenamedclassPayload>
          }
          deleteMany: {
            args: Prisma.RenamedclassDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RenamedclassUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RenamedclassUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RenamedclassPayload>[]
          }
          upsert: {
            args: Prisma.RenamedclassUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RenamedclassPayload>
          }
          aggregate: {
            args: Prisma.RenamedclassAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRenamedclass>
          }
          groupBy: {
            args: Prisma.RenamedclassGroupByArgs<ExtArgs>
            result: $Utils.Optional<RenamedclassGroupByOutputType>[]
          }
          count: {
            args: Prisma.RenamedclassCountArgs<ExtArgs>
            result: $Utils.Optional<RenamedclassCountAggregateOutputType> | number
          }
        }
      }
      class_days: {
        payload: Prisma.$class_daysPayload<ExtArgs>
        fields: Prisma.class_daysFieldRefs
        operations: {
          findUnique: {
            args: Prisma.class_daysFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$class_daysPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.class_daysFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$class_daysPayload>
          }
          findFirst: {
            args: Prisma.class_daysFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$class_daysPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.class_daysFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$class_daysPayload>
          }
          findMany: {
            args: Prisma.class_daysFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$class_daysPayload>[]
          }
          create: {
            args: Prisma.class_daysCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$class_daysPayload>
          }
          createMany: {
            args: Prisma.class_daysCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.class_daysCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$class_daysPayload>[]
          }
          delete: {
            args: Prisma.class_daysDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$class_daysPayload>
          }
          update: {
            args: Prisma.class_daysUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$class_daysPayload>
          }
          deleteMany: {
            args: Prisma.class_daysDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.class_daysUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.class_daysUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$class_daysPayload>[]
          }
          upsert: {
            args: Prisma.class_daysUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$class_daysPayload>
          }
          aggregate: {
            args: Prisma.Class_daysAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClass_days>
          }
          groupBy: {
            args: Prisma.class_daysGroupByArgs<ExtArgs>
            result: $Utils.Optional<Class_daysGroupByOutputType>[]
          }
          count: {
            args: Prisma.class_daysCountArgs<ExtArgs>
            result: $Utils.Optional<Class_daysCountAggregateOutputType> | number
          }
        }
      }
      classes: {
        payload: Prisma.$classesPayload<ExtArgs>
        fields: Prisma.classesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.classesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.classesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classesPayload>
          }
          findFirst: {
            args: Prisma.classesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.classesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classesPayload>
          }
          findMany: {
            args: Prisma.classesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classesPayload>[]
          }
          create: {
            args: Prisma.classesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classesPayload>
          }
          createMany: {
            args: Prisma.classesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.classesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classesPayload>[]
          }
          delete: {
            args: Prisma.classesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classesPayload>
          }
          update: {
            args: Prisma.classesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classesPayload>
          }
          deleteMany: {
            args: Prisma.classesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.classesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.classesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classesPayload>[]
          }
          upsert: {
            args: Prisma.classesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classesPayload>
          }
          aggregate: {
            args: Prisma.ClassesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClasses>
          }
          groupBy: {
            args: Prisma.classesGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClassesGroupByOutputType>[]
          }
          count: {
            args: Prisma.classesCountArgs<ExtArgs>
            result: $Utils.Optional<ClassesCountAggregateOutputType> | number
          }
        }
      }
      classrooms: {
        payload: Prisma.$classroomsPayload<ExtArgs>
        fields: Prisma.classroomsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.classroomsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classroomsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.classroomsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classroomsPayload>
          }
          findFirst: {
            args: Prisma.classroomsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classroomsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.classroomsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classroomsPayload>
          }
          findMany: {
            args: Prisma.classroomsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classroomsPayload>[]
          }
          create: {
            args: Prisma.classroomsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classroomsPayload>
          }
          createMany: {
            args: Prisma.classroomsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.classroomsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classroomsPayload>[]
          }
          delete: {
            args: Prisma.classroomsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classroomsPayload>
          }
          update: {
            args: Prisma.classroomsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classroomsPayload>
          }
          deleteMany: {
            args: Prisma.classroomsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.classroomsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.classroomsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classroomsPayload>[]
          }
          upsert: {
            args: Prisma.classroomsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classroomsPayload>
          }
          aggregate: {
            args: Prisma.ClassroomsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClassrooms>
          }
          groupBy: {
            args: Prisma.classroomsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClassroomsGroupByOutputType>[]
          }
          count: {
            args: Prisma.classroomsCountArgs<ExtArgs>
            result: $Utils.Optional<ClassroomsCountAggregateOutputType> | number
          }
        }
      }
      companies: {
        payload: Prisma.$companiesPayload<ExtArgs>
        fields: Prisma.companiesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.companiesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$companiesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.companiesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$companiesPayload>
          }
          findFirst: {
            args: Prisma.companiesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$companiesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.companiesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$companiesPayload>
          }
          findMany: {
            args: Prisma.companiesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$companiesPayload>[]
          }
          create: {
            args: Prisma.companiesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$companiesPayload>
          }
          createMany: {
            args: Prisma.companiesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.companiesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$companiesPayload>[]
          }
          delete: {
            args: Prisma.companiesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$companiesPayload>
          }
          update: {
            args: Prisma.companiesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$companiesPayload>
          }
          deleteMany: {
            args: Prisma.companiesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.companiesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.companiesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$companiesPayload>[]
          }
          upsert: {
            args: Prisma.companiesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$companiesPayload>
          }
          aggregate: {
            args: Prisma.CompaniesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompanies>
          }
          groupBy: {
            args: Prisma.companiesGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompaniesGroupByOutputType>[]
          }
          count: {
            args: Prisma.companiesCountArgs<ExtArgs>
            result: $Utils.Optional<CompaniesCountAggregateOutputType> | number
          }
        }
      }
      configs: {
        payload: Prisma.$configsPayload<ExtArgs>
        fields: Prisma.configsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.configsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$configsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.configsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$configsPayload>
          }
          findFirst: {
            args: Prisma.configsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$configsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.configsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$configsPayload>
          }
          findMany: {
            args: Prisma.configsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$configsPayload>[]
          }
          create: {
            args: Prisma.configsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$configsPayload>
          }
          createMany: {
            args: Prisma.configsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.configsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$configsPayload>[]
          }
          delete: {
            args: Prisma.configsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$configsPayload>
          }
          update: {
            args: Prisma.configsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$configsPayload>
          }
          deleteMany: {
            args: Prisma.configsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.configsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.configsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$configsPayload>[]
          }
          upsert: {
            args: Prisma.configsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$configsPayload>
          }
          aggregate: {
            args: Prisma.ConfigsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConfigs>
          }
          groupBy: {
            args: Prisma.configsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConfigsGroupByOutputType>[]
          }
          count: {
            args: Prisma.configsCountArgs<ExtArgs>
            result: $Utils.Optional<ConfigsCountAggregateOutputType> | number
          }
        }
      }
      courses: {
        payload: Prisma.$coursesPayload<ExtArgs>
        fields: Prisma.coursesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.coursesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.coursesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursesPayload>
          }
          findFirst: {
            args: Prisma.coursesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.coursesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursesPayload>
          }
          findMany: {
            args: Prisma.coursesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursesPayload>[]
          }
          create: {
            args: Prisma.coursesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursesPayload>
          }
          createMany: {
            args: Prisma.coursesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.coursesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursesPayload>[]
          }
          delete: {
            args: Prisma.coursesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursesPayload>
          }
          update: {
            args: Prisma.coursesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursesPayload>
          }
          deleteMany: {
            args: Prisma.coursesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.coursesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.coursesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursesPayload>[]
          }
          upsert: {
            args: Prisma.coursesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursesPayload>
          }
          aggregate: {
            args: Prisma.CoursesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCourses>
          }
          groupBy: {
            args: Prisma.coursesGroupByArgs<ExtArgs>
            result: $Utils.Optional<CoursesGroupByOutputType>[]
          }
          count: {
            args: Prisma.coursesCountArgs<ExtArgs>
            result: $Utils.Optional<CoursesCountAggregateOutputType> | number
          }
        }
      }
      discipline: {
        payload: Prisma.$disciplinePayload<ExtArgs>
        fields: Prisma.disciplineFieldRefs
        operations: {
          findUnique: {
            args: Prisma.disciplineFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$disciplinePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.disciplineFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$disciplinePayload>
          }
          findFirst: {
            args: Prisma.disciplineFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$disciplinePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.disciplineFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$disciplinePayload>
          }
          findMany: {
            args: Prisma.disciplineFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$disciplinePayload>[]
          }
          create: {
            args: Prisma.disciplineCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$disciplinePayload>
          }
          createMany: {
            args: Prisma.disciplineCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.disciplineCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$disciplinePayload>[]
          }
          delete: {
            args: Prisma.disciplineDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$disciplinePayload>
          }
          update: {
            args: Prisma.disciplineUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$disciplinePayload>
          }
          deleteMany: {
            args: Prisma.disciplineDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.disciplineUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.disciplineUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$disciplinePayload>[]
          }
          upsert: {
            args: Prisma.disciplineUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$disciplinePayload>
          }
          aggregate: {
            args: Prisma.DisciplineAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDiscipline>
          }
          groupBy: {
            args: Prisma.disciplineGroupByArgs<ExtArgs>
            result: $Utils.Optional<DisciplineGroupByOutputType>[]
          }
          count: {
            args: Prisma.disciplineCountArgs<ExtArgs>
            result: $Utils.Optional<DisciplineCountAggregateOutputType> | number
          }
        }
      }
      levels: {
        payload: Prisma.$levelsPayload<ExtArgs>
        fields: Prisma.levelsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.levelsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$levelsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.levelsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$levelsPayload>
          }
          findFirst: {
            args: Prisma.levelsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$levelsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.levelsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$levelsPayload>
          }
          findMany: {
            args: Prisma.levelsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$levelsPayload>[]
          }
          create: {
            args: Prisma.levelsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$levelsPayload>
          }
          createMany: {
            args: Prisma.levelsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.levelsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$levelsPayload>[]
          }
          delete: {
            args: Prisma.levelsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$levelsPayload>
          }
          update: {
            args: Prisma.levelsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$levelsPayload>
          }
          deleteMany: {
            args: Prisma.levelsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.levelsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.levelsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$levelsPayload>[]
          }
          upsert: {
            args: Prisma.levelsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$levelsPayload>
          }
          aggregate: {
            args: Prisma.LevelsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLevels>
          }
          groupBy: {
            args: Prisma.levelsGroupByArgs<ExtArgs>
            result: $Utils.Optional<LevelsGroupByOutputType>[]
          }
          count: {
            args: Prisma.levelsCountArgs<ExtArgs>
            result: $Utils.Optional<LevelsCountAggregateOutputType> | number
          }
        }
      }
      materials: {
        payload: Prisma.$materialsPayload<ExtArgs>
        fields: Prisma.materialsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.materialsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$materialsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.materialsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$materialsPayload>
          }
          findFirst: {
            args: Prisma.materialsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$materialsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.materialsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$materialsPayload>
          }
          findMany: {
            args: Prisma.materialsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$materialsPayload>[]
          }
          create: {
            args: Prisma.materialsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$materialsPayload>
          }
          createMany: {
            args: Prisma.materialsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.materialsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$materialsPayload>[]
          }
          delete: {
            args: Prisma.materialsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$materialsPayload>
          }
          update: {
            args: Prisma.materialsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$materialsPayload>
          }
          deleteMany: {
            args: Prisma.materialsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.materialsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.materialsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$materialsPayload>[]
          }
          upsert: {
            args: Prisma.materialsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$materialsPayload>
          }
          aggregate: {
            args: Prisma.MaterialsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMaterials>
          }
          groupBy: {
            args: Prisma.materialsGroupByArgs<ExtArgs>
            result: $Utils.Optional<MaterialsGroupByOutputType>[]
          }
          count: {
            args: Prisma.materialsCountArgs<ExtArgs>
            result: $Utils.Optional<MaterialsCountAggregateOutputType> | number
          }
        }
      }
      monthly_fee: {
        payload: Prisma.$monthly_feePayload<ExtArgs>
        fields: Prisma.monthly_feeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.monthly_feeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$monthly_feePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.monthly_feeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$monthly_feePayload>
          }
          findFirst: {
            args: Prisma.monthly_feeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$monthly_feePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.monthly_feeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$monthly_feePayload>
          }
          findMany: {
            args: Prisma.monthly_feeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$monthly_feePayload>[]
          }
          create: {
            args: Prisma.monthly_feeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$monthly_feePayload>
          }
          createMany: {
            args: Prisma.monthly_feeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.monthly_feeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$monthly_feePayload>[]
          }
          delete: {
            args: Prisma.monthly_feeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$monthly_feePayload>
          }
          update: {
            args: Prisma.monthly_feeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$monthly_feePayload>
          }
          deleteMany: {
            args: Prisma.monthly_feeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.monthly_feeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.monthly_feeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$monthly_feePayload>[]
          }
          upsert: {
            args: Prisma.monthly_feeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$monthly_feePayload>
          }
          aggregate: {
            args: Prisma.Monthly_feeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMonthly_fee>
          }
          groupBy: {
            args: Prisma.monthly_feeGroupByArgs<ExtArgs>
            result: $Utils.Optional<Monthly_feeGroupByOutputType>[]
          }
          count: {
            args: Prisma.monthly_feeCountArgs<ExtArgs>
            result: $Utils.Optional<Monthly_feeCountAggregateOutputType> | number
          }
        }
      }
      presence_list: {
        payload: Prisma.$presence_listPayload<ExtArgs>
        fields: Prisma.presence_listFieldRefs
        operations: {
          findUnique: {
            args: Prisma.presence_listFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$presence_listPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.presence_listFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$presence_listPayload>
          }
          findFirst: {
            args: Prisma.presence_listFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$presence_listPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.presence_listFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$presence_listPayload>
          }
          findMany: {
            args: Prisma.presence_listFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$presence_listPayload>[]
          }
          create: {
            args: Prisma.presence_listCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$presence_listPayload>
          }
          createMany: {
            args: Prisma.presence_listCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.presence_listCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$presence_listPayload>[]
          }
          delete: {
            args: Prisma.presence_listDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$presence_listPayload>
          }
          update: {
            args: Prisma.presence_listUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$presence_listPayload>
          }
          deleteMany: {
            args: Prisma.presence_listDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.presence_listUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.presence_listUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$presence_listPayload>[]
          }
          upsert: {
            args: Prisma.presence_listUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$presence_listPayload>
          }
          aggregate: {
            args: Prisma.Presence_listAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePresence_list>
          }
          groupBy: {
            args: Prisma.presence_listGroupByArgs<ExtArgs>
            result: $Utils.Optional<Presence_listGroupByOutputType>[]
          }
          count: {
            args: Prisma.presence_listCountArgs<ExtArgs>
            result: $Utils.Optional<Presence_listCountAggregateOutputType> | number
          }
        }
      }
      records_of_students: {
        payload: Prisma.$records_of_studentsPayload<ExtArgs>
        fields: Prisma.records_of_studentsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.records_of_studentsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$records_of_studentsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.records_of_studentsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$records_of_studentsPayload>
          }
          findFirst: {
            args: Prisma.records_of_studentsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$records_of_studentsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.records_of_studentsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$records_of_studentsPayload>
          }
          findMany: {
            args: Prisma.records_of_studentsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$records_of_studentsPayload>[]
          }
          create: {
            args: Prisma.records_of_studentsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$records_of_studentsPayload>
          }
          createMany: {
            args: Prisma.records_of_studentsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.records_of_studentsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$records_of_studentsPayload>[]
          }
          delete: {
            args: Prisma.records_of_studentsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$records_of_studentsPayload>
          }
          update: {
            args: Prisma.records_of_studentsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$records_of_studentsPayload>
          }
          deleteMany: {
            args: Prisma.records_of_studentsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.records_of_studentsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.records_of_studentsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$records_of_studentsPayload>[]
          }
          upsert: {
            args: Prisma.records_of_studentsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$records_of_studentsPayload>
          }
          aggregate: {
            args: Prisma.Records_of_studentsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRecords_of_students>
          }
          groupBy: {
            args: Prisma.records_of_studentsGroupByArgs<ExtArgs>
            result: $Utils.Optional<Records_of_studentsGroupByOutputType>[]
          }
          count: {
            args: Prisma.records_of_studentsCountArgs<ExtArgs>
            result: $Utils.Optional<Records_of_studentsCountAggregateOutputType> | number
          }
        }
      }
      registrations: {
        payload: Prisma.$registrationsPayload<ExtArgs>
        fields: Prisma.registrationsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.registrationsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$registrationsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.registrationsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$registrationsPayload>
          }
          findFirst: {
            args: Prisma.registrationsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$registrationsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.registrationsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$registrationsPayload>
          }
          findMany: {
            args: Prisma.registrationsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$registrationsPayload>[]
          }
          create: {
            args: Prisma.registrationsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$registrationsPayload>
          }
          createMany: {
            args: Prisma.registrationsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.registrationsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$registrationsPayload>[]
          }
          delete: {
            args: Prisma.registrationsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$registrationsPayload>
          }
          update: {
            args: Prisma.registrationsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$registrationsPayload>
          }
          deleteMany: {
            args: Prisma.registrationsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.registrationsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.registrationsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$registrationsPayload>[]
          }
          upsert: {
            args: Prisma.registrationsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$registrationsPayload>
          }
          aggregate: {
            args: Prisma.RegistrationsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRegistrations>
          }
          groupBy: {
            args: Prisma.registrationsGroupByArgs<ExtArgs>
            result: $Utils.Optional<RegistrationsGroupByOutputType>[]
          }
          count: {
            args: Prisma.registrationsCountArgs<ExtArgs>
            result: $Utils.Optional<RegistrationsCountAggregateOutputType> | number
          }
        }
      }
      roles: {
        payload: Prisma.$rolesPayload<ExtArgs>
        fields: Prisma.rolesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.rolesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.rolesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolesPayload>
          }
          findFirst: {
            args: Prisma.rolesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.rolesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolesPayload>
          }
          findMany: {
            args: Prisma.rolesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolesPayload>[]
          }
          create: {
            args: Prisma.rolesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolesPayload>
          }
          createMany: {
            args: Prisma.rolesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.rolesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolesPayload>[]
          }
          delete: {
            args: Prisma.rolesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolesPayload>
          }
          update: {
            args: Prisma.rolesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolesPayload>
          }
          deleteMany: {
            args: Prisma.rolesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.rolesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.rolesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolesPayload>[]
          }
          upsert: {
            args: Prisma.rolesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolesPayload>
          }
          aggregate: {
            args: Prisma.RolesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoles>
          }
          groupBy: {
            args: Prisma.rolesGroupByArgs<ExtArgs>
            result: $Utils.Optional<RolesGroupByOutputType>[]
          }
          count: {
            args: Prisma.rolesCountArgs<ExtArgs>
            result: $Utils.Optional<RolesCountAggregateOutputType> | number
          }
        }
      }
      tasks: {
        payload: Prisma.$tasksPayload<ExtArgs>
        fields: Prisma.tasksFieldRefs
        operations: {
          findUnique: {
            args: Prisma.tasksFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tasksPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.tasksFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tasksPayload>
          }
          findFirst: {
            args: Prisma.tasksFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tasksPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.tasksFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tasksPayload>
          }
          findMany: {
            args: Prisma.tasksFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tasksPayload>[]
          }
          create: {
            args: Prisma.tasksCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tasksPayload>
          }
          createMany: {
            args: Prisma.tasksCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.tasksCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tasksPayload>[]
          }
          delete: {
            args: Prisma.tasksDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tasksPayload>
          }
          update: {
            args: Prisma.tasksUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tasksPayload>
          }
          deleteMany: {
            args: Prisma.tasksDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.tasksUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.tasksUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tasksPayload>[]
          }
          upsert: {
            args: Prisma.tasksUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tasksPayload>
          }
          aggregate: {
            args: Prisma.TasksAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTasks>
          }
          groupBy: {
            args: Prisma.tasksGroupByArgs<ExtArgs>
            result: $Utils.Optional<TasksGroupByOutputType>[]
          }
          count: {
            args: Prisma.tasksCountArgs<ExtArgs>
            result: $Utils.Optional<TasksCountAggregateOutputType> | number
          }
        }
      }
      tokens: {
        payload: Prisma.$tokensPayload<ExtArgs>
        fields: Prisma.tokensFieldRefs
        operations: {
          findUnique: {
            args: Prisma.tokensFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tokensPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.tokensFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tokensPayload>
          }
          findFirst: {
            args: Prisma.tokensFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tokensPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.tokensFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tokensPayload>
          }
          findMany: {
            args: Prisma.tokensFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tokensPayload>[]
          }
          create: {
            args: Prisma.tokensCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tokensPayload>
          }
          createMany: {
            args: Prisma.tokensCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.tokensCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tokensPayload>[]
          }
          delete: {
            args: Prisma.tokensDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tokensPayload>
          }
          update: {
            args: Prisma.tokensUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tokensPayload>
          }
          deleteMany: {
            args: Prisma.tokensDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.tokensUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.tokensUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tokensPayload>[]
          }
          upsert: {
            args: Prisma.tokensUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tokensPayload>
          }
          aggregate: {
            args: Prisma.TokensAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTokens>
          }
          groupBy: {
            args: Prisma.tokensGroupByArgs<ExtArgs>
            result: $Utils.Optional<TokensGroupByOutputType>[]
          }
          count: {
            args: Prisma.tokensCountArgs<ExtArgs>
            result: $Utils.Optional<TokensCountAggregateOutputType> | number
          }
        }
      }
      users: {
        payload: Prisma.$usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.usersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.usersUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      users_roles: {
        payload: Prisma.$users_rolesPayload<ExtArgs>
        fields: Prisma.users_rolesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.users_rolesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$users_rolesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.users_rolesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$users_rolesPayload>
          }
          findFirst: {
            args: Prisma.users_rolesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$users_rolesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.users_rolesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$users_rolesPayload>
          }
          findMany: {
            args: Prisma.users_rolesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$users_rolesPayload>[]
          }
          create: {
            args: Prisma.users_rolesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$users_rolesPayload>
          }
          createMany: {
            args: Prisma.users_rolesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.users_rolesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$users_rolesPayload>[]
          }
          delete: {
            args: Prisma.users_rolesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$users_rolesPayload>
          }
          update: {
            args: Prisma.users_rolesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$users_rolesPayload>
          }
          deleteMany: {
            args: Prisma.users_rolesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.users_rolesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.users_rolesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$users_rolesPayload>[]
          }
          upsert: {
            args: Prisma.users_rolesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$users_rolesPayload>
          }
          aggregate: {
            args: Prisma.Users_rolesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers_roles>
          }
          groupBy: {
            args: Prisma.users_rolesGroupByArgs<ExtArgs>
            result: $Utils.Optional<Users_rolesGroupByOutputType>[]
          }
          count: {
            args: Prisma.users_rolesCountArgs<ExtArgs>
            result: $Utils.Optional<Users_rolesCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    renamedclass?: RenamedclassOmit
    class_days?: class_daysOmit
    classes?: classesOmit
    classrooms?: classroomsOmit
    companies?: companiesOmit
    configs?: configsOmit
    courses?: coursesOmit
    discipline?: disciplineOmit
    levels?: levelsOmit
    materials?: materialsOmit
    monthly_fee?: monthly_feeOmit
    presence_list?: presence_listOmit
    records_of_students?: records_of_studentsOmit
    registrations?: registrationsOmit
    roles?: rolesOmit
    tasks?: tasksOmit
    tokens?: tokensOmit
    users?: usersOmit
    users_roles?: users_rolesOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type RenamedclassCountOutputType
   */

  export type RenamedclassCountOutputType = {
    class_days: number
    classes: number
  }

  export type RenamedclassCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class_days?: boolean | RenamedclassCountOutputTypeCountClass_daysArgs
    classes?: boolean | RenamedclassCountOutputTypeCountClassesArgs
  }

  // Custom InputTypes
  /**
   * RenamedclassCountOutputType without action
   */
  export type RenamedclassCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RenamedclassCountOutputType
     */
    select?: RenamedclassCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RenamedclassCountOutputType without action
   */
  export type RenamedclassCountOutputTypeCountClass_daysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: class_daysWhereInput
  }

  /**
   * RenamedclassCountOutputType without action
   */
  export type RenamedclassCountOutputTypeCountClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: classesWhereInput
  }


  /**
   * Count Type ClassesCountOutputType
   */

  export type ClassesCountOutputType = {
    presence_list_presence_list_classesToclasses: number
  }

  export type ClassesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    presence_list_presence_list_classesToclasses?: boolean | ClassesCountOutputTypeCountPresence_list_presence_list_classesToclassesArgs
  }

  // Custom InputTypes
  /**
   * ClassesCountOutputType without action
   */
  export type ClassesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassesCountOutputType
     */
    select?: ClassesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClassesCountOutputType without action
   */
  export type ClassesCountOutputTypeCountPresence_list_presence_list_classesToclassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: presence_listWhereInput
  }


  /**
   * Count Type CompaniesCountOutputType
   */

  export type CompaniesCountOutputType = {
    classrooms_classrooms_companiesTocompanies: number
    configs_configs_companiesTocompanies: number
    courses_courses_companiesTocompanies: number
    registrations_registrations_companiesTocompanies: number
    users_users_companiesTocompanies: number
  }

  export type CompaniesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    classrooms_classrooms_companiesTocompanies?: boolean | CompaniesCountOutputTypeCountClassrooms_classrooms_companiesTocompaniesArgs
    configs_configs_companiesTocompanies?: boolean | CompaniesCountOutputTypeCountConfigs_configs_companiesTocompaniesArgs
    courses_courses_companiesTocompanies?: boolean | CompaniesCountOutputTypeCountCourses_courses_companiesTocompaniesArgs
    registrations_registrations_companiesTocompanies?: boolean | CompaniesCountOutputTypeCountRegistrations_registrations_companiesTocompaniesArgs
    users_users_companiesTocompanies?: boolean | CompaniesCountOutputTypeCountUsers_users_companiesTocompaniesArgs
  }

  // Custom InputTypes
  /**
   * CompaniesCountOutputType without action
   */
  export type CompaniesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompaniesCountOutputType
     */
    select?: CompaniesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CompaniesCountOutputType without action
   */
  export type CompaniesCountOutputTypeCountClassrooms_classrooms_companiesTocompaniesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: classroomsWhereInput
  }

  /**
   * CompaniesCountOutputType without action
   */
  export type CompaniesCountOutputTypeCountConfigs_configs_companiesTocompaniesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: configsWhereInput
  }

  /**
   * CompaniesCountOutputType without action
   */
  export type CompaniesCountOutputTypeCountCourses_courses_companiesTocompaniesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: coursesWhereInput
  }

  /**
   * CompaniesCountOutputType without action
   */
  export type CompaniesCountOutputTypeCountRegistrations_registrations_companiesTocompaniesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: registrationsWhereInput
  }

  /**
   * CompaniesCountOutputType without action
   */
  export type CompaniesCountOutputTypeCountUsers_users_companiesTocompaniesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
  }


  /**
   * Count Type CoursesCountOutputType
   */

  export type CoursesCountOutputType = {
    Renamedclass_Renamedclass_coursesTocourses: number
    levels_levels_coursesTocourses: number
  }

  export type CoursesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Renamedclass_Renamedclass_coursesTocourses?: boolean | CoursesCountOutputTypeCountRenamedclass_Renamedclass_coursesTocoursesArgs
    levels_levels_coursesTocourses?: boolean | CoursesCountOutputTypeCountLevels_levels_coursesTocoursesArgs
  }

  // Custom InputTypes
  /**
   * CoursesCountOutputType without action
   */
  export type CoursesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursesCountOutputType
     */
    select?: CoursesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CoursesCountOutputType without action
   */
  export type CoursesCountOutputTypeCountRenamedclass_Renamedclass_coursesTocoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RenamedclassWhereInput
  }

  /**
   * CoursesCountOutputType without action
   */
  export type CoursesCountOutputTypeCountLevels_levels_coursesTocoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: levelsWhereInput
  }


  /**
   * Count Type DisciplineCountOutputType
   */

  export type DisciplineCountOutputType = {
    tasks: number
  }

  export type DisciplineCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tasks?: boolean | DisciplineCountOutputTypeCountTasksArgs
  }

  // Custom InputTypes
  /**
   * DisciplineCountOutputType without action
   */
  export type DisciplineCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisciplineCountOutputType
     */
    select?: DisciplineCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DisciplineCountOutputType without action
   */
  export type DisciplineCountOutputTypeCountTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tasksWhereInput
  }


  /**
   * Count Type LevelsCountOutputType
   */

  export type LevelsCountOutputType = {
    discipline_discipline_levelsTolevels: number
    materials_materials_levelsTolevels: number
  }

  export type LevelsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    discipline_discipline_levelsTolevels?: boolean | LevelsCountOutputTypeCountDiscipline_discipline_levelsTolevelsArgs
    materials_materials_levelsTolevels?: boolean | LevelsCountOutputTypeCountMaterials_materials_levelsTolevelsArgs
  }

  // Custom InputTypes
  /**
   * LevelsCountOutputType without action
   */
  export type LevelsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LevelsCountOutputType
     */
    select?: LevelsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LevelsCountOutputType without action
   */
  export type LevelsCountOutputTypeCountDiscipline_discipline_levelsTolevelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: disciplineWhereInput
  }

  /**
   * LevelsCountOutputType without action
   */
  export type LevelsCountOutputTypeCountMaterials_materials_levelsTolevelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: materialsWhereInput
  }


  /**
   * Count Type RegistrationsCountOutputType
   */

  export type RegistrationsCountOutputType = {
    monthly_fee_monthly_fee_registrationsToregistrations: number
    records_of_students_records_of_students_registrationsToregistrations: number
  }

  export type RegistrationsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    monthly_fee_monthly_fee_registrationsToregistrations?: boolean | RegistrationsCountOutputTypeCountMonthly_fee_monthly_fee_registrationsToregistrationsArgs
    records_of_students_records_of_students_registrationsToregistrations?: boolean | RegistrationsCountOutputTypeCountRecords_of_students_records_of_students_registrationsToregistrationsArgs
  }

  // Custom InputTypes
  /**
   * RegistrationsCountOutputType without action
   */
  export type RegistrationsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegistrationsCountOutputType
     */
    select?: RegistrationsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RegistrationsCountOutputType without action
   */
  export type RegistrationsCountOutputTypeCountMonthly_fee_monthly_fee_registrationsToregistrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: monthly_feeWhereInput
  }

  /**
   * RegistrationsCountOutputType without action
   */
  export type RegistrationsCountOutputTypeCountRecords_of_students_records_of_students_registrationsToregistrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: records_of_studentsWhereInput
  }


  /**
   * Count Type RolesCountOutputType
   */

  export type RolesCountOutputType = {
    users_roles: number
  }

  export type RolesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users_roles?: boolean | RolesCountOutputTypeCountUsers_rolesArgs
  }

  // Custom InputTypes
  /**
   * RolesCountOutputType without action
   */
  export type RolesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolesCountOutputType
     */
    select?: RolesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RolesCountOutputType without action
   */
  export type RolesCountOutputTypeCountUsers_rolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: users_rolesWhereInput
  }


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    companies_companies_usersTousers: number
    presence_list_presence_list_usersTousers: number
    registrations_registrations_usersTousers: number
    tokens_tokens_usersTousers: number
    users_roles: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    companies_companies_usersTousers?: boolean | UsersCountOutputTypeCountCompanies_companies_usersTousersArgs
    presence_list_presence_list_usersTousers?: boolean | UsersCountOutputTypeCountPresence_list_presence_list_usersTousersArgs
    registrations_registrations_usersTousers?: boolean | UsersCountOutputTypeCountRegistrations_registrations_usersTousersArgs
    tokens_tokens_usersTousers?: boolean | UsersCountOutputTypeCountTokens_tokens_usersTousersArgs
    users_roles?: boolean | UsersCountOutputTypeCountUsers_rolesArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountCompanies_companies_usersTousersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: companiesWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountPresence_list_presence_list_usersTousersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: presence_listWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountRegistrations_registrations_usersTousersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: registrationsWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountTokens_tokens_usersTousersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tokensWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountUsers_rolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: users_rolesWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Renamedclass
   */

  export type AggregateRenamedclass = {
    _count: RenamedclassCountAggregateOutputType | null
    _avg: RenamedclassAvgAggregateOutputType | null
    _sum: RenamedclassSumAggregateOutputType | null
    _min: RenamedclassMinAggregateOutputType | null
    _max: RenamedclassMaxAggregateOutputType | null
  }

  export type RenamedclassAvgAggregateOutputType = {
    vacancies: Decimal | null
  }

  export type RenamedclassSumAggregateOutputType = {
    vacancies: Decimal | null
  }

  export type RenamedclassMinAggregateOutputType = {
    id: string | null
    nome: string | null
    courses: string | null
    vacancies: Decimal | null
  }

  export type RenamedclassMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    courses: string | null
    vacancies: Decimal | null
  }

  export type RenamedclassCountAggregateOutputType = {
    id: number
    nome: number
    courses: number
    vacancies: number
    _all: number
  }


  export type RenamedclassAvgAggregateInputType = {
    vacancies?: true
  }

  export type RenamedclassSumAggregateInputType = {
    vacancies?: true
  }

  export type RenamedclassMinAggregateInputType = {
    id?: true
    nome?: true
    courses?: true
    vacancies?: true
  }

  export type RenamedclassMaxAggregateInputType = {
    id?: true
    nome?: true
    courses?: true
    vacancies?: true
  }

  export type RenamedclassCountAggregateInputType = {
    id?: true
    nome?: true
    courses?: true
    vacancies?: true
    _all?: true
  }

  export type RenamedclassAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Renamedclass to aggregate.
     */
    where?: RenamedclassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Renamedclasses to fetch.
     */
    orderBy?: RenamedclassOrderByWithRelationInput | RenamedclassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RenamedclassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Renamedclasses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Renamedclasses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Renamedclasses
    **/
    _count?: true | RenamedclassCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RenamedclassAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RenamedclassSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RenamedclassMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RenamedclassMaxAggregateInputType
  }

  export type GetRenamedclassAggregateType<T extends RenamedclassAggregateArgs> = {
        [P in keyof T & keyof AggregateRenamedclass]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRenamedclass[P]>
      : GetScalarType<T[P], AggregateRenamedclass[P]>
  }




  export type RenamedclassGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RenamedclassWhereInput
    orderBy?: RenamedclassOrderByWithAggregationInput | RenamedclassOrderByWithAggregationInput[]
    by: RenamedclassScalarFieldEnum[] | RenamedclassScalarFieldEnum
    having?: RenamedclassScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RenamedclassCountAggregateInputType | true
    _avg?: RenamedclassAvgAggregateInputType
    _sum?: RenamedclassSumAggregateInputType
    _min?: RenamedclassMinAggregateInputType
    _max?: RenamedclassMaxAggregateInputType
  }

  export type RenamedclassGroupByOutputType = {
    id: string
    nome: string
    courses: string
    vacancies: Decimal
    _count: RenamedclassCountAggregateOutputType | null
    _avg: RenamedclassAvgAggregateOutputType | null
    _sum: RenamedclassSumAggregateOutputType | null
    _min: RenamedclassMinAggregateOutputType | null
    _max: RenamedclassMaxAggregateOutputType | null
  }

  type GetRenamedclassGroupByPayload<T extends RenamedclassGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RenamedclassGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RenamedclassGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RenamedclassGroupByOutputType[P]>
            : GetScalarType<T[P], RenamedclassGroupByOutputType[P]>
        }
      >
    >


  export type RenamedclassSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    courses?: boolean
    vacancies?: boolean
    courses_Renamedclass_coursesTocourses?: boolean | coursesDefaultArgs<ExtArgs>
    class_days?: boolean | Renamedclass$class_daysArgs<ExtArgs>
    classes?: boolean | Renamedclass$classesArgs<ExtArgs>
    _count?: boolean | RenamedclassCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["renamedclass"]>

  export type RenamedclassSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    courses?: boolean
    vacancies?: boolean
    courses_Renamedclass_coursesTocourses?: boolean | coursesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["renamedclass"]>

  export type RenamedclassSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    courses?: boolean
    vacancies?: boolean
    courses_Renamedclass_coursesTocourses?: boolean | coursesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["renamedclass"]>

  export type RenamedclassSelectScalar = {
    id?: boolean
    nome?: boolean
    courses?: boolean
    vacancies?: boolean
  }

  export type RenamedclassOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nome" | "courses" | "vacancies", ExtArgs["result"]["renamedclass"]>
  export type RenamedclassInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    courses_Renamedclass_coursesTocourses?: boolean | coursesDefaultArgs<ExtArgs>
    class_days?: boolean | Renamedclass$class_daysArgs<ExtArgs>
    classes?: boolean | Renamedclass$classesArgs<ExtArgs>
    _count?: boolean | RenamedclassCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RenamedclassIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    courses_Renamedclass_coursesTocourses?: boolean | coursesDefaultArgs<ExtArgs>
  }
  export type RenamedclassIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    courses_Renamedclass_coursesTocourses?: boolean | coursesDefaultArgs<ExtArgs>
  }

  export type $RenamedclassPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Renamedclass"
    objects: {
      courses_Renamedclass_coursesTocourses: Prisma.$coursesPayload<ExtArgs>
      class_days: Prisma.$class_daysPayload<ExtArgs>[]
      classes: Prisma.$classesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nome: string
      courses: string
      vacancies: Prisma.Decimal
    }, ExtArgs["result"]["renamedclass"]>
    composites: {}
  }

  type RenamedclassGetPayload<S extends boolean | null | undefined | RenamedclassDefaultArgs> = $Result.GetResult<Prisma.$RenamedclassPayload, S>

  type RenamedclassCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RenamedclassFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RenamedclassCountAggregateInputType | true
    }

  export interface RenamedclassDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Renamedclass'], meta: { name: 'Renamedclass' } }
    /**
     * Find zero or one Renamedclass that matches the filter.
     * @param {RenamedclassFindUniqueArgs} args - Arguments to find a Renamedclass
     * @example
     * // Get one Renamedclass
     * const renamedclass = await prisma.renamedclass.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RenamedclassFindUniqueArgs>(args: SelectSubset<T, RenamedclassFindUniqueArgs<ExtArgs>>): Prisma__RenamedclassClient<$Result.GetResult<Prisma.$RenamedclassPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Renamedclass that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RenamedclassFindUniqueOrThrowArgs} args - Arguments to find a Renamedclass
     * @example
     * // Get one Renamedclass
     * const renamedclass = await prisma.renamedclass.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RenamedclassFindUniqueOrThrowArgs>(args: SelectSubset<T, RenamedclassFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RenamedclassClient<$Result.GetResult<Prisma.$RenamedclassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Renamedclass that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RenamedclassFindFirstArgs} args - Arguments to find a Renamedclass
     * @example
     * // Get one Renamedclass
     * const renamedclass = await prisma.renamedclass.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RenamedclassFindFirstArgs>(args?: SelectSubset<T, RenamedclassFindFirstArgs<ExtArgs>>): Prisma__RenamedclassClient<$Result.GetResult<Prisma.$RenamedclassPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Renamedclass that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RenamedclassFindFirstOrThrowArgs} args - Arguments to find a Renamedclass
     * @example
     * // Get one Renamedclass
     * const renamedclass = await prisma.renamedclass.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RenamedclassFindFirstOrThrowArgs>(args?: SelectSubset<T, RenamedclassFindFirstOrThrowArgs<ExtArgs>>): Prisma__RenamedclassClient<$Result.GetResult<Prisma.$RenamedclassPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Renamedclasses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RenamedclassFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Renamedclasses
     * const renamedclasses = await prisma.renamedclass.findMany()
     * 
     * // Get first 10 Renamedclasses
     * const renamedclasses = await prisma.renamedclass.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const renamedclassWithIdOnly = await prisma.renamedclass.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RenamedclassFindManyArgs>(args?: SelectSubset<T, RenamedclassFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RenamedclassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Renamedclass.
     * @param {RenamedclassCreateArgs} args - Arguments to create a Renamedclass.
     * @example
     * // Create one Renamedclass
     * const Renamedclass = await prisma.renamedclass.create({
     *   data: {
     *     // ... data to create a Renamedclass
     *   }
     * })
     * 
     */
    create<T extends RenamedclassCreateArgs>(args: SelectSubset<T, RenamedclassCreateArgs<ExtArgs>>): Prisma__RenamedclassClient<$Result.GetResult<Prisma.$RenamedclassPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Renamedclasses.
     * @param {RenamedclassCreateManyArgs} args - Arguments to create many Renamedclasses.
     * @example
     * // Create many Renamedclasses
     * const renamedclass = await prisma.renamedclass.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RenamedclassCreateManyArgs>(args?: SelectSubset<T, RenamedclassCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Renamedclasses and returns the data saved in the database.
     * @param {RenamedclassCreateManyAndReturnArgs} args - Arguments to create many Renamedclasses.
     * @example
     * // Create many Renamedclasses
     * const renamedclass = await prisma.renamedclass.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Renamedclasses and only return the `id`
     * const renamedclassWithIdOnly = await prisma.renamedclass.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RenamedclassCreateManyAndReturnArgs>(args?: SelectSubset<T, RenamedclassCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RenamedclassPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Renamedclass.
     * @param {RenamedclassDeleteArgs} args - Arguments to delete one Renamedclass.
     * @example
     * // Delete one Renamedclass
     * const Renamedclass = await prisma.renamedclass.delete({
     *   where: {
     *     // ... filter to delete one Renamedclass
     *   }
     * })
     * 
     */
    delete<T extends RenamedclassDeleteArgs>(args: SelectSubset<T, RenamedclassDeleteArgs<ExtArgs>>): Prisma__RenamedclassClient<$Result.GetResult<Prisma.$RenamedclassPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Renamedclass.
     * @param {RenamedclassUpdateArgs} args - Arguments to update one Renamedclass.
     * @example
     * // Update one Renamedclass
     * const renamedclass = await prisma.renamedclass.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RenamedclassUpdateArgs>(args: SelectSubset<T, RenamedclassUpdateArgs<ExtArgs>>): Prisma__RenamedclassClient<$Result.GetResult<Prisma.$RenamedclassPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Renamedclasses.
     * @param {RenamedclassDeleteManyArgs} args - Arguments to filter Renamedclasses to delete.
     * @example
     * // Delete a few Renamedclasses
     * const { count } = await prisma.renamedclass.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RenamedclassDeleteManyArgs>(args?: SelectSubset<T, RenamedclassDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Renamedclasses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RenamedclassUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Renamedclasses
     * const renamedclass = await prisma.renamedclass.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RenamedclassUpdateManyArgs>(args: SelectSubset<T, RenamedclassUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Renamedclasses and returns the data updated in the database.
     * @param {RenamedclassUpdateManyAndReturnArgs} args - Arguments to update many Renamedclasses.
     * @example
     * // Update many Renamedclasses
     * const renamedclass = await prisma.renamedclass.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Renamedclasses and only return the `id`
     * const renamedclassWithIdOnly = await prisma.renamedclass.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RenamedclassUpdateManyAndReturnArgs>(args: SelectSubset<T, RenamedclassUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RenamedclassPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Renamedclass.
     * @param {RenamedclassUpsertArgs} args - Arguments to update or create a Renamedclass.
     * @example
     * // Update or create a Renamedclass
     * const renamedclass = await prisma.renamedclass.upsert({
     *   create: {
     *     // ... data to create a Renamedclass
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Renamedclass we want to update
     *   }
     * })
     */
    upsert<T extends RenamedclassUpsertArgs>(args: SelectSubset<T, RenamedclassUpsertArgs<ExtArgs>>): Prisma__RenamedclassClient<$Result.GetResult<Prisma.$RenamedclassPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Renamedclasses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RenamedclassCountArgs} args - Arguments to filter Renamedclasses to count.
     * @example
     * // Count the number of Renamedclasses
     * const count = await prisma.renamedclass.count({
     *   where: {
     *     // ... the filter for the Renamedclasses we want to count
     *   }
     * })
    **/
    count<T extends RenamedclassCountArgs>(
      args?: Subset<T, RenamedclassCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RenamedclassCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Renamedclass.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RenamedclassAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RenamedclassAggregateArgs>(args: Subset<T, RenamedclassAggregateArgs>): Prisma.PrismaPromise<GetRenamedclassAggregateType<T>>

    /**
     * Group by Renamedclass.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RenamedclassGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RenamedclassGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RenamedclassGroupByArgs['orderBy'] }
        : { orderBy?: RenamedclassGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RenamedclassGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRenamedclassGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Renamedclass model
   */
  readonly fields: RenamedclassFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Renamedclass.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RenamedclassClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    courses_Renamedclass_coursesTocourses<T extends coursesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, coursesDefaultArgs<ExtArgs>>): Prisma__coursesClient<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    class_days<T extends Renamedclass$class_daysArgs<ExtArgs> = {}>(args?: Subset<T, Renamedclass$class_daysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$class_daysPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    classes<T extends Renamedclass$classesArgs<ExtArgs> = {}>(args?: Subset<T, Renamedclass$classesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Renamedclass model
   */
  interface RenamedclassFieldRefs {
    readonly id: FieldRef<"Renamedclass", 'String'>
    readonly nome: FieldRef<"Renamedclass", 'String'>
    readonly courses: FieldRef<"Renamedclass", 'String'>
    readonly vacancies: FieldRef<"Renamedclass", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * Renamedclass findUnique
   */
  export type RenamedclassFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Renamedclass
     */
    select?: RenamedclassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Renamedclass
     */
    omit?: RenamedclassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenamedclassInclude<ExtArgs> | null
    /**
     * Filter, which Renamedclass to fetch.
     */
    where: RenamedclassWhereUniqueInput
  }

  /**
   * Renamedclass findUniqueOrThrow
   */
  export type RenamedclassFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Renamedclass
     */
    select?: RenamedclassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Renamedclass
     */
    omit?: RenamedclassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenamedclassInclude<ExtArgs> | null
    /**
     * Filter, which Renamedclass to fetch.
     */
    where: RenamedclassWhereUniqueInput
  }

  /**
   * Renamedclass findFirst
   */
  export type RenamedclassFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Renamedclass
     */
    select?: RenamedclassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Renamedclass
     */
    omit?: RenamedclassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenamedclassInclude<ExtArgs> | null
    /**
     * Filter, which Renamedclass to fetch.
     */
    where?: RenamedclassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Renamedclasses to fetch.
     */
    orderBy?: RenamedclassOrderByWithRelationInput | RenamedclassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Renamedclasses.
     */
    cursor?: RenamedclassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Renamedclasses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Renamedclasses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Renamedclasses.
     */
    distinct?: RenamedclassScalarFieldEnum | RenamedclassScalarFieldEnum[]
  }

  /**
   * Renamedclass findFirstOrThrow
   */
  export type RenamedclassFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Renamedclass
     */
    select?: RenamedclassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Renamedclass
     */
    omit?: RenamedclassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenamedclassInclude<ExtArgs> | null
    /**
     * Filter, which Renamedclass to fetch.
     */
    where?: RenamedclassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Renamedclasses to fetch.
     */
    orderBy?: RenamedclassOrderByWithRelationInput | RenamedclassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Renamedclasses.
     */
    cursor?: RenamedclassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Renamedclasses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Renamedclasses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Renamedclasses.
     */
    distinct?: RenamedclassScalarFieldEnum | RenamedclassScalarFieldEnum[]
  }

  /**
   * Renamedclass findMany
   */
  export type RenamedclassFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Renamedclass
     */
    select?: RenamedclassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Renamedclass
     */
    omit?: RenamedclassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenamedclassInclude<ExtArgs> | null
    /**
     * Filter, which Renamedclasses to fetch.
     */
    where?: RenamedclassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Renamedclasses to fetch.
     */
    orderBy?: RenamedclassOrderByWithRelationInput | RenamedclassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Renamedclasses.
     */
    cursor?: RenamedclassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Renamedclasses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Renamedclasses.
     */
    skip?: number
    distinct?: RenamedclassScalarFieldEnum | RenamedclassScalarFieldEnum[]
  }

  /**
   * Renamedclass create
   */
  export type RenamedclassCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Renamedclass
     */
    select?: RenamedclassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Renamedclass
     */
    omit?: RenamedclassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenamedclassInclude<ExtArgs> | null
    /**
     * The data needed to create a Renamedclass.
     */
    data: XOR<RenamedclassCreateInput, RenamedclassUncheckedCreateInput>
  }

  /**
   * Renamedclass createMany
   */
  export type RenamedclassCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Renamedclasses.
     */
    data: RenamedclassCreateManyInput | RenamedclassCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Renamedclass createManyAndReturn
   */
  export type RenamedclassCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Renamedclass
     */
    select?: RenamedclassSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Renamedclass
     */
    omit?: RenamedclassOmit<ExtArgs> | null
    /**
     * The data used to create many Renamedclasses.
     */
    data: RenamedclassCreateManyInput | RenamedclassCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenamedclassIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Renamedclass update
   */
  export type RenamedclassUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Renamedclass
     */
    select?: RenamedclassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Renamedclass
     */
    omit?: RenamedclassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenamedclassInclude<ExtArgs> | null
    /**
     * The data needed to update a Renamedclass.
     */
    data: XOR<RenamedclassUpdateInput, RenamedclassUncheckedUpdateInput>
    /**
     * Choose, which Renamedclass to update.
     */
    where: RenamedclassWhereUniqueInput
  }

  /**
   * Renamedclass updateMany
   */
  export type RenamedclassUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Renamedclasses.
     */
    data: XOR<RenamedclassUpdateManyMutationInput, RenamedclassUncheckedUpdateManyInput>
    /**
     * Filter which Renamedclasses to update
     */
    where?: RenamedclassWhereInput
    /**
     * Limit how many Renamedclasses to update.
     */
    limit?: number
  }

  /**
   * Renamedclass updateManyAndReturn
   */
  export type RenamedclassUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Renamedclass
     */
    select?: RenamedclassSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Renamedclass
     */
    omit?: RenamedclassOmit<ExtArgs> | null
    /**
     * The data used to update Renamedclasses.
     */
    data: XOR<RenamedclassUpdateManyMutationInput, RenamedclassUncheckedUpdateManyInput>
    /**
     * Filter which Renamedclasses to update
     */
    where?: RenamedclassWhereInput
    /**
     * Limit how many Renamedclasses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenamedclassIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Renamedclass upsert
   */
  export type RenamedclassUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Renamedclass
     */
    select?: RenamedclassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Renamedclass
     */
    omit?: RenamedclassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenamedclassInclude<ExtArgs> | null
    /**
     * The filter to search for the Renamedclass to update in case it exists.
     */
    where: RenamedclassWhereUniqueInput
    /**
     * In case the Renamedclass found by the `where` argument doesn't exist, create a new Renamedclass with this data.
     */
    create: XOR<RenamedclassCreateInput, RenamedclassUncheckedCreateInput>
    /**
     * In case the Renamedclass was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RenamedclassUpdateInput, RenamedclassUncheckedUpdateInput>
  }

  /**
   * Renamedclass delete
   */
  export type RenamedclassDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Renamedclass
     */
    select?: RenamedclassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Renamedclass
     */
    omit?: RenamedclassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenamedclassInclude<ExtArgs> | null
    /**
     * Filter which Renamedclass to delete.
     */
    where: RenamedclassWhereUniqueInput
  }

  /**
   * Renamedclass deleteMany
   */
  export type RenamedclassDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Renamedclasses to delete
     */
    where?: RenamedclassWhereInput
    /**
     * Limit how many Renamedclasses to delete.
     */
    limit?: number
  }

  /**
   * Renamedclass.class_days
   */
  export type Renamedclass$class_daysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the class_days
     */
    select?: class_daysSelect<ExtArgs> | null
    /**
     * Omit specific fields from the class_days
     */
    omit?: class_daysOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: class_daysInclude<ExtArgs> | null
    where?: class_daysWhereInput
    orderBy?: class_daysOrderByWithRelationInput | class_daysOrderByWithRelationInput[]
    cursor?: class_daysWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Class_daysScalarFieldEnum | Class_daysScalarFieldEnum[]
  }

  /**
   * Renamedclass.classes
   */
  export type Renamedclass$classesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classes
     */
    select?: classesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classes
     */
    omit?: classesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classesInclude<ExtArgs> | null
    where?: classesWhereInput
    orderBy?: classesOrderByWithRelationInput | classesOrderByWithRelationInput[]
    cursor?: classesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassesScalarFieldEnum | ClassesScalarFieldEnum[]
  }

  /**
   * Renamedclass without action
   */
  export type RenamedclassDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Renamedclass
     */
    select?: RenamedclassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Renamedclass
     */
    omit?: RenamedclassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenamedclassInclude<ExtArgs> | null
  }


  /**
   * Model class_days
   */

  export type AggregateClass_days = {
    _count: Class_daysCountAggregateOutputType | null
    _min: Class_daysMinAggregateOutputType | null
    _max: Class_daysMaxAggregateOutputType | null
  }

  export type Class_daysMinAggregateOutputType = {
    id: string | null
    initial_date: Date | null
    final_date: Date | null
    class: string | null
  }

  export type Class_daysMaxAggregateOutputType = {
    id: string | null
    initial_date: Date | null
    final_date: Date | null
    class: string | null
  }

  export type Class_daysCountAggregateOutputType = {
    id: number
    initial_date: number
    final_date: number
    class: number
    _all: number
  }


  export type Class_daysMinAggregateInputType = {
    id?: true
    initial_date?: true
    final_date?: true
    class?: true
  }

  export type Class_daysMaxAggregateInputType = {
    id?: true
    initial_date?: true
    final_date?: true
    class?: true
  }

  export type Class_daysCountAggregateInputType = {
    id?: true
    initial_date?: true
    final_date?: true
    class?: true
    _all?: true
  }

  export type Class_daysAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which class_days to aggregate.
     */
    where?: class_daysWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of class_days to fetch.
     */
    orderBy?: class_daysOrderByWithRelationInput | class_daysOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: class_daysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` class_days from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` class_days.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned class_days
    **/
    _count?: true | Class_daysCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Class_daysMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Class_daysMaxAggregateInputType
  }

  export type GetClass_daysAggregateType<T extends Class_daysAggregateArgs> = {
        [P in keyof T & keyof AggregateClass_days]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClass_days[P]>
      : GetScalarType<T[P], AggregateClass_days[P]>
  }




  export type class_daysGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: class_daysWhereInput
    orderBy?: class_daysOrderByWithAggregationInput | class_daysOrderByWithAggregationInput[]
    by: Class_daysScalarFieldEnum[] | Class_daysScalarFieldEnum
    having?: class_daysScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Class_daysCountAggregateInputType | true
    _min?: Class_daysMinAggregateInputType
    _max?: Class_daysMaxAggregateInputType
  }

  export type Class_daysGroupByOutputType = {
    id: string
    initial_date: Date
    final_date: Date
    class: string
    _count: Class_daysCountAggregateOutputType | null
    _min: Class_daysMinAggregateOutputType | null
    _max: Class_daysMaxAggregateOutputType | null
  }

  type GetClass_daysGroupByPayload<T extends class_daysGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Class_daysGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Class_daysGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Class_daysGroupByOutputType[P]>
            : GetScalarType<T[P], Class_daysGroupByOutputType[P]>
        }
      >
    >


  export type class_daysSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    initial_date?: boolean
    final_date?: boolean
    class?: boolean
    Renamedclass?: boolean | RenamedclassDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["class_days"]>

  export type class_daysSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    initial_date?: boolean
    final_date?: boolean
    class?: boolean
    Renamedclass?: boolean | RenamedclassDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["class_days"]>

  export type class_daysSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    initial_date?: boolean
    final_date?: boolean
    class?: boolean
    Renamedclass?: boolean | RenamedclassDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["class_days"]>

  export type class_daysSelectScalar = {
    id?: boolean
    initial_date?: boolean
    final_date?: boolean
    class?: boolean
  }

  export type class_daysOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "initial_date" | "final_date" | "class", ExtArgs["result"]["class_days"]>
  export type class_daysInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Renamedclass?: boolean | RenamedclassDefaultArgs<ExtArgs>
  }
  export type class_daysIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Renamedclass?: boolean | RenamedclassDefaultArgs<ExtArgs>
  }
  export type class_daysIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Renamedclass?: boolean | RenamedclassDefaultArgs<ExtArgs>
  }

  export type $class_daysPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "class_days"
    objects: {
      Renamedclass: Prisma.$RenamedclassPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      initial_date: Date
      final_date: Date
      class: string
    }, ExtArgs["result"]["class_days"]>
    composites: {}
  }

  type class_daysGetPayload<S extends boolean | null | undefined | class_daysDefaultArgs> = $Result.GetResult<Prisma.$class_daysPayload, S>

  type class_daysCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<class_daysFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Class_daysCountAggregateInputType | true
    }

  export interface class_daysDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['class_days'], meta: { name: 'class_days' } }
    /**
     * Find zero or one Class_days that matches the filter.
     * @param {class_daysFindUniqueArgs} args - Arguments to find a Class_days
     * @example
     * // Get one Class_days
     * const class_days = await prisma.class_days.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends class_daysFindUniqueArgs>(args: SelectSubset<T, class_daysFindUniqueArgs<ExtArgs>>): Prisma__class_daysClient<$Result.GetResult<Prisma.$class_daysPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Class_days that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {class_daysFindUniqueOrThrowArgs} args - Arguments to find a Class_days
     * @example
     * // Get one Class_days
     * const class_days = await prisma.class_days.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends class_daysFindUniqueOrThrowArgs>(args: SelectSubset<T, class_daysFindUniqueOrThrowArgs<ExtArgs>>): Prisma__class_daysClient<$Result.GetResult<Prisma.$class_daysPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Class_days that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {class_daysFindFirstArgs} args - Arguments to find a Class_days
     * @example
     * // Get one Class_days
     * const class_days = await prisma.class_days.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends class_daysFindFirstArgs>(args?: SelectSubset<T, class_daysFindFirstArgs<ExtArgs>>): Prisma__class_daysClient<$Result.GetResult<Prisma.$class_daysPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Class_days that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {class_daysFindFirstOrThrowArgs} args - Arguments to find a Class_days
     * @example
     * // Get one Class_days
     * const class_days = await prisma.class_days.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends class_daysFindFirstOrThrowArgs>(args?: SelectSubset<T, class_daysFindFirstOrThrowArgs<ExtArgs>>): Prisma__class_daysClient<$Result.GetResult<Prisma.$class_daysPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Class_days that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {class_daysFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Class_days
     * const class_days = await prisma.class_days.findMany()
     * 
     * // Get first 10 Class_days
     * const class_days = await prisma.class_days.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const class_daysWithIdOnly = await prisma.class_days.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends class_daysFindManyArgs>(args?: SelectSubset<T, class_daysFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$class_daysPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Class_days.
     * @param {class_daysCreateArgs} args - Arguments to create a Class_days.
     * @example
     * // Create one Class_days
     * const Class_days = await prisma.class_days.create({
     *   data: {
     *     // ... data to create a Class_days
     *   }
     * })
     * 
     */
    create<T extends class_daysCreateArgs>(args: SelectSubset<T, class_daysCreateArgs<ExtArgs>>): Prisma__class_daysClient<$Result.GetResult<Prisma.$class_daysPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Class_days.
     * @param {class_daysCreateManyArgs} args - Arguments to create many Class_days.
     * @example
     * // Create many Class_days
     * const class_days = await prisma.class_days.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends class_daysCreateManyArgs>(args?: SelectSubset<T, class_daysCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Class_days and returns the data saved in the database.
     * @param {class_daysCreateManyAndReturnArgs} args - Arguments to create many Class_days.
     * @example
     * // Create many Class_days
     * const class_days = await prisma.class_days.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Class_days and only return the `id`
     * const class_daysWithIdOnly = await prisma.class_days.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends class_daysCreateManyAndReturnArgs>(args?: SelectSubset<T, class_daysCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$class_daysPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Class_days.
     * @param {class_daysDeleteArgs} args - Arguments to delete one Class_days.
     * @example
     * // Delete one Class_days
     * const Class_days = await prisma.class_days.delete({
     *   where: {
     *     // ... filter to delete one Class_days
     *   }
     * })
     * 
     */
    delete<T extends class_daysDeleteArgs>(args: SelectSubset<T, class_daysDeleteArgs<ExtArgs>>): Prisma__class_daysClient<$Result.GetResult<Prisma.$class_daysPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Class_days.
     * @param {class_daysUpdateArgs} args - Arguments to update one Class_days.
     * @example
     * // Update one Class_days
     * const class_days = await prisma.class_days.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends class_daysUpdateArgs>(args: SelectSubset<T, class_daysUpdateArgs<ExtArgs>>): Prisma__class_daysClient<$Result.GetResult<Prisma.$class_daysPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Class_days.
     * @param {class_daysDeleteManyArgs} args - Arguments to filter Class_days to delete.
     * @example
     * // Delete a few Class_days
     * const { count } = await prisma.class_days.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends class_daysDeleteManyArgs>(args?: SelectSubset<T, class_daysDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Class_days.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {class_daysUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Class_days
     * const class_days = await prisma.class_days.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends class_daysUpdateManyArgs>(args: SelectSubset<T, class_daysUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Class_days and returns the data updated in the database.
     * @param {class_daysUpdateManyAndReturnArgs} args - Arguments to update many Class_days.
     * @example
     * // Update many Class_days
     * const class_days = await prisma.class_days.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Class_days and only return the `id`
     * const class_daysWithIdOnly = await prisma.class_days.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends class_daysUpdateManyAndReturnArgs>(args: SelectSubset<T, class_daysUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$class_daysPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Class_days.
     * @param {class_daysUpsertArgs} args - Arguments to update or create a Class_days.
     * @example
     * // Update or create a Class_days
     * const class_days = await prisma.class_days.upsert({
     *   create: {
     *     // ... data to create a Class_days
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Class_days we want to update
     *   }
     * })
     */
    upsert<T extends class_daysUpsertArgs>(args: SelectSubset<T, class_daysUpsertArgs<ExtArgs>>): Prisma__class_daysClient<$Result.GetResult<Prisma.$class_daysPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Class_days.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {class_daysCountArgs} args - Arguments to filter Class_days to count.
     * @example
     * // Count the number of Class_days
     * const count = await prisma.class_days.count({
     *   where: {
     *     // ... the filter for the Class_days we want to count
     *   }
     * })
    **/
    count<T extends class_daysCountArgs>(
      args?: Subset<T, class_daysCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Class_daysCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Class_days.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Class_daysAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Class_daysAggregateArgs>(args: Subset<T, Class_daysAggregateArgs>): Prisma.PrismaPromise<GetClass_daysAggregateType<T>>

    /**
     * Group by Class_days.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {class_daysGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends class_daysGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: class_daysGroupByArgs['orderBy'] }
        : { orderBy?: class_daysGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, class_daysGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClass_daysGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the class_days model
   */
  readonly fields: class_daysFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for class_days.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__class_daysClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Renamedclass<T extends RenamedclassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RenamedclassDefaultArgs<ExtArgs>>): Prisma__RenamedclassClient<$Result.GetResult<Prisma.$RenamedclassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the class_days model
   */
  interface class_daysFieldRefs {
    readonly id: FieldRef<"class_days", 'String'>
    readonly initial_date: FieldRef<"class_days", 'DateTime'>
    readonly final_date: FieldRef<"class_days", 'DateTime'>
    readonly class: FieldRef<"class_days", 'String'>
  }
    

  // Custom InputTypes
  /**
   * class_days findUnique
   */
  export type class_daysFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the class_days
     */
    select?: class_daysSelect<ExtArgs> | null
    /**
     * Omit specific fields from the class_days
     */
    omit?: class_daysOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: class_daysInclude<ExtArgs> | null
    /**
     * Filter, which class_days to fetch.
     */
    where: class_daysWhereUniqueInput
  }

  /**
   * class_days findUniqueOrThrow
   */
  export type class_daysFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the class_days
     */
    select?: class_daysSelect<ExtArgs> | null
    /**
     * Omit specific fields from the class_days
     */
    omit?: class_daysOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: class_daysInclude<ExtArgs> | null
    /**
     * Filter, which class_days to fetch.
     */
    where: class_daysWhereUniqueInput
  }

  /**
   * class_days findFirst
   */
  export type class_daysFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the class_days
     */
    select?: class_daysSelect<ExtArgs> | null
    /**
     * Omit specific fields from the class_days
     */
    omit?: class_daysOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: class_daysInclude<ExtArgs> | null
    /**
     * Filter, which class_days to fetch.
     */
    where?: class_daysWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of class_days to fetch.
     */
    orderBy?: class_daysOrderByWithRelationInput | class_daysOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for class_days.
     */
    cursor?: class_daysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` class_days from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` class_days.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of class_days.
     */
    distinct?: Class_daysScalarFieldEnum | Class_daysScalarFieldEnum[]
  }

  /**
   * class_days findFirstOrThrow
   */
  export type class_daysFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the class_days
     */
    select?: class_daysSelect<ExtArgs> | null
    /**
     * Omit specific fields from the class_days
     */
    omit?: class_daysOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: class_daysInclude<ExtArgs> | null
    /**
     * Filter, which class_days to fetch.
     */
    where?: class_daysWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of class_days to fetch.
     */
    orderBy?: class_daysOrderByWithRelationInput | class_daysOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for class_days.
     */
    cursor?: class_daysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` class_days from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` class_days.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of class_days.
     */
    distinct?: Class_daysScalarFieldEnum | Class_daysScalarFieldEnum[]
  }

  /**
   * class_days findMany
   */
  export type class_daysFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the class_days
     */
    select?: class_daysSelect<ExtArgs> | null
    /**
     * Omit specific fields from the class_days
     */
    omit?: class_daysOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: class_daysInclude<ExtArgs> | null
    /**
     * Filter, which class_days to fetch.
     */
    where?: class_daysWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of class_days to fetch.
     */
    orderBy?: class_daysOrderByWithRelationInput | class_daysOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing class_days.
     */
    cursor?: class_daysWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` class_days from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` class_days.
     */
    skip?: number
    distinct?: Class_daysScalarFieldEnum | Class_daysScalarFieldEnum[]
  }

  /**
   * class_days create
   */
  export type class_daysCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the class_days
     */
    select?: class_daysSelect<ExtArgs> | null
    /**
     * Omit specific fields from the class_days
     */
    omit?: class_daysOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: class_daysInclude<ExtArgs> | null
    /**
     * The data needed to create a class_days.
     */
    data: XOR<class_daysCreateInput, class_daysUncheckedCreateInput>
  }

  /**
   * class_days createMany
   */
  export type class_daysCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many class_days.
     */
    data: class_daysCreateManyInput | class_daysCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * class_days createManyAndReturn
   */
  export type class_daysCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the class_days
     */
    select?: class_daysSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the class_days
     */
    omit?: class_daysOmit<ExtArgs> | null
    /**
     * The data used to create many class_days.
     */
    data: class_daysCreateManyInput | class_daysCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: class_daysIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * class_days update
   */
  export type class_daysUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the class_days
     */
    select?: class_daysSelect<ExtArgs> | null
    /**
     * Omit specific fields from the class_days
     */
    omit?: class_daysOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: class_daysInclude<ExtArgs> | null
    /**
     * The data needed to update a class_days.
     */
    data: XOR<class_daysUpdateInput, class_daysUncheckedUpdateInput>
    /**
     * Choose, which class_days to update.
     */
    where: class_daysWhereUniqueInput
  }

  /**
   * class_days updateMany
   */
  export type class_daysUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update class_days.
     */
    data: XOR<class_daysUpdateManyMutationInput, class_daysUncheckedUpdateManyInput>
    /**
     * Filter which class_days to update
     */
    where?: class_daysWhereInput
    /**
     * Limit how many class_days to update.
     */
    limit?: number
  }

  /**
   * class_days updateManyAndReturn
   */
  export type class_daysUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the class_days
     */
    select?: class_daysSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the class_days
     */
    omit?: class_daysOmit<ExtArgs> | null
    /**
     * The data used to update class_days.
     */
    data: XOR<class_daysUpdateManyMutationInput, class_daysUncheckedUpdateManyInput>
    /**
     * Filter which class_days to update
     */
    where?: class_daysWhereInput
    /**
     * Limit how many class_days to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: class_daysIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * class_days upsert
   */
  export type class_daysUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the class_days
     */
    select?: class_daysSelect<ExtArgs> | null
    /**
     * Omit specific fields from the class_days
     */
    omit?: class_daysOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: class_daysInclude<ExtArgs> | null
    /**
     * The filter to search for the class_days to update in case it exists.
     */
    where: class_daysWhereUniqueInput
    /**
     * In case the class_days found by the `where` argument doesn't exist, create a new class_days with this data.
     */
    create: XOR<class_daysCreateInput, class_daysUncheckedCreateInput>
    /**
     * In case the class_days was found with the provided `where` argument, update it with this data.
     */
    update: XOR<class_daysUpdateInput, class_daysUncheckedUpdateInput>
  }

  /**
   * class_days delete
   */
  export type class_daysDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the class_days
     */
    select?: class_daysSelect<ExtArgs> | null
    /**
     * Omit specific fields from the class_days
     */
    omit?: class_daysOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: class_daysInclude<ExtArgs> | null
    /**
     * Filter which class_days to delete.
     */
    where: class_daysWhereUniqueInput
  }

  /**
   * class_days deleteMany
   */
  export type class_daysDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which class_days to delete
     */
    where?: class_daysWhereInput
    /**
     * Limit how many class_days to delete.
     */
    limit?: number
  }

  /**
   * class_days without action
   */
  export type class_daysDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the class_days
     */
    select?: class_daysSelect<ExtArgs> | null
    /**
     * Omit specific fields from the class_days
     */
    omit?: class_daysOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: class_daysInclude<ExtArgs> | null
  }


  /**
   * Model classes
   */

  export type AggregateClasses = {
    _count: ClassesCountAggregateOutputType | null
    _min: ClassesMinAggregateOutputType | null
    _max: ClassesMaxAggregateOutputType | null
  }

  export type ClassesMinAggregateOutputType = {
    id: string | null
    theme: string | null
    start_date: Date | null
    end_date: Date | null
    class: string | null
  }

  export type ClassesMaxAggregateOutputType = {
    id: string | null
    theme: string | null
    start_date: Date | null
    end_date: Date | null
    class: string | null
  }

  export type ClassesCountAggregateOutputType = {
    id: number
    theme: number
    start_date: number
    end_date: number
    class: number
    _all: number
  }


  export type ClassesMinAggregateInputType = {
    id?: true
    theme?: true
    start_date?: true
    end_date?: true
    class?: true
  }

  export type ClassesMaxAggregateInputType = {
    id?: true
    theme?: true
    start_date?: true
    end_date?: true
    class?: true
  }

  export type ClassesCountAggregateInputType = {
    id?: true
    theme?: true
    start_date?: true
    end_date?: true
    class?: true
    _all?: true
  }

  export type ClassesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which classes to aggregate.
     */
    where?: classesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of classes to fetch.
     */
    orderBy?: classesOrderByWithRelationInput | classesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: classesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned classes
    **/
    _count?: true | ClassesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClassesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClassesMaxAggregateInputType
  }

  export type GetClassesAggregateType<T extends ClassesAggregateArgs> = {
        [P in keyof T & keyof AggregateClasses]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClasses[P]>
      : GetScalarType<T[P], AggregateClasses[P]>
  }




  export type classesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: classesWhereInput
    orderBy?: classesOrderByWithAggregationInput | classesOrderByWithAggregationInput[]
    by: ClassesScalarFieldEnum[] | ClassesScalarFieldEnum
    having?: classesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClassesCountAggregateInputType | true
    _min?: ClassesMinAggregateInputType
    _max?: ClassesMaxAggregateInputType
  }

  export type ClassesGroupByOutputType = {
    id: string
    theme: string
    start_date: Date
    end_date: Date
    class: string
    _count: ClassesCountAggregateOutputType | null
    _min: ClassesMinAggregateOutputType | null
    _max: ClassesMaxAggregateOutputType | null
  }

  type GetClassesGroupByPayload<T extends classesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClassesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClassesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClassesGroupByOutputType[P]>
            : GetScalarType<T[P], ClassesGroupByOutputType[P]>
        }
      >
    >


  export type classesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    theme?: boolean
    start_date?: boolean
    end_date?: boolean
    class?: boolean
    Renamedclass?: boolean | RenamedclassDefaultArgs<ExtArgs>
    presence_list_presence_list_classesToclasses?: boolean | classes$presence_list_presence_list_classesToclassesArgs<ExtArgs>
    _count?: boolean | ClassesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["classes"]>

  export type classesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    theme?: boolean
    start_date?: boolean
    end_date?: boolean
    class?: boolean
    Renamedclass?: boolean | RenamedclassDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["classes"]>

  export type classesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    theme?: boolean
    start_date?: boolean
    end_date?: boolean
    class?: boolean
    Renamedclass?: boolean | RenamedclassDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["classes"]>

  export type classesSelectScalar = {
    id?: boolean
    theme?: boolean
    start_date?: boolean
    end_date?: boolean
    class?: boolean
  }

  export type classesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "theme" | "start_date" | "end_date" | "class", ExtArgs["result"]["classes"]>
  export type classesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Renamedclass?: boolean | RenamedclassDefaultArgs<ExtArgs>
    presence_list_presence_list_classesToclasses?: boolean | classes$presence_list_presence_list_classesToclassesArgs<ExtArgs>
    _count?: boolean | ClassesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type classesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Renamedclass?: boolean | RenamedclassDefaultArgs<ExtArgs>
  }
  export type classesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Renamedclass?: boolean | RenamedclassDefaultArgs<ExtArgs>
  }

  export type $classesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "classes"
    objects: {
      Renamedclass: Prisma.$RenamedclassPayload<ExtArgs>
      presence_list_presence_list_classesToclasses: Prisma.$presence_listPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      theme: string
      start_date: Date
      end_date: Date
      class: string
    }, ExtArgs["result"]["classes"]>
    composites: {}
  }

  type classesGetPayload<S extends boolean | null | undefined | classesDefaultArgs> = $Result.GetResult<Prisma.$classesPayload, S>

  type classesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<classesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClassesCountAggregateInputType | true
    }

  export interface classesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['classes'], meta: { name: 'classes' } }
    /**
     * Find zero or one Classes that matches the filter.
     * @param {classesFindUniqueArgs} args - Arguments to find a Classes
     * @example
     * // Get one Classes
     * const classes = await prisma.classes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends classesFindUniqueArgs>(args: SelectSubset<T, classesFindUniqueArgs<ExtArgs>>): Prisma__classesClient<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Classes that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {classesFindUniqueOrThrowArgs} args - Arguments to find a Classes
     * @example
     * // Get one Classes
     * const classes = await prisma.classes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends classesFindUniqueOrThrowArgs>(args: SelectSubset<T, classesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__classesClient<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Classes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {classesFindFirstArgs} args - Arguments to find a Classes
     * @example
     * // Get one Classes
     * const classes = await prisma.classes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends classesFindFirstArgs>(args?: SelectSubset<T, classesFindFirstArgs<ExtArgs>>): Prisma__classesClient<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Classes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {classesFindFirstOrThrowArgs} args - Arguments to find a Classes
     * @example
     * // Get one Classes
     * const classes = await prisma.classes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends classesFindFirstOrThrowArgs>(args?: SelectSubset<T, classesFindFirstOrThrowArgs<ExtArgs>>): Prisma__classesClient<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Classes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {classesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Classes
     * const classes = await prisma.classes.findMany()
     * 
     * // Get first 10 Classes
     * const classes = await prisma.classes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const classesWithIdOnly = await prisma.classes.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends classesFindManyArgs>(args?: SelectSubset<T, classesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Classes.
     * @param {classesCreateArgs} args - Arguments to create a Classes.
     * @example
     * // Create one Classes
     * const Classes = await prisma.classes.create({
     *   data: {
     *     // ... data to create a Classes
     *   }
     * })
     * 
     */
    create<T extends classesCreateArgs>(args: SelectSubset<T, classesCreateArgs<ExtArgs>>): Prisma__classesClient<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Classes.
     * @param {classesCreateManyArgs} args - Arguments to create many Classes.
     * @example
     * // Create many Classes
     * const classes = await prisma.classes.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends classesCreateManyArgs>(args?: SelectSubset<T, classesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Classes and returns the data saved in the database.
     * @param {classesCreateManyAndReturnArgs} args - Arguments to create many Classes.
     * @example
     * // Create many Classes
     * const classes = await prisma.classes.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Classes and only return the `id`
     * const classesWithIdOnly = await prisma.classes.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends classesCreateManyAndReturnArgs>(args?: SelectSubset<T, classesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Classes.
     * @param {classesDeleteArgs} args - Arguments to delete one Classes.
     * @example
     * // Delete one Classes
     * const Classes = await prisma.classes.delete({
     *   where: {
     *     // ... filter to delete one Classes
     *   }
     * })
     * 
     */
    delete<T extends classesDeleteArgs>(args: SelectSubset<T, classesDeleteArgs<ExtArgs>>): Prisma__classesClient<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Classes.
     * @param {classesUpdateArgs} args - Arguments to update one Classes.
     * @example
     * // Update one Classes
     * const classes = await prisma.classes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends classesUpdateArgs>(args: SelectSubset<T, classesUpdateArgs<ExtArgs>>): Prisma__classesClient<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Classes.
     * @param {classesDeleteManyArgs} args - Arguments to filter Classes to delete.
     * @example
     * // Delete a few Classes
     * const { count } = await prisma.classes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends classesDeleteManyArgs>(args?: SelectSubset<T, classesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {classesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Classes
     * const classes = await prisma.classes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends classesUpdateManyArgs>(args: SelectSubset<T, classesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classes and returns the data updated in the database.
     * @param {classesUpdateManyAndReturnArgs} args - Arguments to update many Classes.
     * @example
     * // Update many Classes
     * const classes = await prisma.classes.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Classes and only return the `id`
     * const classesWithIdOnly = await prisma.classes.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends classesUpdateManyAndReturnArgs>(args: SelectSubset<T, classesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Classes.
     * @param {classesUpsertArgs} args - Arguments to update or create a Classes.
     * @example
     * // Update or create a Classes
     * const classes = await prisma.classes.upsert({
     *   create: {
     *     // ... data to create a Classes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Classes we want to update
     *   }
     * })
     */
    upsert<T extends classesUpsertArgs>(args: SelectSubset<T, classesUpsertArgs<ExtArgs>>): Prisma__classesClient<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {classesCountArgs} args - Arguments to filter Classes to count.
     * @example
     * // Count the number of Classes
     * const count = await prisma.classes.count({
     *   where: {
     *     // ... the filter for the Classes we want to count
     *   }
     * })
    **/
    count<T extends classesCountArgs>(
      args?: Subset<T, classesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClassesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClassesAggregateArgs>(args: Subset<T, ClassesAggregateArgs>): Prisma.PrismaPromise<GetClassesAggregateType<T>>

    /**
     * Group by Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {classesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends classesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: classesGroupByArgs['orderBy'] }
        : { orderBy?: classesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, classesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClassesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the classes model
   */
  readonly fields: classesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for classes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__classesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Renamedclass<T extends RenamedclassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RenamedclassDefaultArgs<ExtArgs>>): Prisma__RenamedclassClient<$Result.GetResult<Prisma.$RenamedclassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    presence_list_presence_list_classesToclasses<T extends classes$presence_list_presence_list_classesToclassesArgs<ExtArgs> = {}>(args?: Subset<T, classes$presence_list_presence_list_classesToclassesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$presence_listPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the classes model
   */
  interface classesFieldRefs {
    readonly id: FieldRef<"classes", 'String'>
    readonly theme: FieldRef<"classes", 'String'>
    readonly start_date: FieldRef<"classes", 'DateTime'>
    readonly end_date: FieldRef<"classes", 'DateTime'>
    readonly class: FieldRef<"classes", 'String'>
  }
    

  // Custom InputTypes
  /**
   * classes findUnique
   */
  export type classesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classes
     */
    select?: classesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classes
     */
    omit?: classesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classesInclude<ExtArgs> | null
    /**
     * Filter, which classes to fetch.
     */
    where: classesWhereUniqueInput
  }

  /**
   * classes findUniqueOrThrow
   */
  export type classesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classes
     */
    select?: classesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classes
     */
    omit?: classesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classesInclude<ExtArgs> | null
    /**
     * Filter, which classes to fetch.
     */
    where: classesWhereUniqueInput
  }

  /**
   * classes findFirst
   */
  export type classesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classes
     */
    select?: classesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classes
     */
    omit?: classesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classesInclude<ExtArgs> | null
    /**
     * Filter, which classes to fetch.
     */
    where?: classesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of classes to fetch.
     */
    orderBy?: classesOrderByWithRelationInput | classesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for classes.
     */
    cursor?: classesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of classes.
     */
    distinct?: ClassesScalarFieldEnum | ClassesScalarFieldEnum[]
  }

  /**
   * classes findFirstOrThrow
   */
  export type classesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classes
     */
    select?: classesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classes
     */
    omit?: classesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classesInclude<ExtArgs> | null
    /**
     * Filter, which classes to fetch.
     */
    where?: classesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of classes to fetch.
     */
    orderBy?: classesOrderByWithRelationInput | classesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for classes.
     */
    cursor?: classesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of classes.
     */
    distinct?: ClassesScalarFieldEnum | ClassesScalarFieldEnum[]
  }

  /**
   * classes findMany
   */
  export type classesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classes
     */
    select?: classesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classes
     */
    omit?: classesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classesInclude<ExtArgs> | null
    /**
     * Filter, which classes to fetch.
     */
    where?: classesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of classes to fetch.
     */
    orderBy?: classesOrderByWithRelationInput | classesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing classes.
     */
    cursor?: classesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` classes.
     */
    skip?: number
    distinct?: ClassesScalarFieldEnum | ClassesScalarFieldEnum[]
  }

  /**
   * classes create
   */
  export type classesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classes
     */
    select?: classesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classes
     */
    omit?: classesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classesInclude<ExtArgs> | null
    /**
     * The data needed to create a classes.
     */
    data: XOR<classesCreateInput, classesUncheckedCreateInput>
  }

  /**
   * classes createMany
   */
  export type classesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many classes.
     */
    data: classesCreateManyInput | classesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * classes createManyAndReturn
   */
  export type classesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classes
     */
    select?: classesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the classes
     */
    omit?: classesOmit<ExtArgs> | null
    /**
     * The data used to create many classes.
     */
    data: classesCreateManyInput | classesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * classes update
   */
  export type classesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classes
     */
    select?: classesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classes
     */
    omit?: classesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classesInclude<ExtArgs> | null
    /**
     * The data needed to update a classes.
     */
    data: XOR<classesUpdateInput, classesUncheckedUpdateInput>
    /**
     * Choose, which classes to update.
     */
    where: classesWhereUniqueInput
  }

  /**
   * classes updateMany
   */
  export type classesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update classes.
     */
    data: XOR<classesUpdateManyMutationInput, classesUncheckedUpdateManyInput>
    /**
     * Filter which classes to update
     */
    where?: classesWhereInput
    /**
     * Limit how many classes to update.
     */
    limit?: number
  }

  /**
   * classes updateManyAndReturn
   */
  export type classesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classes
     */
    select?: classesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the classes
     */
    omit?: classesOmit<ExtArgs> | null
    /**
     * The data used to update classes.
     */
    data: XOR<classesUpdateManyMutationInput, classesUncheckedUpdateManyInput>
    /**
     * Filter which classes to update
     */
    where?: classesWhereInput
    /**
     * Limit how many classes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * classes upsert
   */
  export type classesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classes
     */
    select?: classesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classes
     */
    omit?: classesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classesInclude<ExtArgs> | null
    /**
     * The filter to search for the classes to update in case it exists.
     */
    where: classesWhereUniqueInput
    /**
     * In case the classes found by the `where` argument doesn't exist, create a new classes with this data.
     */
    create: XOR<classesCreateInput, classesUncheckedCreateInput>
    /**
     * In case the classes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<classesUpdateInput, classesUncheckedUpdateInput>
  }

  /**
   * classes delete
   */
  export type classesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classes
     */
    select?: classesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classes
     */
    omit?: classesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classesInclude<ExtArgs> | null
    /**
     * Filter which classes to delete.
     */
    where: classesWhereUniqueInput
  }

  /**
   * classes deleteMany
   */
  export type classesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which classes to delete
     */
    where?: classesWhereInput
    /**
     * Limit how many classes to delete.
     */
    limit?: number
  }

  /**
   * classes.presence_list_presence_list_classesToclasses
   */
  export type classes$presence_list_presence_list_classesToclassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the presence_list
     */
    select?: presence_listSelect<ExtArgs> | null
    /**
     * Omit specific fields from the presence_list
     */
    omit?: presence_listOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: presence_listInclude<ExtArgs> | null
    where?: presence_listWhereInput
    orderBy?: presence_listOrderByWithRelationInput | presence_listOrderByWithRelationInput[]
    cursor?: presence_listWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Presence_listScalarFieldEnum | Presence_listScalarFieldEnum[]
  }

  /**
   * classes without action
   */
  export type classesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classes
     */
    select?: classesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classes
     */
    omit?: classesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classesInclude<ExtArgs> | null
  }


  /**
   * Model classrooms
   */

  export type AggregateClassrooms = {
    _count: ClassroomsCountAggregateOutputType | null
    _avg: ClassroomsAvgAggregateOutputType | null
    _sum: ClassroomsSumAggregateOutputType | null
    _min: ClassroomsMinAggregateOutputType | null
    _max: ClassroomsMaxAggregateOutputType | null
  }

  export type ClassroomsAvgAggregateOutputType = {
    number: Decimal | null
  }

  export type ClassroomsSumAggregateOutputType = {
    number: Decimal | null
  }

  export type ClassroomsMinAggregateOutputType = {
    id: string | null
    number: Decimal | null
    created_at: Date | null
    block: string | null
    companies: string | null
  }

  export type ClassroomsMaxAggregateOutputType = {
    id: string | null
    number: Decimal | null
    created_at: Date | null
    block: string | null
    companies: string | null
  }

  export type ClassroomsCountAggregateOutputType = {
    id: number
    number: number
    created_at: number
    block: number
    companies: number
    _all: number
  }


  export type ClassroomsAvgAggregateInputType = {
    number?: true
  }

  export type ClassroomsSumAggregateInputType = {
    number?: true
  }

  export type ClassroomsMinAggregateInputType = {
    id?: true
    number?: true
    created_at?: true
    block?: true
    companies?: true
  }

  export type ClassroomsMaxAggregateInputType = {
    id?: true
    number?: true
    created_at?: true
    block?: true
    companies?: true
  }

  export type ClassroomsCountAggregateInputType = {
    id?: true
    number?: true
    created_at?: true
    block?: true
    companies?: true
    _all?: true
  }

  export type ClassroomsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which classrooms to aggregate.
     */
    where?: classroomsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of classrooms to fetch.
     */
    orderBy?: classroomsOrderByWithRelationInput | classroomsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: classroomsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` classrooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` classrooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned classrooms
    **/
    _count?: true | ClassroomsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClassroomsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClassroomsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClassroomsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClassroomsMaxAggregateInputType
  }

  export type GetClassroomsAggregateType<T extends ClassroomsAggregateArgs> = {
        [P in keyof T & keyof AggregateClassrooms]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClassrooms[P]>
      : GetScalarType<T[P], AggregateClassrooms[P]>
  }




  export type classroomsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: classroomsWhereInput
    orderBy?: classroomsOrderByWithAggregationInput | classroomsOrderByWithAggregationInput[]
    by: ClassroomsScalarFieldEnum[] | ClassroomsScalarFieldEnum
    having?: classroomsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClassroomsCountAggregateInputType | true
    _avg?: ClassroomsAvgAggregateInputType
    _sum?: ClassroomsSumAggregateInputType
    _min?: ClassroomsMinAggregateInputType
    _max?: ClassroomsMaxAggregateInputType
  }

  export type ClassroomsGroupByOutputType = {
    id: string
    number: Decimal
    created_at: Date
    block: string | null
    companies: string | null
    _count: ClassroomsCountAggregateOutputType | null
    _avg: ClassroomsAvgAggregateOutputType | null
    _sum: ClassroomsSumAggregateOutputType | null
    _min: ClassroomsMinAggregateOutputType | null
    _max: ClassroomsMaxAggregateOutputType | null
  }

  type GetClassroomsGroupByPayload<T extends classroomsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClassroomsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClassroomsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClassroomsGroupByOutputType[P]>
            : GetScalarType<T[P], ClassroomsGroupByOutputType[P]>
        }
      >
    >


  export type classroomsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    number?: boolean
    created_at?: boolean
    block?: boolean
    companies?: boolean
    companies_classrooms_companiesTocompanies?: boolean | classrooms$companies_classrooms_companiesTocompaniesArgs<ExtArgs>
  }, ExtArgs["result"]["classrooms"]>

  export type classroomsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    number?: boolean
    created_at?: boolean
    block?: boolean
    companies?: boolean
    companies_classrooms_companiesTocompanies?: boolean | classrooms$companies_classrooms_companiesTocompaniesArgs<ExtArgs>
  }, ExtArgs["result"]["classrooms"]>

  export type classroomsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    number?: boolean
    created_at?: boolean
    block?: boolean
    companies?: boolean
    companies_classrooms_companiesTocompanies?: boolean | classrooms$companies_classrooms_companiesTocompaniesArgs<ExtArgs>
  }, ExtArgs["result"]["classrooms"]>

  export type classroomsSelectScalar = {
    id?: boolean
    number?: boolean
    created_at?: boolean
    block?: boolean
    companies?: boolean
  }

  export type classroomsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "number" | "created_at" | "block" | "companies", ExtArgs["result"]["classrooms"]>
  export type classroomsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    companies_classrooms_companiesTocompanies?: boolean | classrooms$companies_classrooms_companiesTocompaniesArgs<ExtArgs>
  }
  export type classroomsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    companies_classrooms_companiesTocompanies?: boolean | classrooms$companies_classrooms_companiesTocompaniesArgs<ExtArgs>
  }
  export type classroomsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    companies_classrooms_companiesTocompanies?: boolean | classrooms$companies_classrooms_companiesTocompaniesArgs<ExtArgs>
  }

  export type $classroomsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "classrooms"
    objects: {
      companies_classrooms_companiesTocompanies: Prisma.$companiesPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      number: Prisma.Decimal
      created_at: Date
      block: string | null
      companies: string | null
    }, ExtArgs["result"]["classrooms"]>
    composites: {}
  }

  type classroomsGetPayload<S extends boolean | null | undefined | classroomsDefaultArgs> = $Result.GetResult<Prisma.$classroomsPayload, S>

  type classroomsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<classroomsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClassroomsCountAggregateInputType | true
    }

  export interface classroomsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['classrooms'], meta: { name: 'classrooms' } }
    /**
     * Find zero or one Classrooms that matches the filter.
     * @param {classroomsFindUniqueArgs} args - Arguments to find a Classrooms
     * @example
     * // Get one Classrooms
     * const classrooms = await prisma.classrooms.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends classroomsFindUniqueArgs>(args: SelectSubset<T, classroomsFindUniqueArgs<ExtArgs>>): Prisma__classroomsClient<$Result.GetResult<Prisma.$classroomsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Classrooms that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {classroomsFindUniqueOrThrowArgs} args - Arguments to find a Classrooms
     * @example
     * // Get one Classrooms
     * const classrooms = await prisma.classrooms.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends classroomsFindUniqueOrThrowArgs>(args: SelectSubset<T, classroomsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__classroomsClient<$Result.GetResult<Prisma.$classroomsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Classrooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {classroomsFindFirstArgs} args - Arguments to find a Classrooms
     * @example
     * // Get one Classrooms
     * const classrooms = await prisma.classrooms.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends classroomsFindFirstArgs>(args?: SelectSubset<T, classroomsFindFirstArgs<ExtArgs>>): Prisma__classroomsClient<$Result.GetResult<Prisma.$classroomsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Classrooms that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {classroomsFindFirstOrThrowArgs} args - Arguments to find a Classrooms
     * @example
     * // Get one Classrooms
     * const classrooms = await prisma.classrooms.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends classroomsFindFirstOrThrowArgs>(args?: SelectSubset<T, classroomsFindFirstOrThrowArgs<ExtArgs>>): Prisma__classroomsClient<$Result.GetResult<Prisma.$classroomsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Classrooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {classroomsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Classrooms
     * const classrooms = await prisma.classrooms.findMany()
     * 
     * // Get first 10 Classrooms
     * const classrooms = await prisma.classrooms.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const classroomsWithIdOnly = await prisma.classrooms.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends classroomsFindManyArgs>(args?: SelectSubset<T, classroomsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$classroomsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Classrooms.
     * @param {classroomsCreateArgs} args - Arguments to create a Classrooms.
     * @example
     * // Create one Classrooms
     * const Classrooms = await prisma.classrooms.create({
     *   data: {
     *     // ... data to create a Classrooms
     *   }
     * })
     * 
     */
    create<T extends classroomsCreateArgs>(args: SelectSubset<T, classroomsCreateArgs<ExtArgs>>): Prisma__classroomsClient<$Result.GetResult<Prisma.$classroomsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Classrooms.
     * @param {classroomsCreateManyArgs} args - Arguments to create many Classrooms.
     * @example
     * // Create many Classrooms
     * const classrooms = await prisma.classrooms.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends classroomsCreateManyArgs>(args?: SelectSubset<T, classroomsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Classrooms and returns the data saved in the database.
     * @param {classroomsCreateManyAndReturnArgs} args - Arguments to create many Classrooms.
     * @example
     * // Create many Classrooms
     * const classrooms = await prisma.classrooms.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Classrooms and only return the `id`
     * const classroomsWithIdOnly = await prisma.classrooms.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends classroomsCreateManyAndReturnArgs>(args?: SelectSubset<T, classroomsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$classroomsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Classrooms.
     * @param {classroomsDeleteArgs} args - Arguments to delete one Classrooms.
     * @example
     * // Delete one Classrooms
     * const Classrooms = await prisma.classrooms.delete({
     *   where: {
     *     // ... filter to delete one Classrooms
     *   }
     * })
     * 
     */
    delete<T extends classroomsDeleteArgs>(args: SelectSubset<T, classroomsDeleteArgs<ExtArgs>>): Prisma__classroomsClient<$Result.GetResult<Prisma.$classroomsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Classrooms.
     * @param {classroomsUpdateArgs} args - Arguments to update one Classrooms.
     * @example
     * // Update one Classrooms
     * const classrooms = await prisma.classrooms.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends classroomsUpdateArgs>(args: SelectSubset<T, classroomsUpdateArgs<ExtArgs>>): Prisma__classroomsClient<$Result.GetResult<Prisma.$classroomsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Classrooms.
     * @param {classroomsDeleteManyArgs} args - Arguments to filter Classrooms to delete.
     * @example
     * // Delete a few Classrooms
     * const { count } = await prisma.classrooms.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends classroomsDeleteManyArgs>(args?: SelectSubset<T, classroomsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classrooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {classroomsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Classrooms
     * const classrooms = await prisma.classrooms.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends classroomsUpdateManyArgs>(args: SelectSubset<T, classroomsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classrooms and returns the data updated in the database.
     * @param {classroomsUpdateManyAndReturnArgs} args - Arguments to update many Classrooms.
     * @example
     * // Update many Classrooms
     * const classrooms = await prisma.classrooms.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Classrooms and only return the `id`
     * const classroomsWithIdOnly = await prisma.classrooms.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends classroomsUpdateManyAndReturnArgs>(args: SelectSubset<T, classroomsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$classroomsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Classrooms.
     * @param {classroomsUpsertArgs} args - Arguments to update or create a Classrooms.
     * @example
     * // Update or create a Classrooms
     * const classrooms = await prisma.classrooms.upsert({
     *   create: {
     *     // ... data to create a Classrooms
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Classrooms we want to update
     *   }
     * })
     */
    upsert<T extends classroomsUpsertArgs>(args: SelectSubset<T, classroomsUpsertArgs<ExtArgs>>): Prisma__classroomsClient<$Result.GetResult<Prisma.$classroomsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Classrooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {classroomsCountArgs} args - Arguments to filter Classrooms to count.
     * @example
     * // Count the number of Classrooms
     * const count = await prisma.classrooms.count({
     *   where: {
     *     // ... the filter for the Classrooms we want to count
     *   }
     * })
    **/
    count<T extends classroomsCountArgs>(
      args?: Subset<T, classroomsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClassroomsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Classrooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassroomsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClassroomsAggregateArgs>(args: Subset<T, ClassroomsAggregateArgs>): Prisma.PrismaPromise<GetClassroomsAggregateType<T>>

    /**
     * Group by Classrooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {classroomsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends classroomsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: classroomsGroupByArgs['orderBy'] }
        : { orderBy?: classroomsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, classroomsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClassroomsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the classrooms model
   */
  readonly fields: classroomsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for classrooms.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__classroomsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    companies_classrooms_companiesTocompanies<T extends classrooms$companies_classrooms_companiesTocompaniesArgs<ExtArgs> = {}>(args?: Subset<T, classrooms$companies_classrooms_companiesTocompaniesArgs<ExtArgs>>): Prisma__companiesClient<$Result.GetResult<Prisma.$companiesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the classrooms model
   */
  interface classroomsFieldRefs {
    readonly id: FieldRef<"classrooms", 'String'>
    readonly number: FieldRef<"classrooms", 'Decimal'>
    readonly created_at: FieldRef<"classrooms", 'DateTime'>
    readonly block: FieldRef<"classrooms", 'String'>
    readonly companies: FieldRef<"classrooms", 'String'>
  }
    

  // Custom InputTypes
  /**
   * classrooms findUnique
   */
  export type classroomsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classrooms
     */
    select?: classroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classrooms
     */
    omit?: classroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classroomsInclude<ExtArgs> | null
    /**
     * Filter, which classrooms to fetch.
     */
    where: classroomsWhereUniqueInput
  }

  /**
   * classrooms findUniqueOrThrow
   */
  export type classroomsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classrooms
     */
    select?: classroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classrooms
     */
    omit?: classroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classroomsInclude<ExtArgs> | null
    /**
     * Filter, which classrooms to fetch.
     */
    where: classroomsWhereUniqueInput
  }

  /**
   * classrooms findFirst
   */
  export type classroomsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classrooms
     */
    select?: classroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classrooms
     */
    omit?: classroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classroomsInclude<ExtArgs> | null
    /**
     * Filter, which classrooms to fetch.
     */
    where?: classroomsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of classrooms to fetch.
     */
    orderBy?: classroomsOrderByWithRelationInput | classroomsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for classrooms.
     */
    cursor?: classroomsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` classrooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` classrooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of classrooms.
     */
    distinct?: ClassroomsScalarFieldEnum | ClassroomsScalarFieldEnum[]
  }

  /**
   * classrooms findFirstOrThrow
   */
  export type classroomsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classrooms
     */
    select?: classroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classrooms
     */
    omit?: classroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classroomsInclude<ExtArgs> | null
    /**
     * Filter, which classrooms to fetch.
     */
    where?: classroomsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of classrooms to fetch.
     */
    orderBy?: classroomsOrderByWithRelationInput | classroomsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for classrooms.
     */
    cursor?: classroomsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` classrooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` classrooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of classrooms.
     */
    distinct?: ClassroomsScalarFieldEnum | ClassroomsScalarFieldEnum[]
  }

  /**
   * classrooms findMany
   */
  export type classroomsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classrooms
     */
    select?: classroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classrooms
     */
    omit?: classroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classroomsInclude<ExtArgs> | null
    /**
     * Filter, which classrooms to fetch.
     */
    where?: classroomsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of classrooms to fetch.
     */
    orderBy?: classroomsOrderByWithRelationInput | classroomsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing classrooms.
     */
    cursor?: classroomsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` classrooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` classrooms.
     */
    skip?: number
    distinct?: ClassroomsScalarFieldEnum | ClassroomsScalarFieldEnum[]
  }

  /**
   * classrooms create
   */
  export type classroomsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classrooms
     */
    select?: classroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classrooms
     */
    omit?: classroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classroomsInclude<ExtArgs> | null
    /**
     * The data needed to create a classrooms.
     */
    data: XOR<classroomsCreateInput, classroomsUncheckedCreateInput>
  }

  /**
   * classrooms createMany
   */
  export type classroomsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many classrooms.
     */
    data: classroomsCreateManyInput | classroomsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * classrooms createManyAndReturn
   */
  export type classroomsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classrooms
     */
    select?: classroomsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the classrooms
     */
    omit?: classroomsOmit<ExtArgs> | null
    /**
     * The data used to create many classrooms.
     */
    data: classroomsCreateManyInput | classroomsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classroomsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * classrooms update
   */
  export type classroomsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classrooms
     */
    select?: classroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classrooms
     */
    omit?: classroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classroomsInclude<ExtArgs> | null
    /**
     * The data needed to update a classrooms.
     */
    data: XOR<classroomsUpdateInput, classroomsUncheckedUpdateInput>
    /**
     * Choose, which classrooms to update.
     */
    where: classroomsWhereUniqueInput
  }

  /**
   * classrooms updateMany
   */
  export type classroomsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update classrooms.
     */
    data: XOR<classroomsUpdateManyMutationInput, classroomsUncheckedUpdateManyInput>
    /**
     * Filter which classrooms to update
     */
    where?: classroomsWhereInput
    /**
     * Limit how many classrooms to update.
     */
    limit?: number
  }

  /**
   * classrooms updateManyAndReturn
   */
  export type classroomsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classrooms
     */
    select?: classroomsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the classrooms
     */
    omit?: classroomsOmit<ExtArgs> | null
    /**
     * The data used to update classrooms.
     */
    data: XOR<classroomsUpdateManyMutationInput, classroomsUncheckedUpdateManyInput>
    /**
     * Filter which classrooms to update
     */
    where?: classroomsWhereInput
    /**
     * Limit how many classrooms to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classroomsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * classrooms upsert
   */
  export type classroomsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classrooms
     */
    select?: classroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classrooms
     */
    omit?: classroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classroomsInclude<ExtArgs> | null
    /**
     * The filter to search for the classrooms to update in case it exists.
     */
    where: classroomsWhereUniqueInput
    /**
     * In case the classrooms found by the `where` argument doesn't exist, create a new classrooms with this data.
     */
    create: XOR<classroomsCreateInput, classroomsUncheckedCreateInput>
    /**
     * In case the classrooms was found with the provided `where` argument, update it with this data.
     */
    update: XOR<classroomsUpdateInput, classroomsUncheckedUpdateInput>
  }

  /**
   * classrooms delete
   */
  export type classroomsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classrooms
     */
    select?: classroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classrooms
     */
    omit?: classroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classroomsInclude<ExtArgs> | null
    /**
     * Filter which classrooms to delete.
     */
    where: classroomsWhereUniqueInput
  }

  /**
   * classrooms deleteMany
   */
  export type classroomsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which classrooms to delete
     */
    where?: classroomsWhereInput
    /**
     * Limit how many classrooms to delete.
     */
    limit?: number
  }

  /**
   * classrooms.companies_classrooms_companiesTocompanies
   */
  export type classrooms$companies_classrooms_companiesTocompaniesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the companies
     */
    select?: companiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the companies
     */
    omit?: companiesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: companiesInclude<ExtArgs> | null
    where?: companiesWhereInput
  }

  /**
   * classrooms without action
   */
  export type classroomsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classrooms
     */
    select?: classroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classrooms
     */
    omit?: classroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classroomsInclude<ExtArgs> | null
  }


  /**
   * Model companies
   */

  export type AggregateCompanies = {
    _count: CompaniesCountAggregateOutputType | null
    _min: CompaniesMinAggregateOutputType | null
    _max: CompaniesMaxAggregateOutputType | null
  }

  export type CompaniesMinAggregateOutputType = {
    id: string | null
    name: string | null
    created_at: Date | null
    udpated_at: Date | null
    users: string | null
    address: string | null
  }

  export type CompaniesMaxAggregateOutputType = {
    id: string | null
    name: string | null
    created_at: Date | null
    udpated_at: Date | null
    users: string | null
    address: string | null
  }

  export type CompaniesCountAggregateOutputType = {
    id: number
    name: number
    created_at: number
    udpated_at: number
    users: number
    address: number
    _all: number
  }


  export type CompaniesMinAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    udpated_at?: true
    users?: true
    address?: true
  }

  export type CompaniesMaxAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    udpated_at?: true
    users?: true
    address?: true
  }

  export type CompaniesCountAggregateInputType = {
    id?: true
    name?: true
    created_at?: true
    udpated_at?: true
    users?: true
    address?: true
    _all?: true
  }

  export type CompaniesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which companies to aggregate.
     */
    where?: companiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of companies to fetch.
     */
    orderBy?: companiesOrderByWithRelationInput | companiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: companiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned companies
    **/
    _count?: true | CompaniesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompaniesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompaniesMaxAggregateInputType
  }

  export type GetCompaniesAggregateType<T extends CompaniesAggregateArgs> = {
        [P in keyof T & keyof AggregateCompanies]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompanies[P]>
      : GetScalarType<T[P], AggregateCompanies[P]>
  }




  export type companiesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: companiesWhereInput
    orderBy?: companiesOrderByWithAggregationInput | companiesOrderByWithAggregationInput[]
    by: CompaniesScalarFieldEnum[] | CompaniesScalarFieldEnum
    having?: companiesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompaniesCountAggregateInputType | true
    _min?: CompaniesMinAggregateInputType
    _max?: CompaniesMaxAggregateInputType
  }

  export type CompaniesGroupByOutputType = {
    id: string
    name: string
    created_at: Date | null
    udpated_at: Date | null
    users: string
    address: string
    _count: CompaniesCountAggregateOutputType | null
    _min: CompaniesMinAggregateOutputType | null
    _max: CompaniesMaxAggregateOutputType | null
  }

  type GetCompaniesGroupByPayload<T extends companiesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompaniesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompaniesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompaniesGroupByOutputType[P]>
            : GetScalarType<T[P], CompaniesGroupByOutputType[P]>
        }
      >
    >


  export type companiesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    created_at?: boolean
    udpated_at?: boolean
    users?: boolean
    address?: boolean
    classrooms_classrooms_companiesTocompanies?: boolean | companies$classrooms_classrooms_companiesTocompaniesArgs<ExtArgs>
    users_companies_usersTousers?: boolean | usersDefaultArgs<ExtArgs>
    configs_configs_companiesTocompanies?: boolean | companies$configs_configs_companiesTocompaniesArgs<ExtArgs>
    courses_courses_companiesTocompanies?: boolean | companies$courses_courses_companiesTocompaniesArgs<ExtArgs>
    registrations_registrations_companiesTocompanies?: boolean | companies$registrations_registrations_companiesTocompaniesArgs<ExtArgs>
    users_users_companiesTocompanies?: boolean | companies$users_users_companiesTocompaniesArgs<ExtArgs>
    _count?: boolean | CompaniesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["companies"]>

  export type companiesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    created_at?: boolean
    udpated_at?: boolean
    users?: boolean
    address?: boolean
    users_companies_usersTousers?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["companies"]>

  export type companiesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    created_at?: boolean
    udpated_at?: boolean
    users?: boolean
    address?: boolean
    users_companies_usersTousers?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["companies"]>

  export type companiesSelectScalar = {
    id?: boolean
    name?: boolean
    created_at?: boolean
    udpated_at?: boolean
    users?: boolean
    address?: boolean
  }

  export type companiesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "created_at" | "udpated_at" | "users" | "address", ExtArgs["result"]["companies"]>
  export type companiesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    classrooms_classrooms_companiesTocompanies?: boolean | companies$classrooms_classrooms_companiesTocompaniesArgs<ExtArgs>
    users_companies_usersTousers?: boolean | usersDefaultArgs<ExtArgs>
    configs_configs_companiesTocompanies?: boolean | companies$configs_configs_companiesTocompaniesArgs<ExtArgs>
    courses_courses_companiesTocompanies?: boolean | companies$courses_courses_companiesTocompaniesArgs<ExtArgs>
    registrations_registrations_companiesTocompanies?: boolean | companies$registrations_registrations_companiesTocompaniesArgs<ExtArgs>
    users_users_companiesTocompanies?: boolean | companies$users_users_companiesTocompaniesArgs<ExtArgs>
    _count?: boolean | CompaniesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type companiesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users_companies_usersTousers?: boolean | usersDefaultArgs<ExtArgs>
  }
  export type companiesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users_companies_usersTousers?: boolean | usersDefaultArgs<ExtArgs>
  }

  export type $companiesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "companies"
    objects: {
      classrooms_classrooms_companiesTocompanies: Prisma.$classroomsPayload<ExtArgs>[]
      users_companies_usersTousers: Prisma.$usersPayload<ExtArgs>
      configs_configs_companiesTocompanies: Prisma.$configsPayload<ExtArgs>[]
      courses_courses_companiesTocompanies: Prisma.$coursesPayload<ExtArgs>[]
      registrations_registrations_companiesTocompanies: Prisma.$registrationsPayload<ExtArgs>[]
      users_users_companiesTocompanies: Prisma.$usersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      created_at: Date | null
      udpated_at: Date | null
      users: string
      address: string
    }, ExtArgs["result"]["companies"]>
    composites: {}
  }

  type companiesGetPayload<S extends boolean | null | undefined | companiesDefaultArgs> = $Result.GetResult<Prisma.$companiesPayload, S>

  type companiesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<companiesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CompaniesCountAggregateInputType | true
    }

  export interface companiesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['companies'], meta: { name: 'companies' } }
    /**
     * Find zero or one Companies that matches the filter.
     * @param {companiesFindUniqueArgs} args - Arguments to find a Companies
     * @example
     * // Get one Companies
     * const companies = await prisma.companies.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends companiesFindUniqueArgs>(args: SelectSubset<T, companiesFindUniqueArgs<ExtArgs>>): Prisma__companiesClient<$Result.GetResult<Prisma.$companiesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Companies that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {companiesFindUniqueOrThrowArgs} args - Arguments to find a Companies
     * @example
     * // Get one Companies
     * const companies = await prisma.companies.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends companiesFindUniqueOrThrowArgs>(args: SelectSubset<T, companiesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__companiesClient<$Result.GetResult<Prisma.$companiesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {companiesFindFirstArgs} args - Arguments to find a Companies
     * @example
     * // Get one Companies
     * const companies = await prisma.companies.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends companiesFindFirstArgs>(args?: SelectSubset<T, companiesFindFirstArgs<ExtArgs>>): Prisma__companiesClient<$Result.GetResult<Prisma.$companiesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Companies that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {companiesFindFirstOrThrowArgs} args - Arguments to find a Companies
     * @example
     * // Get one Companies
     * const companies = await prisma.companies.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends companiesFindFirstOrThrowArgs>(args?: SelectSubset<T, companiesFindFirstOrThrowArgs<ExtArgs>>): Prisma__companiesClient<$Result.GetResult<Prisma.$companiesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {companiesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Companies
     * const companies = await prisma.companies.findMany()
     * 
     * // Get first 10 Companies
     * const companies = await prisma.companies.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companiesWithIdOnly = await prisma.companies.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends companiesFindManyArgs>(args?: SelectSubset<T, companiesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$companiesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Companies.
     * @param {companiesCreateArgs} args - Arguments to create a Companies.
     * @example
     * // Create one Companies
     * const Companies = await prisma.companies.create({
     *   data: {
     *     // ... data to create a Companies
     *   }
     * })
     * 
     */
    create<T extends companiesCreateArgs>(args: SelectSubset<T, companiesCreateArgs<ExtArgs>>): Prisma__companiesClient<$Result.GetResult<Prisma.$companiesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Companies.
     * @param {companiesCreateManyArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const companies = await prisma.companies.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends companiesCreateManyArgs>(args?: SelectSubset<T, companiesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Companies and returns the data saved in the database.
     * @param {companiesCreateManyAndReturnArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const companies = await prisma.companies.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Companies and only return the `id`
     * const companiesWithIdOnly = await prisma.companies.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends companiesCreateManyAndReturnArgs>(args?: SelectSubset<T, companiesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$companiesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Companies.
     * @param {companiesDeleteArgs} args - Arguments to delete one Companies.
     * @example
     * // Delete one Companies
     * const Companies = await prisma.companies.delete({
     *   where: {
     *     // ... filter to delete one Companies
     *   }
     * })
     * 
     */
    delete<T extends companiesDeleteArgs>(args: SelectSubset<T, companiesDeleteArgs<ExtArgs>>): Prisma__companiesClient<$Result.GetResult<Prisma.$companiesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Companies.
     * @param {companiesUpdateArgs} args - Arguments to update one Companies.
     * @example
     * // Update one Companies
     * const companies = await prisma.companies.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends companiesUpdateArgs>(args: SelectSubset<T, companiesUpdateArgs<ExtArgs>>): Prisma__companiesClient<$Result.GetResult<Prisma.$companiesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Companies.
     * @param {companiesDeleteManyArgs} args - Arguments to filter Companies to delete.
     * @example
     * // Delete a few Companies
     * const { count } = await prisma.companies.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends companiesDeleteManyArgs>(args?: SelectSubset<T, companiesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {companiesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Companies
     * const companies = await prisma.companies.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends companiesUpdateManyArgs>(args: SelectSubset<T, companiesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies and returns the data updated in the database.
     * @param {companiesUpdateManyAndReturnArgs} args - Arguments to update many Companies.
     * @example
     * // Update many Companies
     * const companies = await prisma.companies.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Companies and only return the `id`
     * const companiesWithIdOnly = await prisma.companies.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends companiesUpdateManyAndReturnArgs>(args: SelectSubset<T, companiesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$companiesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Companies.
     * @param {companiesUpsertArgs} args - Arguments to update or create a Companies.
     * @example
     * // Update or create a Companies
     * const companies = await prisma.companies.upsert({
     *   create: {
     *     // ... data to create a Companies
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Companies we want to update
     *   }
     * })
     */
    upsert<T extends companiesUpsertArgs>(args: SelectSubset<T, companiesUpsertArgs<ExtArgs>>): Prisma__companiesClient<$Result.GetResult<Prisma.$companiesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {companiesCountArgs} args - Arguments to filter Companies to count.
     * @example
     * // Count the number of Companies
     * const count = await prisma.companies.count({
     *   where: {
     *     // ... the filter for the Companies we want to count
     *   }
     * })
    **/
    count<T extends companiesCountArgs>(
      args?: Subset<T, companiesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompaniesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompaniesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompaniesAggregateArgs>(args: Subset<T, CompaniesAggregateArgs>): Prisma.PrismaPromise<GetCompaniesAggregateType<T>>

    /**
     * Group by Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {companiesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends companiesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: companiesGroupByArgs['orderBy'] }
        : { orderBy?: companiesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, companiesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompaniesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the companies model
   */
  readonly fields: companiesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for companies.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__companiesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    classrooms_classrooms_companiesTocompanies<T extends companies$classrooms_classrooms_companiesTocompaniesArgs<ExtArgs> = {}>(args?: Subset<T, companies$classrooms_classrooms_companiesTocompaniesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$classroomsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    users_companies_usersTousers<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    configs_configs_companiesTocompanies<T extends companies$configs_configs_companiesTocompaniesArgs<ExtArgs> = {}>(args?: Subset<T, companies$configs_configs_companiesTocompaniesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$configsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    courses_courses_companiesTocompanies<T extends companies$courses_courses_companiesTocompaniesArgs<ExtArgs> = {}>(args?: Subset<T, companies$courses_courses_companiesTocompaniesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    registrations_registrations_companiesTocompanies<T extends companies$registrations_registrations_companiesTocompaniesArgs<ExtArgs> = {}>(args?: Subset<T, companies$registrations_registrations_companiesTocompaniesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$registrationsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    users_users_companiesTocompanies<T extends companies$users_users_companiesTocompaniesArgs<ExtArgs> = {}>(args?: Subset<T, companies$users_users_companiesTocompaniesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the companies model
   */
  interface companiesFieldRefs {
    readonly id: FieldRef<"companies", 'String'>
    readonly name: FieldRef<"companies", 'String'>
    readonly created_at: FieldRef<"companies", 'DateTime'>
    readonly udpated_at: FieldRef<"companies", 'DateTime'>
    readonly users: FieldRef<"companies", 'String'>
    readonly address: FieldRef<"companies", 'String'>
  }
    

  // Custom InputTypes
  /**
   * companies findUnique
   */
  export type companiesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the companies
     */
    select?: companiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the companies
     */
    omit?: companiesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: companiesInclude<ExtArgs> | null
    /**
     * Filter, which companies to fetch.
     */
    where: companiesWhereUniqueInput
  }

  /**
   * companies findUniqueOrThrow
   */
  export type companiesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the companies
     */
    select?: companiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the companies
     */
    omit?: companiesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: companiesInclude<ExtArgs> | null
    /**
     * Filter, which companies to fetch.
     */
    where: companiesWhereUniqueInput
  }

  /**
   * companies findFirst
   */
  export type companiesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the companies
     */
    select?: companiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the companies
     */
    omit?: companiesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: companiesInclude<ExtArgs> | null
    /**
     * Filter, which companies to fetch.
     */
    where?: companiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of companies to fetch.
     */
    orderBy?: companiesOrderByWithRelationInput | companiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for companies.
     */
    cursor?: companiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of companies.
     */
    distinct?: CompaniesScalarFieldEnum | CompaniesScalarFieldEnum[]
  }

  /**
   * companies findFirstOrThrow
   */
  export type companiesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the companies
     */
    select?: companiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the companies
     */
    omit?: companiesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: companiesInclude<ExtArgs> | null
    /**
     * Filter, which companies to fetch.
     */
    where?: companiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of companies to fetch.
     */
    orderBy?: companiesOrderByWithRelationInput | companiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for companies.
     */
    cursor?: companiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of companies.
     */
    distinct?: CompaniesScalarFieldEnum | CompaniesScalarFieldEnum[]
  }

  /**
   * companies findMany
   */
  export type companiesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the companies
     */
    select?: companiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the companies
     */
    omit?: companiesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: companiesInclude<ExtArgs> | null
    /**
     * Filter, which companies to fetch.
     */
    where?: companiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of companies to fetch.
     */
    orderBy?: companiesOrderByWithRelationInput | companiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing companies.
     */
    cursor?: companiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` companies.
     */
    skip?: number
    distinct?: CompaniesScalarFieldEnum | CompaniesScalarFieldEnum[]
  }

  /**
   * companies create
   */
  export type companiesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the companies
     */
    select?: companiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the companies
     */
    omit?: companiesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: companiesInclude<ExtArgs> | null
    /**
     * The data needed to create a companies.
     */
    data: XOR<companiesCreateInput, companiesUncheckedCreateInput>
  }

  /**
   * companies createMany
   */
  export type companiesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many companies.
     */
    data: companiesCreateManyInput | companiesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * companies createManyAndReturn
   */
  export type companiesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the companies
     */
    select?: companiesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the companies
     */
    omit?: companiesOmit<ExtArgs> | null
    /**
     * The data used to create many companies.
     */
    data: companiesCreateManyInput | companiesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: companiesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * companies update
   */
  export type companiesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the companies
     */
    select?: companiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the companies
     */
    omit?: companiesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: companiesInclude<ExtArgs> | null
    /**
     * The data needed to update a companies.
     */
    data: XOR<companiesUpdateInput, companiesUncheckedUpdateInput>
    /**
     * Choose, which companies to update.
     */
    where: companiesWhereUniqueInput
  }

  /**
   * companies updateMany
   */
  export type companiesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update companies.
     */
    data: XOR<companiesUpdateManyMutationInput, companiesUncheckedUpdateManyInput>
    /**
     * Filter which companies to update
     */
    where?: companiesWhereInput
    /**
     * Limit how many companies to update.
     */
    limit?: number
  }

  /**
   * companies updateManyAndReturn
   */
  export type companiesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the companies
     */
    select?: companiesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the companies
     */
    omit?: companiesOmit<ExtArgs> | null
    /**
     * The data used to update companies.
     */
    data: XOR<companiesUpdateManyMutationInput, companiesUncheckedUpdateManyInput>
    /**
     * Filter which companies to update
     */
    where?: companiesWhereInput
    /**
     * Limit how many companies to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: companiesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * companies upsert
   */
  export type companiesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the companies
     */
    select?: companiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the companies
     */
    omit?: companiesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: companiesInclude<ExtArgs> | null
    /**
     * The filter to search for the companies to update in case it exists.
     */
    where: companiesWhereUniqueInput
    /**
     * In case the companies found by the `where` argument doesn't exist, create a new companies with this data.
     */
    create: XOR<companiesCreateInput, companiesUncheckedCreateInput>
    /**
     * In case the companies was found with the provided `where` argument, update it with this data.
     */
    update: XOR<companiesUpdateInput, companiesUncheckedUpdateInput>
  }

  /**
   * companies delete
   */
  export type companiesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the companies
     */
    select?: companiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the companies
     */
    omit?: companiesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: companiesInclude<ExtArgs> | null
    /**
     * Filter which companies to delete.
     */
    where: companiesWhereUniqueInput
  }

  /**
   * companies deleteMany
   */
  export type companiesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which companies to delete
     */
    where?: companiesWhereInput
    /**
     * Limit how many companies to delete.
     */
    limit?: number
  }

  /**
   * companies.classrooms_classrooms_companiesTocompanies
   */
  export type companies$classrooms_classrooms_companiesTocompaniesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classrooms
     */
    select?: classroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classrooms
     */
    omit?: classroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classroomsInclude<ExtArgs> | null
    where?: classroomsWhereInput
    orderBy?: classroomsOrderByWithRelationInput | classroomsOrderByWithRelationInput[]
    cursor?: classroomsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassroomsScalarFieldEnum | ClassroomsScalarFieldEnum[]
  }

  /**
   * companies.configs_configs_companiesTocompanies
   */
  export type companies$configs_configs_companiesTocompaniesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the configs
     */
    select?: configsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the configs
     */
    omit?: configsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: configsInclude<ExtArgs> | null
    where?: configsWhereInput
    orderBy?: configsOrderByWithRelationInput | configsOrderByWithRelationInput[]
    cursor?: configsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ConfigsScalarFieldEnum | ConfigsScalarFieldEnum[]
  }

  /**
   * companies.courses_courses_companiesTocompanies
   */
  export type companies$courses_courses_companiesTocompaniesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courses
     */
    omit?: coursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
    where?: coursesWhereInput
    orderBy?: coursesOrderByWithRelationInput | coursesOrderByWithRelationInput[]
    cursor?: coursesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CoursesScalarFieldEnum | CoursesScalarFieldEnum[]
  }

  /**
   * companies.registrations_registrations_companiesTocompanies
   */
  export type companies$registrations_registrations_companiesTocompaniesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registrations
     */
    select?: registrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the registrations
     */
    omit?: registrationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registrationsInclude<ExtArgs> | null
    where?: registrationsWhereInput
    orderBy?: registrationsOrderByWithRelationInput | registrationsOrderByWithRelationInput[]
    cursor?: registrationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RegistrationsScalarFieldEnum | RegistrationsScalarFieldEnum[]
  }

  /**
   * companies.users_users_companiesTocompanies
   */
  export type companies$users_users_companiesTocompaniesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    cursor?: usersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * companies without action
   */
  export type companiesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the companies
     */
    select?: companiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the companies
     */
    omit?: companiesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: companiesInclude<ExtArgs> | null
  }


  /**
   * Model configs
   */

  export type AggregateConfigs = {
    _count: ConfigsCountAggregateOutputType | null
    _avg: ConfigsAvgAggregateOutputType | null
    _sum: ConfigsSumAggregateOutputType | null
    _min: ConfigsMinAggregateOutputType | null
    _max: ConfigsMaxAggregateOutputType | null
  }

  export type ConfigsAvgAggregateOutputType = {
    registrations_time: Decimal | null
  }

  export type ConfigsSumAggregateOutputType = {
    registrations_time: Decimal | null
  }

  export type ConfigsMinAggregateOutputType = {
    id: string | null
    registrations_time: Decimal | null
    companies: string | null
  }

  export type ConfigsMaxAggregateOutputType = {
    id: string | null
    registrations_time: Decimal | null
    companies: string | null
  }

  export type ConfigsCountAggregateOutputType = {
    id: number
    registrations_time: number
    companies: number
    _all: number
  }


  export type ConfigsAvgAggregateInputType = {
    registrations_time?: true
  }

  export type ConfigsSumAggregateInputType = {
    registrations_time?: true
  }

  export type ConfigsMinAggregateInputType = {
    id?: true
    registrations_time?: true
    companies?: true
  }

  export type ConfigsMaxAggregateInputType = {
    id?: true
    registrations_time?: true
    companies?: true
  }

  export type ConfigsCountAggregateInputType = {
    id?: true
    registrations_time?: true
    companies?: true
    _all?: true
  }

  export type ConfigsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which configs to aggregate.
     */
    where?: configsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of configs to fetch.
     */
    orderBy?: configsOrderByWithRelationInput | configsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: configsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` configs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` configs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned configs
    **/
    _count?: true | ConfigsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ConfigsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ConfigsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConfigsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConfigsMaxAggregateInputType
  }

  export type GetConfigsAggregateType<T extends ConfigsAggregateArgs> = {
        [P in keyof T & keyof AggregateConfigs]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConfigs[P]>
      : GetScalarType<T[P], AggregateConfigs[P]>
  }




  export type configsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: configsWhereInput
    orderBy?: configsOrderByWithAggregationInput | configsOrderByWithAggregationInput[]
    by: ConfigsScalarFieldEnum[] | ConfigsScalarFieldEnum
    having?: configsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConfigsCountAggregateInputType | true
    _avg?: ConfigsAvgAggregateInputType
    _sum?: ConfigsSumAggregateInputType
    _min?: ConfigsMinAggregateInputType
    _max?: ConfigsMaxAggregateInputType
  }

  export type ConfigsGroupByOutputType = {
    id: string
    registrations_time: Decimal
    companies: string
    _count: ConfigsCountAggregateOutputType | null
    _avg: ConfigsAvgAggregateOutputType | null
    _sum: ConfigsSumAggregateOutputType | null
    _min: ConfigsMinAggregateOutputType | null
    _max: ConfigsMaxAggregateOutputType | null
  }

  type GetConfigsGroupByPayload<T extends configsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConfigsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConfigsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConfigsGroupByOutputType[P]>
            : GetScalarType<T[P], ConfigsGroupByOutputType[P]>
        }
      >
    >


  export type configsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    registrations_time?: boolean
    companies?: boolean
    companies_configs_companiesTocompanies?: boolean | companiesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["configs"]>

  export type configsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    registrations_time?: boolean
    companies?: boolean
    companies_configs_companiesTocompanies?: boolean | companiesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["configs"]>

  export type configsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    registrations_time?: boolean
    companies?: boolean
    companies_configs_companiesTocompanies?: boolean | companiesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["configs"]>

  export type configsSelectScalar = {
    id?: boolean
    registrations_time?: boolean
    companies?: boolean
  }

  export type configsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "registrations_time" | "companies", ExtArgs["result"]["configs"]>
  export type configsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    companies_configs_companiesTocompanies?: boolean | companiesDefaultArgs<ExtArgs>
  }
  export type configsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    companies_configs_companiesTocompanies?: boolean | companiesDefaultArgs<ExtArgs>
  }
  export type configsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    companies_configs_companiesTocompanies?: boolean | companiesDefaultArgs<ExtArgs>
  }

  export type $configsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "configs"
    objects: {
      companies_configs_companiesTocompanies: Prisma.$companiesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      registrations_time: Prisma.Decimal
      companies: string
    }, ExtArgs["result"]["configs"]>
    composites: {}
  }

  type configsGetPayload<S extends boolean | null | undefined | configsDefaultArgs> = $Result.GetResult<Prisma.$configsPayload, S>

  type configsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<configsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ConfigsCountAggregateInputType | true
    }

  export interface configsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['configs'], meta: { name: 'configs' } }
    /**
     * Find zero or one Configs that matches the filter.
     * @param {configsFindUniqueArgs} args - Arguments to find a Configs
     * @example
     * // Get one Configs
     * const configs = await prisma.configs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends configsFindUniqueArgs>(args: SelectSubset<T, configsFindUniqueArgs<ExtArgs>>): Prisma__configsClient<$Result.GetResult<Prisma.$configsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Configs that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {configsFindUniqueOrThrowArgs} args - Arguments to find a Configs
     * @example
     * // Get one Configs
     * const configs = await prisma.configs.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends configsFindUniqueOrThrowArgs>(args: SelectSubset<T, configsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__configsClient<$Result.GetResult<Prisma.$configsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Configs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {configsFindFirstArgs} args - Arguments to find a Configs
     * @example
     * // Get one Configs
     * const configs = await prisma.configs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends configsFindFirstArgs>(args?: SelectSubset<T, configsFindFirstArgs<ExtArgs>>): Prisma__configsClient<$Result.GetResult<Prisma.$configsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Configs that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {configsFindFirstOrThrowArgs} args - Arguments to find a Configs
     * @example
     * // Get one Configs
     * const configs = await prisma.configs.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends configsFindFirstOrThrowArgs>(args?: SelectSubset<T, configsFindFirstOrThrowArgs<ExtArgs>>): Prisma__configsClient<$Result.GetResult<Prisma.$configsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Configs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {configsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Configs
     * const configs = await prisma.configs.findMany()
     * 
     * // Get first 10 Configs
     * const configs = await prisma.configs.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const configsWithIdOnly = await prisma.configs.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends configsFindManyArgs>(args?: SelectSubset<T, configsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$configsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Configs.
     * @param {configsCreateArgs} args - Arguments to create a Configs.
     * @example
     * // Create one Configs
     * const Configs = await prisma.configs.create({
     *   data: {
     *     // ... data to create a Configs
     *   }
     * })
     * 
     */
    create<T extends configsCreateArgs>(args: SelectSubset<T, configsCreateArgs<ExtArgs>>): Prisma__configsClient<$Result.GetResult<Prisma.$configsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Configs.
     * @param {configsCreateManyArgs} args - Arguments to create many Configs.
     * @example
     * // Create many Configs
     * const configs = await prisma.configs.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends configsCreateManyArgs>(args?: SelectSubset<T, configsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Configs and returns the data saved in the database.
     * @param {configsCreateManyAndReturnArgs} args - Arguments to create many Configs.
     * @example
     * // Create many Configs
     * const configs = await prisma.configs.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Configs and only return the `id`
     * const configsWithIdOnly = await prisma.configs.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends configsCreateManyAndReturnArgs>(args?: SelectSubset<T, configsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$configsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Configs.
     * @param {configsDeleteArgs} args - Arguments to delete one Configs.
     * @example
     * // Delete one Configs
     * const Configs = await prisma.configs.delete({
     *   where: {
     *     // ... filter to delete one Configs
     *   }
     * })
     * 
     */
    delete<T extends configsDeleteArgs>(args: SelectSubset<T, configsDeleteArgs<ExtArgs>>): Prisma__configsClient<$Result.GetResult<Prisma.$configsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Configs.
     * @param {configsUpdateArgs} args - Arguments to update one Configs.
     * @example
     * // Update one Configs
     * const configs = await prisma.configs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends configsUpdateArgs>(args: SelectSubset<T, configsUpdateArgs<ExtArgs>>): Prisma__configsClient<$Result.GetResult<Prisma.$configsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Configs.
     * @param {configsDeleteManyArgs} args - Arguments to filter Configs to delete.
     * @example
     * // Delete a few Configs
     * const { count } = await prisma.configs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends configsDeleteManyArgs>(args?: SelectSubset<T, configsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Configs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {configsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Configs
     * const configs = await prisma.configs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends configsUpdateManyArgs>(args: SelectSubset<T, configsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Configs and returns the data updated in the database.
     * @param {configsUpdateManyAndReturnArgs} args - Arguments to update many Configs.
     * @example
     * // Update many Configs
     * const configs = await prisma.configs.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Configs and only return the `id`
     * const configsWithIdOnly = await prisma.configs.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends configsUpdateManyAndReturnArgs>(args: SelectSubset<T, configsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$configsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Configs.
     * @param {configsUpsertArgs} args - Arguments to update or create a Configs.
     * @example
     * // Update or create a Configs
     * const configs = await prisma.configs.upsert({
     *   create: {
     *     // ... data to create a Configs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Configs we want to update
     *   }
     * })
     */
    upsert<T extends configsUpsertArgs>(args: SelectSubset<T, configsUpsertArgs<ExtArgs>>): Prisma__configsClient<$Result.GetResult<Prisma.$configsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Configs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {configsCountArgs} args - Arguments to filter Configs to count.
     * @example
     * // Count the number of Configs
     * const count = await prisma.configs.count({
     *   where: {
     *     // ... the filter for the Configs we want to count
     *   }
     * })
    **/
    count<T extends configsCountArgs>(
      args?: Subset<T, configsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConfigsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Configs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConfigsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConfigsAggregateArgs>(args: Subset<T, ConfigsAggregateArgs>): Prisma.PrismaPromise<GetConfigsAggregateType<T>>

    /**
     * Group by Configs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {configsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends configsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: configsGroupByArgs['orderBy'] }
        : { orderBy?: configsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, configsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConfigsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the configs model
   */
  readonly fields: configsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for configs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__configsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    companies_configs_companiesTocompanies<T extends companiesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, companiesDefaultArgs<ExtArgs>>): Prisma__companiesClient<$Result.GetResult<Prisma.$companiesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the configs model
   */
  interface configsFieldRefs {
    readonly id: FieldRef<"configs", 'String'>
    readonly registrations_time: FieldRef<"configs", 'Decimal'>
    readonly companies: FieldRef<"configs", 'String'>
  }
    

  // Custom InputTypes
  /**
   * configs findUnique
   */
  export type configsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the configs
     */
    select?: configsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the configs
     */
    omit?: configsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: configsInclude<ExtArgs> | null
    /**
     * Filter, which configs to fetch.
     */
    where: configsWhereUniqueInput
  }

  /**
   * configs findUniqueOrThrow
   */
  export type configsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the configs
     */
    select?: configsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the configs
     */
    omit?: configsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: configsInclude<ExtArgs> | null
    /**
     * Filter, which configs to fetch.
     */
    where: configsWhereUniqueInput
  }

  /**
   * configs findFirst
   */
  export type configsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the configs
     */
    select?: configsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the configs
     */
    omit?: configsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: configsInclude<ExtArgs> | null
    /**
     * Filter, which configs to fetch.
     */
    where?: configsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of configs to fetch.
     */
    orderBy?: configsOrderByWithRelationInput | configsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for configs.
     */
    cursor?: configsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` configs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` configs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of configs.
     */
    distinct?: ConfigsScalarFieldEnum | ConfigsScalarFieldEnum[]
  }

  /**
   * configs findFirstOrThrow
   */
  export type configsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the configs
     */
    select?: configsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the configs
     */
    omit?: configsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: configsInclude<ExtArgs> | null
    /**
     * Filter, which configs to fetch.
     */
    where?: configsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of configs to fetch.
     */
    orderBy?: configsOrderByWithRelationInput | configsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for configs.
     */
    cursor?: configsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` configs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` configs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of configs.
     */
    distinct?: ConfigsScalarFieldEnum | ConfigsScalarFieldEnum[]
  }

  /**
   * configs findMany
   */
  export type configsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the configs
     */
    select?: configsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the configs
     */
    omit?: configsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: configsInclude<ExtArgs> | null
    /**
     * Filter, which configs to fetch.
     */
    where?: configsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of configs to fetch.
     */
    orderBy?: configsOrderByWithRelationInput | configsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing configs.
     */
    cursor?: configsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` configs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` configs.
     */
    skip?: number
    distinct?: ConfigsScalarFieldEnum | ConfigsScalarFieldEnum[]
  }

  /**
   * configs create
   */
  export type configsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the configs
     */
    select?: configsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the configs
     */
    omit?: configsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: configsInclude<ExtArgs> | null
    /**
     * The data needed to create a configs.
     */
    data: XOR<configsCreateInput, configsUncheckedCreateInput>
  }

  /**
   * configs createMany
   */
  export type configsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many configs.
     */
    data: configsCreateManyInput | configsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * configs createManyAndReturn
   */
  export type configsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the configs
     */
    select?: configsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the configs
     */
    omit?: configsOmit<ExtArgs> | null
    /**
     * The data used to create many configs.
     */
    data: configsCreateManyInput | configsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: configsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * configs update
   */
  export type configsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the configs
     */
    select?: configsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the configs
     */
    omit?: configsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: configsInclude<ExtArgs> | null
    /**
     * The data needed to update a configs.
     */
    data: XOR<configsUpdateInput, configsUncheckedUpdateInput>
    /**
     * Choose, which configs to update.
     */
    where: configsWhereUniqueInput
  }

  /**
   * configs updateMany
   */
  export type configsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update configs.
     */
    data: XOR<configsUpdateManyMutationInput, configsUncheckedUpdateManyInput>
    /**
     * Filter which configs to update
     */
    where?: configsWhereInput
    /**
     * Limit how many configs to update.
     */
    limit?: number
  }

  /**
   * configs updateManyAndReturn
   */
  export type configsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the configs
     */
    select?: configsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the configs
     */
    omit?: configsOmit<ExtArgs> | null
    /**
     * The data used to update configs.
     */
    data: XOR<configsUpdateManyMutationInput, configsUncheckedUpdateManyInput>
    /**
     * Filter which configs to update
     */
    where?: configsWhereInput
    /**
     * Limit how many configs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: configsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * configs upsert
   */
  export type configsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the configs
     */
    select?: configsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the configs
     */
    omit?: configsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: configsInclude<ExtArgs> | null
    /**
     * The filter to search for the configs to update in case it exists.
     */
    where: configsWhereUniqueInput
    /**
     * In case the configs found by the `where` argument doesn't exist, create a new configs with this data.
     */
    create: XOR<configsCreateInput, configsUncheckedCreateInput>
    /**
     * In case the configs was found with the provided `where` argument, update it with this data.
     */
    update: XOR<configsUpdateInput, configsUncheckedUpdateInput>
  }

  /**
   * configs delete
   */
  export type configsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the configs
     */
    select?: configsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the configs
     */
    omit?: configsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: configsInclude<ExtArgs> | null
    /**
     * Filter which configs to delete.
     */
    where: configsWhereUniqueInput
  }

  /**
   * configs deleteMany
   */
  export type configsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which configs to delete
     */
    where?: configsWhereInput
    /**
     * Limit how many configs to delete.
     */
    limit?: number
  }

  /**
   * configs without action
   */
  export type configsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the configs
     */
    select?: configsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the configs
     */
    omit?: configsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: configsInclude<ExtArgs> | null
  }


  /**
   * Model courses
   */

  export type AggregateCourses = {
    _count: CoursesCountAggregateOutputType | null
    _avg: CoursesAvgAggregateOutputType | null
    _sum: CoursesSumAggregateOutputType | null
    _min: CoursesMinAggregateOutputType | null
    _max: CoursesMaxAggregateOutputType | null
  }

  export type CoursesAvgAggregateOutputType = {
    registration_value: Decimal | null
    workload: Decimal | null
    monthly_fee_value: Decimal | null
    minimum_grade: Decimal | null
    maximum_grade: Decimal | null
    minimum_frequency: Decimal | null
  }

  export type CoursesSumAggregateOutputType = {
    registration_value: Decimal | null
    workload: Decimal | null
    monthly_fee_value: Decimal | null
    minimum_grade: Decimal | null
    maximum_grade: Decimal | null
    minimum_frequency: Decimal | null
  }

  export type CoursesMinAggregateOutputType = {
    id: string | null
    description: string | null
    created_at: Date | null
    name: string | null
    registration_value: Decimal | null
    companies: string | null
    workload: Decimal | null
    monthly_fee_value: Decimal | null
    minimum_grade: Decimal | null
    maximum_grade: Decimal | null
    minimum_frequency: Decimal | null
    syllabus: Uint8Array | null
  }

  export type CoursesMaxAggregateOutputType = {
    id: string | null
    description: string | null
    created_at: Date | null
    name: string | null
    registration_value: Decimal | null
    companies: string | null
    workload: Decimal | null
    monthly_fee_value: Decimal | null
    minimum_grade: Decimal | null
    maximum_grade: Decimal | null
    minimum_frequency: Decimal | null
    syllabus: Uint8Array | null
  }

  export type CoursesCountAggregateOutputType = {
    id: number
    description: number
    created_at: number
    name: number
    registration_value: number
    companies: number
    workload: number
    monthly_fee_value: number
    minimum_grade: number
    maximum_grade: number
    minimum_frequency: number
    syllabus: number
    _all: number
  }


  export type CoursesAvgAggregateInputType = {
    registration_value?: true
    workload?: true
    monthly_fee_value?: true
    minimum_grade?: true
    maximum_grade?: true
    minimum_frequency?: true
  }

  export type CoursesSumAggregateInputType = {
    registration_value?: true
    workload?: true
    monthly_fee_value?: true
    minimum_grade?: true
    maximum_grade?: true
    minimum_frequency?: true
  }

  export type CoursesMinAggregateInputType = {
    id?: true
    description?: true
    created_at?: true
    name?: true
    registration_value?: true
    companies?: true
    workload?: true
    monthly_fee_value?: true
    minimum_grade?: true
    maximum_grade?: true
    minimum_frequency?: true
    syllabus?: true
  }

  export type CoursesMaxAggregateInputType = {
    id?: true
    description?: true
    created_at?: true
    name?: true
    registration_value?: true
    companies?: true
    workload?: true
    monthly_fee_value?: true
    minimum_grade?: true
    maximum_grade?: true
    minimum_frequency?: true
    syllabus?: true
  }

  export type CoursesCountAggregateInputType = {
    id?: true
    description?: true
    created_at?: true
    name?: true
    registration_value?: true
    companies?: true
    workload?: true
    monthly_fee_value?: true
    minimum_grade?: true
    maximum_grade?: true
    minimum_frequency?: true
    syllabus?: true
    _all?: true
  }

  export type CoursesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which courses to aggregate.
     */
    where?: coursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of courses to fetch.
     */
    orderBy?: coursesOrderByWithRelationInput | coursesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: coursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned courses
    **/
    _count?: true | CoursesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CoursesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CoursesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CoursesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CoursesMaxAggregateInputType
  }

  export type GetCoursesAggregateType<T extends CoursesAggregateArgs> = {
        [P in keyof T & keyof AggregateCourses]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourses[P]>
      : GetScalarType<T[P], AggregateCourses[P]>
  }




  export type coursesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: coursesWhereInput
    orderBy?: coursesOrderByWithAggregationInput | coursesOrderByWithAggregationInput[]
    by: CoursesScalarFieldEnum[] | CoursesScalarFieldEnum
    having?: coursesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CoursesCountAggregateInputType | true
    _avg?: CoursesAvgAggregateInputType
    _sum?: CoursesSumAggregateInputType
    _min?: CoursesMinAggregateInputType
    _max?: CoursesMaxAggregateInputType
  }

  export type CoursesGroupByOutputType = {
    id: string
    description: string | null
    created_at: Date
    name: string
    registration_value: Decimal
    companies: string
    workload: Decimal
    monthly_fee_value: Decimal
    minimum_grade: Decimal
    maximum_grade: Decimal
    minimum_frequency: Decimal
    syllabus: Uint8Array | null
    _count: CoursesCountAggregateOutputType | null
    _avg: CoursesAvgAggregateOutputType | null
    _sum: CoursesSumAggregateOutputType | null
    _min: CoursesMinAggregateOutputType | null
    _max: CoursesMaxAggregateOutputType | null
  }

  type GetCoursesGroupByPayload<T extends coursesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CoursesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CoursesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CoursesGroupByOutputType[P]>
            : GetScalarType<T[P], CoursesGroupByOutputType[P]>
        }
      >
    >


  export type coursesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    created_at?: boolean
    name?: boolean
    registration_value?: boolean
    companies?: boolean
    workload?: boolean
    monthly_fee_value?: boolean
    minimum_grade?: boolean
    maximum_grade?: boolean
    minimum_frequency?: boolean
    syllabus?: boolean
    Renamedclass_Renamedclass_coursesTocourses?: boolean | courses$Renamedclass_Renamedclass_coursesTocoursesArgs<ExtArgs>
    companies_courses_companiesTocompanies?: boolean | companiesDefaultArgs<ExtArgs>
    levels_levels_coursesTocourses?: boolean | courses$levels_levels_coursesTocoursesArgs<ExtArgs>
    _count?: boolean | CoursesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["courses"]>

  export type coursesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    created_at?: boolean
    name?: boolean
    registration_value?: boolean
    companies?: boolean
    workload?: boolean
    monthly_fee_value?: boolean
    minimum_grade?: boolean
    maximum_grade?: boolean
    minimum_frequency?: boolean
    syllabus?: boolean
    companies_courses_companiesTocompanies?: boolean | companiesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["courses"]>

  export type coursesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    created_at?: boolean
    name?: boolean
    registration_value?: boolean
    companies?: boolean
    workload?: boolean
    monthly_fee_value?: boolean
    minimum_grade?: boolean
    maximum_grade?: boolean
    minimum_frequency?: boolean
    syllabus?: boolean
    companies_courses_companiesTocompanies?: boolean | companiesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["courses"]>

  export type coursesSelectScalar = {
    id?: boolean
    description?: boolean
    created_at?: boolean
    name?: boolean
    registration_value?: boolean
    companies?: boolean
    workload?: boolean
    monthly_fee_value?: boolean
    minimum_grade?: boolean
    maximum_grade?: boolean
    minimum_frequency?: boolean
    syllabus?: boolean
  }

  export type coursesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "description" | "created_at" | "name" | "registration_value" | "companies" | "workload" | "monthly_fee_value" | "minimum_grade" | "maximum_grade" | "minimum_frequency" | "syllabus", ExtArgs["result"]["courses"]>
  export type coursesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Renamedclass_Renamedclass_coursesTocourses?: boolean | courses$Renamedclass_Renamedclass_coursesTocoursesArgs<ExtArgs>
    companies_courses_companiesTocompanies?: boolean | companiesDefaultArgs<ExtArgs>
    levels_levels_coursesTocourses?: boolean | courses$levels_levels_coursesTocoursesArgs<ExtArgs>
    _count?: boolean | CoursesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type coursesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    companies_courses_companiesTocompanies?: boolean | companiesDefaultArgs<ExtArgs>
  }
  export type coursesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    companies_courses_companiesTocompanies?: boolean | companiesDefaultArgs<ExtArgs>
  }

  export type $coursesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "courses"
    objects: {
      Renamedclass_Renamedclass_coursesTocourses: Prisma.$RenamedclassPayload<ExtArgs>[]
      companies_courses_companiesTocompanies: Prisma.$companiesPayload<ExtArgs>
      levels_levels_coursesTocourses: Prisma.$levelsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      description: string | null
      created_at: Date
      name: string
      registration_value: Prisma.Decimal
      companies: string
      workload: Prisma.Decimal
      monthly_fee_value: Prisma.Decimal
      minimum_grade: Prisma.Decimal
      maximum_grade: Prisma.Decimal
      minimum_frequency: Prisma.Decimal
      syllabus: Uint8Array | null
    }, ExtArgs["result"]["courses"]>
    composites: {}
  }

  type coursesGetPayload<S extends boolean | null | undefined | coursesDefaultArgs> = $Result.GetResult<Prisma.$coursesPayload, S>

  type coursesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<coursesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CoursesCountAggregateInputType | true
    }

  export interface coursesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['courses'], meta: { name: 'courses' } }
    /**
     * Find zero or one Courses that matches the filter.
     * @param {coursesFindUniqueArgs} args - Arguments to find a Courses
     * @example
     * // Get one Courses
     * const courses = await prisma.courses.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends coursesFindUniqueArgs>(args: SelectSubset<T, coursesFindUniqueArgs<ExtArgs>>): Prisma__coursesClient<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Courses that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {coursesFindUniqueOrThrowArgs} args - Arguments to find a Courses
     * @example
     * // Get one Courses
     * const courses = await prisma.courses.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends coursesFindUniqueOrThrowArgs>(args: SelectSubset<T, coursesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__coursesClient<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Courses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coursesFindFirstArgs} args - Arguments to find a Courses
     * @example
     * // Get one Courses
     * const courses = await prisma.courses.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends coursesFindFirstArgs>(args?: SelectSubset<T, coursesFindFirstArgs<ExtArgs>>): Prisma__coursesClient<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Courses that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coursesFindFirstOrThrowArgs} args - Arguments to find a Courses
     * @example
     * // Get one Courses
     * const courses = await prisma.courses.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends coursesFindFirstOrThrowArgs>(args?: SelectSubset<T, coursesFindFirstOrThrowArgs<ExtArgs>>): Prisma__coursesClient<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Courses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coursesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Courses
     * const courses = await prisma.courses.findMany()
     * 
     * // Get first 10 Courses
     * const courses = await prisma.courses.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const coursesWithIdOnly = await prisma.courses.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends coursesFindManyArgs>(args?: SelectSubset<T, coursesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Courses.
     * @param {coursesCreateArgs} args - Arguments to create a Courses.
     * @example
     * // Create one Courses
     * const Courses = await prisma.courses.create({
     *   data: {
     *     // ... data to create a Courses
     *   }
     * })
     * 
     */
    create<T extends coursesCreateArgs>(args: SelectSubset<T, coursesCreateArgs<ExtArgs>>): Prisma__coursesClient<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Courses.
     * @param {coursesCreateManyArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const courses = await prisma.courses.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends coursesCreateManyArgs>(args?: SelectSubset<T, coursesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Courses and returns the data saved in the database.
     * @param {coursesCreateManyAndReturnArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const courses = await prisma.courses.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Courses and only return the `id`
     * const coursesWithIdOnly = await prisma.courses.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends coursesCreateManyAndReturnArgs>(args?: SelectSubset<T, coursesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Courses.
     * @param {coursesDeleteArgs} args - Arguments to delete one Courses.
     * @example
     * // Delete one Courses
     * const Courses = await prisma.courses.delete({
     *   where: {
     *     // ... filter to delete one Courses
     *   }
     * })
     * 
     */
    delete<T extends coursesDeleteArgs>(args: SelectSubset<T, coursesDeleteArgs<ExtArgs>>): Prisma__coursesClient<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Courses.
     * @param {coursesUpdateArgs} args - Arguments to update one Courses.
     * @example
     * // Update one Courses
     * const courses = await prisma.courses.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends coursesUpdateArgs>(args: SelectSubset<T, coursesUpdateArgs<ExtArgs>>): Prisma__coursesClient<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Courses.
     * @param {coursesDeleteManyArgs} args - Arguments to filter Courses to delete.
     * @example
     * // Delete a few Courses
     * const { count } = await prisma.courses.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends coursesDeleteManyArgs>(args?: SelectSubset<T, coursesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coursesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Courses
     * const courses = await prisma.courses.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends coursesUpdateManyArgs>(args: SelectSubset<T, coursesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses and returns the data updated in the database.
     * @param {coursesUpdateManyAndReturnArgs} args - Arguments to update many Courses.
     * @example
     * // Update many Courses
     * const courses = await prisma.courses.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Courses and only return the `id`
     * const coursesWithIdOnly = await prisma.courses.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends coursesUpdateManyAndReturnArgs>(args: SelectSubset<T, coursesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Courses.
     * @param {coursesUpsertArgs} args - Arguments to update or create a Courses.
     * @example
     * // Update or create a Courses
     * const courses = await prisma.courses.upsert({
     *   create: {
     *     // ... data to create a Courses
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Courses we want to update
     *   }
     * })
     */
    upsert<T extends coursesUpsertArgs>(args: SelectSubset<T, coursesUpsertArgs<ExtArgs>>): Prisma__coursesClient<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coursesCountArgs} args - Arguments to filter Courses to count.
     * @example
     * // Count the number of Courses
     * const count = await prisma.courses.count({
     *   where: {
     *     // ... the filter for the Courses we want to count
     *   }
     * })
    **/
    count<T extends coursesCountArgs>(
      args?: Subset<T, coursesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CoursesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CoursesAggregateArgs>(args: Subset<T, CoursesAggregateArgs>): Prisma.PrismaPromise<GetCoursesAggregateType<T>>

    /**
     * Group by Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coursesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends coursesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: coursesGroupByArgs['orderBy'] }
        : { orderBy?: coursesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, coursesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCoursesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the courses model
   */
  readonly fields: coursesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for courses.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__coursesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Renamedclass_Renamedclass_coursesTocourses<T extends courses$Renamedclass_Renamedclass_coursesTocoursesArgs<ExtArgs> = {}>(args?: Subset<T, courses$Renamedclass_Renamedclass_coursesTocoursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RenamedclassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    companies_courses_companiesTocompanies<T extends companiesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, companiesDefaultArgs<ExtArgs>>): Prisma__companiesClient<$Result.GetResult<Prisma.$companiesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    levels_levels_coursesTocourses<T extends courses$levels_levels_coursesTocoursesArgs<ExtArgs> = {}>(args?: Subset<T, courses$levels_levels_coursesTocoursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$levelsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the courses model
   */
  interface coursesFieldRefs {
    readonly id: FieldRef<"courses", 'String'>
    readonly description: FieldRef<"courses", 'String'>
    readonly created_at: FieldRef<"courses", 'DateTime'>
    readonly name: FieldRef<"courses", 'String'>
    readonly registration_value: FieldRef<"courses", 'Decimal'>
    readonly companies: FieldRef<"courses", 'String'>
    readonly workload: FieldRef<"courses", 'Decimal'>
    readonly monthly_fee_value: FieldRef<"courses", 'Decimal'>
    readonly minimum_grade: FieldRef<"courses", 'Decimal'>
    readonly maximum_grade: FieldRef<"courses", 'Decimal'>
    readonly minimum_frequency: FieldRef<"courses", 'Decimal'>
    readonly syllabus: FieldRef<"courses", 'Bytes'>
  }
    

  // Custom InputTypes
  /**
   * courses findUnique
   */
  export type coursesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courses
     */
    omit?: coursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
    /**
     * Filter, which courses to fetch.
     */
    where: coursesWhereUniqueInput
  }

  /**
   * courses findUniqueOrThrow
   */
  export type coursesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courses
     */
    omit?: coursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
    /**
     * Filter, which courses to fetch.
     */
    where: coursesWhereUniqueInput
  }

  /**
   * courses findFirst
   */
  export type coursesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courses
     */
    omit?: coursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
    /**
     * Filter, which courses to fetch.
     */
    where?: coursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of courses to fetch.
     */
    orderBy?: coursesOrderByWithRelationInput | coursesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for courses.
     */
    cursor?: coursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of courses.
     */
    distinct?: CoursesScalarFieldEnum | CoursesScalarFieldEnum[]
  }

  /**
   * courses findFirstOrThrow
   */
  export type coursesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courses
     */
    omit?: coursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
    /**
     * Filter, which courses to fetch.
     */
    where?: coursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of courses to fetch.
     */
    orderBy?: coursesOrderByWithRelationInput | coursesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for courses.
     */
    cursor?: coursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of courses.
     */
    distinct?: CoursesScalarFieldEnum | CoursesScalarFieldEnum[]
  }

  /**
   * courses findMany
   */
  export type coursesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courses
     */
    omit?: coursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
    /**
     * Filter, which courses to fetch.
     */
    where?: coursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of courses to fetch.
     */
    orderBy?: coursesOrderByWithRelationInput | coursesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing courses.
     */
    cursor?: coursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` courses.
     */
    skip?: number
    distinct?: CoursesScalarFieldEnum | CoursesScalarFieldEnum[]
  }

  /**
   * courses create
   */
  export type coursesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courses
     */
    omit?: coursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
    /**
     * The data needed to create a courses.
     */
    data: XOR<coursesCreateInput, coursesUncheckedCreateInput>
  }

  /**
   * courses createMany
   */
  export type coursesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many courses.
     */
    data: coursesCreateManyInput | coursesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * courses createManyAndReturn
   */
  export type coursesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the courses
     */
    omit?: coursesOmit<ExtArgs> | null
    /**
     * The data used to create many courses.
     */
    data: coursesCreateManyInput | coursesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * courses update
   */
  export type coursesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courses
     */
    omit?: coursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
    /**
     * The data needed to update a courses.
     */
    data: XOR<coursesUpdateInput, coursesUncheckedUpdateInput>
    /**
     * Choose, which courses to update.
     */
    where: coursesWhereUniqueInput
  }

  /**
   * courses updateMany
   */
  export type coursesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update courses.
     */
    data: XOR<coursesUpdateManyMutationInput, coursesUncheckedUpdateManyInput>
    /**
     * Filter which courses to update
     */
    where?: coursesWhereInput
    /**
     * Limit how many courses to update.
     */
    limit?: number
  }

  /**
   * courses updateManyAndReturn
   */
  export type coursesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the courses
     */
    omit?: coursesOmit<ExtArgs> | null
    /**
     * The data used to update courses.
     */
    data: XOR<coursesUpdateManyMutationInput, coursesUncheckedUpdateManyInput>
    /**
     * Filter which courses to update
     */
    where?: coursesWhereInput
    /**
     * Limit how many courses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * courses upsert
   */
  export type coursesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courses
     */
    omit?: coursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
    /**
     * The filter to search for the courses to update in case it exists.
     */
    where: coursesWhereUniqueInput
    /**
     * In case the courses found by the `where` argument doesn't exist, create a new courses with this data.
     */
    create: XOR<coursesCreateInput, coursesUncheckedCreateInput>
    /**
     * In case the courses was found with the provided `where` argument, update it with this data.
     */
    update: XOR<coursesUpdateInput, coursesUncheckedUpdateInput>
  }

  /**
   * courses delete
   */
  export type coursesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courses
     */
    omit?: coursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
    /**
     * Filter which courses to delete.
     */
    where: coursesWhereUniqueInput
  }

  /**
   * courses deleteMany
   */
  export type coursesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which courses to delete
     */
    where?: coursesWhereInput
    /**
     * Limit how many courses to delete.
     */
    limit?: number
  }

  /**
   * courses.Renamedclass_Renamedclass_coursesTocourses
   */
  export type courses$Renamedclass_Renamedclass_coursesTocoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Renamedclass
     */
    select?: RenamedclassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Renamedclass
     */
    omit?: RenamedclassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenamedclassInclude<ExtArgs> | null
    where?: RenamedclassWhereInput
    orderBy?: RenamedclassOrderByWithRelationInput | RenamedclassOrderByWithRelationInput[]
    cursor?: RenamedclassWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RenamedclassScalarFieldEnum | RenamedclassScalarFieldEnum[]
  }

  /**
   * courses.levels_levels_coursesTocourses
   */
  export type courses$levels_levels_coursesTocoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the levels
     */
    select?: levelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the levels
     */
    omit?: levelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: levelsInclude<ExtArgs> | null
    where?: levelsWhereInput
    orderBy?: levelsOrderByWithRelationInput | levelsOrderByWithRelationInput[]
    cursor?: levelsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LevelsScalarFieldEnum | LevelsScalarFieldEnum[]
  }

  /**
   * courses without action
   */
  export type coursesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courses
     */
    omit?: coursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
  }


  /**
   * Model discipline
   */

  export type AggregateDiscipline = {
    _count: DisciplineCountAggregateOutputType | null
    _min: DisciplineMinAggregateOutputType | null
    _max: DisciplineMaxAggregateOutputType | null
  }

  export type DisciplineMinAggregateOutputType = {
    id: string | null
    name: string | null
    levels: string | null
  }

  export type DisciplineMaxAggregateOutputType = {
    id: string | null
    name: string | null
    levels: string | null
  }

  export type DisciplineCountAggregateOutputType = {
    id: number
    name: number
    levels: number
    _all: number
  }


  export type DisciplineMinAggregateInputType = {
    id?: true
    name?: true
    levels?: true
  }

  export type DisciplineMaxAggregateInputType = {
    id?: true
    name?: true
    levels?: true
  }

  export type DisciplineCountAggregateInputType = {
    id?: true
    name?: true
    levels?: true
    _all?: true
  }

  export type DisciplineAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which discipline to aggregate.
     */
    where?: disciplineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of disciplines to fetch.
     */
    orderBy?: disciplineOrderByWithRelationInput | disciplineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: disciplineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` disciplines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` disciplines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned disciplines
    **/
    _count?: true | DisciplineCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DisciplineMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DisciplineMaxAggregateInputType
  }

  export type GetDisciplineAggregateType<T extends DisciplineAggregateArgs> = {
        [P in keyof T & keyof AggregateDiscipline]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDiscipline[P]>
      : GetScalarType<T[P], AggregateDiscipline[P]>
  }




  export type disciplineGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: disciplineWhereInput
    orderBy?: disciplineOrderByWithAggregationInput | disciplineOrderByWithAggregationInput[]
    by: DisciplineScalarFieldEnum[] | DisciplineScalarFieldEnum
    having?: disciplineScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DisciplineCountAggregateInputType | true
    _min?: DisciplineMinAggregateInputType
    _max?: DisciplineMaxAggregateInputType
  }

  export type DisciplineGroupByOutputType = {
    id: string
    name: string
    levels: string
    _count: DisciplineCountAggregateOutputType | null
    _min: DisciplineMinAggregateOutputType | null
    _max: DisciplineMaxAggregateOutputType | null
  }

  type GetDisciplineGroupByPayload<T extends disciplineGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DisciplineGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DisciplineGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DisciplineGroupByOutputType[P]>
            : GetScalarType<T[P], DisciplineGroupByOutputType[P]>
        }
      >
    >


  export type disciplineSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    levels?: boolean
    levels_discipline_levelsTolevels?: boolean | levelsDefaultArgs<ExtArgs>
    tasks?: boolean | discipline$tasksArgs<ExtArgs>
    _count?: boolean | DisciplineCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["discipline"]>

  export type disciplineSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    levels?: boolean
    levels_discipline_levelsTolevels?: boolean | levelsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["discipline"]>

  export type disciplineSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    levels?: boolean
    levels_discipline_levelsTolevels?: boolean | levelsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["discipline"]>

  export type disciplineSelectScalar = {
    id?: boolean
    name?: boolean
    levels?: boolean
  }

  export type disciplineOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "levels", ExtArgs["result"]["discipline"]>
  export type disciplineInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    levels_discipline_levelsTolevels?: boolean | levelsDefaultArgs<ExtArgs>
    tasks?: boolean | discipline$tasksArgs<ExtArgs>
    _count?: boolean | DisciplineCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type disciplineIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    levels_discipline_levelsTolevels?: boolean | levelsDefaultArgs<ExtArgs>
  }
  export type disciplineIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    levels_discipline_levelsTolevels?: boolean | levelsDefaultArgs<ExtArgs>
  }

  export type $disciplinePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "discipline"
    objects: {
      levels_discipline_levelsTolevels: Prisma.$levelsPayload<ExtArgs>
      tasks: Prisma.$tasksPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      levels: string
    }, ExtArgs["result"]["discipline"]>
    composites: {}
  }

  type disciplineGetPayload<S extends boolean | null | undefined | disciplineDefaultArgs> = $Result.GetResult<Prisma.$disciplinePayload, S>

  type disciplineCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<disciplineFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DisciplineCountAggregateInputType | true
    }

  export interface disciplineDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['discipline'], meta: { name: 'discipline' } }
    /**
     * Find zero or one Discipline that matches the filter.
     * @param {disciplineFindUniqueArgs} args - Arguments to find a Discipline
     * @example
     * // Get one Discipline
     * const discipline = await prisma.discipline.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends disciplineFindUniqueArgs>(args: SelectSubset<T, disciplineFindUniqueArgs<ExtArgs>>): Prisma__disciplineClient<$Result.GetResult<Prisma.$disciplinePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Discipline that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {disciplineFindUniqueOrThrowArgs} args - Arguments to find a Discipline
     * @example
     * // Get one Discipline
     * const discipline = await prisma.discipline.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends disciplineFindUniqueOrThrowArgs>(args: SelectSubset<T, disciplineFindUniqueOrThrowArgs<ExtArgs>>): Prisma__disciplineClient<$Result.GetResult<Prisma.$disciplinePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Discipline that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {disciplineFindFirstArgs} args - Arguments to find a Discipline
     * @example
     * // Get one Discipline
     * const discipline = await prisma.discipline.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends disciplineFindFirstArgs>(args?: SelectSubset<T, disciplineFindFirstArgs<ExtArgs>>): Prisma__disciplineClient<$Result.GetResult<Prisma.$disciplinePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Discipline that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {disciplineFindFirstOrThrowArgs} args - Arguments to find a Discipline
     * @example
     * // Get one Discipline
     * const discipline = await prisma.discipline.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends disciplineFindFirstOrThrowArgs>(args?: SelectSubset<T, disciplineFindFirstOrThrowArgs<ExtArgs>>): Prisma__disciplineClient<$Result.GetResult<Prisma.$disciplinePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Disciplines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {disciplineFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Disciplines
     * const disciplines = await prisma.discipline.findMany()
     * 
     * // Get first 10 Disciplines
     * const disciplines = await prisma.discipline.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const disciplineWithIdOnly = await prisma.discipline.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends disciplineFindManyArgs>(args?: SelectSubset<T, disciplineFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$disciplinePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Discipline.
     * @param {disciplineCreateArgs} args - Arguments to create a Discipline.
     * @example
     * // Create one Discipline
     * const Discipline = await prisma.discipline.create({
     *   data: {
     *     // ... data to create a Discipline
     *   }
     * })
     * 
     */
    create<T extends disciplineCreateArgs>(args: SelectSubset<T, disciplineCreateArgs<ExtArgs>>): Prisma__disciplineClient<$Result.GetResult<Prisma.$disciplinePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Disciplines.
     * @param {disciplineCreateManyArgs} args - Arguments to create many Disciplines.
     * @example
     * // Create many Disciplines
     * const discipline = await prisma.discipline.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends disciplineCreateManyArgs>(args?: SelectSubset<T, disciplineCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Disciplines and returns the data saved in the database.
     * @param {disciplineCreateManyAndReturnArgs} args - Arguments to create many Disciplines.
     * @example
     * // Create many Disciplines
     * const discipline = await prisma.discipline.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Disciplines and only return the `id`
     * const disciplineWithIdOnly = await prisma.discipline.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends disciplineCreateManyAndReturnArgs>(args?: SelectSubset<T, disciplineCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$disciplinePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Discipline.
     * @param {disciplineDeleteArgs} args - Arguments to delete one Discipline.
     * @example
     * // Delete one Discipline
     * const Discipline = await prisma.discipline.delete({
     *   where: {
     *     // ... filter to delete one Discipline
     *   }
     * })
     * 
     */
    delete<T extends disciplineDeleteArgs>(args: SelectSubset<T, disciplineDeleteArgs<ExtArgs>>): Prisma__disciplineClient<$Result.GetResult<Prisma.$disciplinePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Discipline.
     * @param {disciplineUpdateArgs} args - Arguments to update one Discipline.
     * @example
     * // Update one Discipline
     * const discipline = await prisma.discipline.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends disciplineUpdateArgs>(args: SelectSubset<T, disciplineUpdateArgs<ExtArgs>>): Prisma__disciplineClient<$Result.GetResult<Prisma.$disciplinePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Disciplines.
     * @param {disciplineDeleteManyArgs} args - Arguments to filter Disciplines to delete.
     * @example
     * // Delete a few Disciplines
     * const { count } = await prisma.discipline.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends disciplineDeleteManyArgs>(args?: SelectSubset<T, disciplineDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Disciplines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {disciplineUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Disciplines
     * const discipline = await prisma.discipline.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends disciplineUpdateManyArgs>(args: SelectSubset<T, disciplineUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Disciplines and returns the data updated in the database.
     * @param {disciplineUpdateManyAndReturnArgs} args - Arguments to update many Disciplines.
     * @example
     * // Update many Disciplines
     * const discipline = await prisma.discipline.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Disciplines and only return the `id`
     * const disciplineWithIdOnly = await prisma.discipline.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends disciplineUpdateManyAndReturnArgs>(args: SelectSubset<T, disciplineUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$disciplinePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Discipline.
     * @param {disciplineUpsertArgs} args - Arguments to update or create a Discipline.
     * @example
     * // Update or create a Discipline
     * const discipline = await prisma.discipline.upsert({
     *   create: {
     *     // ... data to create a Discipline
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Discipline we want to update
     *   }
     * })
     */
    upsert<T extends disciplineUpsertArgs>(args: SelectSubset<T, disciplineUpsertArgs<ExtArgs>>): Prisma__disciplineClient<$Result.GetResult<Prisma.$disciplinePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Disciplines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {disciplineCountArgs} args - Arguments to filter Disciplines to count.
     * @example
     * // Count the number of Disciplines
     * const count = await prisma.discipline.count({
     *   where: {
     *     // ... the filter for the Disciplines we want to count
     *   }
     * })
    **/
    count<T extends disciplineCountArgs>(
      args?: Subset<T, disciplineCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DisciplineCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Discipline.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplineAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DisciplineAggregateArgs>(args: Subset<T, DisciplineAggregateArgs>): Prisma.PrismaPromise<GetDisciplineAggregateType<T>>

    /**
     * Group by Discipline.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {disciplineGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends disciplineGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: disciplineGroupByArgs['orderBy'] }
        : { orderBy?: disciplineGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, disciplineGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDisciplineGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the discipline model
   */
  readonly fields: disciplineFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for discipline.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__disciplineClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    levels_discipline_levelsTolevels<T extends levelsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, levelsDefaultArgs<ExtArgs>>): Prisma__levelsClient<$Result.GetResult<Prisma.$levelsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tasks<T extends discipline$tasksArgs<ExtArgs> = {}>(args?: Subset<T, discipline$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the discipline model
   */
  interface disciplineFieldRefs {
    readonly id: FieldRef<"discipline", 'String'>
    readonly name: FieldRef<"discipline", 'String'>
    readonly levels: FieldRef<"discipline", 'String'>
  }
    

  // Custom InputTypes
  /**
   * discipline findUnique
   */
  export type disciplineFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discipline
     */
    select?: disciplineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the discipline
     */
    omit?: disciplineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: disciplineInclude<ExtArgs> | null
    /**
     * Filter, which discipline to fetch.
     */
    where: disciplineWhereUniqueInput
  }

  /**
   * discipline findUniqueOrThrow
   */
  export type disciplineFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discipline
     */
    select?: disciplineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the discipline
     */
    omit?: disciplineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: disciplineInclude<ExtArgs> | null
    /**
     * Filter, which discipline to fetch.
     */
    where: disciplineWhereUniqueInput
  }

  /**
   * discipline findFirst
   */
  export type disciplineFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discipline
     */
    select?: disciplineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the discipline
     */
    omit?: disciplineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: disciplineInclude<ExtArgs> | null
    /**
     * Filter, which discipline to fetch.
     */
    where?: disciplineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of disciplines to fetch.
     */
    orderBy?: disciplineOrderByWithRelationInput | disciplineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for disciplines.
     */
    cursor?: disciplineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` disciplines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` disciplines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of disciplines.
     */
    distinct?: DisciplineScalarFieldEnum | DisciplineScalarFieldEnum[]
  }

  /**
   * discipline findFirstOrThrow
   */
  export type disciplineFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discipline
     */
    select?: disciplineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the discipline
     */
    omit?: disciplineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: disciplineInclude<ExtArgs> | null
    /**
     * Filter, which discipline to fetch.
     */
    where?: disciplineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of disciplines to fetch.
     */
    orderBy?: disciplineOrderByWithRelationInput | disciplineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for disciplines.
     */
    cursor?: disciplineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` disciplines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` disciplines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of disciplines.
     */
    distinct?: DisciplineScalarFieldEnum | DisciplineScalarFieldEnum[]
  }

  /**
   * discipline findMany
   */
  export type disciplineFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discipline
     */
    select?: disciplineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the discipline
     */
    omit?: disciplineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: disciplineInclude<ExtArgs> | null
    /**
     * Filter, which disciplines to fetch.
     */
    where?: disciplineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of disciplines to fetch.
     */
    orderBy?: disciplineOrderByWithRelationInput | disciplineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing disciplines.
     */
    cursor?: disciplineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` disciplines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` disciplines.
     */
    skip?: number
    distinct?: DisciplineScalarFieldEnum | DisciplineScalarFieldEnum[]
  }

  /**
   * discipline create
   */
  export type disciplineCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discipline
     */
    select?: disciplineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the discipline
     */
    omit?: disciplineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: disciplineInclude<ExtArgs> | null
    /**
     * The data needed to create a discipline.
     */
    data: XOR<disciplineCreateInput, disciplineUncheckedCreateInput>
  }

  /**
   * discipline createMany
   */
  export type disciplineCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many disciplines.
     */
    data: disciplineCreateManyInput | disciplineCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * discipline createManyAndReturn
   */
  export type disciplineCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discipline
     */
    select?: disciplineSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the discipline
     */
    omit?: disciplineOmit<ExtArgs> | null
    /**
     * The data used to create many disciplines.
     */
    data: disciplineCreateManyInput | disciplineCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: disciplineIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * discipline update
   */
  export type disciplineUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discipline
     */
    select?: disciplineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the discipline
     */
    omit?: disciplineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: disciplineInclude<ExtArgs> | null
    /**
     * The data needed to update a discipline.
     */
    data: XOR<disciplineUpdateInput, disciplineUncheckedUpdateInput>
    /**
     * Choose, which discipline to update.
     */
    where: disciplineWhereUniqueInput
  }

  /**
   * discipline updateMany
   */
  export type disciplineUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update disciplines.
     */
    data: XOR<disciplineUpdateManyMutationInput, disciplineUncheckedUpdateManyInput>
    /**
     * Filter which disciplines to update
     */
    where?: disciplineWhereInput
    /**
     * Limit how many disciplines to update.
     */
    limit?: number
  }

  /**
   * discipline updateManyAndReturn
   */
  export type disciplineUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discipline
     */
    select?: disciplineSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the discipline
     */
    omit?: disciplineOmit<ExtArgs> | null
    /**
     * The data used to update disciplines.
     */
    data: XOR<disciplineUpdateManyMutationInput, disciplineUncheckedUpdateManyInput>
    /**
     * Filter which disciplines to update
     */
    where?: disciplineWhereInput
    /**
     * Limit how many disciplines to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: disciplineIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * discipline upsert
   */
  export type disciplineUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discipline
     */
    select?: disciplineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the discipline
     */
    omit?: disciplineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: disciplineInclude<ExtArgs> | null
    /**
     * The filter to search for the discipline to update in case it exists.
     */
    where: disciplineWhereUniqueInput
    /**
     * In case the discipline found by the `where` argument doesn't exist, create a new discipline with this data.
     */
    create: XOR<disciplineCreateInput, disciplineUncheckedCreateInput>
    /**
     * In case the discipline was found with the provided `where` argument, update it with this data.
     */
    update: XOR<disciplineUpdateInput, disciplineUncheckedUpdateInput>
  }

  /**
   * discipline delete
   */
  export type disciplineDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discipline
     */
    select?: disciplineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the discipline
     */
    omit?: disciplineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: disciplineInclude<ExtArgs> | null
    /**
     * Filter which discipline to delete.
     */
    where: disciplineWhereUniqueInput
  }

  /**
   * discipline deleteMany
   */
  export type disciplineDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which disciplines to delete
     */
    where?: disciplineWhereInput
    /**
     * Limit how many disciplines to delete.
     */
    limit?: number
  }

  /**
   * discipline.tasks
   */
  export type discipline$tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tasks
     */
    omit?: tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    where?: tasksWhereInput
    orderBy?: tasksOrderByWithRelationInput | tasksOrderByWithRelationInput[]
    cursor?: tasksWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TasksScalarFieldEnum | TasksScalarFieldEnum[]
  }

  /**
   * discipline without action
   */
  export type disciplineDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discipline
     */
    select?: disciplineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the discipline
     */
    omit?: disciplineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: disciplineInclude<ExtArgs> | null
  }


  /**
   * Model levels
   */

  export type AggregateLevels = {
    _count: LevelsCountAggregateOutputType | null
    _avg: LevelsAvgAggregateOutputType | null
    _sum: LevelsSumAggregateOutputType | null
    _min: LevelsMinAggregateOutputType | null
    _max: LevelsMaxAggregateOutputType | null
  }

  export type LevelsAvgAggregateOutputType = {
    level: Decimal | null
  }

  export type LevelsSumAggregateOutputType = {
    level: Decimal | null
  }

  export type LevelsMinAggregateOutputType = {
    id: string | null
    name: string | null
    level: Decimal | null
    courses: string | null
  }

  export type LevelsMaxAggregateOutputType = {
    id: string | null
    name: string | null
    level: Decimal | null
    courses: string | null
  }

  export type LevelsCountAggregateOutputType = {
    id: number
    name: number
    level: number
    courses: number
    _all: number
  }


  export type LevelsAvgAggregateInputType = {
    level?: true
  }

  export type LevelsSumAggregateInputType = {
    level?: true
  }

  export type LevelsMinAggregateInputType = {
    id?: true
    name?: true
    level?: true
    courses?: true
  }

  export type LevelsMaxAggregateInputType = {
    id?: true
    name?: true
    level?: true
    courses?: true
  }

  export type LevelsCountAggregateInputType = {
    id?: true
    name?: true
    level?: true
    courses?: true
    _all?: true
  }

  export type LevelsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which levels to aggregate.
     */
    where?: levelsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of levels to fetch.
     */
    orderBy?: levelsOrderByWithRelationInput | levelsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: levelsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` levels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` levels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned levels
    **/
    _count?: true | LevelsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LevelsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LevelsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LevelsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LevelsMaxAggregateInputType
  }

  export type GetLevelsAggregateType<T extends LevelsAggregateArgs> = {
        [P in keyof T & keyof AggregateLevels]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLevels[P]>
      : GetScalarType<T[P], AggregateLevels[P]>
  }




  export type levelsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: levelsWhereInput
    orderBy?: levelsOrderByWithAggregationInput | levelsOrderByWithAggregationInput[]
    by: LevelsScalarFieldEnum[] | LevelsScalarFieldEnum
    having?: levelsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LevelsCountAggregateInputType | true
    _avg?: LevelsAvgAggregateInputType
    _sum?: LevelsSumAggregateInputType
    _min?: LevelsMinAggregateInputType
    _max?: LevelsMaxAggregateInputType
  }

  export type LevelsGroupByOutputType = {
    id: string
    name: string
    level: Decimal
    courses: string | null
    _count: LevelsCountAggregateOutputType | null
    _avg: LevelsAvgAggregateOutputType | null
    _sum: LevelsSumAggregateOutputType | null
    _min: LevelsMinAggregateOutputType | null
    _max: LevelsMaxAggregateOutputType | null
  }

  type GetLevelsGroupByPayload<T extends levelsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LevelsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LevelsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LevelsGroupByOutputType[P]>
            : GetScalarType<T[P], LevelsGroupByOutputType[P]>
        }
      >
    >


  export type levelsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    level?: boolean
    courses?: boolean
    discipline_discipline_levelsTolevels?: boolean | levels$discipline_discipline_levelsTolevelsArgs<ExtArgs>
    courses_levels_coursesTocourses?: boolean | levels$courses_levels_coursesTocoursesArgs<ExtArgs>
    materials_materials_levelsTolevels?: boolean | levels$materials_materials_levelsTolevelsArgs<ExtArgs>
    _count?: boolean | LevelsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["levels"]>

  export type levelsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    level?: boolean
    courses?: boolean
    courses_levels_coursesTocourses?: boolean | levels$courses_levels_coursesTocoursesArgs<ExtArgs>
  }, ExtArgs["result"]["levels"]>

  export type levelsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    level?: boolean
    courses?: boolean
    courses_levels_coursesTocourses?: boolean | levels$courses_levels_coursesTocoursesArgs<ExtArgs>
  }, ExtArgs["result"]["levels"]>

  export type levelsSelectScalar = {
    id?: boolean
    name?: boolean
    level?: boolean
    courses?: boolean
  }

  export type levelsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "level" | "courses", ExtArgs["result"]["levels"]>
  export type levelsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    discipline_discipline_levelsTolevels?: boolean | levels$discipline_discipline_levelsTolevelsArgs<ExtArgs>
    courses_levels_coursesTocourses?: boolean | levels$courses_levels_coursesTocoursesArgs<ExtArgs>
    materials_materials_levelsTolevels?: boolean | levels$materials_materials_levelsTolevelsArgs<ExtArgs>
    _count?: boolean | LevelsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type levelsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    courses_levels_coursesTocourses?: boolean | levels$courses_levels_coursesTocoursesArgs<ExtArgs>
  }
  export type levelsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    courses_levels_coursesTocourses?: boolean | levels$courses_levels_coursesTocoursesArgs<ExtArgs>
  }

  export type $levelsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "levels"
    objects: {
      discipline_discipline_levelsTolevels: Prisma.$disciplinePayload<ExtArgs>[]
      courses_levels_coursesTocourses: Prisma.$coursesPayload<ExtArgs> | null
      materials_materials_levelsTolevels: Prisma.$materialsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      level: Prisma.Decimal
      courses: string | null
    }, ExtArgs["result"]["levels"]>
    composites: {}
  }

  type levelsGetPayload<S extends boolean | null | undefined | levelsDefaultArgs> = $Result.GetResult<Prisma.$levelsPayload, S>

  type levelsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<levelsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LevelsCountAggregateInputType | true
    }

  export interface levelsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['levels'], meta: { name: 'levels' } }
    /**
     * Find zero or one Levels that matches the filter.
     * @param {levelsFindUniqueArgs} args - Arguments to find a Levels
     * @example
     * // Get one Levels
     * const levels = await prisma.levels.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends levelsFindUniqueArgs>(args: SelectSubset<T, levelsFindUniqueArgs<ExtArgs>>): Prisma__levelsClient<$Result.GetResult<Prisma.$levelsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Levels that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {levelsFindUniqueOrThrowArgs} args - Arguments to find a Levels
     * @example
     * // Get one Levels
     * const levels = await prisma.levels.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends levelsFindUniqueOrThrowArgs>(args: SelectSubset<T, levelsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__levelsClient<$Result.GetResult<Prisma.$levelsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Levels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {levelsFindFirstArgs} args - Arguments to find a Levels
     * @example
     * // Get one Levels
     * const levels = await prisma.levels.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends levelsFindFirstArgs>(args?: SelectSubset<T, levelsFindFirstArgs<ExtArgs>>): Prisma__levelsClient<$Result.GetResult<Prisma.$levelsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Levels that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {levelsFindFirstOrThrowArgs} args - Arguments to find a Levels
     * @example
     * // Get one Levels
     * const levels = await prisma.levels.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends levelsFindFirstOrThrowArgs>(args?: SelectSubset<T, levelsFindFirstOrThrowArgs<ExtArgs>>): Prisma__levelsClient<$Result.GetResult<Prisma.$levelsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Levels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {levelsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Levels
     * const levels = await prisma.levels.findMany()
     * 
     * // Get first 10 Levels
     * const levels = await prisma.levels.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const levelsWithIdOnly = await prisma.levels.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends levelsFindManyArgs>(args?: SelectSubset<T, levelsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$levelsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Levels.
     * @param {levelsCreateArgs} args - Arguments to create a Levels.
     * @example
     * // Create one Levels
     * const Levels = await prisma.levels.create({
     *   data: {
     *     // ... data to create a Levels
     *   }
     * })
     * 
     */
    create<T extends levelsCreateArgs>(args: SelectSubset<T, levelsCreateArgs<ExtArgs>>): Prisma__levelsClient<$Result.GetResult<Prisma.$levelsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Levels.
     * @param {levelsCreateManyArgs} args - Arguments to create many Levels.
     * @example
     * // Create many Levels
     * const levels = await prisma.levels.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends levelsCreateManyArgs>(args?: SelectSubset<T, levelsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Levels and returns the data saved in the database.
     * @param {levelsCreateManyAndReturnArgs} args - Arguments to create many Levels.
     * @example
     * // Create many Levels
     * const levels = await prisma.levels.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Levels and only return the `id`
     * const levelsWithIdOnly = await prisma.levels.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends levelsCreateManyAndReturnArgs>(args?: SelectSubset<T, levelsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$levelsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Levels.
     * @param {levelsDeleteArgs} args - Arguments to delete one Levels.
     * @example
     * // Delete one Levels
     * const Levels = await prisma.levels.delete({
     *   where: {
     *     // ... filter to delete one Levels
     *   }
     * })
     * 
     */
    delete<T extends levelsDeleteArgs>(args: SelectSubset<T, levelsDeleteArgs<ExtArgs>>): Prisma__levelsClient<$Result.GetResult<Prisma.$levelsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Levels.
     * @param {levelsUpdateArgs} args - Arguments to update one Levels.
     * @example
     * // Update one Levels
     * const levels = await prisma.levels.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends levelsUpdateArgs>(args: SelectSubset<T, levelsUpdateArgs<ExtArgs>>): Prisma__levelsClient<$Result.GetResult<Prisma.$levelsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Levels.
     * @param {levelsDeleteManyArgs} args - Arguments to filter Levels to delete.
     * @example
     * // Delete a few Levels
     * const { count } = await prisma.levels.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends levelsDeleteManyArgs>(args?: SelectSubset<T, levelsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Levels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {levelsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Levels
     * const levels = await prisma.levels.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends levelsUpdateManyArgs>(args: SelectSubset<T, levelsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Levels and returns the data updated in the database.
     * @param {levelsUpdateManyAndReturnArgs} args - Arguments to update many Levels.
     * @example
     * // Update many Levels
     * const levels = await prisma.levels.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Levels and only return the `id`
     * const levelsWithIdOnly = await prisma.levels.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends levelsUpdateManyAndReturnArgs>(args: SelectSubset<T, levelsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$levelsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Levels.
     * @param {levelsUpsertArgs} args - Arguments to update or create a Levels.
     * @example
     * // Update or create a Levels
     * const levels = await prisma.levels.upsert({
     *   create: {
     *     // ... data to create a Levels
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Levels we want to update
     *   }
     * })
     */
    upsert<T extends levelsUpsertArgs>(args: SelectSubset<T, levelsUpsertArgs<ExtArgs>>): Prisma__levelsClient<$Result.GetResult<Prisma.$levelsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Levels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {levelsCountArgs} args - Arguments to filter Levels to count.
     * @example
     * // Count the number of Levels
     * const count = await prisma.levels.count({
     *   where: {
     *     // ... the filter for the Levels we want to count
     *   }
     * })
    **/
    count<T extends levelsCountArgs>(
      args?: Subset<T, levelsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LevelsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Levels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LevelsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LevelsAggregateArgs>(args: Subset<T, LevelsAggregateArgs>): Prisma.PrismaPromise<GetLevelsAggregateType<T>>

    /**
     * Group by Levels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {levelsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends levelsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: levelsGroupByArgs['orderBy'] }
        : { orderBy?: levelsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, levelsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLevelsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the levels model
   */
  readonly fields: levelsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for levels.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__levelsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    discipline_discipline_levelsTolevels<T extends levels$discipline_discipline_levelsTolevelsArgs<ExtArgs> = {}>(args?: Subset<T, levels$discipline_discipline_levelsTolevelsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$disciplinePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    courses_levels_coursesTocourses<T extends levels$courses_levels_coursesTocoursesArgs<ExtArgs> = {}>(args?: Subset<T, levels$courses_levels_coursesTocoursesArgs<ExtArgs>>): Prisma__coursesClient<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    materials_materials_levelsTolevels<T extends levels$materials_materials_levelsTolevelsArgs<ExtArgs> = {}>(args?: Subset<T, levels$materials_materials_levelsTolevelsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$materialsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the levels model
   */
  interface levelsFieldRefs {
    readonly id: FieldRef<"levels", 'String'>
    readonly name: FieldRef<"levels", 'String'>
    readonly level: FieldRef<"levels", 'Decimal'>
    readonly courses: FieldRef<"levels", 'String'>
  }
    

  // Custom InputTypes
  /**
   * levels findUnique
   */
  export type levelsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the levels
     */
    select?: levelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the levels
     */
    omit?: levelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: levelsInclude<ExtArgs> | null
    /**
     * Filter, which levels to fetch.
     */
    where: levelsWhereUniqueInput
  }

  /**
   * levels findUniqueOrThrow
   */
  export type levelsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the levels
     */
    select?: levelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the levels
     */
    omit?: levelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: levelsInclude<ExtArgs> | null
    /**
     * Filter, which levels to fetch.
     */
    where: levelsWhereUniqueInput
  }

  /**
   * levels findFirst
   */
  export type levelsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the levels
     */
    select?: levelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the levels
     */
    omit?: levelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: levelsInclude<ExtArgs> | null
    /**
     * Filter, which levels to fetch.
     */
    where?: levelsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of levels to fetch.
     */
    orderBy?: levelsOrderByWithRelationInput | levelsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for levels.
     */
    cursor?: levelsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` levels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` levels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of levels.
     */
    distinct?: LevelsScalarFieldEnum | LevelsScalarFieldEnum[]
  }

  /**
   * levels findFirstOrThrow
   */
  export type levelsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the levels
     */
    select?: levelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the levels
     */
    omit?: levelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: levelsInclude<ExtArgs> | null
    /**
     * Filter, which levels to fetch.
     */
    where?: levelsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of levels to fetch.
     */
    orderBy?: levelsOrderByWithRelationInput | levelsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for levels.
     */
    cursor?: levelsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` levels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` levels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of levels.
     */
    distinct?: LevelsScalarFieldEnum | LevelsScalarFieldEnum[]
  }

  /**
   * levels findMany
   */
  export type levelsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the levels
     */
    select?: levelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the levels
     */
    omit?: levelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: levelsInclude<ExtArgs> | null
    /**
     * Filter, which levels to fetch.
     */
    where?: levelsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of levels to fetch.
     */
    orderBy?: levelsOrderByWithRelationInput | levelsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing levels.
     */
    cursor?: levelsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` levels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` levels.
     */
    skip?: number
    distinct?: LevelsScalarFieldEnum | LevelsScalarFieldEnum[]
  }

  /**
   * levels create
   */
  export type levelsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the levels
     */
    select?: levelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the levels
     */
    omit?: levelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: levelsInclude<ExtArgs> | null
    /**
     * The data needed to create a levels.
     */
    data: XOR<levelsCreateInput, levelsUncheckedCreateInput>
  }

  /**
   * levels createMany
   */
  export type levelsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many levels.
     */
    data: levelsCreateManyInput | levelsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * levels createManyAndReturn
   */
  export type levelsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the levels
     */
    select?: levelsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the levels
     */
    omit?: levelsOmit<ExtArgs> | null
    /**
     * The data used to create many levels.
     */
    data: levelsCreateManyInput | levelsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: levelsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * levels update
   */
  export type levelsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the levels
     */
    select?: levelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the levels
     */
    omit?: levelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: levelsInclude<ExtArgs> | null
    /**
     * The data needed to update a levels.
     */
    data: XOR<levelsUpdateInput, levelsUncheckedUpdateInput>
    /**
     * Choose, which levels to update.
     */
    where: levelsWhereUniqueInput
  }

  /**
   * levels updateMany
   */
  export type levelsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update levels.
     */
    data: XOR<levelsUpdateManyMutationInput, levelsUncheckedUpdateManyInput>
    /**
     * Filter which levels to update
     */
    where?: levelsWhereInput
    /**
     * Limit how many levels to update.
     */
    limit?: number
  }

  /**
   * levels updateManyAndReturn
   */
  export type levelsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the levels
     */
    select?: levelsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the levels
     */
    omit?: levelsOmit<ExtArgs> | null
    /**
     * The data used to update levels.
     */
    data: XOR<levelsUpdateManyMutationInput, levelsUncheckedUpdateManyInput>
    /**
     * Filter which levels to update
     */
    where?: levelsWhereInput
    /**
     * Limit how many levels to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: levelsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * levels upsert
   */
  export type levelsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the levels
     */
    select?: levelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the levels
     */
    omit?: levelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: levelsInclude<ExtArgs> | null
    /**
     * The filter to search for the levels to update in case it exists.
     */
    where: levelsWhereUniqueInput
    /**
     * In case the levels found by the `where` argument doesn't exist, create a new levels with this data.
     */
    create: XOR<levelsCreateInput, levelsUncheckedCreateInput>
    /**
     * In case the levels was found with the provided `where` argument, update it with this data.
     */
    update: XOR<levelsUpdateInput, levelsUncheckedUpdateInput>
  }

  /**
   * levels delete
   */
  export type levelsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the levels
     */
    select?: levelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the levels
     */
    omit?: levelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: levelsInclude<ExtArgs> | null
    /**
     * Filter which levels to delete.
     */
    where: levelsWhereUniqueInput
  }

  /**
   * levels deleteMany
   */
  export type levelsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which levels to delete
     */
    where?: levelsWhereInput
    /**
     * Limit how many levels to delete.
     */
    limit?: number
  }

  /**
   * levels.discipline_discipline_levelsTolevels
   */
  export type levels$discipline_discipline_levelsTolevelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the discipline
     */
    select?: disciplineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the discipline
     */
    omit?: disciplineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: disciplineInclude<ExtArgs> | null
    where?: disciplineWhereInput
    orderBy?: disciplineOrderByWithRelationInput | disciplineOrderByWithRelationInput[]
    cursor?: disciplineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DisciplineScalarFieldEnum | DisciplineScalarFieldEnum[]
  }

  /**
   * levels.courses_levels_coursesTocourses
   */
  export type levels$courses_levels_coursesTocoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courses
     */
    omit?: coursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
    where?: coursesWhereInput
  }

  /**
   * levels.materials_materials_levelsTolevels
   */
  export type levels$materials_materials_levelsTolevelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the materials
     */
    select?: materialsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the materials
     */
    omit?: materialsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: materialsInclude<ExtArgs> | null
    where?: materialsWhereInput
    orderBy?: materialsOrderByWithRelationInput | materialsOrderByWithRelationInput[]
    cursor?: materialsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MaterialsScalarFieldEnum | MaterialsScalarFieldEnum[]
  }

  /**
   * levels without action
   */
  export type levelsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the levels
     */
    select?: levelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the levels
     */
    omit?: levelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: levelsInclude<ExtArgs> | null
  }


  /**
   * Model materials
   */

  export type AggregateMaterials = {
    _count: MaterialsCountAggregateOutputType | null
    _min: MaterialsMinAggregateOutputType | null
    _max: MaterialsMaxAggregateOutputType | null
  }

  export type MaterialsMinAggregateOutputType = {
    id: string | null
    name: string | null
    file: Uint8Array | null
    levels: string | null
  }

  export type MaterialsMaxAggregateOutputType = {
    id: string | null
    name: string | null
    file: Uint8Array | null
    levels: string | null
  }

  export type MaterialsCountAggregateOutputType = {
    id: number
    name: number
    file: number
    levels: number
    _all: number
  }


  export type MaterialsMinAggregateInputType = {
    id?: true
    name?: true
    file?: true
    levels?: true
  }

  export type MaterialsMaxAggregateInputType = {
    id?: true
    name?: true
    file?: true
    levels?: true
  }

  export type MaterialsCountAggregateInputType = {
    id?: true
    name?: true
    file?: true
    levels?: true
    _all?: true
  }

  export type MaterialsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which materials to aggregate.
     */
    where?: materialsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of materials to fetch.
     */
    orderBy?: materialsOrderByWithRelationInput | materialsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: materialsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` materials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` materials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned materials
    **/
    _count?: true | MaterialsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MaterialsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MaterialsMaxAggregateInputType
  }

  export type GetMaterialsAggregateType<T extends MaterialsAggregateArgs> = {
        [P in keyof T & keyof AggregateMaterials]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMaterials[P]>
      : GetScalarType<T[P], AggregateMaterials[P]>
  }




  export type materialsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: materialsWhereInput
    orderBy?: materialsOrderByWithAggregationInput | materialsOrderByWithAggregationInput[]
    by: MaterialsScalarFieldEnum[] | MaterialsScalarFieldEnum
    having?: materialsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MaterialsCountAggregateInputType | true
    _min?: MaterialsMinAggregateInputType
    _max?: MaterialsMaxAggregateInputType
  }

  export type MaterialsGroupByOutputType = {
    id: string
    name: string
    file: Uint8Array
    levels: string | null
    _count: MaterialsCountAggregateOutputType | null
    _min: MaterialsMinAggregateOutputType | null
    _max: MaterialsMaxAggregateOutputType | null
  }

  type GetMaterialsGroupByPayload<T extends materialsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MaterialsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MaterialsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MaterialsGroupByOutputType[P]>
            : GetScalarType<T[P], MaterialsGroupByOutputType[P]>
        }
      >
    >


  export type materialsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    file?: boolean
    levels?: boolean
    levels_materials_levelsTolevels?: boolean | materials$levels_materials_levelsTolevelsArgs<ExtArgs>
  }, ExtArgs["result"]["materials"]>

  export type materialsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    file?: boolean
    levels?: boolean
    levels_materials_levelsTolevels?: boolean | materials$levels_materials_levelsTolevelsArgs<ExtArgs>
  }, ExtArgs["result"]["materials"]>

  export type materialsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    file?: boolean
    levels?: boolean
    levels_materials_levelsTolevels?: boolean | materials$levels_materials_levelsTolevelsArgs<ExtArgs>
  }, ExtArgs["result"]["materials"]>

  export type materialsSelectScalar = {
    id?: boolean
    name?: boolean
    file?: boolean
    levels?: boolean
  }

  export type materialsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "file" | "levels", ExtArgs["result"]["materials"]>
  export type materialsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    levels_materials_levelsTolevels?: boolean | materials$levels_materials_levelsTolevelsArgs<ExtArgs>
  }
  export type materialsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    levels_materials_levelsTolevels?: boolean | materials$levels_materials_levelsTolevelsArgs<ExtArgs>
  }
  export type materialsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    levels_materials_levelsTolevels?: boolean | materials$levels_materials_levelsTolevelsArgs<ExtArgs>
  }

  export type $materialsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "materials"
    objects: {
      levels_materials_levelsTolevels: Prisma.$levelsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      file: Uint8Array
      levels: string | null
    }, ExtArgs["result"]["materials"]>
    composites: {}
  }

  type materialsGetPayload<S extends boolean | null | undefined | materialsDefaultArgs> = $Result.GetResult<Prisma.$materialsPayload, S>

  type materialsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<materialsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MaterialsCountAggregateInputType | true
    }

  export interface materialsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['materials'], meta: { name: 'materials' } }
    /**
     * Find zero or one Materials that matches the filter.
     * @param {materialsFindUniqueArgs} args - Arguments to find a Materials
     * @example
     * // Get one Materials
     * const materials = await prisma.materials.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends materialsFindUniqueArgs>(args: SelectSubset<T, materialsFindUniqueArgs<ExtArgs>>): Prisma__materialsClient<$Result.GetResult<Prisma.$materialsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Materials that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {materialsFindUniqueOrThrowArgs} args - Arguments to find a Materials
     * @example
     * // Get one Materials
     * const materials = await prisma.materials.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends materialsFindUniqueOrThrowArgs>(args: SelectSubset<T, materialsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__materialsClient<$Result.GetResult<Prisma.$materialsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Materials that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {materialsFindFirstArgs} args - Arguments to find a Materials
     * @example
     * // Get one Materials
     * const materials = await prisma.materials.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends materialsFindFirstArgs>(args?: SelectSubset<T, materialsFindFirstArgs<ExtArgs>>): Prisma__materialsClient<$Result.GetResult<Prisma.$materialsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Materials that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {materialsFindFirstOrThrowArgs} args - Arguments to find a Materials
     * @example
     * // Get one Materials
     * const materials = await prisma.materials.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends materialsFindFirstOrThrowArgs>(args?: SelectSubset<T, materialsFindFirstOrThrowArgs<ExtArgs>>): Prisma__materialsClient<$Result.GetResult<Prisma.$materialsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Materials that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {materialsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Materials
     * const materials = await prisma.materials.findMany()
     * 
     * // Get first 10 Materials
     * const materials = await prisma.materials.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const materialsWithIdOnly = await prisma.materials.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends materialsFindManyArgs>(args?: SelectSubset<T, materialsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$materialsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Materials.
     * @param {materialsCreateArgs} args - Arguments to create a Materials.
     * @example
     * // Create one Materials
     * const Materials = await prisma.materials.create({
     *   data: {
     *     // ... data to create a Materials
     *   }
     * })
     * 
     */
    create<T extends materialsCreateArgs>(args: SelectSubset<T, materialsCreateArgs<ExtArgs>>): Prisma__materialsClient<$Result.GetResult<Prisma.$materialsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Materials.
     * @param {materialsCreateManyArgs} args - Arguments to create many Materials.
     * @example
     * // Create many Materials
     * const materials = await prisma.materials.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends materialsCreateManyArgs>(args?: SelectSubset<T, materialsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Materials and returns the data saved in the database.
     * @param {materialsCreateManyAndReturnArgs} args - Arguments to create many Materials.
     * @example
     * // Create many Materials
     * const materials = await prisma.materials.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Materials and only return the `id`
     * const materialsWithIdOnly = await prisma.materials.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends materialsCreateManyAndReturnArgs>(args?: SelectSubset<T, materialsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$materialsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Materials.
     * @param {materialsDeleteArgs} args - Arguments to delete one Materials.
     * @example
     * // Delete one Materials
     * const Materials = await prisma.materials.delete({
     *   where: {
     *     // ... filter to delete one Materials
     *   }
     * })
     * 
     */
    delete<T extends materialsDeleteArgs>(args: SelectSubset<T, materialsDeleteArgs<ExtArgs>>): Prisma__materialsClient<$Result.GetResult<Prisma.$materialsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Materials.
     * @param {materialsUpdateArgs} args - Arguments to update one Materials.
     * @example
     * // Update one Materials
     * const materials = await prisma.materials.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends materialsUpdateArgs>(args: SelectSubset<T, materialsUpdateArgs<ExtArgs>>): Prisma__materialsClient<$Result.GetResult<Prisma.$materialsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Materials.
     * @param {materialsDeleteManyArgs} args - Arguments to filter Materials to delete.
     * @example
     * // Delete a few Materials
     * const { count } = await prisma.materials.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends materialsDeleteManyArgs>(args?: SelectSubset<T, materialsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Materials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {materialsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Materials
     * const materials = await prisma.materials.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends materialsUpdateManyArgs>(args: SelectSubset<T, materialsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Materials and returns the data updated in the database.
     * @param {materialsUpdateManyAndReturnArgs} args - Arguments to update many Materials.
     * @example
     * // Update many Materials
     * const materials = await prisma.materials.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Materials and only return the `id`
     * const materialsWithIdOnly = await prisma.materials.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends materialsUpdateManyAndReturnArgs>(args: SelectSubset<T, materialsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$materialsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Materials.
     * @param {materialsUpsertArgs} args - Arguments to update or create a Materials.
     * @example
     * // Update or create a Materials
     * const materials = await prisma.materials.upsert({
     *   create: {
     *     // ... data to create a Materials
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Materials we want to update
     *   }
     * })
     */
    upsert<T extends materialsUpsertArgs>(args: SelectSubset<T, materialsUpsertArgs<ExtArgs>>): Prisma__materialsClient<$Result.GetResult<Prisma.$materialsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Materials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {materialsCountArgs} args - Arguments to filter Materials to count.
     * @example
     * // Count the number of Materials
     * const count = await prisma.materials.count({
     *   where: {
     *     // ... the filter for the Materials we want to count
     *   }
     * })
    **/
    count<T extends materialsCountArgs>(
      args?: Subset<T, materialsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MaterialsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Materials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MaterialsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MaterialsAggregateArgs>(args: Subset<T, MaterialsAggregateArgs>): Prisma.PrismaPromise<GetMaterialsAggregateType<T>>

    /**
     * Group by Materials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {materialsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends materialsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: materialsGroupByArgs['orderBy'] }
        : { orderBy?: materialsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, materialsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMaterialsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the materials model
   */
  readonly fields: materialsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for materials.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__materialsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    levels_materials_levelsTolevels<T extends materials$levels_materials_levelsTolevelsArgs<ExtArgs> = {}>(args?: Subset<T, materials$levels_materials_levelsTolevelsArgs<ExtArgs>>): Prisma__levelsClient<$Result.GetResult<Prisma.$levelsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the materials model
   */
  interface materialsFieldRefs {
    readonly id: FieldRef<"materials", 'String'>
    readonly name: FieldRef<"materials", 'String'>
    readonly file: FieldRef<"materials", 'Bytes'>
    readonly levels: FieldRef<"materials", 'String'>
  }
    

  // Custom InputTypes
  /**
   * materials findUnique
   */
  export type materialsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the materials
     */
    select?: materialsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the materials
     */
    omit?: materialsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: materialsInclude<ExtArgs> | null
    /**
     * Filter, which materials to fetch.
     */
    where: materialsWhereUniqueInput
  }

  /**
   * materials findUniqueOrThrow
   */
  export type materialsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the materials
     */
    select?: materialsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the materials
     */
    omit?: materialsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: materialsInclude<ExtArgs> | null
    /**
     * Filter, which materials to fetch.
     */
    where: materialsWhereUniqueInput
  }

  /**
   * materials findFirst
   */
  export type materialsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the materials
     */
    select?: materialsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the materials
     */
    omit?: materialsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: materialsInclude<ExtArgs> | null
    /**
     * Filter, which materials to fetch.
     */
    where?: materialsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of materials to fetch.
     */
    orderBy?: materialsOrderByWithRelationInput | materialsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for materials.
     */
    cursor?: materialsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` materials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` materials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of materials.
     */
    distinct?: MaterialsScalarFieldEnum | MaterialsScalarFieldEnum[]
  }

  /**
   * materials findFirstOrThrow
   */
  export type materialsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the materials
     */
    select?: materialsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the materials
     */
    omit?: materialsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: materialsInclude<ExtArgs> | null
    /**
     * Filter, which materials to fetch.
     */
    where?: materialsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of materials to fetch.
     */
    orderBy?: materialsOrderByWithRelationInput | materialsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for materials.
     */
    cursor?: materialsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` materials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` materials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of materials.
     */
    distinct?: MaterialsScalarFieldEnum | MaterialsScalarFieldEnum[]
  }

  /**
   * materials findMany
   */
  export type materialsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the materials
     */
    select?: materialsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the materials
     */
    omit?: materialsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: materialsInclude<ExtArgs> | null
    /**
     * Filter, which materials to fetch.
     */
    where?: materialsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of materials to fetch.
     */
    orderBy?: materialsOrderByWithRelationInput | materialsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing materials.
     */
    cursor?: materialsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` materials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` materials.
     */
    skip?: number
    distinct?: MaterialsScalarFieldEnum | MaterialsScalarFieldEnum[]
  }

  /**
   * materials create
   */
  export type materialsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the materials
     */
    select?: materialsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the materials
     */
    omit?: materialsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: materialsInclude<ExtArgs> | null
    /**
     * The data needed to create a materials.
     */
    data: XOR<materialsCreateInput, materialsUncheckedCreateInput>
  }

  /**
   * materials createMany
   */
  export type materialsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many materials.
     */
    data: materialsCreateManyInput | materialsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * materials createManyAndReturn
   */
  export type materialsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the materials
     */
    select?: materialsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the materials
     */
    omit?: materialsOmit<ExtArgs> | null
    /**
     * The data used to create many materials.
     */
    data: materialsCreateManyInput | materialsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: materialsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * materials update
   */
  export type materialsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the materials
     */
    select?: materialsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the materials
     */
    omit?: materialsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: materialsInclude<ExtArgs> | null
    /**
     * The data needed to update a materials.
     */
    data: XOR<materialsUpdateInput, materialsUncheckedUpdateInput>
    /**
     * Choose, which materials to update.
     */
    where: materialsWhereUniqueInput
  }

  /**
   * materials updateMany
   */
  export type materialsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update materials.
     */
    data: XOR<materialsUpdateManyMutationInput, materialsUncheckedUpdateManyInput>
    /**
     * Filter which materials to update
     */
    where?: materialsWhereInput
    /**
     * Limit how many materials to update.
     */
    limit?: number
  }

  /**
   * materials updateManyAndReturn
   */
  export type materialsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the materials
     */
    select?: materialsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the materials
     */
    omit?: materialsOmit<ExtArgs> | null
    /**
     * The data used to update materials.
     */
    data: XOR<materialsUpdateManyMutationInput, materialsUncheckedUpdateManyInput>
    /**
     * Filter which materials to update
     */
    where?: materialsWhereInput
    /**
     * Limit how many materials to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: materialsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * materials upsert
   */
  export type materialsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the materials
     */
    select?: materialsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the materials
     */
    omit?: materialsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: materialsInclude<ExtArgs> | null
    /**
     * The filter to search for the materials to update in case it exists.
     */
    where: materialsWhereUniqueInput
    /**
     * In case the materials found by the `where` argument doesn't exist, create a new materials with this data.
     */
    create: XOR<materialsCreateInput, materialsUncheckedCreateInput>
    /**
     * In case the materials was found with the provided `where` argument, update it with this data.
     */
    update: XOR<materialsUpdateInput, materialsUncheckedUpdateInput>
  }

  /**
   * materials delete
   */
  export type materialsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the materials
     */
    select?: materialsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the materials
     */
    omit?: materialsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: materialsInclude<ExtArgs> | null
    /**
     * Filter which materials to delete.
     */
    where: materialsWhereUniqueInput
  }

  /**
   * materials deleteMany
   */
  export type materialsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which materials to delete
     */
    where?: materialsWhereInput
    /**
     * Limit how many materials to delete.
     */
    limit?: number
  }

  /**
   * materials.levels_materials_levelsTolevels
   */
  export type materials$levels_materials_levelsTolevelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the levels
     */
    select?: levelsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the levels
     */
    omit?: levelsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: levelsInclude<ExtArgs> | null
    where?: levelsWhereInput
  }

  /**
   * materials without action
   */
  export type materialsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the materials
     */
    select?: materialsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the materials
     */
    omit?: materialsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: materialsInclude<ExtArgs> | null
  }


  /**
   * Model monthly_fee
   */

  export type AggregateMonthly_fee = {
    _count: Monthly_feeCountAggregateOutputType | null
    _avg: Monthly_feeAvgAggregateOutputType | null
    _sum: Monthly_feeSumAggregateOutputType | null
    _min: Monthly_feeMinAggregateOutputType | null
    _max: Monthly_feeMaxAggregateOutputType | null
  }

  export type Monthly_feeAvgAggregateOutputType = {
    value: Decimal | null
    discount_payment_before_due_date: Decimal | null
  }

  export type Monthly_feeSumAggregateOutputType = {
    value: Decimal | null
    discount_payment_before_due_date: Decimal | null
  }

  export type Monthly_feeMinAggregateOutputType = {
    id: string | null
    due_date: Date | null
    value: Decimal | null
    paid: boolean | null
    discount_payment_before_due_date: Decimal | null
    registrations: string | null
    payment_method: string | null
    date_of_payment: Date | null
  }

  export type Monthly_feeMaxAggregateOutputType = {
    id: string | null
    due_date: Date | null
    value: Decimal | null
    paid: boolean | null
    discount_payment_before_due_date: Decimal | null
    registrations: string | null
    payment_method: string | null
    date_of_payment: Date | null
  }

  export type Monthly_feeCountAggregateOutputType = {
    id: number
    due_date: number
    value: number
    paid: number
    discount_payment_before_due_date: number
    registrations: number
    payment_method: number
    date_of_payment: number
    _all: number
  }


  export type Monthly_feeAvgAggregateInputType = {
    value?: true
    discount_payment_before_due_date?: true
  }

  export type Monthly_feeSumAggregateInputType = {
    value?: true
    discount_payment_before_due_date?: true
  }

  export type Monthly_feeMinAggregateInputType = {
    id?: true
    due_date?: true
    value?: true
    paid?: true
    discount_payment_before_due_date?: true
    registrations?: true
    payment_method?: true
    date_of_payment?: true
  }

  export type Monthly_feeMaxAggregateInputType = {
    id?: true
    due_date?: true
    value?: true
    paid?: true
    discount_payment_before_due_date?: true
    registrations?: true
    payment_method?: true
    date_of_payment?: true
  }

  export type Monthly_feeCountAggregateInputType = {
    id?: true
    due_date?: true
    value?: true
    paid?: true
    discount_payment_before_due_date?: true
    registrations?: true
    payment_method?: true
    date_of_payment?: true
    _all?: true
  }

  export type Monthly_feeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which monthly_fee to aggregate.
     */
    where?: monthly_feeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of monthly_fees to fetch.
     */
    orderBy?: monthly_feeOrderByWithRelationInput | monthly_feeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: monthly_feeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` monthly_fees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` monthly_fees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned monthly_fees
    **/
    _count?: true | Monthly_feeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Monthly_feeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Monthly_feeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Monthly_feeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Monthly_feeMaxAggregateInputType
  }

  export type GetMonthly_feeAggregateType<T extends Monthly_feeAggregateArgs> = {
        [P in keyof T & keyof AggregateMonthly_fee]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMonthly_fee[P]>
      : GetScalarType<T[P], AggregateMonthly_fee[P]>
  }




  export type monthly_feeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: monthly_feeWhereInput
    orderBy?: monthly_feeOrderByWithAggregationInput | monthly_feeOrderByWithAggregationInput[]
    by: Monthly_feeScalarFieldEnum[] | Monthly_feeScalarFieldEnum
    having?: monthly_feeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Monthly_feeCountAggregateInputType | true
    _avg?: Monthly_feeAvgAggregateInputType
    _sum?: Monthly_feeSumAggregateInputType
    _min?: Monthly_feeMinAggregateInputType
    _max?: Monthly_feeMaxAggregateInputType
  }

  export type Monthly_feeGroupByOutputType = {
    id: string
    due_date: Date
    value: Decimal
    paid: boolean
    discount_payment_before_due_date: Decimal
    registrations: string
    payment_method: string | null
    date_of_payment: Date | null
    _count: Monthly_feeCountAggregateOutputType | null
    _avg: Monthly_feeAvgAggregateOutputType | null
    _sum: Monthly_feeSumAggregateOutputType | null
    _min: Monthly_feeMinAggregateOutputType | null
    _max: Monthly_feeMaxAggregateOutputType | null
  }

  type GetMonthly_feeGroupByPayload<T extends monthly_feeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Monthly_feeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Monthly_feeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Monthly_feeGroupByOutputType[P]>
            : GetScalarType<T[P], Monthly_feeGroupByOutputType[P]>
        }
      >
    >


  export type monthly_feeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    due_date?: boolean
    value?: boolean
    paid?: boolean
    discount_payment_before_due_date?: boolean
    registrations?: boolean
    payment_method?: boolean
    date_of_payment?: boolean
    registrations_monthly_fee_registrationsToregistrations?: boolean | registrationsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["monthly_fee"]>

  export type monthly_feeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    due_date?: boolean
    value?: boolean
    paid?: boolean
    discount_payment_before_due_date?: boolean
    registrations?: boolean
    payment_method?: boolean
    date_of_payment?: boolean
    registrations_monthly_fee_registrationsToregistrations?: boolean | registrationsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["monthly_fee"]>

  export type monthly_feeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    due_date?: boolean
    value?: boolean
    paid?: boolean
    discount_payment_before_due_date?: boolean
    registrations?: boolean
    payment_method?: boolean
    date_of_payment?: boolean
    registrations_monthly_fee_registrationsToregistrations?: boolean | registrationsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["monthly_fee"]>

  export type monthly_feeSelectScalar = {
    id?: boolean
    due_date?: boolean
    value?: boolean
    paid?: boolean
    discount_payment_before_due_date?: boolean
    registrations?: boolean
    payment_method?: boolean
    date_of_payment?: boolean
  }

  export type monthly_feeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "due_date" | "value" | "paid" | "discount_payment_before_due_date" | "registrations" | "payment_method" | "date_of_payment", ExtArgs["result"]["monthly_fee"]>
  export type monthly_feeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registrations_monthly_fee_registrationsToregistrations?: boolean | registrationsDefaultArgs<ExtArgs>
  }
  export type monthly_feeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registrations_monthly_fee_registrationsToregistrations?: boolean | registrationsDefaultArgs<ExtArgs>
  }
  export type monthly_feeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registrations_monthly_fee_registrationsToregistrations?: boolean | registrationsDefaultArgs<ExtArgs>
  }

  export type $monthly_feePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "monthly_fee"
    objects: {
      registrations_monthly_fee_registrationsToregistrations: Prisma.$registrationsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      due_date: Date
      value: Prisma.Decimal
      paid: boolean
      discount_payment_before_due_date: Prisma.Decimal
      registrations: string
      payment_method: string | null
      date_of_payment: Date | null
    }, ExtArgs["result"]["monthly_fee"]>
    composites: {}
  }

  type monthly_feeGetPayload<S extends boolean | null | undefined | monthly_feeDefaultArgs> = $Result.GetResult<Prisma.$monthly_feePayload, S>

  type monthly_feeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<monthly_feeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Monthly_feeCountAggregateInputType | true
    }

  export interface monthly_feeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['monthly_fee'], meta: { name: 'monthly_fee' } }
    /**
     * Find zero or one Monthly_fee that matches the filter.
     * @param {monthly_feeFindUniqueArgs} args - Arguments to find a Monthly_fee
     * @example
     * // Get one Monthly_fee
     * const monthly_fee = await prisma.monthly_fee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends monthly_feeFindUniqueArgs>(args: SelectSubset<T, monthly_feeFindUniqueArgs<ExtArgs>>): Prisma__monthly_feeClient<$Result.GetResult<Prisma.$monthly_feePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Monthly_fee that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {monthly_feeFindUniqueOrThrowArgs} args - Arguments to find a Monthly_fee
     * @example
     * // Get one Monthly_fee
     * const monthly_fee = await prisma.monthly_fee.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends monthly_feeFindUniqueOrThrowArgs>(args: SelectSubset<T, monthly_feeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__monthly_feeClient<$Result.GetResult<Prisma.$monthly_feePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Monthly_fee that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {monthly_feeFindFirstArgs} args - Arguments to find a Monthly_fee
     * @example
     * // Get one Monthly_fee
     * const monthly_fee = await prisma.monthly_fee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends monthly_feeFindFirstArgs>(args?: SelectSubset<T, monthly_feeFindFirstArgs<ExtArgs>>): Prisma__monthly_feeClient<$Result.GetResult<Prisma.$monthly_feePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Monthly_fee that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {monthly_feeFindFirstOrThrowArgs} args - Arguments to find a Monthly_fee
     * @example
     * // Get one Monthly_fee
     * const monthly_fee = await prisma.monthly_fee.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends monthly_feeFindFirstOrThrowArgs>(args?: SelectSubset<T, monthly_feeFindFirstOrThrowArgs<ExtArgs>>): Prisma__monthly_feeClient<$Result.GetResult<Prisma.$monthly_feePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Monthly_fees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {monthly_feeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Monthly_fees
     * const monthly_fees = await prisma.monthly_fee.findMany()
     * 
     * // Get first 10 Monthly_fees
     * const monthly_fees = await prisma.monthly_fee.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const monthly_feeWithIdOnly = await prisma.monthly_fee.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends monthly_feeFindManyArgs>(args?: SelectSubset<T, monthly_feeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$monthly_feePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Monthly_fee.
     * @param {monthly_feeCreateArgs} args - Arguments to create a Monthly_fee.
     * @example
     * // Create one Monthly_fee
     * const Monthly_fee = await prisma.monthly_fee.create({
     *   data: {
     *     // ... data to create a Monthly_fee
     *   }
     * })
     * 
     */
    create<T extends monthly_feeCreateArgs>(args: SelectSubset<T, monthly_feeCreateArgs<ExtArgs>>): Prisma__monthly_feeClient<$Result.GetResult<Prisma.$monthly_feePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Monthly_fees.
     * @param {monthly_feeCreateManyArgs} args - Arguments to create many Monthly_fees.
     * @example
     * // Create many Monthly_fees
     * const monthly_fee = await prisma.monthly_fee.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends monthly_feeCreateManyArgs>(args?: SelectSubset<T, monthly_feeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Monthly_fees and returns the data saved in the database.
     * @param {monthly_feeCreateManyAndReturnArgs} args - Arguments to create many Monthly_fees.
     * @example
     * // Create many Monthly_fees
     * const monthly_fee = await prisma.monthly_fee.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Monthly_fees and only return the `id`
     * const monthly_feeWithIdOnly = await prisma.monthly_fee.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends monthly_feeCreateManyAndReturnArgs>(args?: SelectSubset<T, monthly_feeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$monthly_feePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Monthly_fee.
     * @param {monthly_feeDeleteArgs} args - Arguments to delete one Monthly_fee.
     * @example
     * // Delete one Monthly_fee
     * const Monthly_fee = await prisma.monthly_fee.delete({
     *   where: {
     *     // ... filter to delete one Monthly_fee
     *   }
     * })
     * 
     */
    delete<T extends monthly_feeDeleteArgs>(args: SelectSubset<T, monthly_feeDeleteArgs<ExtArgs>>): Prisma__monthly_feeClient<$Result.GetResult<Prisma.$monthly_feePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Monthly_fee.
     * @param {monthly_feeUpdateArgs} args - Arguments to update one Monthly_fee.
     * @example
     * // Update one Monthly_fee
     * const monthly_fee = await prisma.monthly_fee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends monthly_feeUpdateArgs>(args: SelectSubset<T, monthly_feeUpdateArgs<ExtArgs>>): Prisma__monthly_feeClient<$Result.GetResult<Prisma.$monthly_feePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Monthly_fees.
     * @param {monthly_feeDeleteManyArgs} args - Arguments to filter Monthly_fees to delete.
     * @example
     * // Delete a few Monthly_fees
     * const { count } = await prisma.monthly_fee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends monthly_feeDeleteManyArgs>(args?: SelectSubset<T, monthly_feeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Monthly_fees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {monthly_feeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Monthly_fees
     * const monthly_fee = await prisma.monthly_fee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends monthly_feeUpdateManyArgs>(args: SelectSubset<T, monthly_feeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Monthly_fees and returns the data updated in the database.
     * @param {monthly_feeUpdateManyAndReturnArgs} args - Arguments to update many Monthly_fees.
     * @example
     * // Update many Monthly_fees
     * const monthly_fee = await prisma.monthly_fee.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Monthly_fees and only return the `id`
     * const monthly_feeWithIdOnly = await prisma.monthly_fee.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends monthly_feeUpdateManyAndReturnArgs>(args: SelectSubset<T, monthly_feeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$monthly_feePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Monthly_fee.
     * @param {monthly_feeUpsertArgs} args - Arguments to update or create a Monthly_fee.
     * @example
     * // Update or create a Monthly_fee
     * const monthly_fee = await prisma.monthly_fee.upsert({
     *   create: {
     *     // ... data to create a Monthly_fee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Monthly_fee we want to update
     *   }
     * })
     */
    upsert<T extends monthly_feeUpsertArgs>(args: SelectSubset<T, monthly_feeUpsertArgs<ExtArgs>>): Prisma__monthly_feeClient<$Result.GetResult<Prisma.$monthly_feePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Monthly_fees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {monthly_feeCountArgs} args - Arguments to filter Monthly_fees to count.
     * @example
     * // Count the number of Monthly_fees
     * const count = await prisma.monthly_fee.count({
     *   where: {
     *     // ... the filter for the Monthly_fees we want to count
     *   }
     * })
    **/
    count<T extends monthly_feeCountArgs>(
      args?: Subset<T, monthly_feeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Monthly_feeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Monthly_fee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Monthly_feeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Monthly_feeAggregateArgs>(args: Subset<T, Monthly_feeAggregateArgs>): Prisma.PrismaPromise<GetMonthly_feeAggregateType<T>>

    /**
     * Group by Monthly_fee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {monthly_feeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends monthly_feeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: monthly_feeGroupByArgs['orderBy'] }
        : { orderBy?: monthly_feeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, monthly_feeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMonthly_feeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the monthly_fee model
   */
  readonly fields: monthly_feeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for monthly_fee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__monthly_feeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    registrations_monthly_fee_registrationsToregistrations<T extends registrationsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, registrationsDefaultArgs<ExtArgs>>): Prisma__registrationsClient<$Result.GetResult<Prisma.$registrationsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the monthly_fee model
   */
  interface monthly_feeFieldRefs {
    readonly id: FieldRef<"monthly_fee", 'String'>
    readonly due_date: FieldRef<"monthly_fee", 'DateTime'>
    readonly value: FieldRef<"monthly_fee", 'Decimal'>
    readonly paid: FieldRef<"monthly_fee", 'Boolean'>
    readonly discount_payment_before_due_date: FieldRef<"monthly_fee", 'Decimal'>
    readonly registrations: FieldRef<"monthly_fee", 'String'>
    readonly payment_method: FieldRef<"monthly_fee", 'String'>
    readonly date_of_payment: FieldRef<"monthly_fee", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * monthly_fee findUnique
   */
  export type monthly_feeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the monthly_fee
     */
    select?: monthly_feeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the monthly_fee
     */
    omit?: monthly_feeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: monthly_feeInclude<ExtArgs> | null
    /**
     * Filter, which monthly_fee to fetch.
     */
    where: monthly_feeWhereUniqueInput
  }

  /**
   * monthly_fee findUniqueOrThrow
   */
  export type monthly_feeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the monthly_fee
     */
    select?: monthly_feeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the monthly_fee
     */
    omit?: monthly_feeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: monthly_feeInclude<ExtArgs> | null
    /**
     * Filter, which monthly_fee to fetch.
     */
    where: monthly_feeWhereUniqueInput
  }

  /**
   * monthly_fee findFirst
   */
  export type monthly_feeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the monthly_fee
     */
    select?: monthly_feeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the monthly_fee
     */
    omit?: monthly_feeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: monthly_feeInclude<ExtArgs> | null
    /**
     * Filter, which monthly_fee to fetch.
     */
    where?: monthly_feeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of monthly_fees to fetch.
     */
    orderBy?: monthly_feeOrderByWithRelationInput | monthly_feeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for monthly_fees.
     */
    cursor?: monthly_feeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` monthly_fees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` monthly_fees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of monthly_fees.
     */
    distinct?: Monthly_feeScalarFieldEnum | Monthly_feeScalarFieldEnum[]
  }

  /**
   * monthly_fee findFirstOrThrow
   */
  export type monthly_feeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the monthly_fee
     */
    select?: monthly_feeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the monthly_fee
     */
    omit?: monthly_feeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: monthly_feeInclude<ExtArgs> | null
    /**
     * Filter, which monthly_fee to fetch.
     */
    where?: monthly_feeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of monthly_fees to fetch.
     */
    orderBy?: monthly_feeOrderByWithRelationInput | monthly_feeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for monthly_fees.
     */
    cursor?: monthly_feeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` monthly_fees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` monthly_fees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of monthly_fees.
     */
    distinct?: Monthly_feeScalarFieldEnum | Monthly_feeScalarFieldEnum[]
  }

  /**
   * monthly_fee findMany
   */
  export type monthly_feeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the monthly_fee
     */
    select?: monthly_feeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the monthly_fee
     */
    omit?: monthly_feeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: monthly_feeInclude<ExtArgs> | null
    /**
     * Filter, which monthly_fees to fetch.
     */
    where?: monthly_feeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of monthly_fees to fetch.
     */
    orderBy?: monthly_feeOrderByWithRelationInput | monthly_feeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing monthly_fees.
     */
    cursor?: monthly_feeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` monthly_fees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` monthly_fees.
     */
    skip?: number
    distinct?: Monthly_feeScalarFieldEnum | Monthly_feeScalarFieldEnum[]
  }

  /**
   * monthly_fee create
   */
  export type monthly_feeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the monthly_fee
     */
    select?: monthly_feeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the monthly_fee
     */
    omit?: monthly_feeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: monthly_feeInclude<ExtArgs> | null
    /**
     * The data needed to create a monthly_fee.
     */
    data: XOR<monthly_feeCreateInput, monthly_feeUncheckedCreateInput>
  }

  /**
   * monthly_fee createMany
   */
  export type monthly_feeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many monthly_fees.
     */
    data: monthly_feeCreateManyInput | monthly_feeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * monthly_fee createManyAndReturn
   */
  export type monthly_feeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the monthly_fee
     */
    select?: monthly_feeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the monthly_fee
     */
    omit?: monthly_feeOmit<ExtArgs> | null
    /**
     * The data used to create many monthly_fees.
     */
    data: monthly_feeCreateManyInput | monthly_feeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: monthly_feeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * monthly_fee update
   */
  export type monthly_feeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the monthly_fee
     */
    select?: monthly_feeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the monthly_fee
     */
    omit?: monthly_feeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: monthly_feeInclude<ExtArgs> | null
    /**
     * The data needed to update a monthly_fee.
     */
    data: XOR<monthly_feeUpdateInput, monthly_feeUncheckedUpdateInput>
    /**
     * Choose, which monthly_fee to update.
     */
    where: monthly_feeWhereUniqueInput
  }

  /**
   * monthly_fee updateMany
   */
  export type monthly_feeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update monthly_fees.
     */
    data: XOR<monthly_feeUpdateManyMutationInput, monthly_feeUncheckedUpdateManyInput>
    /**
     * Filter which monthly_fees to update
     */
    where?: monthly_feeWhereInput
    /**
     * Limit how many monthly_fees to update.
     */
    limit?: number
  }

  /**
   * monthly_fee updateManyAndReturn
   */
  export type monthly_feeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the monthly_fee
     */
    select?: monthly_feeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the monthly_fee
     */
    omit?: monthly_feeOmit<ExtArgs> | null
    /**
     * The data used to update monthly_fees.
     */
    data: XOR<monthly_feeUpdateManyMutationInput, monthly_feeUncheckedUpdateManyInput>
    /**
     * Filter which monthly_fees to update
     */
    where?: monthly_feeWhereInput
    /**
     * Limit how many monthly_fees to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: monthly_feeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * monthly_fee upsert
   */
  export type monthly_feeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the monthly_fee
     */
    select?: monthly_feeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the monthly_fee
     */
    omit?: monthly_feeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: monthly_feeInclude<ExtArgs> | null
    /**
     * The filter to search for the monthly_fee to update in case it exists.
     */
    where: monthly_feeWhereUniqueInput
    /**
     * In case the monthly_fee found by the `where` argument doesn't exist, create a new monthly_fee with this data.
     */
    create: XOR<monthly_feeCreateInput, monthly_feeUncheckedCreateInput>
    /**
     * In case the monthly_fee was found with the provided `where` argument, update it with this data.
     */
    update: XOR<monthly_feeUpdateInput, monthly_feeUncheckedUpdateInput>
  }

  /**
   * monthly_fee delete
   */
  export type monthly_feeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the monthly_fee
     */
    select?: monthly_feeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the monthly_fee
     */
    omit?: monthly_feeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: monthly_feeInclude<ExtArgs> | null
    /**
     * Filter which monthly_fee to delete.
     */
    where: monthly_feeWhereUniqueInput
  }

  /**
   * monthly_fee deleteMany
   */
  export type monthly_feeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which monthly_fees to delete
     */
    where?: monthly_feeWhereInput
    /**
     * Limit how many monthly_fees to delete.
     */
    limit?: number
  }

  /**
   * monthly_fee without action
   */
  export type monthly_feeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the monthly_fee
     */
    select?: monthly_feeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the monthly_fee
     */
    omit?: monthly_feeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: monthly_feeInclude<ExtArgs> | null
  }


  /**
   * Model presence_list
   */

  export type AggregatePresence_list = {
    _count: Presence_listCountAggregateOutputType | null
    _min: Presence_listMinAggregateOutputType | null
    _max: Presence_listMaxAggregateOutputType | null
  }

  export type Presence_listMinAggregateOutputType = {
    id: string | null
    is_present: boolean | null
    users: string | null
    classes: string | null
  }

  export type Presence_listMaxAggregateOutputType = {
    id: string | null
    is_present: boolean | null
    users: string | null
    classes: string | null
  }

  export type Presence_listCountAggregateOutputType = {
    id: number
    is_present: number
    users: number
    classes: number
    _all: number
  }


  export type Presence_listMinAggregateInputType = {
    id?: true
    is_present?: true
    users?: true
    classes?: true
  }

  export type Presence_listMaxAggregateInputType = {
    id?: true
    is_present?: true
    users?: true
    classes?: true
  }

  export type Presence_listCountAggregateInputType = {
    id?: true
    is_present?: true
    users?: true
    classes?: true
    _all?: true
  }

  export type Presence_listAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which presence_list to aggregate.
     */
    where?: presence_listWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of presence_lists to fetch.
     */
    orderBy?: presence_listOrderByWithRelationInput | presence_listOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: presence_listWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` presence_lists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` presence_lists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned presence_lists
    **/
    _count?: true | Presence_listCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Presence_listMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Presence_listMaxAggregateInputType
  }

  export type GetPresence_listAggregateType<T extends Presence_listAggregateArgs> = {
        [P in keyof T & keyof AggregatePresence_list]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePresence_list[P]>
      : GetScalarType<T[P], AggregatePresence_list[P]>
  }




  export type presence_listGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: presence_listWhereInput
    orderBy?: presence_listOrderByWithAggregationInput | presence_listOrderByWithAggregationInput[]
    by: Presence_listScalarFieldEnum[] | Presence_listScalarFieldEnum
    having?: presence_listScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Presence_listCountAggregateInputType | true
    _min?: Presence_listMinAggregateInputType
    _max?: Presence_listMaxAggregateInputType
  }

  export type Presence_listGroupByOutputType = {
    id: string
    is_present: boolean
    users: string
    classes: string
    _count: Presence_listCountAggregateOutputType | null
    _min: Presence_listMinAggregateOutputType | null
    _max: Presence_listMaxAggregateOutputType | null
  }

  type GetPresence_listGroupByPayload<T extends presence_listGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Presence_listGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Presence_listGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Presence_listGroupByOutputType[P]>
            : GetScalarType<T[P], Presence_listGroupByOutputType[P]>
        }
      >
    >


  export type presence_listSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    is_present?: boolean
    users?: boolean
    classes?: boolean
    classes_presence_list_classesToclasses?: boolean | classesDefaultArgs<ExtArgs>
    users_presence_list_usersTousers?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["presence_list"]>

  export type presence_listSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    is_present?: boolean
    users?: boolean
    classes?: boolean
    classes_presence_list_classesToclasses?: boolean | classesDefaultArgs<ExtArgs>
    users_presence_list_usersTousers?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["presence_list"]>

  export type presence_listSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    is_present?: boolean
    users?: boolean
    classes?: boolean
    classes_presence_list_classesToclasses?: boolean | classesDefaultArgs<ExtArgs>
    users_presence_list_usersTousers?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["presence_list"]>

  export type presence_listSelectScalar = {
    id?: boolean
    is_present?: boolean
    users?: boolean
    classes?: boolean
  }

  export type presence_listOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "is_present" | "users" | "classes", ExtArgs["result"]["presence_list"]>
  export type presence_listInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    classes_presence_list_classesToclasses?: boolean | classesDefaultArgs<ExtArgs>
    users_presence_list_usersTousers?: boolean | usersDefaultArgs<ExtArgs>
  }
  export type presence_listIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    classes_presence_list_classesToclasses?: boolean | classesDefaultArgs<ExtArgs>
    users_presence_list_usersTousers?: boolean | usersDefaultArgs<ExtArgs>
  }
  export type presence_listIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    classes_presence_list_classesToclasses?: boolean | classesDefaultArgs<ExtArgs>
    users_presence_list_usersTousers?: boolean | usersDefaultArgs<ExtArgs>
  }

  export type $presence_listPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "presence_list"
    objects: {
      classes_presence_list_classesToclasses: Prisma.$classesPayload<ExtArgs>
      users_presence_list_usersTousers: Prisma.$usersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      is_present: boolean
      users: string
      classes: string
    }, ExtArgs["result"]["presence_list"]>
    composites: {}
  }

  type presence_listGetPayload<S extends boolean | null | undefined | presence_listDefaultArgs> = $Result.GetResult<Prisma.$presence_listPayload, S>

  type presence_listCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<presence_listFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Presence_listCountAggregateInputType | true
    }

  export interface presence_listDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['presence_list'], meta: { name: 'presence_list' } }
    /**
     * Find zero or one Presence_list that matches the filter.
     * @param {presence_listFindUniqueArgs} args - Arguments to find a Presence_list
     * @example
     * // Get one Presence_list
     * const presence_list = await prisma.presence_list.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends presence_listFindUniqueArgs>(args: SelectSubset<T, presence_listFindUniqueArgs<ExtArgs>>): Prisma__presence_listClient<$Result.GetResult<Prisma.$presence_listPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Presence_list that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {presence_listFindUniqueOrThrowArgs} args - Arguments to find a Presence_list
     * @example
     * // Get one Presence_list
     * const presence_list = await prisma.presence_list.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends presence_listFindUniqueOrThrowArgs>(args: SelectSubset<T, presence_listFindUniqueOrThrowArgs<ExtArgs>>): Prisma__presence_listClient<$Result.GetResult<Prisma.$presence_listPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Presence_list that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {presence_listFindFirstArgs} args - Arguments to find a Presence_list
     * @example
     * // Get one Presence_list
     * const presence_list = await prisma.presence_list.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends presence_listFindFirstArgs>(args?: SelectSubset<T, presence_listFindFirstArgs<ExtArgs>>): Prisma__presence_listClient<$Result.GetResult<Prisma.$presence_listPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Presence_list that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {presence_listFindFirstOrThrowArgs} args - Arguments to find a Presence_list
     * @example
     * // Get one Presence_list
     * const presence_list = await prisma.presence_list.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends presence_listFindFirstOrThrowArgs>(args?: SelectSubset<T, presence_listFindFirstOrThrowArgs<ExtArgs>>): Prisma__presence_listClient<$Result.GetResult<Prisma.$presence_listPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Presence_lists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {presence_listFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Presence_lists
     * const presence_lists = await prisma.presence_list.findMany()
     * 
     * // Get first 10 Presence_lists
     * const presence_lists = await prisma.presence_list.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const presence_listWithIdOnly = await prisma.presence_list.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends presence_listFindManyArgs>(args?: SelectSubset<T, presence_listFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$presence_listPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Presence_list.
     * @param {presence_listCreateArgs} args - Arguments to create a Presence_list.
     * @example
     * // Create one Presence_list
     * const Presence_list = await prisma.presence_list.create({
     *   data: {
     *     // ... data to create a Presence_list
     *   }
     * })
     * 
     */
    create<T extends presence_listCreateArgs>(args: SelectSubset<T, presence_listCreateArgs<ExtArgs>>): Prisma__presence_listClient<$Result.GetResult<Prisma.$presence_listPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Presence_lists.
     * @param {presence_listCreateManyArgs} args - Arguments to create many Presence_lists.
     * @example
     * // Create many Presence_lists
     * const presence_list = await prisma.presence_list.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends presence_listCreateManyArgs>(args?: SelectSubset<T, presence_listCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Presence_lists and returns the data saved in the database.
     * @param {presence_listCreateManyAndReturnArgs} args - Arguments to create many Presence_lists.
     * @example
     * // Create many Presence_lists
     * const presence_list = await prisma.presence_list.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Presence_lists and only return the `id`
     * const presence_listWithIdOnly = await prisma.presence_list.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends presence_listCreateManyAndReturnArgs>(args?: SelectSubset<T, presence_listCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$presence_listPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Presence_list.
     * @param {presence_listDeleteArgs} args - Arguments to delete one Presence_list.
     * @example
     * // Delete one Presence_list
     * const Presence_list = await prisma.presence_list.delete({
     *   where: {
     *     // ... filter to delete one Presence_list
     *   }
     * })
     * 
     */
    delete<T extends presence_listDeleteArgs>(args: SelectSubset<T, presence_listDeleteArgs<ExtArgs>>): Prisma__presence_listClient<$Result.GetResult<Prisma.$presence_listPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Presence_list.
     * @param {presence_listUpdateArgs} args - Arguments to update one Presence_list.
     * @example
     * // Update one Presence_list
     * const presence_list = await prisma.presence_list.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends presence_listUpdateArgs>(args: SelectSubset<T, presence_listUpdateArgs<ExtArgs>>): Prisma__presence_listClient<$Result.GetResult<Prisma.$presence_listPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Presence_lists.
     * @param {presence_listDeleteManyArgs} args - Arguments to filter Presence_lists to delete.
     * @example
     * // Delete a few Presence_lists
     * const { count } = await prisma.presence_list.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends presence_listDeleteManyArgs>(args?: SelectSubset<T, presence_listDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Presence_lists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {presence_listUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Presence_lists
     * const presence_list = await prisma.presence_list.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends presence_listUpdateManyArgs>(args: SelectSubset<T, presence_listUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Presence_lists and returns the data updated in the database.
     * @param {presence_listUpdateManyAndReturnArgs} args - Arguments to update many Presence_lists.
     * @example
     * // Update many Presence_lists
     * const presence_list = await prisma.presence_list.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Presence_lists and only return the `id`
     * const presence_listWithIdOnly = await prisma.presence_list.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends presence_listUpdateManyAndReturnArgs>(args: SelectSubset<T, presence_listUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$presence_listPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Presence_list.
     * @param {presence_listUpsertArgs} args - Arguments to update or create a Presence_list.
     * @example
     * // Update or create a Presence_list
     * const presence_list = await prisma.presence_list.upsert({
     *   create: {
     *     // ... data to create a Presence_list
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Presence_list we want to update
     *   }
     * })
     */
    upsert<T extends presence_listUpsertArgs>(args: SelectSubset<T, presence_listUpsertArgs<ExtArgs>>): Prisma__presence_listClient<$Result.GetResult<Prisma.$presence_listPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Presence_lists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {presence_listCountArgs} args - Arguments to filter Presence_lists to count.
     * @example
     * // Count the number of Presence_lists
     * const count = await prisma.presence_list.count({
     *   where: {
     *     // ... the filter for the Presence_lists we want to count
     *   }
     * })
    **/
    count<T extends presence_listCountArgs>(
      args?: Subset<T, presence_listCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Presence_listCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Presence_list.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Presence_listAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Presence_listAggregateArgs>(args: Subset<T, Presence_listAggregateArgs>): Prisma.PrismaPromise<GetPresence_listAggregateType<T>>

    /**
     * Group by Presence_list.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {presence_listGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends presence_listGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: presence_listGroupByArgs['orderBy'] }
        : { orderBy?: presence_listGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, presence_listGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPresence_listGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the presence_list model
   */
  readonly fields: presence_listFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for presence_list.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__presence_listClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    classes_presence_list_classesToclasses<T extends classesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, classesDefaultArgs<ExtArgs>>): Prisma__classesClient<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    users_presence_list_usersTousers<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the presence_list model
   */
  interface presence_listFieldRefs {
    readonly id: FieldRef<"presence_list", 'String'>
    readonly is_present: FieldRef<"presence_list", 'Boolean'>
    readonly users: FieldRef<"presence_list", 'String'>
    readonly classes: FieldRef<"presence_list", 'String'>
  }
    

  // Custom InputTypes
  /**
   * presence_list findUnique
   */
  export type presence_listFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the presence_list
     */
    select?: presence_listSelect<ExtArgs> | null
    /**
     * Omit specific fields from the presence_list
     */
    omit?: presence_listOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: presence_listInclude<ExtArgs> | null
    /**
     * Filter, which presence_list to fetch.
     */
    where: presence_listWhereUniqueInput
  }

  /**
   * presence_list findUniqueOrThrow
   */
  export type presence_listFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the presence_list
     */
    select?: presence_listSelect<ExtArgs> | null
    /**
     * Omit specific fields from the presence_list
     */
    omit?: presence_listOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: presence_listInclude<ExtArgs> | null
    /**
     * Filter, which presence_list to fetch.
     */
    where: presence_listWhereUniqueInput
  }

  /**
   * presence_list findFirst
   */
  export type presence_listFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the presence_list
     */
    select?: presence_listSelect<ExtArgs> | null
    /**
     * Omit specific fields from the presence_list
     */
    omit?: presence_listOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: presence_listInclude<ExtArgs> | null
    /**
     * Filter, which presence_list to fetch.
     */
    where?: presence_listWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of presence_lists to fetch.
     */
    orderBy?: presence_listOrderByWithRelationInput | presence_listOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for presence_lists.
     */
    cursor?: presence_listWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` presence_lists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` presence_lists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of presence_lists.
     */
    distinct?: Presence_listScalarFieldEnum | Presence_listScalarFieldEnum[]
  }

  /**
   * presence_list findFirstOrThrow
   */
  export type presence_listFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the presence_list
     */
    select?: presence_listSelect<ExtArgs> | null
    /**
     * Omit specific fields from the presence_list
     */
    omit?: presence_listOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: presence_listInclude<ExtArgs> | null
    /**
     * Filter, which presence_list to fetch.
     */
    where?: presence_listWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of presence_lists to fetch.
     */
    orderBy?: presence_listOrderByWithRelationInput | presence_listOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for presence_lists.
     */
    cursor?: presence_listWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` presence_lists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` presence_lists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of presence_lists.
     */
    distinct?: Presence_listScalarFieldEnum | Presence_listScalarFieldEnum[]
  }

  /**
   * presence_list findMany
   */
  export type presence_listFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the presence_list
     */
    select?: presence_listSelect<ExtArgs> | null
    /**
     * Omit specific fields from the presence_list
     */
    omit?: presence_listOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: presence_listInclude<ExtArgs> | null
    /**
     * Filter, which presence_lists to fetch.
     */
    where?: presence_listWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of presence_lists to fetch.
     */
    orderBy?: presence_listOrderByWithRelationInput | presence_listOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing presence_lists.
     */
    cursor?: presence_listWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` presence_lists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` presence_lists.
     */
    skip?: number
    distinct?: Presence_listScalarFieldEnum | Presence_listScalarFieldEnum[]
  }

  /**
   * presence_list create
   */
  export type presence_listCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the presence_list
     */
    select?: presence_listSelect<ExtArgs> | null
    /**
     * Omit specific fields from the presence_list
     */
    omit?: presence_listOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: presence_listInclude<ExtArgs> | null
    /**
     * The data needed to create a presence_list.
     */
    data: XOR<presence_listCreateInput, presence_listUncheckedCreateInput>
  }

  /**
   * presence_list createMany
   */
  export type presence_listCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many presence_lists.
     */
    data: presence_listCreateManyInput | presence_listCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * presence_list createManyAndReturn
   */
  export type presence_listCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the presence_list
     */
    select?: presence_listSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the presence_list
     */
    omit?: presence_listOmit<ExtArgs> | null
    /**
     * The data used to create many presence_lists.
     */
    data: presence_listCreateManyInput | presence_listCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: presence_listIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * presence_list update
   */
  export type presence_listUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the presence_list
     */
    select?: presence_listSelect<ExtArgs> | null
    /**
     * Omit specific fields from the presence_list
     */
    omit?: presence_listOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: presence_listInclude<ExtArgs> | null
    /**
     * The data needed to update a presence_list.
     */
    data: XOR<presence_listUpdateInput, presence_listUncheckedUpdateInput>
    /**
     * Choose, which presence_list to update.
     */
    where: presence_listWhereUniqueInput
  }

  /**
   * presence_list updateMany
   */
  export type presence_listUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update presence_lists.
     */
    data: XOR<presence_listUpdateManyMutationInput, presence_listUncheckedUpdateManyInput>
    /**
     * Filter which presence_lists to update
     */
    where?: presence_listWhereInput
    /**
     * Limit how many presence_lists to update.
     */
    limit?: number
  }

  /**
   * presence_list updateManyAndReturn
   */
  export type presence_listUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the presence_list
     */
    select?: presence_listSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the presence_list
     */
    omit?: presence_listOmit<ExtArgs> | null
    /**
     * The data used to update presence_lists.
     */
    data: XOR<presence_listUpdateManyMutationInput, presence_listUncheckedUpdateManyInput>
    /**
     * Filter which presence_lists to update
     */
    where?: presence_listWhereInput
    /**
     * Limit how many presence_lists to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: presence_listIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * presence_list upsert
   */
  export type presence_listUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the presence_list
     */
    select?: presence_listSelect<ExtArgs> | null
    /**
     * Omit specific fields from the presence_list
     */
    omit?: presence_listOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: presence_listInclude<ExtArgs> | null
    /**
     * The filter to search for the presence_list to update in case it exists.
     */
    where: presence_listWhereUniqueInput
    /**
     * In case the presence_list found by the `where` argument doesn't exist, create a new presence_list with this data.
     */
    create: XOR<presence_listCreateInput, presence_listUncheckedCreateInput>
    /**
     * In case the presence_list was found with the provided `where` argument, update it with this data.
     */
    update: XOR<presence_listUpdateInput, presence_listUncheckedUpdateInput>
  }

  /**
   * presence_list delete
   */
  export type presence_listDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the presence_list
     */
    select?: presence_listSelect<ExtArgs> | null
    /**
     * Omit specific fields from the presence_list
     */
    omit?: presence_listOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: presence_listInclude<ExtArgs> | null
    /**
     * Filter which presence_list to delete.
     */
    where: presence_listWhereUniqueInput
  }

  /**
   * presence_list deleteMany
   */
  export type presence_listDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which presence_lists to delete
     */
    where?: presence_listWhereInput
    /**
     * Limit how many presence_lists to delete.
     */
    limit?: number
  }

  /**
   * presence_list without action
   */
  export type presence_listDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the presence_list
     */
    select?: presence_listSelect<ExtArgs> | null
    /**
     * Omit specific fields from the presence_list
     */
    omit?: presence_listOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: presence_listInclude<ExtArgs> | null
  }


  /**
   * Model records_of_students
   */

  export type AggregateRecords_of_students = {
    _count: Records_of_studentsCountAggregateOutputType | null
    _avg: Records_of_studentsAvgAggregateOutputType | null
    _sum: Records_of_studentsSumAggregateOutputType | null
    _min: Records_of_studentsMinAggregateOutputType | null
    _max: Records_of_studentsMaxAggregateOutputType | null
  }

  export type Records_of_studentsAvgAggregateOutputType = {
    id: number | null
  }

  export type Records_of_studentsSumAggregateOutputType = {
    id: number | null
  }

  export type Records_of_studentsMinAggregateOutputType = {
    id: number | null
    registrations: string | null
    description: string | null
    title: string | null
    created_at: Date | null
  }

  export type Records_of_studentsMaxAggregateOutputType = {
    id: number | null
    registrations: string | null
    description: string | null
    title: string | null
    created_at: Date | null
  }

  export type Records_of_studentsCountAggregateOutputType = {
    id: number
    registrations: number
    description: number
    title: number
    created_at: number
    _all: number
  }


  export type Records_of_studentsAvgAggregateInputType = {
    id?: true
  }

  export type Records_of_studentsSumAggregateInputType = {
    id?: true
  }

  export type Records_of_studentsMinAggregateInputType = {
    id?: true
    registrations?: true
    description?: true
    title?: true
    created_at?: true
  }

  export type Records_of_studentsMaxAggregateInputType = {
    id?: true
    registrations?: true
    description?: true
    title?: true
    created_at?: true
  }

  export type Records_of_studentsCountAggregateInputType = {
    id?: true
    registrations?: true
    description?: true
    title?: true
    created_at?: true
    _all?: true
  }

  export type Records_of_studentsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which records_of_students to aggregate.
     */
    where?: records_of_studentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of records_of_students to fetch.
     */
    orderBy?: records_of_studentsOrderByWithRelationInput | records_of_studentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: records_of_studentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` records_of_students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` records_of_students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned records_of_students
    **/
    _count?: true | Records_of_studentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Records_of_studentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Records_of_studentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Records_of_studentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Records_of_studentsMaxAggregateInputType
  }

  export type GetRecords_of_studentsAggregateType<T extends Records_of_studentsAggregateArgs> = {
        [P in keyof T & keyof AggregateRecords_of_students]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecords_of_students[P]>
      : GetScalarType<T[P], AggregateRecords_of_students[P]>
  }




  export type records_of_studentsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: records_of_studentsWhereInput
    orderBy?: records_of_studentsOrderByWithAggregationInput | records_of_studentsOrderByWithAggregationInput[]
    by: Records_of_studentsScalarFieldEnum[] | Records_of_studentsScalarFieldEnum
    having?: records_of_studentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Records_of_studentsCountAggregateInputType | true
    _avg?: Records_of_studentsAvgAggregateInputType
    _sum?: Records_of_studentsSumAggregateInputType
    _min?: Records_of_studentsMinAggregateInputType
    _max?: Records_of_studentsMaxAggregateInputType
  }

  export type Records_of_studentsGroupByOutputType = {
    id: number
    registrations: string
    description: string | null
    title: string | null
    created_at: Date | null
    _count: Records_of_studentsCountAggregateOutputType | null
    _avg: Records_of_studentsAvgAggregateOutputType | null
    _sum: Records_of_studentsSumAggregateOutputType | null
    _min: Records_of_studentsMinAggregateOutputType | null
    _max: Records_of_studentsMaxAggregateOutputType | null
  }

  type GetRecords_of_studentsGroupByPayload<T extends records_of_studentsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Records_of_studentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Records_of_studentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Records_of_studentsGroupByOutputType[P]>
            : GetScalarType<T[P], Records_of_studentsGroupByOutputType[P]>
        }
      >
    >


  export type records_of_studentsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    registrations?: boolean
    description?: boolean
    title?: boolean
    created_at?: boolean
    registrations_records_of_students_registrationsToregistrations?: boolean | registrationsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["records_of_students"]>

  export type records_of_studentsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    registrations?: boolean
    description?: boolean
    title?: boolean
    created_at?: boolean
    registrations_records_of_students_registrationsToregistrations?: boolean | registrationsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["records_of_students"]>

  export type records_of_studentsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    registrations?: boolean
    description?: boolean
    title?: boolean
    created_at?: boolean
    registrations_records_of_students_registrationsToregistrations?: boolean | registrationsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["records_of_students"]>

  export type records_of_studentsSelectScalar = {
    id?: boolean
    registrations?: boolean
    description?: boolean
    title?: boolean
    created_at?: boolean
  }

  export type records_of_studentsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "registrations" | "description" | "title" | "created_at", ExtArgs["result"]["records_of_students"]>
  export type records_of_studentsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registrations_records_of_students_registrationsToregistrations?: boolean | registrationsDefaultArgs<ExtArgs>
  }
  export type records_of_studentsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registrations_records_of_students_registrationsToregistrations?: boolean | registrationsDefaultArgs<ExtArgs>
  }
  export type records_of_studentsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registrations_records_of_students_registrationsToregistrations?: boolean | registrationsDefaultArgs<ExtArgs>
  }

  export type $records_of_studentsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "records_of_students"
    objects: {
      registrations_records_of_students_registrationsToregistrations: Prisma.$registrationsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      registrations: string
      description: string | null
      title: string | null
      created_at: Date | null
    }, ExtArgs["result"]["records_of_students"]>
    composites: {}
  }

  type records_of_studentsGetPayload<S extends boolean | null | undefined | records_of_studentsDefaultArgs> = $Result.GetResult<Prisma.$records_of_studentsPayload, S>

  type records_of_studentsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<records_of_studentsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Records_of_studentsCountAggregateInputType | true
    }

  export interface records_of_studentsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['records_of_students'], meta: { name: 'records_of_students' } }
    /**
     * Find zero or one Records_of_students that matches the filter.
     * @param {records_of_studentsFindUniqueArgs} args - Arguments to find a Records_of_students
     * @example
     * // Get one Records_of_students
     * const records_of_students = await prisma.records_of_students.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends records_of_studentsFindUniqueArgs>(args: SelectSubset<T, records_of_studentsFindUniqueArgs<ExtArgs>>): Prisma__records_of_studentsClient<$Result.GetResult<Prisma.$records_of_studentsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Records_of_students that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {records_of_studentsFindUniqueOrThrowArgs} args - Arguments to find a Records_of_students
     * @example
     * // Get one Records_of_students
     * const records_of_students = await prisma.records_of_students.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends records_of_studentsFindUniqueOrThrowArgs>(args: SelectSubset<T, records_of_studentsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__records_of_studentsClient<$Result.GetResult<Prisma.$records_of_studentsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Records_of_students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {records_of_studentsFindFirstArgs} args - Arguments to find a Records_of_students
     * @example
     * // Get one Records_of_students
     * const records_of_students = await prisma.records_of_students.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends records_of_studentsFindFirstArgs>(args?: SelectSubset<T, records_of_studentsFindFirstArgs<ExtArgs>>): Prisma__records_of_studentsClient<$Result.GetResult<Prisma.$records_of_studentsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Records_of_students that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {records_of_studentsFindFirstOrThrowArgs} args - Arguments to find a Records_of_students
     * @example
     * // Get one Records_of_students
     * const records_of_students = await prisma.records_of_students.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends records_of_studentsFindFirstOrThrowArgs>(args?: SelectSubset<T, records_of_studentsFindFirstOrThrowArgs<ExtArgs>>): Prisma__records_of_studentsClient<$Result.GetResult<Prisma.$records_of_studentsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Records_of_students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {records_of_studentsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Records_of_students
     * const records_of_students = await prisma.records_of_students.findMany()
     * 
     * // Get first 10 Records_of_students
     * const records_of_students = await prisma.records_of_students.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const records_of_studentsWithIdOnly = await prisma.records_of_students.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends records_of_studentsFindManyArgs>(args?: SelectSubset<T, records_of_studentsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$records_of_studentsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Records_of_students.
     * @param {records_of_studentsCreateArgs} args - Arguments to create a Records_of_students.
     * @example
     * // Create one Records_of_students
     * const Records_of_students = await prisma.records_of_students.create({
     *   data: {
     *     // ... data to create a Records_of_students
     *   }
     * })
     * 
     */
    create<T extends records_of_studentsCreateArgs>(args: SelectSubset<T, records_of_studentsCreateArgs<ExtArgs>>): Prisma__records_of_studentsClient<$Result.GetResult<Prisma.$records_of_studentsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Records_of_students.
     * @param {records_of_studentsCreateManyArgs} args - Arguments to create many Records_of_students.
     * @example
     * // Create many Records_of_students
     * const records_of_students = await prisma.records_of_students.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends records_of_studentsCreateManyArgs>(args?: SelectSubset<T, records_of_studentsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Records_of_students and returns the data saved in the database.
     * @param {records_of_studentsCreateManyAndReturnArgs} args - Arguments to create many Records_of_students.
     * @example
     * // Create many Records_of_students
     * const records_of_students = await prisma.records_of_students.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Records_of_students and only return the `id`
     * const records_of_studentsWithIdOnly = await prisma.records_of_students.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends records_of_studentsCreateManyAndReturnArgs>(args?: SelectSubset<T, records_of_studentsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$records_of_studentsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Records_of_students.
     * @param {records_of_studentsDeleteArgs} args - Arguments to delete one Records_of_students.
     * @example
     * // Delete one Records_of_students
     * const Records_of_students = await prisma.records_of_students.delete({
     *   where: {
     *     // ... filter to delete one Records_of_students
     *   }
     * })
     * 
     */
    delete<T extends records_of_studentsDeleteArgs>(args: SelectSubset<T, records_of_studentsDeleteArgs<ExtArgs>>): Prisma__records_of_studentsClient<$Result.GetResult<Prisma.$records_of_studentsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Records_of_students.
     * @param {records_of_studentsUpdateArgs} args - Arguments to update one Records_of_students.
     * @example
     * // Update one Records_of_students
     * const records_of_students = await prisma.records_of_students.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends records_of_studentsUpdateArgs>(args: SelectSubset<T, records_of_studentsUpdateArgs<ExtArgs>>): Prisma__records_of_studentsClient<$Result.GetResult<Prisma.$records_of_studentsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Records_of_students.
     * @param {records_of_studentsDeleteManyArgs} args - Arguments to filter Records_of_students to delete.
     * @example
     * // Delete a few Records_of_students
     * const { count } = await prisma.records_of_students.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends records_of_studentsDeleteManyArgs>(args?: SelectSubset<T, records_of_studentsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Records_of_students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {records_of_studentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Records_of_students
     * const records_of_students = await prisma.records_of_students.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends records_of_studentsUpdateManyArgs>(args: SelectSubset<T, records_of_studentsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Records_of_students and returns the data updated in the database.
     * @param {records_of_studentsUpdateManyAndReturnArgs} args - Arguments to update many Records_of_students.
     * @example
     * // Update many Records_of_students
     * const records_of_students = await prisma.records_of_students.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Records_of_students and only return the `id`
     * const records_of_studentsWithIdOnly = await prisma.records_of_students.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends records_of_studentsUpdateManyAndReturnArgs>(args: SelectSubset<T, records_of_studentsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$records_of_studentsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Records_of_students.
     * @param {records_of_studentsUpsertArgs} args - Arguments to update or create a Records_of_students.
     * @example
     * // Update or create a Records_of_students
     * const records_of_students = await prisma.records_of_students.upsert({
     *   create: {
     *     // ... data to create a Records_of_students
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Records_of_students we want to update
     *   }
     * })
     */
    upsert<T extends records_of_studentsUpsertArgs>(args: SelectSubset<T, records_of_studentsUpsertArgs<ExtArgs>>): Prisma__records_of_studentsClient<$Result.GetResult<Prisma.$records_of_studentsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Records_of_students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {records_of_studentsCountArgs} args - Arguments to filter Records_of_students to count.
     * @example
     * // Count the number of Records_of_students
     * const count = await prisma.records_of_students.count({
     *   where: {
     *     // ... the filter for the Records_of_students we want to count
     *   }
     * })
    **/
    count<T extends records_of_studentsCountArgs>(
      args?: Subset<T, records_of_studentsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Records_of_studentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Records_of_students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Records_of_studentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Records_of_studentsAggregateArgs>(args: Subset<T, Records_of_studentsAggregateArgs>): Prisma.PrismaPromise<GetRecords_of_studentsAggregateType<T>>

    /**
     * Group by Records_of_students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {records_of_studentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends records_of_studentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: records_of_studentsGroupByArgs['orderBy'] }
        : { orderBy?: records_of_studentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, records_of_studentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecords_of_studentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the records_of_students model
   */
  readonly fields: records_of_studentsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for records_of_students.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__records_of_studentsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    registrations_records_of_students_registrationsToregistrations<T extends registrationsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, registrationsDefaultArgs<ExtArgs>>): Prisma__registrationsClient<$Result.GetResult<Prisma.$registrationsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the records_of_students model
   */
  interface records_of_studentsFieldRefs {
    readonly id: FieldRef<"records_of_students", 'Int'>
    readonly registrations: FieldRef<"records_of_students", 'String'>
    readonly description: FieldRef<"records_of_students", 'String'>
    readonly title: FieldRef<"records_of_students", 'String'>
    readonly created_at: FieldRef<"records_of_students", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * records_of_students findUnique
   */
  export type records_of_studentsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the records_of_students
     */
    select?: records_of_studentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the records_of_students
     */
    omit?: records_of_studentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: records_of_studentsInclude<ExtArgs> | null
    /**
     * Filter, which records_of_students to fetch.
     */
    where: records_of_studentsWhereUniqueInput
  }

  /**
   * records_of_students findUniqueOrThrow
   */
  export type records_of_studentsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the records_of_students
     */
    select?: records_of_studentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the records_of_students
     */
    omit?: records_of_studentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: records_of_studentsInclude<ExtArgs> | null
    /**
     * Filter, which records_of_students to fetch.
     */
    where: records_of_studentsWhereUniqueInput
  }

  /**
   * records_of_students findFirst
   */
  export type records_of_studentsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the records_of_students
     */
    select?: records_of_studentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the records_of_students
     */
    omit?: records_of_studentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: records_of_studentsInclude<ExtArgs> | null
    /**
     * Filter, which records_of_students to fetch.
     */
    where?: records_of_studentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of records_of_students to fetch.
     */
    orderBy?: records_of_studentsOrderByWithRelationInput | records_of_studentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for records_of_students.
     */
    cursor?: records_of_studentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` records_of_students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` records_of_students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of records_of_students.
     */
    distinct?: Records_of_studentsScalarFieldEnum | Records_of_studentsScalarFieldEnum[]
  }

  /**
   * records_of_students findFirstOrThrow
   */
  export type records_of_studentsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the records_of_students
     */
    select?: records_of_studentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the records_of_students
     */
    omit?: records_of_studentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: records_of_studentsInclude<ExtArgs> | null
    /**
     * Filter, which records_of_students to fetch.
     */
    where?: records_of_studentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of records_of_students to fetch.
     */
    orderBy?: records_of_studentsOrderByWithRelationInput | records_of_studentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for records_of_students.
     */
    cursor?: records_of_studentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` records_of_students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` records_of_students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of records_of_students.
     */
    distinct?: Records_of_studentsScalarFieldEnum | Records_of_studentsScalarFieldEnum[]
  }

  /**
   * records_of_students findMany
   */
  export type records_of_studentsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the records_of_students
     */
    select?: records_of_studentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the records_of_students
     */
    omit?: records_of_studentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: records_of_studentsInclude<ExtArgs> | null
    /**
     * Filter, which records_of_students to fetch.
     */
    where?: records_of_studentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of records_of_students to fetch.
     */
    orderBy?: records_of_studentsOrderByWithRelationInput | records_of_studentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing records_of_students.
     */
    cursor?: records_of_studentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` records_of_students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` records_of_students.
     */
    skip?: number
    distinct?: Records_of_studentsScalarFieldEnum | Records_of_studentsScalarFieldEnum[]
  }

  /**
   * records_of_students create
   */
  export type records_of_studentsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the records_of_students
     */
    select?: records_of_studentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the records_of_students
     */
    omit?: records_of_studentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: records_of_studentsInclude<ExtArgs> | null
    /**
     * The data needed to create a records_of_students.
     */
    data: XOR<records_of_studentsCreateInput, records_of_studentsUncheckedCreateInput>
  }

  /**
   * records_of_students createMany
   */
  export type records_of_studentsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many records_of_students.
     */
    data: records_of_studentsCreateManyInput | records_of_studentsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * records_of_students createManyAndReturn
   */
  export type records_of_studentsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the records_of_students
     */
    select?: records_of_studentsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the records_of_students
     */
    omit?: records_of_studentsOmit<ExtArgs> | null
    /**
     * The data used to create many records_of_students.
     */
    data: records_of_studentsCreateManyInput | records_of_studentsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: records_of_studentsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * records_of_students update
   */
  export type records_of_studentsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the records_of_students
     */
    select?: records_of_studentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the records_of_students
     */
    omit?: records_of_studentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: records_of_studentsInclude<ExtArgs> | null
    /**
     * The data needed to update a records_of_students.
     */
    data: XOR<records_of_studentsUpdateInput, records_of_studentsUncheckedUpdateInput>
    /**
     * Choose, which records_of_students to update.
     */
    where: records_of_studentsWhereUniqueInput
  }

  /**
   * records_of_students updateMany
   */
  export type records_of_studentsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update records_of_students.
     */
    data: XOR<records_of_studentsUpdateManyMutationInput, records_of_studentsUncheckedUpdateManyInput>
    /**
     * Filter which records_of_students to update
     */
    where?: records_of_studentsWhereInput
    /**
     * Limit how many records_of_students to update.
     */
    limit?: number
  }

  /**
   * records_of_students updateManyAndReturn
   */
  export type records_of_studentsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the records_of_students
     */
    select?: records_of_studentsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the records_of_students
     */
    omit?: records_of_studentsOmit<ExtArgs> | null
    /**
     * The data used to update records_of_students.
     */
    data: XOR<records_of_studentsUpdateManyMutationInput, records_of_studentsUncheckedUpdateManyInput>
    /**
     * Filter which records_of_students to update
     */
    where?: records_of_studentsWhereInput
    /**
     * Limit how many records_of_students to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: records_of_studentsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * records_of_students upsert
   */
  export type records_of_studentsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the records_of_students
     */
    select?: records_of_studentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the records_of_students
     */
    omit?: records_of_studentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: records_of_studentsInclude<ExtArgs> | null
    /**
     * The filter to search for the records_of_students to update in case it exists.
     */
    where: records_of_studentsWhereUniqueInput
    /**
     * In case the records_of_students found by the `where` argument doesn't exist, create a new records_of_students with this data.
     */
    create: XOR<records_of_studentsCreateInput, records_of_studentsUncheckedCreateInput>
    /**
     * In case the records_of_students was found with the provided `where` argument, update it with this data.
     */
    update: XOR<records_of_studentsUpdateInput, records_of_studentsUncheckedUpdateInput>
  }

  /**
   * records_of_students delete
   */
  export type records_of_studentsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the records_of_students
     */
    select?: records_of_studentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the records_of_students
     */
    omit?: records_of_studentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: records_of_studentsInclude<ExtArgs> | null
    /**
     * Filter which records_of_students to delete.
     */
    where: records_of_studentsWhereUniqueInput
  }

  /**
   * records_of_students deleteMany
   */
  export type records_of_studentsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which records_of_students to delete
     */
    where?: records_of_studentsWhereInput
    /**
     * Limit how many records_of_students to delete.
     */
    limit?: number
  }

  /**
   * records_of_students without action
   */
  export type records_of_studentsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the records_of_students
     */
    select?: records_of_studentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the records_of_students
     */
    omit?: records_of_studentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: records_of_studentsInclude<ExtArgs> | null
  }


  /**
   * Model registrations
   */

  export type AggregateRegistrations = {
    _count: RegistrationsCountAggregateOutputType | null
    _avg: RegistrationsAvgAggregateOutputType | null
    _sum: RegistrationsSumAggregateOutputType | null
    _min: RegistrationsMinAggregateOutputType | null
    _max: RegistrationsMaxAggregateOutputType | null
  }

  export type RegistrationsAvgAggregateOutputType = {
    monthly_fee_amount: Decimal | null
  }

  export type RegistrationsSumAggregateOutputType = {
    monthly_fee_amount: Decimal | null
  }

  export type RegistrationsMinAggregateOutputType = {
    id: string | null
    start_date: Date | null
    monthly_fee_amount: Decimal | null
    created_at: Date | null
    locked: boolean | null
    completed: boolean | null
    users: string | null
    companies: string | null
  }

  export type RegistrationsMaxAggregateOutputType = {
    id: string | null
    start_date: Date | null
    monthly_fee_amount: Decimal | null
    created_at: Date | null
    locked: boolean | null
    completed: boolean | null
    users: string | null
    companies: string | null
  }

  export type RegistrationsCountAggregateOutputType = {
    id: number
    start_date: number
    monthly_fee_amount: number
    created_at: number
    locked: number
    completed: number
    users: number
    companies: number
    _all: number
  }


  export type RegistrationsAvgAggregateInputType = {
    monthly_fee_amount?: true
  }

  export type RegistrationsSumAggregateInputType = {
    monthly_fee_amount?: true
  }

  export type RegistrationsMinAggregateInputType = {
    id?: true
    start_date?: true
    monthly_fee_amount?: true
    created_at?: true
    locked?: true
    completed?: true
    users?: true
    companies?: true
  }

  export type RegistrationsMaxAggregateInputType = {
    id?: true
    start_date?: true
    monthly_fee_amount?: true
    created_at?: true
    locked?: true
    completed?: true
    users?: true
    companies?: true
  }

  export type RegistrationsCountAggregateInputType = {
    id?: true
    start_date?: true
    monthly_fee_amount?: true
    created_at?: true
    locked?: true
    completed?: true
    users?: true
    companies?: true
    _all?: true
  }

  export type RegistrationsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which registrations to aggregate.
     */
    where?: registrationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of registrations to fetch.
     */
    orderBy?: registrationsOrderByWithRelationInput | registrationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: registrationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` registrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` registrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned registrations
    **/
    _count?: true | RegistrationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RegistrationsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RegistrationsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RegistrationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RegistrationsMaxAggregateInputType
  }

  export type GetRegistrationsAggregateType<T extends RegistrationsAggregateArgs> = {
        [P in keyof T & keyof AggregateRegistrations]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRegistrations[P]>
      : GetScalarType<T[P], AggregateRegistrations[P]>
  }




  export type registrationsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: registrationsWhereInput
    orderBy?: registrationsOrderByWithAggregationInput | registrationsOrderByWithAggregationInput[]
    by: RegistrationsScalarFieldEnum[] | RegistrationsScalarFieldEnum
    having?: registrationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RegistrationsCountAggregateInputType | true
    _avg?: RegistrationsAvgAggregateInputType
    _sum?: RegistrationsSumAggregateInputType
    _min?: RegistrationsMinAggregateInputType
    _max?: RegistrationsMaxAggregateInputType
  }

  export type RegistrationsGroupByOutputType = {
    id: string
    start_date: Date
    monthly_fee_amount: Decimal
    created_at: Date | null
    locked: boolean | null
    completed: boolean | null
    users: string | null
    companies: string | null
    _count: RegistrationsCountAggregateOutputType | null
    _avg: RegistrationsAvgAggregateOutputType | null
    _sum: RegistrationsSumAggregateOutputType | null
    _min: RegistrationsMinAggregateOutputType | null
    _max: RegistrationsMaxAggregateOutputType | null
  }

  type GetRegistrationsGroupByPayload<T extends registrationsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RegistrationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RegistrationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RegistrationsGroupByOutputType[P]>
            : GetScalarType<T[P], RegistrationsGroupByOutputType[P]>
        }
      >
    >


  export type registrationsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    start_date?: boolean
    monthly_fee_amount?: boolean
    created_at?: boolean
    locked?: boolean
    completed?: boolean
    users?: boolean
    companies?: boolean
    monthly_fee_monthly_fee_registrationsToregistrations?: boolean | registrations$monthly_fee_monthly_fee_registrationsToregistrationsArgs<ExtArgs>
    records_of_students_records_of_students_registrationsToregistrations?: boolean | registrations$records_of_students_records_of_students_registrationsToregistrationsArgs<ExtArgs>
    companies_registrations_companiesTocompanies?: boolean | registrations$companies_registrations_companiesTocompaniesArgs<ExtArgs>
    users_registrations_usersTousers?: boolean | registrations$users_registrations_usersTousersArgs<ExtArgs>
    _count?: boolean | RegistrationsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["registrations"]>

  export type registrationsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    start_date?: boolean
    monthly_fee_amount?: boolean
    created_at?: boolean
    locked?: boolean
    completed?: boolean
    users?: boolean
    companies?: boolean
    companies_registrations_companiesTocompanies?: boolean | registrations$companies_registrations_companiesTocompaniesArgs<ExtArgs>
    users_registrations_usersTousers?: boolean | registrations$users_registrations_usersTousersArgs<ExtArgs>
  }, ExtArgs["result"]["registrations"]>

  export type registrationsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    start_date?: boolean
    monthly_fee_amount?: boolean
    created_at?: boolean
    locked?: boolean
    completed?: boolean
    users?: boolean
    companies?: boolean
    companies_registrations_companiesTocompanies?: boolean | registrations$companies_registrations_companiesTocompaniesArgs<ExtArgs>
    users_registrations_usersTousers?: boolean | registrations$users_registrations_usersTousersArgs<ExtArgs>
  }, ExtArgs["result"]["registrations"]>

  export type registrationsSelectScalar = {
    id?: boolean
    start_date?: boolean
    monthly_fee_amount?: boolean
    created_at?: boolean
    locked?: boolean
    completed?: boolean
    users?: boolean
    companies?: boolean
  }

  export type registrationsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "start_date" | "monthly_fee_amount" | "created_at" | "locked" | "completed" | "users" | "companies", ExtArgs["result"]["registrations"]>
  export type registrationsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    monthly_fee_monthly_fee_registrationsToregistrations?: boolean | registrations$monthly_fee_monthly_fee_registrationsToregistrationsArgs<ExtArgs>
    records_of_students_records_of_students_registrationsToregistrations?: boolean | registrations$records_of_students_records_of_students_registrationsToregistrationsArgs<ExtArgs>
    companies_registrations_companiesTocompanies?: boolean | registrations$companies_registrations_companiesTocompaniesArgs<ExtArgs>
    users_registrations_usersTousers?: boolean | registrations$users_registrations_usersTousersArgs<ExtArgs>
    _count?: boolean | RegistrationsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type registrationsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    companies_registrations_companiesTocompanies?: boolean | registrations$companies_registrations_companiesTocompaniesArgs<ExtArgs>
    users_registrations_usersTousers?: boolean | registrations$users_registrations_usersTousersArgs<ExtArgs>
  }
  export type registrationsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    companies_registrations_companiesTocompanies?: boolean | registrations$companies_registrations_companiesTocompaniesArgs<ExtArgs>
    users_registrations_usersTousers?: boolean | registrations$users_registrations_usersTousersArgs<ExtArgs>
  }

  export type $registrationsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "registrations"
    objects: {
      monthly_fee_monthly_fee_registrationsToregistrations: Prisma.$monthly_feePayload<ExtArgs>[]
      records_of_students_records_of_students_registrationsToregistrations: Prisma.$records_of_studentsPayload<ExtArgs>[]
      companies_registrations_companiesTocompanies: Prisma.$companiesPayload<ExtArgs> | null
      users_registrations_usersTousers: Prisma.$usersPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      start_date: Date
      monthly_fee_amount: Prisma.Decimal
      created_at: Date | null
      locked: boolean | null
      completed: boolean | null
      users: string | null
      companies: string | null
    }, ExtArgs["result"]["registrations"]>
    composites: {}
  }

  type registrationsGetPayload<S extends boolean | null | undefined | registrationsDefaultArgs> = $Result.GetResult<Prisma.$registrationsPayload, S>

  type registrationsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<registrationsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RegistrationsCountAggregateInputType | true
    }

  export interface registrationsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['registrations'], meta: { name: 'registrations' } }
    /**
     * Find zero or one Registrations that matches the filter.
     * @param {registrationsFindUniqueArgs} args - Arguments to find a Registrations
     * @example
     * // Get one Registrations
     * const registrations = await prisma.registrations.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends registrationsFindUniqueArgs>(args: SelectSubset<T, registrationsFindUniqueArgs<ExtArgs>>): Prisma__registrationsClient<$Result.GetResult<Prisma.$registrationsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Registrations that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {registrationsFindUniqueOrThrowArgs} args - Arguments to find a Registrations
     * @example
     * // Get one Registrations
     * const registrations = await prisma.registrations.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends registrationsFindUniqueOrThrowArgs>(args: SelectSubset<T, registrationsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__registrationsClient<$Result.GetResult<Prisma.$registrationsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Registrations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {registrationsFindFirstArgs} args - Arguments to find a Registrations
     * @example
     * // Get one Registrations
     * const registrations = await prisma.registrations.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends registrationsFindFirstArgs>(args?: SelectSubset<T, registrationsFindFirstArgs<ExtArgs>>): Prisma__registrationsClient<$Result.GetResult<Prisma.$registrationsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Registrations that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {registrationsFindFirstOrThrowArgs} args - Arguments to find a Registrations
     * @example
     * // Get one Registrations
     * const registrations = await prisma.registrations.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends registrationsFindFirstOrThrowArgs>(args?: SelectSubset<T, registrationsFindFirstOrThrowArgs<ExtArgs>>): Prisma__registrationsClient<$Result.GetResult<Prisma.$registrationsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Registrations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {registrationsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Registrations
     * const registrations = await prisma.registrations.findMany()
     * 
     * // Get first 10 Registrations
     * const registrations = await prisma.registrations.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const registrationsWithIdOnly = await prisma.registrations.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends registrationsFindManyArgs>(args?: SelectSubset<T, registrationsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$registrationsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Registrations.
     * @param {registrationsCreateArgs} args - Arguments to create a Registrations.
     * @example
     * // Create one Registrations
     * const Registrations = await prisma.registrations.create({
     *   data: {
     *     // ... data to create a Registrations
     *   }
     * })
     * 
     */
    create<T extends registrationsCreateArgs>(args: SelectSubset<T, registrationsCreateArgs<ExtArgs>>): Prisma__registrationsClient<$Result.GetResult<Prisma.$registrationsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Registrations.
     * @param {registrationsCreateManyArgs} args - Arguments to create many Registrations.
     * @example
     * // Create many Registrations
     * const registrations = await prisma.registrations.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends registrationsCreateManyArgs>(args?: SelectSubset<T, registrationsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Registrations and returns the data saved in the database.
     * @param {registrationsCreateManyAndReturnArgs} args - Arguments to create many Registrations.
     * @example
     * // Create many Registrations
     * const registrations = await prisma.registrations.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Registrations and only return the `id`
     * const registrationsWithIdOnly = await prisma.registrations.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends registrationsCreateManyAndReturnArgs>(args?: SelectSubset<T, registrationsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$registrationsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Registrations.
     * @param {registrationsDeleteArgs} args - Arguments to delete one Registrations.
     * @example
     * // Delete one Registrations
     * const Registrations = await prisma.registrations.delete({
     *   where: {
     *     // ... filter to delete one Registrations
     *   }
     * })
     * 
     */
    delete<T extends registrationsDeleteArgs>(args: SelectSubset<T, registrationsDeleteArgs<ExtArgs>>): Prisma__registrationsClient<$Result.GetResult<Prisma.$registrationsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Registrations.
     * @param {registrationsUpdateArgs} args - Arguments to update one Registrations.
     * @example
     * // Update one Registrations
     * const registrations = await prisma.registrations.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends registrationsUpdateArgs>(args: SelectSubset<T, registrationsUpdateArgs<ExtArgs>>): Prisma__registrationsClient<$Result.GetResult<Prisma.$registrationsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Registrations.
     * @param {registrationsDeleteManyArgs} args - Arguments to filter Registrations to delete.
     * @example
     * // Delete a few Registrations
     * const { count } = await prisma.registrations.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends registrationsDeleteManyArgs>(args?: SelectSubset<T, registrationsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Registrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {registrationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Registrations
     * const registrations = await prisma.registrations.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends registrationsUpdateManyArgs>(args: SelectSubset<T, registrationsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Registrations and returns the data updated in the database.
     * @param {registrationsUpdateManyAndReturnArgs} args - Arguments to update many Registrations.
     * @example
     * // Update many Registrations
     * const registrations = await prisma.registrations.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Registrations and only return the `id`
     * const registrationsWithIdOnly = await prisma.registrations.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends registrationsUpdateManyAndReturnArgs>(args: SelectSubset<T, registrationsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$registrationsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Registrations.
     * @param {registrationsUpsertArgs} args - Arguments to update or create a Registrations.
     * @example
     * // Update or create a Registrations
     * const registrations = await prisma.registrations.upsert({
     *   create: {
     *     // ... data to create a Registrations
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Registrations we want to update
     *   }
     * })
     */
    upsert<T extends registrationsUpsertArgs>(args: SelectSubset<T, registrationsUpsertArgs<ExtArgs>>): Prisma__registrationsClient<$Result.GetResult<Prisma.$registrationsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Registrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {registrationsCountArgs} args - Arguments to filter Registrations to count.
     * @example
     * // Count the number of Registrations
     * const count = await prisma.registrations.count({
     *   where: {
     *     // ... the filter for the Registrations we want to count
     *   }
     * })
    **/
    count<T extends registrationsCountArgs>(
      args?: Subset<T, registrationsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RegistrationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Registrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistrationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RegistrationsAggregateArgs>(args: Subset<T, RegistrationsAggregateArgs>): Prisma.PrismaPromise<GetRegistrationsAggregateType<T>>

    /**
     * Group by Registrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {registrationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends registrationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: registrationsGroupByArgs['orderBy'] }
        : { orderBy?: registrationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, registrationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRegistrationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the registrations model
   */
  readonly fields: registrationsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for registrations.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__registrationsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    monthly_fee_monthly_fee_registrationsToregistrations<T extends registrations$monthly_fee_monthly_fee_registrationsToregistrationsArgs<ExtArgs> = {}>(args?: Subset<T, registrations$monthly_fee_monthly_fee_registrationsToregistrationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$monthly_feePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    records_of_students_records_of_students_registrationsToregistrations<T extends registrations$records_of_students_records_of_students_registrationsToregistrationsArgs<ExtArgs> = {}>(args?: Subset<T, registrations$records_of_students_records_of_students_registrationsToregistrationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$records_of_studentsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    companies_registrations_companiesTocompanies<T extends registrations$companies_registrations_companiesTocompaniesArgs<ExtArgs> = {}>(args?: Subset<T, registrations$companies_registrations_companiesTocompaniesArgs<ExtArgs>>): Prisma__companiesClient<$Result.GetResult<Prisma.$companiesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    users_registrations_usersTousers<T extends registrations$users_registrations_usersTousersArgs<ExtArgs> = {}>(args?: Subset<T, registrations$users_registrations_usersTousersArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the registrations model
   */
  interface registrationsFieldRefs {
    readonly id: FieldRef<"registrations", 'String'>
    readonly start_date: FieldRef<"registrations", 'DateTime'>
    readonly monthly_fee_amount: FieldRef<"registrations", 'Decimal'>
    readonly created_at: FieldRef<"registrations", 'DateTime'>
    readonly locked: FieldRef<"registrations", 'Boolean'>
    readonly completed: FieldRef<"registrations", 'Boolean'>
    readonly users: FieldRef<"registrations", 'String'>
    readonly companies: FieldRef<"registrations", 'String'>
  }
    

  // Custom InputTypes
  /**
   * registrations findUnique
   */
  export type registrationsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registrations
     */
    select?: registrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the registrations
     */
    omit?: registrationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registrationsInclude<ExtArgs> | null
    /**
     * Filter, which registrations to fetch.
     */
    where: registrationsWhereUniqueInput
  }

  /**
   * registrations findUniqueOrThrow
   */
  export type registrationsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registrations
     */
    select?: registrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the registrations
     */
    omit?: registrationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registrationsInclude<ExtArgs> | null
    /**
     * Filter, which registrations to fetch.
     */
    where: registrationsWhereUniqueInput
  }

  /**
   * registrations findFirst
   */
  export type registrationsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registrations
     */
    select?: registrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the registrations
     */
    omit?: registrationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registrationsInclude<ExtArgs> | null
    /**
     * Filter, which registrations to fetch.
     */
    where?: registrationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of registrations to fetch.
     */
    orderBy?: registrationsOrderByWithRelationInput | registrationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for registrations.
     */
    cursor?: registrationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` registrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` registrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of registrations.
     */
    distinct?: RegistrationsScalarFieldEnum | RegistrationsScalarFieldEnum[]
  }

  /**
   * registrations findFirstOrThrow
   */
  export type registrationsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registrations
     */
    select?: registrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the registrations
     */
    omit?: registrationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registrationsInclude<ExtArgs> | null
    /**
     * Filter, which registrations to fetch.
     */
    where?: registrationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of registrations to fetch.
     */
    orderBy?: registrationsOrderByWithRelationInput | registrationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for registrations.
     */
    cursor?: registrationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` registrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` registrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of registrations.
     */
    distinct?: RegistrationsScalarFieldEnum | RegistrationsScalarFieldEnum[]
  }

  /**
   * registrations findMany
   */
  export type registrationsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registrations
     */
    select?: registrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the registrations
     */
    omit?: registrationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registrationsInclude<ExtArgs> | null
    /**
     * Filter, which registrations to fetch.
     */
    where?: registrationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of registrations to fetch.
     */
    orderBy?: registrationsOrderByWithRelationInput | registrationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing registrations.
     */
    cursor?: registrationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` registrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` registrations.
     */
    skip?: number
    distinct?: RegistrationsScalarFieldEnum | RegistrationsScalarFieldEnum[]
  }

  /**
   * registrations create
   */
  export type registrationsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registrations
     */
    select?: registrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the registrations
     */
    omit?: registrationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registrationsInclude<ExtArgs> | null
    /**
     * The data needed to create a registrations.
     */
    data: XOR<registrationsCreateInput, registrationsUncheckedCreateInput>
  }

  /**
   * registrations createMany
   */
  export type registrationsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many registrations.
     */
    data: registrationsCreateManyInput | registrationsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * registrations createManyAndReturn
   */
  export type registrationsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registrations
     */
    select?: registrationsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the registrations
     */
    omit?: registrationsOmit<ExtArgs> | null
    /**
     * The data used to create many registrations.
     */
    data: registrationsCreateManyInput | registrationsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registrationsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * registrations update
   */
  export type registrationsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registrations
     */
    select?: registrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the registrations
     */
    omit?: registrationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registrationsInclude<ExtArgs> | null
    /**
     * The data needed to update a registrations.
     */
    data: XOR<registrationsUpdateInput, registrationsUncheckedUpdateInput>
    /**
     * Choose, which registrations to update.
     */
    where: registrationsWhereUniqueInput
  }

  /**
   * registrations updateMany
   */
  export type registrationsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update registrations.
     */
    data: XOR<registrationsUpdateManyMutationInput, registrationsUncheckedUpdateManyInput>
    /**
     * Filter which registrations to update
     */
    where?: registrationsWhereInput
    /**
     * Limit how many registrations to update.
     */
    limit?: number
  }

  /**
   * registrations updateManyAndReturn
   */
  export type registrationsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registrations
     */
    select?: registrationsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the registrations
     */
    omit?: registrationsOmit<ExtArgs> | null
    /**
     * The data used to update registrations.
     */
    data: XOR<registrationsUpdateManyMutationInput, registrationsUncheckedUpdateManyInput>
    /**
     * Filter which registrations to update
     */
    where?: registrationsWhereInput
    /**
     * Limit how many registrations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registrationsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * registrations upsert
   */
  export type registrationsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registrations
     */
    select?: registrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the registrations
     */
    omit?: registrationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registrationsInclude<ExtArgs> | null
    /**
     * The filter to search for the registrations to update in case it exists.
     */
    where: registrationsWhereUniqueInput
    /**
     * In case the registrations found by the `where` argument doesn't exist, create a new registrations with this data.
     */
    create: XOR<registrationsCreateInput, registrationsUncheckedCreateInput>
    /**
     * In case the registrations was found with the provided `where` argument, update it with this data.
     */
    update: XOR<registrationsUpdateInput, registrationsUncheckedUpdateInput>
  }

  /**
   * registrations delete
   */
  export type registrationsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registrations
     */
    select?: registrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the registrations
     */
    omit?: registrationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registrationsInclude<ExtArgs> | null
    /**
     * Filter which registrations to delete.
     */
    where: registrationsWhereUniqueInput
  }

  /**
   * registrations deleteMany
   */
  export type registrationsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which registrations to delete
     */
    where?: registrationsWhereInput
    /**
     * Limit how many registrations to delete.
     */
    limit?: number
  }

  /**
   * registrations.monthly_fee_monthly_fee_registrationsToregistrations
   */
  export type registrations$monthly_fee_monthly_fee_registrationsToregistrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the monthly_fee
     */
    select?: monthly_feeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the monthly_fee
     */
    omit?: monthly_feeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: monthly_feeInclude<ExtArgs> | null
    where?: monthly_feeWhereInput
    orderBy?: monthly_feeOrderByWithRelationInput | monthly_feeOrderByWithRelationInput[]
    cursor?: monthly_feeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Monthly_feeScalarFieldEnum | Monthly_feeScalarFieldEnum[]
  }

  /**
   * registrations.records_of_students_records_of_students_registrationsToregistrations
   */
  export type registrations$records_of_students_records_of_students_registrationsToregistrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the records_of_students
     */
    select?: records_of_studentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the records_of_students
     */
    omit?: records_of_studentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: records_of_studentsInclude<ExtArgs> | null
    where?: records_of_studentsWhereInput
    orderBy?: records_of_studentsOrderByWithRelationInput | records_of_studentsOrderByWithRelationInput[]
    cursor?: records_of_studentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Records_of_studentsScalarFieldEnum | Records_of_studentsScalarFieldEnum[]
  }

  /**
   * registrations.companies_registrations_companiesTocompanies
   */
  export type registrations$companies_registrations_companiesTocompaniesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the companies
     */
    select?: companiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the companies
     */
    omit?: companiesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: companiesInclude<ExtArgs> | null
    where?: companiesWhereInput
  }

  /**
   * registrations.users_registrations_usersTousers
   */
  export type registrations$users_registrations_usersTousersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
  }

  /**
   * registrations without action
   */
  export type registrationsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registrations
     */
    select?: registrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the registrations
     */
    omit?: registrationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registrationsInclude<ExtArgs> | null
  }


  /**
   * Model roles
   */

  export type AggregateRoles = {
    _count: RolesCountAggregateOutputType | null
    _min: RolesMinAggregateOutputType | null
    _max: RolesMaxAggregateOutputType | null
  }

  export type RolesMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type RolesMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type RolesCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type RolesMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type RolesMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type RolesCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type RolesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which roles to aggregate.
     */
    where?: rolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     */
    orderBy?: rolesOrderByWithRelationInput | rolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: rolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned roles
    **/
    _count?: true | RolesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RolesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RolesMaxAggregateInputType
  }

  export type GetRolesAggregateType<T extends RolesAggregateArgs> = {
        [P in keyof T & keyof AggregateRoles]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoles[P]>
      : GetScalarType<T[P], AggregateRoles[P]>
  }




  export type rolesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: rolesWhereInput
    orderBy?: rolesOrderByWithAggregationInput | rolesOrderByWithAggregationInput[]
    by: RolesScalarFieldEnum[] | RolesScalarFieldEnum
    having?: rolesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RolesCountAggregateInputType | true
    _min?: RolesMinAggregateInputType
    _max?: RolesMaxAggregateInputType
  }

  export type RolesGroupByOutputType = {
    id: string
    name: string
    _count: RolesCountAggregateOutputType | null
    _min: RolesMinAggregateOutputType | null
    _max: RolesMaxAggregateOutputType | null
  }

  type GetRolesGroupByPayload<T extends rolesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RolesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RolesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RolesGroupByOutputType[P]>
            : GetScalarType<T[P], RolesGroupByOutputType[P]>
        }
      >
    >


  export type rolesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    users_roles?: boolean | roles$users_rolesArgs<ExtArgs>
    _count?: boolean | RolesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["roles"]>

  export type rolesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["roles"]>

  export type rolesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["roles"]>

  export type rolesSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type rolesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["roles"]>
  export type rolesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users_roles?: boolean | roles$users_rolesArgs<ExtArgs>
    _count?: boolean | RolesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type rolesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type rolesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $rolesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "roles"
    objects: {
      users_roles: Prisma.$users_rolesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
    }, ExtArgs["result"]["roles"]>
    composites: {}
  }

  type rolesGetPayload<S extends boolean | null | undefined | rolesDefaultArgs> = $Result.GetResult<Prisma.$rolesPayload, S>

  type rolesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<rolesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RolesCountAggregateInputType | true
    }

  export interface rolesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['roles'], meta: { name: 'roles' } }
    /**
     * Find zero or one Roles that matches the filter.
     * @param {rolesFindUniqueArgs} args - Arguments to find a Roles
     * @example
     * // Get one Roles
     * const roles = await prisma.roles.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends rolesFindUniqueArgs>(args: SelectSubset<T, rolesFindUniqueArgs<ExtArgs>>): Prisma__rolesClient<$Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Roles that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {rolesFindUniqueOrThrowArgs} args - Arguments to find a Roles
     * @example
     * // Get one Roles
     * const roles = await prisma.roles.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends rolesFindUniqueOrThrowArgs>(args: SelectSubset<T, rolesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__rolesClient<$Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rolesFindFirstArgs} args - Arguments to find a Roles
     * @example
     * // Get one Roles
     * const roles = await prisma.roles.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends rolesFindFirstArgs>(args?: SelectSubset<T, rolesFindFirstArgs<ExtArgs>>): Prisma__rolesClient<$Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Roles that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rolesFindFirstOrThrowArgs} args - Arguments to find a Roles
     * @example
     * // Get one Roles
     * const roles = await prisma.roles.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends rolesFindFirstOrThrowArgs>(args?: SelectSubset<T, rolesFindFirstOrThrowArgs<ExtArgs>>): Prisma__rolesClient<$Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rolesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.roles.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.roles.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rolesWithIdOnly = await prisma.roles.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends rolesFindManyArgs>(args?: SelectSubset<T, rolesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Roles.
     * @param {rolesCreateArgs} args - Arguments to create a Roles.
     * @example
     * // Create one Roles
     * const Roles = await prisma.roles.create({
     *   data: {
     *     // ... data to create a Roles
     *   }
     * })
     * 
     */
    create<T extends rolesCreateArgs>(args: SelectSubset<T, rolesCreateArgs<ExtArgs>>): Prisma__rolesClient<$Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Roles.
     * @param {rolesCreateManyArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const roles = await prisma.roles.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends rolesCreateManyArgs>(args?: SelectSubset<T, rolesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Roles and returns the data saved in the database.
     * @param {rolesCreateManyAndReturnArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const roles = await prisma.roles.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Roles and only return the `id`
     * const rolesWithIdOnly = await prisma.roles.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends rolesCreateManyAndReturnArgs>(args?: SelectSubset<T, rolesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Roles.
     * @param {rolesDeleteArgs} args - Arguments to delete one Roles.
     * @example
     * // Delete one Roles
     * const Roles = await prisma.roles.delete({
     *   where: {
     *     // ... filter to delete one Roles
     *   }
     * })
     * 
     */
    delete<T extends rolesDeleteArgs>(args: SelectSubset<T, rolesDeleteArgs<ExtArgs>>): Prisma__rolesClient<$Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Roles.
     * @param {rolesUpdateArgs} args - Arguments to update one Roles.
     * @example
     * // Update one Roles
     * const roles = await prisma.roles.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends rolesUpdateArgs>(args: SelectSubset<T, rolesUpdateArgs<ExtArgs>>): Prisma__rolesClient<$Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Roles.
     * @param {rolesDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.roles.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends rolesDeleteManyArgs>(args?: SelectSubset<T, rolesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rolesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const roles = await prisma.roles.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends rolesUpdateManyArgs>(args: SelectSubset<T, rolesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles and returns the data updated in the database.
     * @param {rolesUpdateManyAndReturnArgs} args - Arguments to update many Roles.
     * @example
     * // Update many Roles
     * const roles = await prisma.roles.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Roles and only return the `id`
     * const rolesWithIdOnly = await prisma.roles.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends rolesUpdateManyAndReturnArgs>(args: SelectSubset<T, rolesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Roles.
     * @param {rolesUpsertArgs} args - Arguments to update or create a Roles.
     * @example
     * // Update or create a Roles
     * const roles = await prisma.roles.upsert({
     *   create: {
     *     // ... data to create a Roles
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Roles we want to update
     *   }
     * })
     */
    upsert<T extends rolesUpsertArgs>(args: SelectSubset<T, rolesUpsertArgs<ExtArgs>>): Prisma__rolesClient<$Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rolesCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.roles.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends rolesCountArgs>(
      args?: Subset<T, rolesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RolesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RolesAggregateArgs>(args: Subset<T, RolesAggregateArgs>): Prisma.PrismaPromise<GetRolesAggregateType<T>>

    /**
     * Group by Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rolesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends rolesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: rolesGroupByArgs['orderBy'] }
        : { orderBy?: rolesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, rolesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRolesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the roles model
   */
  readonly fields: rolesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for roles.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__rolesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users_roles<T extends roles$users_rolesArgs<ExtArgs> = {}>(args?: Subset<T, roles$users_rolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$users_rolesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the roles model
   */
  interface rolesFieldRefs {
    readonly id: FieldRef<"roles", 'String'>
    readonly name: FieldRef<"roles", 'String'>
  }
    

  // Custom InputTypes
  /**
   * roles findUnique
   */
  export type rolesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the roles
     */
    select?: rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the roles
     */
    omit?: rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolesInclude<ExtArgs> | null
    /**
     * Filter, which roles to fetch.
     */
    where: rolesWhereUniqueInput
  }

  /**
   * roles findUniqueOrThrow
   */
  export type rolesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the roles
     */
    select?: rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the roles
     */
    omit?: rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolesInclude<ExtArgs> | null
    /**
     * Filter, which roles to fetch.
     */
    where: rolesWhereUniqueInput
  }

  /**
   * roles findFirst
   */
  export type rolesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the roles
     */
    select?: rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the roles
     */
    omit?: rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolesInclude<ExtArgs> | null
    /**
     * Filter, which roles to fetch.
     */
    where?: rolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     */
    orderBy?: rolesOrderByWithRelationInput | rolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for roles.
     */
    cursor?: rolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of roles.
     */
    distinct?: RolesScalarFieldEnum | RolesScalarFieldEnum[]
  }

  /**
   * roles findFirstOrThrow
   */
  export type rolesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the roles
     */
    select?: rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the roles
     */
    omit?: rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolesInclude<ExtArgs> | null
    /**
     * Filter, which roles to fetch.
     */
    where?: rolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     */
    orderBy?: rolesOrderByWithRelationInput | rolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for roles.
     */
    cursor?: rolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of roles.
     */
    distinct?: RolesScalarFieldEnum | RolesScalarFieldEnum[]
  }

  /**
   * roles findMany
   */
  export type rolesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the roles
     */
    select?: rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the roles
     */
    omit?: rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolesInclude<ExtArgs> | null
    /**
     * Filter, which roles to fetch.
     */
    where?: rolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     */
    orderBy?: rolesOrderByWithRelationInput | rolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing roles.
     */
    cursor?: rolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     */
    skip?: number
    distinct?: RolesScalarFieldEnum | RolesScalarFieldEnum[]
  }

  /**
   * roles create
   */
  export type rolesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the roles
     */
    select?: rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the roles
     */
    omit?: rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolesInclude<ExtArgs> | null
    /**
     * The data needed to create a roles.
     */
    data: XOR<rolesCreateInput, rolesUncheckedCreateInput>
  }

  /**
   * roles createMany
   */
  export type rolesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many roles.
     */
    data: rolesCreateManyInput | rolesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * roles createManyAndReturn
   */
  export type rolesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the roles
     */
    select?: rolesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the roles
     */
    omit?: rolesOmit<ExtArgs> | null
    /**
     * The data used to create many roles.
     */
    data: rolesCreateManyInput | rolesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * roles update
   */
  export type rolesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the roles
     */
    select?: rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the roles
     */
    omit?: rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolesInclude<ExtArgs> | null
    /**
     * The data needed to update a roles.
     */
    data: XOR<rolesUpdateInput, rolesUncheckedUpdateInput>
    /**
     * Choose, which roles to update.
     */
    where: rolesWhereUniqueInput
  }

  /**
   * roles updateMany
   */
  export type rolesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update roles.
     */
    data: XOR<rolesUpdateManyMutationInput, rolesUncheckedUpdateManyInput>
    /**
     * Filter which roles to update
     */
    where?: rolesWhereInput
    /**
     * Limit how many roles to update.
     */
    limit?: number
  }

  /**
   * roles updateManyAndReturn
   */
  export type rolesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the roles
     */
    select?: rolesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the roles
     */
    omit?: rolesOmit<ExtArgs> | null
    /**
     * The data used to update roles.
     */
    data: XOR<rolesUpdateManyMutationInput, rolesUncheckedUpdateManyInput>
    /**
     * Filter which roles to update
     */
    where?: rolesWhereInput
    /**
     * Limit how many roles to update.
     */
    limit?: number
  }

  /**
   * roles upsert
   */
  export type rolesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the roles
     */
    select?: rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the roles
     */
    omit?: rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolesInclude<ExtArgs> | null
    /**
     * The filter to search for the roles to update in case it exists.
     */
    where: rolesWhereUniqueInput
    /**
     * In case the roles found by the `where` argument doesn't exist, create a new roles with this data.
     */
    create: XOR<rolesCreateInput, rolesUncheckedCreateInput>
    /**
     * In case the roles was found with the provided `where` argument, update it with this data.
     */
    update: XOR<rolesUpdateInput, rolesUncheckedUpdateInput>
  }

  /**
   * roles delete
   */
  export type rolesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the roles
     */
    select?: rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the roles
     */
    omit?: rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolesInclude<ExtArgs> | null
    /**
     * Filter which roles to delete.
     */
    where: rolesWhereUniqueInput
  }

  /**
   * roles deleteMany
   */
  export type rolesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which roles to delete
     */
    where?: rolesWhereInput
    /**
     * Limit how many roles to delete.
     */
    limit?: number
  }

  /**
   * roles.users_roles
   */
  export type roles$users_rolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_roles
     */
    select?: users_rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users_roles
     */
    omit?: users_rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: users_rolesInclude<ExtArgs> | null
    where?: users_rolesWhereInput
    orderBy?: users_rolesOrderByWithRelationInput | users_rolesOrderByWithRelationInput[]
    cursor?: users_rolesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Users_rolesScalarFieldEnum | Users_rolesScalarFieldEnum[]
  }

  /**
   * roles without action
   */
  export type rolesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the roles
     */
    select?: rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the roles
     */
    omit?: rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rolesInclude<ExtArgs> | null
  }


  /**
   * Model tasks
   */

  export type AggregateTasks = {
    _count: TasksCountAggregateOutputType | null
    _avg: TasksAvgAggregateOutputType | null
    _sum: TasksSumAggregateOutputType | null
    _min: TasksMinAggregateOutputType | null
    _max: TasksMaxAggregateOutputType | null
  }

  export type TasksAvgAggregateOutputType = {
    score: number | null
  }

  export type TasksSumAggregateOutputType = {
    score: number | null
  }

  export type TasksMinAggregateOutputType = {
    id: string | null
    created_at: Date | null
    file: Uint8Array | null
    score: number | null
    description: string | null
    title: string | null
    disciplines: string | null
    due_date: Date | null
  }

  export type TasksMaxAggregateOutputType = {
    id: string | null
    created_at: Date | null
    file: Uint8Array | null
    score: number | null
    description: string | null
    title: string | null
    disciplines: string | null
    due_date: Date | null
  }

  export type TasksCountAggregateOutputType = {
    id: number
    created_at: number
    file: number
    score: number
    description: number
    title: number
    disciplines: number
    due_date: number
    _all: number
  }


  export type TasksAvgAggregateInputType = {
    score?: true
  }

  export type TasksSumAggregateInputType = {
    score?: true
  }

  export type TasksMinAggregateInputType = {
    id?: true
    created_at?: true
    file?: true
    score?: true
    description?: true
    title?: true
    disciplines?: true
    due_date?: true
  }

  export type TasksMaxAggregateInputType = {
    id?: true
    created_at?: true
    file?: true
    score?: true
    description?: true
    title?: true
    disciplines?: true
    due_date?: true
  }

  export type TasksCountAggregateInputType = {
    id?: true
    created_at?: true
    file?: true
    score?: true
    description?: true
    title?: true
    disciplines?: true
    due_date?: true
    _all?: true
  }

  export type TasksAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tasks to aggregate.
     */
    where?: tasksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tasks to fetch.
     */
    orderBy?: tasksOrderByWithRelationInput | tasksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tasksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tasks
    **/
    _count?: true | TasksCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TasksAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TasksSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TasksMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TasksMaxAggregateInputType
  }

  export type GetTasksAggregateType<T extends TasksAggregateArgs> = {
        [P in keyof T & keyof AggregateTasks]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTasks[P]>
      : GetScalarType<T[P], AggregateTasks[P]>
  }




  export type tasksGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tasksWhereInput
    orderBy?: tasksOrderByWithAggregationInput | tasksOrderByWithAggregationInput[]
    by: TasksScalarFieldEnum[] | TasksScalarFieldEnum
    having?: tasksScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TasksCountAggregateInputType | true
    _avg?: TasksAvgAggregateInputType
    _sum?: TasksSumAggregateInputType
    _min?: TasksMinAggregateInputType
    _max?: TasksMaxAggregateInputType
  }

  export type TasksGroupByOutputType = {
    id: string
    created_at: Date
    file: Uint8Array | null
    score: number | null
    description: string | null
    title: string
    disciplines: string
    due_date: Date | null
    _count: TasksCountAggregateOutputType | null
    _avg: TasksAvgAggregateOutputType | null
    _sum: TasksSumAggregateOutputType | null
    _min: TasksMinAggregateOutputType | null
    _max: TasksMaxAggregateOutputType | null
  }

  type GetTasksGroupByPayload<T extends tasksGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TasksGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TasksGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TasksGroupByOutputType[P]>
            : GetScalarType<T[P], TasksGroupByOutputType[P]>
        }
      >
    >


  export type tasksSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    file?: boolean
    score?: boolean
    description?: boolean
    title?: boolean
    disciplines?: boolean
    due_date?: boolean
    discipline?: boolean | disciplineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tasks"]>

  export type tasksSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    file?: boolean
    score?: boolean
    description?: boolean
    title?: boolean
    disciplines?: boolean
    due_date?: boolean
    discipline?: boolean | disciplineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tasks"]>

  export type tasksSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    file?: boolean
    score?: boolean
    description?: boolean
    title?: boolean
    disciplines?: boolean
    due_date?: boolean
    discipline?: boolean | disciplineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tasks"]>

  export type tasksSelectScalar = {
    id?: boolean
    created_at?: boolean
    file?: boolean
    score?: boolean
    description?: boolean
    title?: boolean
    disciplines?: boolean
    due_date?: boolean
  }

  export type tasksOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "created_at" | "file" | "score" | "description" | "title" | "disciplines" | "due_date", ExtArgs["result"]["tasks"]>
  export type tasksInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    discipline?: boolean | disciplineDefaultArgs<ExtArgs>
  }
  export type tasksIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    discipline?: boolean | disciplineDefaultArgs<ExtArgs>
  }
  export type tasksIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    discipline?: boolean | disciplineDefaultArgs<ExtArgs>
  }

  export type $tasksPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "tasks"
    objects: {
      discipline: Prisma.$disciplinePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      created_at: Date
      file: Uint8Array | null
      score: number | null
      description: string | null
      title: string
      disciplines: string
      due_date: Date | null
    }, ExtArgs["result"]["tasks"]>
    composites: {}
  }

  type tasksGetPayload<S extends boolean | null | undefined | tasksDefaultArgs> = $Result.GetResult<Prisma.$tasksPayload, S>

  type tasksCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<tasksFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TasksCountAggregateInputType | true
    }

  export interface tasksDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tasks'], meta: { name: 'tasks' } }
    /**
     * Find zero or one Tasks that matches the filter.
     * @param {tasksFindUniqueArgs} args - Arguments to find a Tasks
     * @example
     * // Get one Tasks
     * const tasks = await prisma.tasks.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends tasksFindUniqueArgs>(args: SelectSubset<T, tasksFindUniqueArgs<ExtArgs>>): Prisma__tasksClient<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Tasks that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {tasksFindUniqueOrThrowArgs} args - Arguments to find a Tasks
     * @example
     * // Get one Tasks
     * const tasks = await prisma.tasks.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends tasksFindUniqueOrThrowArgs>(args: SelectSubset<T, tasksFindUniqueOrThrowArgs<ExtArgs>>): Prisma__tasksClient<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tasksFindFirstArgs} args - Arguments to find a Tasks
     * @example
     * // Get one Tasks
     * const tasks = await prisma.tasks.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends tasksFindFirstArgs>(args?: SelectSubset<T, tasksFindFirstArgs<ExtArgs>>): Prisma__tasksClient<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tasks that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tasksFindFirstOrThrowArgs} args - Arguments to find a Tasks
     * @example
     * // Get one Tasks
     * const tasks = await prisma.tasks.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends tasksFindFirstOrThrowArgs>(args?: SelectSubset<T, tasksFindFirstOrThrowArgs<ExtArgs>>): Prisma__tasksClient<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tasksFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tasks
     * const tasks = await prisma.tasks.findMany()
     * 
     * // Get first 10 Tasks
     * const tasks = await prisma.tasks.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tasksWithIdOnly = await prisma.tasks.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends tasksFindManyArgs>(args?: SelectSubset<T, tasksFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Tasks.
     * @param {tasksCreateArgs} args - Arguments to create a Tasks.
     * @example
     * // Create one Tasks
     * const Tasks = await prisma.tasks.create({
     *   data: {
     *     // ... data to create a Tasks
     *   }
     * })
     * 
     */
    create<T extends tasksCreateArgs>(args: SelectSubset<T, tasksCreateArgs<ExtArgs>>): Prisma__tasksClient<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tasks.
     * @param {tasksCreateManyArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const tasks = await prisma.tasks.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends tasksCreateManyArgs>(args?: SelectSubset<T, tasksCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tasks and returns the data saved in the database.
     * @param {tasksCreateManyAndReturnArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const tasks = await prisma.tasks.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tasks and only return the `id`
     * const tasksWithIdOnly = await prisma.tasks.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends tasksCreateManyAndReturnArgs>(args?: SelectSubset<T, tasksCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Tasks.
     * @param {tasksDeleteArgs} args - Arguments to delete one Tasks.
     * @example
     * // Delete one Tasks
     * const Tasks = await prisma.tasks.delete({
     *   where: {
     *     // ... filter to delete one Tasks
     *   }
     * })
     * 
     */
    delete<T extends tasksDeleteArgs>(args: SelectSubset<T, tasksDeleteArgs<ExtArgs>>): Prisma__tasksClient<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Tasks.
     * @param {tasksUpdateArgs} args - Arguments to update one Tasks.
     * @example
     * // Update one Tasks
     * const tasks = await prisma.tasks.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends tasksUpdateArgs>(args: SelectSubset<T, tasksUpdateArgs<ExtArgs>>): Prisma__tasksClient<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tasks.
     * @param {tasksDeleteManyArgs} args - Arguments to filter Tasks to delete.
     * @example
     * // Delete a few Tasks
     * const { count } = await prisma.tasks.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends tasksDeleteManyArgs>(args?: SelectSubset<T, tasksDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tasksUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tasks
     * const tasks = await prisma.tasks.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends tasksUpdateManyArgs>(args: SelectSubset<T, tasksUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks and returns the data updated in the database.
     * @param {tasksUpdateManyAndReturnArgs} args - Arguments to update many Tasks.
     * @example
     * // Update many Tasks
     * const tasks = await prisma.tasks.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tasks and only return the `id`
     * const tasksWithIdOnly = await prisma.tasks.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends tasksUpdateManyAndReturnArgs>(args: SelectSubset<T, tasksUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Tasks.
     * @param {tasksUpsertArgs} args - Arguments to update or create a Tasks.
     * @example
     * // Update or create a Tasks
     * const tasks = await prisma.tasks.upsert({
     *   create: {
     *     // ... data to create a Tasks
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tasks we want to update
     *   }
     * })
     */
    upsert<T extends tasksUpsertArgs>(args: SelectSubset<T, tasksUpsertArgs<ExtArgs>>): Prisma__tasksClient<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tasksCountArgs} args - Arguments to filter Tasks to count.
     * @example
     * // Count the number of Tasks
     * const count = await prisma.tasks.count({
     *   where: {
     *     // ... the filter for the Tasks we want to count
     *   }
     * })
    **/
    count<T extends tasksCountArgs>(
      args?: Subset<T, tasksCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TasksCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TasksAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TasksAggregateArgs>(args: Subset<T, TasksAggregateArgs>): Prisma.PrismaPromise<GetTasksAggregateType<T>>

    /**
     * Group by Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tasksGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends tasksGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: tasksGroupByArgs['orderBy'] }
        : { orderBy?: tasksGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, tasksGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTasksGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tasks model
   */
  readonly fields: tasksFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tasks.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__tasksClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    discipline<T extends disciplineDefaultArgs<ExtArgs> = {}>(args?: Subset<T, disciplineDefaultArgs<ExtArgs>>): Prisma__disciplineClient<$Result.GetResult<Prisma.$disciplinePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the tasks model
   */
  interface tasksFieldRefs {
    readonly id: FieldRef<"tasks", 'String'>
    readonly created_at: FieldRef<"tasks", 'DateTime'>
    readonly file: FieldRef<"tasks", 'Bytes'>
    readonly score: FieldRef<"tasks", 'Float'>
    readonly description: FieldRef<"tasks", 'String'>
    readonly title: FieldRef<"tasks", 'String'>
    readonly disciplines: FieldRef<"tasks", 'String'>
    readonly due_date: FieldRef<"tasks", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * tasks findUnique
   */
  export type tasksFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tasks
     */
    omit?: tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    /**
     * Filter, which tasks to fetch.
     */
    where: tasksWhereUniqueInput
  }

  /**
   * tasks findUniqueOrThrow
   */
  export type tasksFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tasks
     */
    omit?: tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    /**
     * Filter, which tasks to fetch.
     */
    where: tasksWhereUniqueInput
  }

  /**
   * tasks findFirst
   */
  export type tasksFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tasks
     */
    omit?: tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    /**
     * Filter, which tasks to fetch.
     */
    where?: tasksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tasks to fetch.
     */
    orderBy?: tasksOrderByWithRelationInput | tasksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tasks.
     */
    cursor?: tasksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tasks.
     */
    distinct?: TasksScalarFieldEnum | TasksScalarFieldEnum[]
  }

  /**
   * tasks findFirstOrThrow
   */
  export type tasksFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tasks
     */
    omit?: tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    /**
     * Filter, which tasks to fetch.
     */
    where?: tasksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tasks to fetch.
     */
    orderBy?: tasksOrderByWithRelationInput | tasksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tasks.
     */
    cursor?: tasksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tasks.
     */
    distinct?: TasksScalarFieldEnum | TasksScalarFieldEnum[]
  }

  /**
   * tasks findMany
   */
  export type tasksFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tasks
     */
    omit?: tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    /**
     * Filter, which tasks to fetch.
     */
    where?: tasksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tasks to fetch.
     */
    orderBy?: tasksOrderByWithRelationInput | tasksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tasks.
     */
    cursor?: tasksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tasks.
     */
    skip?: number
    distinct?: TasksScalarFieldEnum | TasksScalarFieldEnum[]
  }

  /**
   * tasks create
   */
  export type tasksCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tasks
     */
    omit?: tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    /**
     * The data needed to create a tasks.
     */
    data: XOR<tasksCreateInput, tasksUncheckedCreateInput>
  }

  /**
   * tasks createMany
   */
  export type tasksCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tasks.
     */
    data: tasksCreateManyInput | tasksCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * tasks createManyAndReturn
   */
  export type tasksCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the tasks
     */
    omit?: tasksOmit<ExtArgs> | null
    /**
     * The data used to create many tasks.
     */
    data: tasksCreateManyInput | tasksCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * tasks update
   */
  export type tasksUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tasks
     */
    omit?: tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    /**
     * The data needed to update a tasks.
     */
    data: XOR<tasksUpdateInput, tasksUncheckedUpdateInput>
    /**
     * Choose, which tasks to update.
     */
    where: tasksWhereUniqueInput
  }

  /**
   * tasks updateMany
   */
  export type tasksUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tasks.
     */
    data: XOR<tasksUpdateManyMutationInput, tasksUncheckedUpdateManyInput>
    /**
     * Filter which tasks to update
     */
    where?: tasksWhereInput
    /**
     * Limit how many tasks to update.
     */
    limit?: number
  }

  /**
   * tasks updateManyAndReturn
   */
  export type tasksUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the tasks
     */
    omit?: tasksOmit<ExtArgs> | null
    /**
     * The data used to update tasks.
     */
    data: XOR<tasksUpdateManyMutationInput, tasksUncheckedUpdateManyInput>
    /**
     * Filter which tasks to update
     */
    where?: tasksWhereInput
    /**
     * Limit how many tasks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * tasks upsert
   */
  export type tasksUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tasks
     */
    omit?: tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    /**
     * The filter to search for the tasks to update in case it exists.
     */
    where: tasksWhereUniqueInput
    /**
     * In case the tasks found by the `where` argument doesn't exist, create a new tasks with this data.
     */
    create: XOR<tasksCreateInput, tasksUncheckedCreateInput>
    /**
     * In case the tasks was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tasksUpdateInput, tasksUncheckedUpdateInput>
  }

  /**
   * tasks delete
   */
  export type tasksDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tasks
     */
    omit?: tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    /**
     * Filter which tasks to delete.
     */
    where: tasksWhereUniqueInput
  }

  /**
   * tasks deleteMany
   */
  export type tasksDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tasks to delete
     */
    where?: tasksWhereInput
    /**
     * Limit how many tasks to delete.
     */
    limit?: number
  }

  /**
   * tasks without action
   */
  export type tasksDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tasks
     */
    omit?: tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
  }


  /**
   * Model tokens
   */

  export type AggregateTokens = {
    _count: TokensCountAggregateOutputType | null
    _min: TokensMinAggregateOutputType | null
    _max: TokensMaxAggregateOutputType | null
  }

  export type TokensMinAggregateOutputType = {
    id: string | null
    type: string | null
    expires_at: Date | null
    createdAt_: Date | null
    users: string | null
  }

  export type TokensMaxAggregateOutputType = {
    id: string | null
    type: string | null
    expires_at: Date | null
    createdAt_: Date | null
    users: string | null
  }

  export type TokensCountAggregateOutputType = {
    id: number
    type: number
    expires_at: number
    createdAt_: number
    users: number
    _all: number
  }


  export type TokensMinAggregateInputType = {
    id?: true
    type?: true
    expires_at?: true
    createdAt_?: true
    users?: true
  }

  export type TokensMaxAggregateInputType = {
    id?: true
    type?: true
    expires_at?: true
    createdAt_?: true
    users?: true
  }

  export type TokensCountAggregateInputType = {
    id?: true
    type?: true
    expires_at?: true
    createdAt_?: true
    users?: true
    _all?: true
  }

  export type TokensAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tokens to aggregate.
     */
    where?: tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tokens to fetch.
     */
    orderBy?: tokensOrderByWithRelationInput | tokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tokens
    **/
    _count?: true | TokensCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TokensMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TokensMaxAggregateInputType
  }

  export type GetTokensAggregateType<T extends TokensAggregateArgs> = {
        [P in keyof T & keyof AggregateTokens]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTokens[P]>
      : GetScalarType<T[P], AggregateTokens[P]>
  }




  export type tokensGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tokensWhereInput
    orderBy?: tokensOrderByWithAggregationInput | tokensOrderByWithAggregationInput[]
    by: TokensScalarFieldEnum[] | TokensScalarFieldEnum
    having?: tokensScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TokensCountAggregateInputType | true
    _min?: TokensMinAggregateInputType
    _max?: TokensMaxAggregateInputType
  }

  export type TokensGroupByOutputType = {
    id: string
    type: string
    expires_at: Date
    createdAt_: Date
    users: string
    _count: TokensCountAggregateOutputType | null
    _min: TokensMinAggregateOutputType | null
    _max: TokensMaxAggregateOutputType | null
  }

  type GetTokensGroupByPayload<T extends tokensGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TokensGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TokensGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TokensGroupByOutputType[P]>
            : GetScalarType<T[P], TokensGroupByOutputType[P]>
        }
      >
    >


  export type tokensSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    expires_at?: boolean
    createdAt_?: boolean
    users?: boolean
    users_tokens_usersTousers?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tokens"]>

  export type tokensSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    expires_at?: boolean
    createdAt_?: boolean
    users?: boolean
    users_tokens_usersTousers?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tokens"]>

  export type tokensSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    expires_at?: boolean
    createdAt_?: boolean
    users?: boolean
    users_tokens_usersTousers?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tokens"]>

  export type tokensSelectScalar = {
    id?: boolean
    type?: boolean
    expires_at?: boolean
    createdAt_?: boolean
    users?: boolean
  }

  export type tokensOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "expires_at" | "createdAt_" | "users", ExtArgs["result"]["tokens"]>
  export type tokensInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users_tokens_usersTousers?: boolean | usersDefaultArgs<ExtArgs>
  }
  export type tokensIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users_tokens_usersTousers?: boolean | usersDefaultArgs<ExtArgs>
  }
  export type tokensIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users_tokens_usersTousers?: boolean | usersDefaultArgs<ExtArgs>
  }

  export type $tokensPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "tokens"
    objects: {
      users_tokens_usersTousers: Prisma.$usersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      expires_at: Date
      createdAt_: Date
      users: string
    }, ExtArgs["result"]["tokens"]>
    composites: {}
  }

  type tokensGetPayload<S extends boolean | null | undefined | tokensDefaultArgs> = $Result.GetResult<Prisma.$tokensPayload, S>

  type tokensCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<tokensFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TokensCountAggregateInputType | true
    }

  export interface tokensDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tokens'], meta: { name: 'tokens' } }
    /**
     * Find zero or one Tokens that matches the filter.
     * @param {tokensFindUniqueArgs} args - Arguments to find a Tokens
     * @example
     * // Get one Tokens
     * const tokens = await prisma.tokens.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends tokensFindUniqueArgs>(args: SelectSubset<T, tokensFindUniqueArgs<ExtArgs>>): Prisma__tokensClient<$Result.GetResult<Prisma.$tokensPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Tokens that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {tokensFindUniqueOrThrowArgs} args - Arguments to find a Tokens
     * @example
     * // Get one Tokens
     * const tokens = await prisma.tokens.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends tokensFindUniqueOrThrowArgs>(args: SelectSubset<T, tokensFindUniqueOrThrowArgs<ExtArgs>>): Prisma__tokensClient<$Result.GetResult<Prisma.$tokensPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tokensFindFirstArgs} args - Arguments to find a Tokens
     * @example
     * // Get one Tokens
     * const tokens = await prisma.tokens.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends tokensFindFirstArgs>(args?: SelectSubset<T, tokensFindFirstArgs<ExtArgs>>): Prisma__tokensClient<$Result.GetResult<Prisma.$tokensPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tokens that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tokensFindFirstOrThrowArgs} args - Arguments to find a Tokens
     * @example
     * // Get one Tokens
     * const tokens = await prisma.tokens.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends tokensFindFirstOrThrowArgs>(args?: SelectSubset<T, tokensFindFirstOrThrowArgs<ExtArgs>>): Prisma__tokensClient<$Result.GetResult<Prisma.$tokensPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tokensFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tokens
     * const tokens = await prisma.tokens.findMany()
     * 
     * // Get first 10 Tokens
     * const tokens = await prisma.tokens.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tokensWithIdOnly = await prisma.tokens.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends tokensFindManyArgs>(args?: SelectSubset<T, tokensFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tokensPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Tokens.
     * @param {tokensCreateArgs} args - Arguments to create a Tokens.
     * @example
     * // Create one Tokens
     * const Tokens = await prisma.tokens.create({
     *   data: {
     *     // ... data to create a Tokens
     *   }
     * })
     * 
     */
    create<T extends tokensCreateArgs>(args: SelectSubset<T, tokensCreateArgs<ExtArgs>>): Prisma__tokensClient<$Result.GetResult<Prisma.$tokensPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tokens.
     * @param {tokensCreateManyArgs} args - Arguments to create many Tokens.
     * @example
     * // Create many Tokens
     * const tokens = await prisma.tokens.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends tokensCreateManyArgs>(args?: SelectSubset<T, tokensCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tokens and returns the data saved in the database.
     * @param {tokensCreateManyAndReturnArgs} args - Arguments to create many Tokens.
     * @example
     * // Create many Tokens
     * const tokens = await prisma.tokens.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tokens and only return the `id`
     * const tokensWithIdOnly = await prisma.tokens.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends tokensCreateManyAndReturnArgs>(args?: SelectSubset<T, tokensCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tokensPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Tokens.
     * @param {tokensDeleteArgs} args - Arguments to delete one Tokens.
     * @example
     * // Delete one Tokens
     * const Tokens = await prisma.tokens.delete({
     *   where: {
     *     // ... filter to delete one Tokens
     *   }
     * })
     * 
     */
    delete<T extends tokensDeleteArgs>(args: SelectSubset<T, tokensDeleteArgs<ExtArgs>>): Prisma__tokensClient<$Result.GetResult<Prisma.$tokensPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Tokens.
     * @param {tokensUpdateArgs} args - Arguments to update one Tokens.
     * @example
     * // Update one Tokens
     * const tokens = await prisma.tokens.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends tokensUpdateArgs>(args: SelectSubset<T, tokensUpdateArgs<ExtArgs>>): Prisma__tokensClient<$Result.GetResult<Prisma.$tokensPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tokens.
     * @param {tokensDeleteManyArgs} args - Arguments to filter Tokens to delete.
     * @example
     * // Delete a few Tokens
     * const { count } = await prisma.tokens.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends tokensDeleteManyArgs>(args?: SelectSubset<T, tokensDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tokensUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tokens
     * const tokens = await prisma.tokens.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends tokensUpdateManyArgs>(args: SelectSubset<T, tokensUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tokens and returns the data updated in the database.
     * @param {tokensUpdateManyAndReturnArgs} args - Arguments to update many Tokens.
     * @example
     * // Update many Tokens
     * const tokens = await prisma.tokens.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tokens and only return the `id`
     * const tokensWithIdOnly = await prisma.tokens.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends tokensUpdateManyAndReturnArgs>(args: SelectSubset<T, tokensUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tokensPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Tokens.
     * @param {tokensUpsertArgs} args - Arguments to update or create a Tokens.
     * @example
     * // Update or create a Tokens
     * const tokens = await prisma.tokens.upsert({
     *   create: {
     *     // ... data to create a Tokens
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tokens we want to update
     *   }
     * })
     */
    upsert<T extends tokensUpsertArgs>(args: SelectSubset<T, tokensUpsertArgs<ExtArgs>>): Prisma__tokensClient<$Result.GetResult<Prisma.$tokensPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tokensCountArgs} args - Arguments to filter Tokens to count.
     * @example
     * // Count the number of Tokens
     * const count = await prisma.tokens.count({
     *   where: {
     *     // ... the filter for the Tokens we want to count
     *   }
     * })
    **/
    count<T extends tokensCountArgs>(
      args?: Subset<T, tokensCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TokensCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TokensAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TokensAggregateArgs>(args: Subset<T, TokensAggregateArgs>): Prisma.PrismaPromise<GetTokensAggregateType<T>>

    /**
     * Group by Tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tokensGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends tokensGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: tokensGroupByArgs['orderBy'] }
        : { orderBy?: tokensGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, tokensGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTokensGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tokens model
   */
  readonly fields: tokensFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tokens.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__tokensClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users_tokens_usersTousers<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the tokens model
   */
  interface tokensFieldRefs {
    readonly id: FieldRef<"tokens", 'String'>
    readonly type: FieldRef<"tokens", 'String'>
    readonly expires_at: FieldRef<"tokens", 'DateTime'>
    readonly createdAt_: FieldRef<"tokens", 'DateTime'>
    readonly users: FieldRef<"tokens", 'String'>
  }
    

  // Custom InputTypes
  /**
   * tokens findUnique
   */
  export type tokensFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tokens
     */
    select?: tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tokens
     */
    omit?: tokensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tokensInclude<ExtArgs> | null
    /**
     * Filter, which tokens to fetch.
     */
    where: tokensWhereUniqueInput
  }

  /**
   * tokens findUniqueOrThrow
   */
  export type tokensFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tokens
     */
    select?: tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tokens
     */
    omit?: tokensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tokensInclude<ExtArgs> | null
    /**
     * Filter, which tokens to fetch.
     */
    where: tokensWhereUniqueInput
  }

  /**
   * tokens findFirst
   */
  export type tokensFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tokens
     */
    select?: tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tokens
     */
    omit?: tokensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tokensInclude<ExtArgs> | null
    /**
     * Filter, which tokens to fetch.
     */
    where?: tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tokens to fetch.
     */
    orderBy?: tokensOrderByWithRelationInput | tokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tokens.
     */
    cursor?: tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tokens.
     */
    distinct?: TokensScalarFieldEnum | TokensScalarFieldEnum[]
  }

  /**
   * tokens findFirstOrThrow
   */
  export type tokensFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tokens
     */
    select?: tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tokens
     */
    omit?: tokensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tokensInclude<ExtArgs> | null
    /**
     * Filter, which tokens to fetch.
     */
    where?: tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tokens to fetch.
     */
    orderBy?: tokensOrderByWithRelationInput | tokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tokens.
     */
    cursor?: tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tokens.
     */
    distinct?: TokensScalarFieldEnum | TokensScalarFieldEnum[]
  }

  /**
   * tokens findMany
   */
  export type tokensFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tokens
     */
    select?: tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tokens
     */
    omit?: tokensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tokensInclude<ExtArgs> | null
    /**
     * Filter, which tokens to fetch.
     */
    where?: tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tokens to fetch.
     */
    orderBy?: tokensOrderByWithRelationInput | tokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tokens.
     */
    cursor?: tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tokens.
     */
    skip?: number
    distinct?: TokensScalarFieldEnum | TokensScalarFieldEnum[]
  }

  /**
   * tokens create
   */
  export type tokensCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tokens
     */
    select?: tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tokens
     */
    omit?: tokensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tokensInclude<ExtArgs> | null
    /**
     * The data needed to create a tokens.
     */
    data: XOR<tokensCreateInput, tokensUncheckedCreateInput>
  }

  /**
   * tokens createMany
   */
  export type tokensCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tokens.
     */
    data: tokensCreateManyInput | tokensCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * tokens createManyAndReturn
   */
  export type tokensCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tokens
     */
    select?: tokensSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the tokens
     */
    omit?: tokensOmit<ExtArgs> | null
    /**
     * The data used to create many tokens.
     */
    data: tokensCreateManyInput | tokensCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tokensIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * tokens update
   */
  export type tokensUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tokens
     */
    select?: tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tokens
     */
    omit?: tokensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tokensInclude<ExtArgs> | null
    /**
     * The data needed to update a tokens.
     */
    data: XOR<tokensUpdateInput, tokensUncheckedUpdateInput>
    /**
     * Choose, which tokens to update.
     */
    where: tokensWhereUniqueInput
  }

  /**
   * tokens updateMany
   */
  export type tokensUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tokens.
     */
    data: XOR<tokensUpdateManyMutationInput, tokensUncheckedUpdateManyInput>
    /**
     * Filter which tokens to update
     */
    where?: tokensWhereInput
    /**
     * Limit how many tokens to update.
     */
    limit?: number
  }

  /**
   * tokens updateManyAndReturn
   */
  export type tokensUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tokens
     */
    select?: tokensSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the tokens
     */
    omit?: tokensOmit<ExtArgs> | null
    /**
     * The data used to update tokens.
     */
    data: XOR<tokensUpdateManyMutationInput, tokensUncheckedUpdateManyInput>
    /**
     * Filter which tokens to update
     */
    where?: tokensWhereInput
    /**
     * Limit how many tokens to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tokensIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * tokens upsert
   */
  export type tokensUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tokens
     */
    select?: tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tokens
     */
    omit?: tokensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tokensInclude<ExtArgs> | null
    /**
     * The filter to search for the tokens to update in case it exists.
     */
    where: tokensWhereUniqueInput
    /**
     * In case the tokens found by the `where` argument doesn't exist, create a new tokens with this data.
     */
    create: XOR<tokensCreateInput, tokensUncheckedCreateInput>
    /**
     * In case the tokens was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tokensUpdateInput, tokensUncheckedUpdateInput>
  }

  /**
   * tokens delete
   */
  export type tokensDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tokens
     */
    select?: tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tokens
     */
    omit?: tokensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tokensInclude<ExtArgs> | null
    /**
     * Filter which tokens to delete.
     */
    where: tokensWhereUniqueInput
  }

  /**
   * tokens deleteMany
   */
  export type tokensDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tokens to delete
     */
    where?: tokensWhereInput
    /**
     * Limit how many tokens to delete.
     */
    limit?: number
  }

  /**
   * tokens without action
   */
  export type tokensDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tokens
     */
    select?: tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tokens
     */
    omit?: tokensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tokensInclude<ExtArgs> | null
  }


  /**
   * Model users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    avatar_url: string | null
    created_at: Date | null
    updated_at: Date | null
    cpf: string | null
    phone: string | null
    username: string | null
    gender: string | null
    date_of_birth: Date | null
    active: boolean | null
    address: string | null
    companies: string | null
  }

  export type UsersMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    avatar_url: string | null
    created_at: Date | null
    updated_at: Date | null
    cpf: string | null
    phone: string | null
    username: string | null
    gender: string | null
    date_of_birth: Date | null
    active: boolean | null
    address: string | null
    companies: string | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    avatar_url: number
    created_at: number
    updated_at: number
    cpf: number
    phone: number
    username: number
    gender: number
    date_of_birth: number
    active: number
    address: number
    companies: number
    _all: number
  }


  export type UsersMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    avatar_url?: true
    created_at?: true
    updated_at?: true
    cpf?: true
    phone?: true
    username?: true
    gender?: true
    date_of_birth?: true
    active?: true
    address?: true
    companies?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    avatar_url?: true
    created_at?: true
    updated_at?: true
    cpf?: true
    phone?: true
    username?: true
    gender?: true
    date_of_birth?: true
    active?: true
    address?: true
    companies?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    avatar_url?: true
    created_at?: true
    updated_at?: true
    cpf?: true
    phone?: true
    username?: true
    gender?: true
    date_of_birth?: true
    active?: true
    address?: true
    companies?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: string
    name: string
    email: string
    password: string
    avatar_url: string | null
    created_at: Date | null
    updated_at: Date | null
    cpf: string | null
    phone: string | null
    username: string
    gender: string | null
    date_of_birth: Date | null
    active: boolean | null
    address: string | null
    companies: string
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    avatar_url?: boolean
    created_at?: boolean
    updated_at?: boolean
    cpf?: boolean
    phone?: boolean
    username?: boolean
    gender?: boolean
    date_of_birth?: boolean
    active?: boolean
    address?: boolean
    companies?: boolean
    companies_companies_usersTousers?: boolean | users$companies_companies_usersTousersArgs<ExtArgs>
    presence_list_presence_list_usersTousers?: boolean | users$presence_list_presence_list_usersTousersArgs<ExtArgs>
    registrations_registrations_usersTousers?: boolean | users$registrations_registrations_usersTousersArgs<ExtArgs>
    tokens_tokens_usersTousers?: boolean | users$tokens_tokens_usersTousersArgs<ExtArgs>
    companies_users_companiesTocompanies?: boolean | companiesDefaultArgs<ExtArgs>
    users_roles?: boolean | users$users_rolesArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type usersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    avatar_url?: boolean
    created_at?: boolean
    updated_at?: boolean
    cpf?: boolean
    phone?: boolean
    username?: boolean
    gender?: boolean
    date_of_birth?: boolean
    active?: boolean
    address?: boolean
    companies?: boolean
    companies_users_companiesTocompanies?: boolean | companiesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type usersSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    avatar_url?: boolean
    created_at?: boolean
    updated_at?: boolean
    cpf?: boolean
    phone?: boolean
    username?: boolean
    gender?: boolean
    date_of_birth?: boolean
    active?: boolean
    address?: boolean
    companies?: boolean
    companies_users_companiesTocompanies?: boolean | companiesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type usersSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    avatar_url?: boolean
    created_at?: boolean
    updated_at?: boolean
    cpf?: boolean
    phone?: boolean
    username?: boolean
    gender?: boolean
    date_of_birth?: boolean
    active?: boolean
    address?: boolean
    companies?: boolean
  }

  export type usersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "password" | "avatar_url" | "created_at" | "updated_at" | "cpf" | "phone" | "username" | "gender" | "date_of_birth" | "active" | "address" | "companies", ExtArgs["result"]["users"]>
  export type usersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    companies_companies_usersTousers?: boolean | users$companies_companies_usersTousersArgs<ExtArgs>
    presence_list_presence_list_usersTousers?: boolean | users$presence_list_presence_list_usersTousersArgs<ExtArgs>
    registrations_registrations_usersTousers?: boolean | users$registrations_registrations_usersTousersArgs<ExtArgs>
    tokens_tokens_usersTousers?: boolean | users$tokens_tokens_usersTousersArgs<ExtArgs>
    companies_users_companiesTocompanies?: boolean | companiesDefaultArgs<ExtArgs>
    users_roles?: boolean | users$users_rolesArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type usersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    companies_users_companiesTocompanies?: boolean | companiesDefaultArgs<ExtArgs>
  }
  export type usersIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    companies_users_companiesTocompanies?: boolean | companiesDefaultArgs<ExtArgs>
  }

  export type $usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users"
    objects: {
      companies_companies_usersTousers: Prisma.$companiesPayload<ExtArgs>[]
      presence_list_presence_list_usersTousers: Prisma.$presence_listPayload<ExtArgs>[]
      registrations_registrations_usersTousers: Prisma.$registrationsPayload<ExtArgs>[]
      tokens_tokens_usersTousers: Prisma.$tokensPayload<ExtArgs>[]
      companies_users_companiesTocompanies: Prisma.$companiesPayload<ExtArgs>
      users_roles: Prisma.$users_rolesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string
      password: string
      avatar_url: string | null
      created_at: Date | null
      updated_at: Date | null
      cpf: string | null
      phone: string | null
      username: string
      gender: string | null
      date_of_birth: Date | null
      active: boolean | null
      address: string | null
      companies: string
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type usersGetPayload<S extends boolean | null | undefined | usersDefaultArgs> = $Result.GetResult<Prisma.$usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<usersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends usersFindUniqueArgs>(args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs>(args: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends usersFindFirstArgs>(args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs>(args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends usersFindManyArgs>(args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends usersCreateArgs>(args: SelectSubset<T, usersCreateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {usersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends usersCreateManyArgs>(args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {usersCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const usersWithIdOnly = await prisma.users.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends usersCreateManyAndReturnArgs>(args?: SelectSubset<T, usersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends usersDeleteArgs>(args: SelectSubset<T, usersDeleteArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends usersUpdateArgs>(args: SelectSubset<T, usersUpdateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends usersDeleteManyArgs>(args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends usersUpdateManyArgs>(args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {usersUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const usersWithIdOnly = await prisma.users.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends usersUpdateManyAndReturnArgs>(args: SelectSubset<T, usersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends usersUpsertArgs>(args: SelectSubset<T, usersUpsertArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    companies_companies_usersTousers<T extends users$companies_companies_usersTousersArgs<ExtArgs> = {}>(args?: Subset<T, users$companies_companies_usersTousersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$companiesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    presence_list_presence_list_usersTousers<T extends users$presence_list_presence_list_usersTousersArgs<ExtArgs> = {}>(args?: Subset<T, users$presence_list_presence_list_usersTousersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$presence_listPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    registrations_registrations_usersTousers<T extends users$registrations_registrations_usersTousersArgs<ExtArgs> = {}>(args?: Subset<T, users$registrations_registrations_usersTousersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$registrationsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    tokens_tokens_usersTousers<T extends users$tokens_tokens_usersTousersArgs<ExtArgs> = {}>(args?: Subset<T, users$tokens_tokens_usersTousersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tokensPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    companies_users_companiesTocompanies<T extends companiesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, companiesDefaultArgs<ExtArgs>>): Prisma__companiesClient<$Result.GetResult<Prisma.$companiesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    users_roles<T extends users$users_rolesArgs<ExtArgs> = {}>(args?: Subset<T, users$users_rolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$users_rolesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the users model
   */
  interface usersFieldRefs {
    readonly id: FieldRef<"users", 'String'>
    readonly name: FieldRef<"users", 'String'>
    readonly email: FieldRef<"users", 'String'>
    readonly password: FieldRef<"users", 'String'>
    readonly avatar_url: FieldRef<"users", 'String'>
    readonly created_at: FieldRef<"users", 'DateTime'>
    readonly updated_at: FieldRef<"users", 'DateTime'>
    readonly cpf: FieldRef<"users", 'String'>
    readonly phone: FieldRef<"users", 'String'>
    readonly username: FieldRef<"users", 'String'>
    readonly gender: FieldRef<"users", 'String'>
    readonly date_of_birth: FieldRef<"users", 'DateTime'>
    readonly active: FieldRef<"users", 'Boolean'>
    readonly address: FieldRef<"users", 'String'>
    readonly companies: FieldRef<"users", 'String'>
  }
    

  // Custom InputTypes
  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }

  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users createManyAndReturn
   */
  export type usersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
    /**
     * Limit how many users to update.
     */
    limit?: number
  }

  /**
   * users updateManyAndReturn
   */
  export type usersUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
    /**
     * Limit how many users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }

  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
    /**
     * Limit how many users to delete.
     */
    limit?: number
  }

  /**
   * users.companies_companies_usersTousers
   */
  export type users$companies_companies_usersTousersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the companies
     */
    select?: companiesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the companies
     */
    omit?: companiesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: companiesInclude<ExtArgs> | null
    where?: companiesWhereInput
    orderBy?: companiesOrderByWithRelationInput | companiesOrderByWithRelationInput[]
    cursor?: companiesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompaniesScalarFieldEnum | CompaniesScalarFieldEnum[]
  }

  /**
   * users.presence_list_presence_list_usersTousers
   */
  export type users$presence_list_presence_list_usersTousersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the presence_list
     */
    select?: presence_listSelect<ExtArgs> | null
    /**
     * Omit specific fields from the presence_list
     */
    omit?: presence_listOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: presence_listInclude<ExtArgs> | null
    where?: presence_listWhereInput
    orderBy?: presence_listOrderByWithRelationInput | presence_listOrderByWithRelationInput[]
    cursor?: presence_listWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Presence_listScalarFieldEnum | Presence_listScalarFieldEnum[]
  }

  /**
   * users.registrations_registrations_usersTousers
   */
  export type users$registrations_registrations_usersTousersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registrations
     */
    select?: registrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the registrations
     */
    omit?: registrationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registrationsInclude<ExtArgs> | null
    where?: registrationsWhereInput
    orderBy?: registrationsOrderByWithRelationInput | registrationsOrderByWithRelationInput[]
    cursor?: registrationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RegistrationsScalarFieldEnum | RegistrationsScalarFieldEnum[]
  }

  /**
   * users.tokens_tokens_usersTousers
   */
  export type users$tokens_tokens_usersTousersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tokens
     */
    select?: tokensSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tokens
     */
    omit?: tokensOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tokensInclude<ExtArgs> | null
    where?: tokensWhereInput
    orderBy?: tokensOrderByWithRelationInput | tokensOrderByWithRelationInput[]
    cursor?: tokensWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TokensScalarFieldEnum | TokensScalarFieldEnum[]
  }

  /**
   * users.users_roles
   */
  export type users$users_rolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_roles
     */
    select?: users_rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users_roles
     */
    omit?: users_rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: users_rolesInclude<ExtArgs> | null
    where?: users_rolesWhereInput
    orderBy?: users_rolesOrderByWithRelationInput | users_rolesOrderByWithRelationInput[]
    cursor?: users_rolesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Users_rolesScalarFieldEnum | Users_rolesScalarFieldEnum[]
  }

  /**
   * users without action
   */
  export type usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users
     */
    omit?: usersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
  }


  /**
   * Model users_roles
   */

  export type AggregateUsers_roles = {
    _count: Users_rolesCountAggregateOutputType | null
    _min: Users_rolesMinAggregateOutputType | null
    _max: Users_rolesMaxAggregateOutputType | null
  }

  export type Users_rolesMinAggregateOutputType = {
    id: string | null
    users_id: string | null
    role_id: string | null
  }

  export type Users_rolesMaxAggregateOutputType = {
    id: string | null
    users_id: string | null
    role_id: string | null
  }

  export type Users_rolesCountAggregateOutputType = {
    id: number
    users_id: number
    role_id: number
    _all: number
  }


  export type Users_rolesMinAggregateInputType = {
    id?: true
    users_id?: true
    role_id?: true
  }

  export type Users_rolesMaxAggregateInputType = {
    id?: true
    users_id?: true
    role_id?: true
  }

  export type Users_rolesCountAggregateInputType = {
    id?: true
    users_id?: true
    role_id?: true
    _all?: true
  }

  export type Users_rolesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users_roles to aggregate.
     */
    where?: users_rolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users_roles to fetch.
     */
    orderBy?: users_rolesOrderByWithRelationInput | users_rolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: users_rolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users_roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users_roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users_roles
    **/
    _count?: true | Users_rolesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Users_rolesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Users_rolesMaxAggregateInputType
  }

  export type GetUsers_rolesAggregateType<T extends Users_rolesAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers_roles]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers_roles[P]>
      : GetScalarType<T[P], AggregateUsers_roles[P]>
  }




  export type users_rolesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: users_rolesWhereInput
    orderBy?: users_rolesOrderByWithAggregationInput | users_rolesOrderByWithAggregationInput[]
    by: Users_rolesScalarFieldEnum[] | Users_rolesScalarFieldEnum
    having?: users_rolesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Users_rolesCountAggregateInputType | true
    _min?: Users_rolesMinAggregateInputType
    _max?: Users_rolesMaxAggregateInputType
  }

  export type Users_rolesGroupByOutputType = {
    id: string
    users_id: string
    role_id: string
    _count: Users_rolesCountAggregateOutputType | null
    _min: Users_rolesMinAggregateOutputType | null
    _max: Users_rolesMaxAggregateOutputType | null
  }

  type GetUsers_rolesGroupByPayload<T extends users_rolesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Users_rolesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Users_rolesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Users_rolesGroupByOutputType[P]>
            : GetScalarType<T[P], Users_rolesGroupByOutputType[P]>
        }
      >
    >


  export type users_rolesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    users_id?: boolean
    role_id?: boolean
    roles?: boolean | rolesDefaultArgs<ExtArgs>
    users?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users_roles"]>

  export type users_rolesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    users_id?: boolean
    role_id?: boolean
    roles?: boolean | rolesDefaultArgs<ExtArgs>
    users?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users_roles"]>

  export type users_rolesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    users_id?: boolean
    role_id?: boolean
    roles?: boolean | rolesDefaultArgs<ExtArgs>
    users?: boolean | usersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users_roles"]>

  export type users_rolesSelectScalar = {
    id?: boolean
    users_id?: boolean
    role_id?: boolean
  }

  export type users_rolesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "users_id" | "role_id", ExtArgs["result"]["users_roles"]>
  export type users_rolesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roles?: boolean | rolesDefaultArgs<ExtArgs>
    users?: boolean | usersDefaultArgs<ExtArgs>
  }
  export type users_rolesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roles?: boolean | rolesDefaultArgs<ExtArgs>
    users?: boolean | usersDefaultArgs<ExtArgs>
  }
  export type users_rolesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roles?: boolean | rolesDefaultArgs<ExtArgs>
    users?: boolean | usersDefaultArgs<ExtArgs>
  }

  export type $users_rolesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users_roles"
    objects: {
      roles: Prisma.$rolesPayload<ExtArgs>
      users: Prisma.$usersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      users_id: string
      role_id: string
    }, ExtArgs["result"]["users_roles"]>
    composites: {}
  }

  type users_rolesGetPayload<S extends boolean | null | undefined | users_rolesDefaultArgs> = $Result.GetResult<Prisma.$users_rolesPayload, S>

  type users_rolesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<users_rolesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Users_rolesCountAggregateInputType | true
    }

  export interface users_rolesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users_roles'], meta: { name: 'users_roles' } }
    /**
     * Find zero or one Users_roles that matches the filter.
     * @param {users_rolesFindUniqueArgs} args - Arguments to find a Users_roles
     * @example
     * // Get one Users_roles
     * const users_roles = await prisma.users_roles.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends users_rolesFindUniqueArgs>(args: SelectSubset<T, users_rolesFindUniqueArgs<ExtArgs>>): Prisma__users_rolesClient<$Result.GetResult<Prisma.$users_rolesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Users_roles that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {users_rolesFindUniqueOrThrowArgs} args - Arguments to find a Users_roles
     * @example
     * // Get one Users_roles
     * const users_roles = await prisma.users_roles.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends users_rolesFindUniqueOrThrowArgs>(args: SelectSubset<T, users_rolesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__users_rolesClient<$Result.GetResult<Prisma.$users_rolesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users_roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {users_rolesFindFirstArgs} args - Arguments to find a Users_roles
     * @example
     * // Get one Users_roles
     * const users_roles = await prisma.users_roles.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends users_rolesFindFirstArgs>(args?: SelectSubset<T, users_rolesFindFirstArgs<ExtArgs>>): Prisma__users_rolesClient<$Result.GetResult<Prisma.$users_rolesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users_roles that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {users_rolesFindFirstOrThrowArgs} args - Arguments to find a Users_roles
     * @example
     * // Get one Users_roles
     * const users_roles = await prisma.users_roles.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends users_rolesFindFirstOrThrowArgs>(args?: SelectSubset<T, users_rolesFindFirstOrThrowArgs<ExtArgs>>): Prisma__users_rolesClient<$Result.GetResult<Prisma.$users_rolesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users_roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {users_rolesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users_roles
     * const users_roles = await prisma.users_roles.findMany()
     * 
     * // Get first 10 Users_roles
     * const users_roles = await prisma.users_roles.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const users_rolesWithIdOnly = await prisma.users_roles.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends users_rolesFindManyArgs>(args?: SelectSubset<T, users_rolesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$users_rolesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Users_roles.
     * @param {users_rolesCreateArgs} args - Arguments to create a Users_roles.
     * @example
     * // Create one Users_roles
     * const Users_roles = await prisma.users_roles.create({
     *   data: {
     *     // ... data to create a Users_roles
     *   }
     * })
     * 
     */
    create<T extends users_rolesCreateArgs>(args: SelectSubset<T, users_rolesCreateArgs<ExtArgs>>): Prisma__users_rolesClient<$Result.GetResult<Prisma.$users_rolesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users_roles.
     * @param {users_rolesCreateManyArgs} args - Arguments to create many Users_roles.
     * @example
     * // Create many Users_roles
     * const users_roles = await prisma.users_roles.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends users_rolesCreateManyArgs>(args?: SelectSubset<T, users_rolesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users_roles and returns the data saved in the database.
     * @param {users_rolesCreateManyAndReturnArgs} args - Arguments to create many Users_roles.
     * @example
     * // Create many Users_roles
     * const users_roles = await prisma.users_roles.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users_roles and only return the `id`
     * const users_rolesWithIdOnly = await prisma.users_roles.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends users_rolesCreateManyAndReturnArgs>(args?: SelectSubset<T, users_rolesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$users_rolesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Users_roles.
     * @param {users_rolesDeleteArgs} args - Arguments to delete one Users_roles.
     * @example
     * // Delete one Users_roles
     * const Users_roles = await prisma.users_roles.delete({
     *   where: {
     *     // ... filter to delete one Users_roles
     *   }
     * })
     * 
     */
    delete<T extends users_rolesDeleteArgs>(args: SelectSubset<T, users_rolesDeleteArgs<ExtArgs>>): Prisma__users_rolesClient<$Result.GetResult<Prisma.$users_rolesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Users_roles.
     * @param {users_rolesUpdateArgs} args - Arguments to update one Users_roles.
     * @example
     * // Update one Users_roles
     * const users_roles = await prisma.users_roles.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends users_rolesUpdateArgs>(args: SelectSubset<T, users_rolesUpdateArgs<ExtArgs>>): Prisma__users_rolesClient<$Result.GetResult<Prisma.$users_rolesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users_roles.
     * @param {users_rolesDeleteManyArgs} args - Arguments to filter Users_roles to delete.
     * @example
     * // Delete a few Users_roles
     * const { count } = await prisma.users_roles.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends users_rolesDeleteManyArgs>(args?: SelectSubset<T, users_rolesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users_roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {users_rolesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users_roles
     * const users_roles = await prisma.users_roles.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends users_rolesUpdateManyArgs>(args: SelectSubset<T, users_rolesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users_roles and returns the data updated in the database.
     * @param {users_rolesUpdateManyAndReturnArgs} args - Arguments to update many Users_roles.
     * @example
     * // Update many Users_roles
     * const users_roles = await prisma.users_roles.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users_roles and only return the `id`
     * const users_rolesWithIdOnly = await prisma.users_roles.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends users_rolesUpdateManyAndReturnArgs>(args: SelectSubset<T, users_rolesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$users_rolesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Users_roles.
     * @param {users_rolesUpsertArgs} args - Arguments to update or create a Users_roles.
     * @example
     * // Update or create a Users_roles
     * const users_roles = await prisma.users_roles.upsert({
     *   create: {
     *     // ... data to create a Users_roles
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users_roles we want to update
     *   }
     * })
     */
    upsert<T extends users_rolesUpsertArgs>(args: SelectSubset<T, users_rolesUpsertArgs<ExtArgs>>): Prisma__users_rolesClient<$Result.GetResult<Prisma.$users_rolesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users_roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {users_rolesCountArgs} args - Arguments to filter Users_roles to count.
     * @example
     * // Count the number of Users_roles
     * const count = await prisma.users_roles.count({
     *   where: {
     *     // ... the filter for the Users_roles we want to count
     *   }
     * })
    **/
    count<T extends users_rolesCountArgs>(
      args?: Subset<T, users_rolesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Users_rolesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users_roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Users_rolesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Users_rolesAggregateArgs>(args: Subset<T, Users_rolesAggregateArgs>): Prisma.PrismaPromise<GetUsers_rolesAggregateType<T>>

    /**
     * Group by Users_roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {users_rolesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends users_rolesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: users_rolesGroupByArgs['orderBy'] }
        : { orderBy?: users_rolesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, users_rolesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsers_rolesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users_roles model
   */
  readonly fields: users_rolesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users_roles.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__users_rolesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    roles<T extends rolesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, rolesDefaultArgs<ExtArgs>>): Prisma__rolesClient<$Result.GetResult<Prisma.$rolesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    users<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the users_roles model
   */
  interface users_rolesFieldRefs {
    readonly id: FieldRef<"users_roles", 'String'>
    readonly users_id: FieldRef<"users_roles", 'String'>
    readonly role_id: FieldRef<"users_roles", 'String'>
  }
    

  // Custom InputTypes
  /**
   * users_roles findUnique
   */
  export type users_rolesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_roles
     */
    select?: users_rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users_roles
     */
    omit?: users_rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: users_rolesInclude<ExtArgs> | null
    /**
     * Filter, which users_roles to fetch.
     */
    where: users_rolesWhereUniqueInput
  }

  /**
   * users_roles findUniqueOrThrow
   */
  export type users_rolesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_roles
     */
    select?: users_rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users_roles
     */
    omit?: users_rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: users_rolesInclude<ExtArgs> | null
    /**
     * Filter, which users_roles to fetch.
     */
    where: users_rolesWhereUniqueInput
  }

  /**
   * users_roles findFirst
   */
  export type users_rolesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_roles
     */
    select?: users_rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users_roles
     */
    omit?: users_rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: users_rolesInclude<ExtArgs> | null
    /**
     * Filter, which users_roles to fetch.
     */
    where?: users_rolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users_roles to fetch.
     */
    orderBy?: users_rolesOrderByWithRelationInput | users_rolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users_roles.
     */
    cursor?: users_rolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users_roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users_roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users_roles.
     */
    distinct?: Users_rolesScalarFieldEnum | Users_rolesScalarFieldEnum[]
  }

  /**
   * users_roles findFirstOrThrow
   */
  export type users_rolesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_roles
     */
    select?: users_rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users_roles
     */
    omit?: users_rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: users_rolesInclude<ExtArgs> | null
    /**
     * Filter, which users_roles to fetch.
     */
    where?: users_rolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users_roles to fetch.
     */
    orderBy?: users_rolesOrderByWithRelationInput | users_rolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users_roles.
     */
    cursor?: users_rolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users_roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users_roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users_roles.
     */
    distinct?: Users_rolesScalarFieldEnum | Users_rolesScalarFieldEnum[]
  }

  /**
   * users_roles findMany
   */
  export type users_rolesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_roles
     */
    select?: users_rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users_roles
     */
    omit?: users_rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: users_rolesInclude<ExtArgs> | null
    /**
     * Filter, which users_roles to fetch.
     */
    where?: users_rolesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users_roles to fetch.
     */
    orderBy?: users_rolesOrderByWithRelationInput | users_rolesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users_roles.
     */
    cursor?: users_rolesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users_roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users_roles.
     */
    skip?: number
    distinct?: Users_rolesScalarFieldEnum | Users_rolesScalarFieldEnum[]
  }

  /**
   * users_roles create
   */
  export type users_rolesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_roles
     */
    select?: users_rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users_roles
     */
    omit?: users_rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: users_rolesInclude<ExtArgs> | null
    /**
     * The data needed to create a users_roles.
     */
    data: XOR<users_rolesCreateInput, users_rolesUncheckedCreateInput>
  }

  /**
   * users_roles createMany
   */
  export type users_rolesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users_roles.
     */
    data: users_rolesCreateManyInput | users_rolesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users_roles createManyAndReturn
   */
  export type users_rolesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_roles
     */
    select?: users_rolesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the users_roles
     */
    omit?: users_rolesOmit<ExtArgs> | null
    /**
     * The data used to create many users_roles.
     */
    data: users_rolesCreateManyInput | users_rolesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: users_rolesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * users_roles update
   */
  export type users_rolesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_roles
     */
    select?: users_rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users_roles
     */
    omit?: users_rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: users_rolesInclude<ExtArgs> | null
    /**
     * The data needed to update a users_roles.
     */
    data: XOR<users_rolesUpdateInput, users_rolesUncheckedUpdateInput>
    /**
     * Choose, which users_roles to update.
     */
    where: users_rolesWhereUniqueInput
  }

  /**
   * users_roles updateMany
   */
  export type users_rolesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users_roles.
     */
    data: XOR<users_rolesUpdateManyMutationInput, users_rolesUncheckedUpdateManyInput>
    /**
     * Filter which users_roles to update
     */
    where?: users_rolesWhereInput
    /**
     * Limit how many users_roles to update.
     */
    limit?: number
  }

  /**
   * users_roles updateManyAndReturn
   */
  export type users_rolesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_roles
     */
    select?: users_rolesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the users_roles
     */
    omit?: users_rolesOmit<ExtArgs> | null
    /**
     * The data used to update users_roles.
     */
    data: XOR<users_rolesUpdateManyMutationInput, users_rolesUncheckedUpdateManyInput>
    /**
     * Filter which users_roles to update
     */
    where?: users_rolesWhereInput
    /**
     * Limit how many users_roles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: users_rolesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * users_roles upsert
   */
  export type users_rolesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_roles
     */
    select?: users_rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users_roles
     */
    omit?: users_rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: users_rolesInclude<ExtArgs> | null
    /**
     * The filter to search for the users_roles to update in case it exists.
     */
    where: users_rolesWhereUniqueInput
    /**
     * In case the users_roles found by the `where` argument doesn't exist, create a new users_roles with this data.
     */
    create: XOR<users_rolesCreateInput, users_rolesUncheckedCreateInput>
    /**
     * In case the users_roles was found with the provided `where` argument, update it with this data.
     */
    update: XOR<users_rolesUpdateInput, users_rolesUncheckedUpdateInput>
  }

  /**
   * users_roles delete
   */
  export type users_rolesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_roles
     */
    select?: users_rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users_roles
     */
    omit?: users_rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: users_rolesInclude<ExtArgs> | null
    /**
     * Filter which users_roles to delete.
     */
    where: users_rolesWhereUniqueInput
  }

  /**
   * users_roles deleteMany
   */
  export type users_rolesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users_roles to delete
     */
    where?: users_rolesWhereInput
    /**
     * Limit how many users_roles to delete.
     */
    limit?: number
  }

  /**
   * users_roles without action
   */
  export type users_rolesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users_roles
     */
    select?: users_rolesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the users_roles
     */
    omit?: users_rolesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: users_rolesInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const RenamedclassScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    courses: 'courses',
    vacancies: 'vacancies'
  };

  export type RenamedclassScalarFieldEnum = (typeof RenamedclassScalarFieldEnum)[keyof typeof RenamedclassScalarFieldEnum]


  export const Class_daysScalarFieldEnum: {
    id: 'id',
    initial_date: 'initial_date',
    final_date: 'final_date',
    class: 'class'
  };

  export type Class_daysScalarFieldEnum = (typeof Class_daysScalarFieldEnum)[keyof typeof Class_daysScalarFieldEnum]


  export const ClassesScalarFieldEnum: {
    id: 'id',
    theme: 'theme',
    start_date: 'start_date',
    end_date: 'end_date',
    class: 'class'
  };

  export type ClassesScalarFieldEnum = (typeof ClassesScalarFieldEnum)[keyof typeof ClassesScalarFieldEnum]


  export const ClassroomsScalarFieldEnum: {
    id: 'id',
    number: 'number',
    created_at: 'created_at',
    block: 'block',
    companies: 'companies'
  };

  export type ClassroomsScalarFieldEnum = (typeof ClassroomsScalarFieldEnum)[keyof typeof ClassroomsScalarFieldEnum]


  export const CompaniesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    created_at: 'created_at',
    udpated_at: 'udpated_at',
    users: 'users',
    address: 'address'
  };

  export type CompaniesScalarFieldEnum = (typeof CompaniesScalarFieldEnum)[keyof typeof CompaniesScalarFieldEnum]


  export const ConfigsScalarFieldEnum: {
    id: 'id',
    registrations_time: 'registrations_time',
    companies: 'companies'
  };

  export type ConfigsScalarFieldEnum = (typeof ConfigsScalarFieldEnum)[keyof typeof ConfigsScalarFieldEnum]


  export const CoursesScalarFieldEnum: {
    id: 'id',
    description: 'description',
    created_at: 'created_at',
    name: 'name',
    registration_value: 'registration_value',
    companies: 'companies',
    workload: 'workload',
    monthly_fee_value: 'monthly_fee_value',
    minimum_grade: 'minimum_grade',
    maximum_grade: 'maximum_grade',
    minimum_frequency: 'minimum_frequency',
    syllabus: 'syllabus'
  };

  export type CoursesScalarFieldEnum = (typeof CoursesScalarFieldEnum)[keyof typeof CoursesScalarFieldEnum]


  export const DisciplineScalarFieldEnum: {
    id: 'id',
    name: 'name',
    levels: 'levels'
  };

  export type DisciplineScalarFieldEnum = (typeof DisciplineScalarFieldEnum)[keyof typeof DisciplineScalarFieldEnum]


  export const LevelsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    level: 'level',
    courses: 'courses'
  };

  export type LevelsScalarFieldEnum = (typeof LevelsScalarFieldEnum)[keyof typeof LevelsScalarFieldEnum]


  export const MaterialsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    file: 'file',
    levels: 'levels'
  };

  export type MaterialsScalarFieldEnum = (typeof MaterialsScalarFieldEnum)[keyof typeof MaterialsScalarFieldEnum]


  export const Monthly_feeScalarFieldEnum: {
    id: 'id',
    due_date: 'due_date',
    value: 'value',
    paid: 'paid',
    discount_payment_before_due_date: 'discount_payment_before_due_date',
    registrations: 'registrations',
    payment_method: 'payment_method',
    date_of_payment: 'date_of_payment'
  };

  export type Monthly_feeScalarFieldEnum = (typeof Monthly_feeScalarFieldEnum)[keyof typeof Monthly_feeScalarFieldEnum]


  export const Presence_listScalarFieldEnum: {
    id: 'id',
    is_present: 'is_present',
    users: 'users',
    classes: 'classes'
  };

  export type Presence_listScalarFieldEnum = (typeof Presence_listScalarFieldEnum)[keyof typeof Presence_listScalarFieldEnum]


  export const Records_of_studentsScalarFieldEnum: {
    id: 'id',
    registrations: 'registrations',
    description: 'description',
    title: 'title',
    created_at: 'created_at'
  };

  export type Records_of_studentsScalarFieldEnum = (typeof Records_of_studentsScalarFieldEnum)[keyof typeof Records_of_studentsScalarFieldEnum]


  export const RegistrationsScalarFieldEnum: {
    id: 'id',
    start_date: 'start_date',
    monthly_fee_amount: 'monthly_fee_amount',
    created_at: 'created_at',
    locked: 'locked',
    completed: 'completed',
    users: 'users',
    companies: 'companies'
  };

  export type RegistrationsScalarFieldEnum = (typeof RegistrationsScalarFieldEnum)[keyof typeof RegistrationsScalarFieldEnum]


  export const RolesScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type RolesScalarFieldEnum = (typeof RolesScalarFieldEnum)[keyof typeof RolesScalarFieldEnum]


  export const TasksScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    file: 'file',
    score: 'score',
    description: 'description',
    title: 'title',
    disciplines: 'disciplines',
    due_date: 'due_date'
  };

  export type TasksScalarFieldEnum = (typeof TasksScalarFieldEnum)[keyof typeof TasksScalarFieldEnum]


  export const TokensScalarFieldEnum: {
    id: 'id',
    type: 'type',
    expires_at: 'expires_at',
    createdAt_: 'createdAt_',
    users: 'users'
  };

  export type TokensScalarFieldEnum = (typeof TokensScalarFieldEnum)[keyof typeof TokensScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    avatar_url: 'avatar_url',
    created_at: 'created_at',
    updated_at: 'updated_at',
    cpf: 'cpf',
    phone: 'phone',
    username: 'username',
    gender: 'gender',
    date_of_birth: 'date_of_birth',
    active: 'active',
    address: 'address',
    companies: 'companies'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const Users_rolesScalarFieldEnum: {
    id: 'id',
    users_id: 'users_id',
    role_id: 'role_id'
  };

  export type Users_rolesScalarFieldEnum = (typeof Users_rolesScalarFieldEnum)[keyof typeof Users_rolesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Bytes'
   */
  export type BytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes'>
    


  /**
   * Reference to a field of type 'Bytes[]'
   */
  export type ListBytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type RenamedclassWhereInput = {
    AND?: RenamedclassWhereInput | RenamedclassWhereInput[]
    OR?: RenamedclassWhereInput[]
    NOT?: RenamedclassWhereInput | RenamedclassWhereInput[]
    id?: StringFilter<"Renamedclass"> | string
    nome?: StringFilter<"Renamedclass"> | string
    courses?: StringFilter<"Renamedclass"> | string
    vacancies?: DecimalFilter<"Renamedclass"> | Decimal | DecimalJsLike | number | string
    courses_Renamedclass_coursesTocourses?: XOR<CoursesScalarRelationFilter, coursesWhereInput>
    class_days?: Class_daysListRelationFilter
    classes?: ClassesListRelationFilter
  }

  export type RenamedclassOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    courses?: SortOrder
    vacancies?: SortOrder
    courses_Renamedclass_coursesTocourses?: coursesOrderByWithRelationInput
    class_days?: class_daysOrderByRelationAggregateInput
    classes?: classesOrderByRelationAggregateInput
  }

  export type RenamedclassWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RenamedclassWhereInput | RenamedclassWhereInput[]
    OR?: RenamedclassWhereInput[]
    NOT?: RenamedclassWhereInput | RenamedclassWhereInput[]
    nome?: StringFilter<"Renamedclass"> | string
    courses?: StringFilter<"Renamedclass"> | string
    vacancies?: DecimalFilter<"Renamedclass"> | Decimal | DecimalJsLike | number | string
    courses_Renamedclass_coursesTocourses?: XOR<CoursesScalarRelationFilter, coursesWhereInput>
    class_days?: Class_daysListRelationFilter
    classes?: ClassesListRelationFilter
  }, "id">

  export type RenamedclassOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    courses?: SortOrder
    vacancies?: SortOrder
    _count?: RenamedclassCountOrderByAggregateInput
    _avg?: RenamedclassAvgOrderByAggregateInput
    _max?: RenamedclassMaxOrderByAggregateInput
    _min?: RenamedclassMinOrderByAggregateInput
    _sum?: RenamedclassSumOrderByAggregateInput
  }

  export type RenamedclassScalarWhereWithAggregatesInput = {
    AND?: RenamedclassScalarWhereWithAggregatesInput | RenamedclassScalarWhereWithAggregatesInput[]
    OR?: RenamedclassScalarWhereWithAggregatesInput[]
    NOT?: RenamedclassScalarWhereWithAggregatesInput | RenamedclassScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Renamedclass"> | string
    nome?: StringWithAggregatesFilter<"Renamedclass"> | string
    courses?: StringWithAggregatesFilter<"Renamedclass"> | string
    vacancies?: DecimalWithAggregatesFilter<"Renamedclass"> | Decimal | DecimalJsLike | number | string
  }

  export type class_daysWhereInput = {
    AND?: class_daysWhereInput | class_daysWhereInput[]
    OR?: class_daysWhereInput[]
    NOT?: class_daysWhereInput | class_daysWhereInput[]
    id?: StringFilter<"class_days"> | string
    initial_date?: DateTimeFilter<"class_days"> | Date | string
    final_date?: DateTimeFilter<"class_days"> | Date | string
    class?: StringFilter<"class_days"> | string
    Renamedclass?: XOR<RenamedclassScalarRelationFilter, RenamedclassWhereInput>
  }

  export type class_daysOrderByWithRelationInput = {
    id?: SortOrder
    initial_date?: SortOrder
    final_date?: SortOrder
    class?: SortOrder
    Renamedclass?: RenamedclassOrderByWithRelationInput
  }

  export type class_daysWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: class_daysWhereInput | class_daysWhereInput[]
    OR?: class_daysWhereInput[]
    NOT?: class_daysWhereInput | class_daysWhereInput[]
    initial_date?: DateTimeFilter<"class_days"> | Date | string
    final_date?: DateTimeFilter<"class_days"> | Date | string
    class?: StringFilter<"class_days"> | string
    Renamedclass?: XOR<RenamedclassScalarRelationFilter, RenamedclassWhereInput>
  }, "id">

  export type class_daysOrderByWithAggregationInput = {
    id?: SortOrder
    initial_date?: SortOrder
    final_date?: SortOrder
    class?: SortOrder
    _count?: class_daysCountOrderByAggregateInput
    _max?: class_daysMaxOrderByAggregateInput
    _min?: class_daysMinOrderByAggregateInput
  }

  export type class_daysScalarWhereWithAggregatesInput = {
    AND?: class_daysScalarWhereWithAggregatesInput | class_daysScalarWhereWithAggregatesInput[]
    OR?: class_daysScalarWhereWithAggregatesInput[]
    NOT?: class_daysScalarWhereWithAggregatesInput | class_daysScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"class_days"> | string
    initial_date?: DateTimeWithAggregatesFilter<"class_days"> | Date | string
    final_date?: DateTimeWithAggregatesFilter<"class_days"> | Date | string
    class?: StringWithAggregatesFilter<"class_days"> | string
  }

  export type classesWhereInput = {
    AND?: classesWhereInput | classesWhereInput[]
    OR?: classesWhereInput[]
    NOT?: classesWhereInput | classesWhereInput[]
    id?: StringFilter<"classes"> | string
    theme?: StringFilter<"classes"> | string
    start_date?: DateTimeFilter<"classes"> | Date | string
    end_date?: DateTimeFilter<"classes"> | Date | string
    class?: StringFilter<"classes"> | string
    Renamedclass?: XOR<RenamedclassScalarRelationFilter, RenamedclassWhereInput>
    presence_list_presence_list_classesToclasses?: Presence_listListRelationFilter
  }

  export type classesOrderByWithRelationInput = {
    id?: SortOrder
    theme?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    class?: SortOrder
    Renamedclass?: RenamedclassOrderByWithRelationInput
    presence_list_presence_list_classesToclasses?: presence_listOrderByRelationAggregateInput
  }

  export type classesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: classesWhereInput | classesWhereInput[]
    OR?: classesWhereInput[]
    NOT?: classesWhereInput | classesWhereInput[]
    theme?: StringFilter<"classes"> | string
    start_date?: DateTimeFilter<"classes"> | Date | string
    end_date?: DateTimeFilter<"classes"> | Date | string
    class?: StringFilter<"classes"> | string
    Renamedclass?: XOR<RenamedclassScalarRelationFilter, RenamedclassWhereInput>
    presence_list_presence_list_classesToclasses?: Presence_listListRelationFilter
  }, "id">

  export type classesOrderByWithAggregationInput = {
    id?: SortOrder
    theme?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    class?: SortOrder
    _count?: classesCountOrderByAggregateInput
    _max?: classesMaxOrderByAggregateInput
    _min?: classesMinOrderByAggregateInput
  }

  export type classesScalarWhereWithAggregatesInput = {
    AND?: classesScalarWhereWithAggregatesInput | classesScalarWhereWithAggregatesInput[]
    OR?: classesScalarWhereWithAggregatesInput[]
    NOT?: classesScalarWhereWithAggregatesInput | classesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"classes"> | string
    theme?: StringWithAggregatesFilter<"classes"> | string
    start_date?: DateTimeWithAggregatesFilter<"classes"> | Date | string
    end_date?: DateTimeWithAggregatesFilter<"classes"> | Date | string
    class?: StringWithAggregatesFilter<"classes"> | string
  }

  export type classroomsWhereInput = {
    AND?: classroomsWhereInput | classroomsWhereInput[]
    OR?: classroomsWhereInput[]
    NOT?: classroomsWhereInput | classroomsWhereInput[]
    id?: StringFilter<"classrooms"> | string
    number?: DecimalFilter<"classrooms"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFilter<"classrooms"> | Date | string
    block?: StringNullableFilter<"classrooms"> | string | null
    companies?: StringNullableFilter<"classrooms"> | string | null
    companies_classrooms_companiesTocompanies?: XOR<CompaniesNullableScalarRelationFilter, companiesWhereInput> | null
  }

  export type classroomsOrderByWithRelationInput = {
    id?: SortOrder
    number?: SortOrder
    created_at?: SortOrder
    block?: SortOrderInput | SortOrder
    companies?: SortOrderInput | SortOrder
    companies_classrooms_companiesTocompanies?: companiesOrderByWithRelationInput
  }

  export type classroomsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: classroomsWhereInput | classroomsWhereInput[]
    OR?: classroomsWhereInput[]
    NOT?: classroomsWhereInput | classroomsWhereInput[]
    number?: DecimalFilter<"classrooms"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFilter<"classrooms"> | Date | string
    block?: StringNullableFilter<"classrooms"> | string | null
    companies?: StringNullableFilter<"classrooms"> | string | null
    companies_classrooms_companiesTocompanies?: XOR<CompaniesNullableScalarRelationFilter, companiesWhereInput> | null
  }, "id">

  export type classroomsOrderByWithAggregationInput = {
    id?: SortOrder
    number?: SortOrder
    created_at?: SortOrder
    block?: SortOrderInput | SortOrder
    companies?: SortOrderInput | SortOrder
    _count?: classroomsCountOrderByAggregateInput
    _avg?: classroomsAvgOrderByAggregateInput
    _max?: classroomsMaxOrderByAggregateInput
    _min?: classroomsMinOrderByAggregateInput
    _sum?: classroomsSumOrderByAggregateInput
  }

  export type classroomsScalarWhereWithAggregatesInput = {
    AND?: classroomsScalarWhereWithAggregatesInput | classroomsScalarWhereWithAggregatesInput[]
    OR?: classroomsScalarWhereWithAggregatesInput[]
    NOT?: classroomsScalarWhereWithAggregatesInput | classroomsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"classrooms"> | string
    number?: DecimalWithAggregatesFilter<"classrooms"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeWithAggregatesFilter<"classrooms"> | Date | string
    block?: StringNullableWithAggregatesFilter<"classrooms"> | string | null
    companies?: StringNullableWithAggregatesFilter<"classrooms"> | string | null
  }

  export type companiesWhereInput = {
    AND?: companiesWhereInput | companiesWhereInput[]
    OR?: companiesWhereInput[]
    NOT?: companiesWhereInput | companiesWhereInput[]
    id?: StringFilter<"companies"> | string
    name?: StringFilter<"companies"> | string
    created_at?: DateTimeNullableFilter<"companies"> | Date | string | null
    udpated_at?: DateTimeNullableFilter<"companies"> | Date | string | null
    users?: StringFilter<"companies"> | string
    address?: StringFilter<"companies"> | string
    classrooms_classrooms_companiesTocompanies?: ClassroomsListRelationFilter
    users_companies_usersTousers?: XOR<UsersScalarRelationFilter, usersWhereInput>
    configs_configs_companiesTocompanies?: ConfigsListRelationFilter
    courses_courses_companiesTocompanies?: CoursesListRelationFilter
    registrations_registrations_companiesTocompanies?: RegistrationsListRelationFilter
    users_users_companiesTocompanies?: UsersListRelationFilter
  }

  export type companiesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrderInput | SortOrder
    udpated_at?: SortOrderInput | SortOrder
    users?: SortOrder
    address?: SortOrder
    classrooms_classrooms_companiesTocompanies?: classroomsOrderByRelationAggregateInput
    users_companies_usersTousers?: usersOrderByWithRelationInput
    configs_configs_companiesTocompanies?: configsOrderByRelationAggregateInput
    courses_courses_companiesTocompanies?: coursesOrderByRelationAggregateInput
    registrations_registrations_companiesTocompanies?: registrationsOrderByRelationAggregateInput
    users_users_companiesTocompanies?: usersOrderByRelationAggregateInput
  }

  export type companiesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: companiesWhereInput | companiesWhereInput[]
    OR?: companiesWhereInput[]
    NOT?: companiesWhereInput | companiesWhereInput[]
    name?: StringFilter<"companies"> | string
    created_at?: DateTimeNullableFilter<"companies"> | Date | string | null
    udpated_at?: DateTimeNullableFilter<"companies"> | Date | string | null
    users?: StringFilter<"companies"> | string
    address?: StringFilter<"companies"> | string
    classrooms_classrooms_companiesTocompanies?: ClassroomsListRelationFilter
    users_companies_usersTousers?: XOR<UsersScalarRelationFilter, usersWhereInput>
    configs_configs_companiesTocompanies?: ConfigsListRelationFilter
    courses_courses_companiesTocompanies?: CoursesListRelationFilter
    registrations_registrations_companiesTocompanies?: RegistrationsListRelationFilter
    users_users_companiesTocompanies?: UsersListRelationFilter
  }, "id">

  export type companiesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrderInput | SortOrder
    udpated_at?: SortOrderInput | SortOrder
    users?: SortOrder
    address?: SortOrder
    _count?: companiesCountOrderByAggregateInput
    _max?: companiesMaxOrderByAggregateInput
    _min?: companiesMinOrderByAggregateInput
  }

  export type companiesScalarWhereWithAggregatesInput = {
    AND?: companiesScalarWhereWithAggregatesInput | companiesScalarWhereWithAggregatesInput[]
    OR?: companiesScalarWhereWithAggregatesInput[]
    NOT?: companiesScalarWhereWithAggregatesInput | companiesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"companies"> | string
    name?: StringWithAggregatesFilter<"companies"> | string
    created_at?: DateTimeNullableWithAggregatesFilter<"companies"> | Date | string | null
    udpated_at?: DateTimeNullableWithAggregatesFilter<"companies"> | Date | string | null
    users?: StringWithAggregatesFilter<"companies"> | string
    address?: StringWithAggregatesFilter<"companies"> | string
  }

  export type configsWhereInput = {
    AND?: configsWhereInput | configsWhereInput[]
    OR?: configsWhereInput[]
    NOT?: configsWhereInput | configsWhereInput[]
    id?: StringFilter<"configs"> | string
    registrations_time?: DecimalFilter<"configs"> | Decimal | DecimalJsLike | number | string
    companies?: StringFilter<"configs"> | string
    companies_configs_companiesTocompanies?: XOR<CompaniesScalarRelationFilter, companiesWhereInput>
  }

  export type configsOrderByWithRelationInput = {
    id?: SortOrder
    registrations_time?: SortOrder
    companies?: SortOrder
    companies_configs_companiesTocompanies?: companiesOrderByWithRelationInput
  }

  export type configsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: configsWhereInput | configsWhereInput[]
    OR?: configsWhereInput[]
    NOT?: configsWhereInput | configsWhereInput[]
    registrations_time?: DecimalFilter<"configs"> | Decimal | DecimalJsLike | number | string
    companies?: StringFilter<"configs"> | string
    companies_configs_companiesTocompanies?: XOR<CompaniesScalarRelationFilter, companiesWhereInput>
  }, "id">

  export type configsOrderByWithAggregationInput = {
    id?: SortOrder
    registrations_time?: SortOrder
    companies?: SortOrder
    _count?: configsCountOrderByAggregateInput
    _avg?: configsAvgOrderByAggregateInput
    _max?: configsMaxOrderByAggregateInput
    _min?: configsMinOrderByAggregateInput
    _sum?: configsSumOrderByAggregateInput
  }

  export type configsScalarWhereWithAggregatesInput = {
    AND?: configsScalarWhereWithAggregatesInput | configsScalarWhereWithAggregatesInput[]
    OR?: configsScalarWhereWithAggregatesInput[]
    NOT?: configsScalarWhereWithAggregatesInput | configsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"configs"> | string
    registrations_time?: DecimalWithAggregatesFilter<"configs"> | Decimal | DecimalJsLike | number | string
    companies?: StringWithAggregatesFilter<"configs"> | string
  }

  export type coursesWhereInput = {
    AND?: coursesWhereInput | coursesWhereInput[]
    OR?: coursesWhereInput[]
    NOT?: coursesWhereInput | coursesWhereInput[]
    id?: StringFilter<"courses"> | string
    description?: StringNullableFilter<"courses"> | string | null
    created_at?: DateTimeFilter<"courses"> | Date | string
    name?: StringFilter<"courses"> | string
    registration_value?: DecimalFilter<"courses"> | Decimal | DecimalJsLike | number | string
    companies?: StringFilter<"courses"> | string
    workload?: DecimalFilter<"courses"> | Decimal | DecimalJsLike | number | string
    monthly_fee_value?: DecimalFilter<"courses"> | Decimal | DecimalJsLike | number | string
    minimum_grade?: DecimalFilter<"courses"> | Decimal | DecimalJsLike | number | string
    maximum_grade?: DecimalFilter<"courses"> | Decimal | DecimalJsLike | number | string
    minimum_frequency?: DecimalFilter<"courses"> | Decimal | DecimalJsLike | number | string
    syllabus?: BytesNullableFilter<"courses"> | Uint8Array | null
    Renamedclass_Renamedclass_coursesTocourses?: RenamedclassListRelationFilter
    companies_courses_companiesTocompanies?: XOR<CompaniesScalarRelationFilter, companiesWhereInput>
    levels_levels_coursesTocourses?: LevelsListRelationFilter
  }

  export type coursesOrderByWithRelationInput = {
    id?: SortOrder
    description?: SortOrderInput | SortOrder
    created_at?: SortOrder
    name?: SortOrder
    registration_value?: SortOrder
    companies?: SortOrder
    workload?: SortOrder
    monthly_fee_value?: SortOrder
    minimum_grade?: SortOrder
    maximum_grade?: SortOrder
    minimum_frequency?: SortOrder
    syllabus?: SortOrderInput | SortOrder
    Renamedclass_Renamedclass_coursesTocourses?: RenamedclassOrderByRelationAggregateInput
    companies_courses_companiesTocompanies?: companiesOrderByWithRelationInput
    levels_levels_coursesTocourses?: levelsOrderByRelationAggregateInput
  }

  export type coursesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: coursesWhereInput | coursesWhereInput[]
    OR?: coursesWhereInput[]
    NOT?: coursesWhereInput | coursesWhereInput[]
    description?: StringNullableFilter<"courses"> | string | null
    created_at?: DateTimeFilter<"courses"> | Date | string
    name?: StringFilter<"courses"> | string
    registration_value?: DecimalFilter<"courses"> | Decimal | DecimalJsLike | number | string
    companies?: StringFilter<"courses"> | string
    workload?: DecimalFilter<"courses"> | Decimal | DecimalJsLike | number | string
    monthly_fee_value?: DecimalFilter<"courses"> | Decimal | DecimalJsLike | number | string
    minimum_grade?: DecimalFilter<"courses"> | Decimal | DecimalJsLike | number | string
    maximum_grade?: DecimalFilter<"courses"> | Decimal | DecimalJsLike | number | string
    minimum_frequency?: DecimalFilter<"courses"> | Decimal | DecimalJsLike | number | string
    syllabus?: BytesNullableFilter<"courses"> | Uint8Array | null
    Renamedclass_Renamedclass_coursesTocourses?: RenamedclassListRelationFilter
    companies_courses_companiesTocompanies?: XOR<CompaniesScalarRelationFilter, companiesWhereInput>
    levels_levels_coursesTocourses?: LevelsListRelationFilter
  }, "id">

  export type coursesOrderByWithAggregationInput = {
    id?: SortOrder
    description?: SortOrderInput | SortOrder
    created_at?: SortOrder
    name?: SortOrder
    registration_value?: SortOrder
    companies?: SortOrder
    workload?: SortOrder
    monthly_fee_value?: SortOrder
    minimum_grade?: SortOrder
    maximum_grade?: SortOrder
    minimum_frequency?: SortOrder
    syllabus?: SortOrderInput | SortOrder
    _count?: coursesCountOrderByAggregateInput
    _avg?: coursesAvgOrderByAggregateInput
    _max?: coursesMaxOrderByAggregateInput
    _min?: coursesMinOrderByAggregateInput
    _sum?: coursesSumOrderByAggregateInput
  }

  export type coursesScalarWhereWithAggregatesInput = {
    AND?: coursesScalarWhereWithAggregatesInput | coursesScalarWhereWithAggregatesInput[]
    OR?: coursesScalarWhereWithAggregatesInput[]
    NOT?: coursesScalarWhereWithAggregatesInput | coursesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"courses"> | string
    description?: StringNullableWithAggregatesFilter<"courses"> | string | null
    created_at?: DateTimeWithAggregatesFilter<"courses"> | Date | string
    name?: StringWithAggregatesFilter<"courses"> | string
    registration_value?: DecimalWithAggregatesFilter<"courses"> | Decimal | DecimalJsLike | number | string
    companies?: StringWithAggregatesFilter<"courses"> | string
    workload?: DecimalWithAggregatesFilter<"courses"> | Decimal | DecimalJsLike | number | string
    monthly_fee_value?: DecimalWithAggregatesFilter<"courses"> | Decimal | DecimalJsLike | number | string
    minimum_grade?: DecimalWithAggregatesFilter<"courses"> | Decimal | DecimalJsLike | number | string
    maximum_grade?: DecimalWithAggregatesFilter<"courses"> | Decimal | DecimalJsLike | number | string
    minimum_frequency?: DecimalWithAggregatesFilter<"courses"> | Decimal | DecimalJsLike | number | string
    syllabus?: BytesNullableWithAggregatesFilter<"courses"> | Uint8Array | null
  }

  export type disciplineWhereInput = {
    AND?: disciplineWhereInput | disciplineWhereInput[]
    OR?: disciplineWhereInput[]
    NOT?: disciplineWhereInput | disciplineWhereInput[]
    id?: StringFilter<"discipline"> | string
    name?: StringFilter<"discipline"> | string
    levels?: StringFilter<"discipline"> | string
    levels_discipline_levelsTolevels?: XOR<LevelsScalarRelationFilter, levelsWhereInput>
    tasks?: TasksListRelationFilter
  }

  export type disciplineOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    levels?: SortOrder
    levels_discipline_levelsTolevels?: levelsOrderByWithRelationInput
    tasks?: tasksOrderByRelationAggregateInput
  }

  export type disciplineWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: disciplineWhereInput | disciplineWhereInput[]
    OR?: disciplineWhereInput[]
    NOT?: disciplineWhereInput | disciplineWhereInput[]
    name?: StringFilter<"discipline"> | string
    levels?: StringFilter<"discipline"> | string
    levels_discipline_levelsTolevels?: XOR<LevelsScalarRelationFilter, levelsWhereInput>
    tasks?: TasksListRelationFilter
  }, "id">

  export type disciplineOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    levels?: SortOrder
    _count?: disciplineCountOrderByAggregateInput
    _max?: disciplineMaxOrderByAggregateInput
    _min?: disciplineMinOrderByAggregateInput
  }

  export type disciplineScalarWhereWithAggregatesInput = {
    AND?: disciplineScalarWhereWithAggregatesInput | disciplineScalarWhereWithAggregatesInput[]
    OR?: disciplineScalarWhereWithAggregatesInput[]
    NOT?: disciplineScalarWhereWithAggregatesInput | disciplineScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"discipline"> | string
    name?: StringWithAggregatesFilter<"discipline"> | string
    levels?: StringWithAggregatesFilter<"discipline"> | string
  }

  export type levelsWhereInput = {
    AND?: levelsWhereInput | levelsWhereInput[]
    OR?: levelsWhereInput[]
    NOT?: levelsWhereInput | levelsWhereInput[]
    id?: StringFilter<"levels"> | string
    name?: StringFilter<"levels"> | string
    level?: DecimalFilter<"levels"> | Decimal | DecimalJsLike | number | string
    courses?: StringNullableFilter<"levels"> | string | null
    discipline_discipline_levelsTolevels?: DisciplineListRelationFilter
    courses_levels_coursesTocourses?: XOR<CoursesNullableScalarRelationFilter, coursesWhereInput> | null
    materials_materials_levelsTolevels?: MaterialsListRelationFilter
  }

  export type levelsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    level?: SortOrder
    courses?: SortOrderInput | SortOrder
    discipline_discipline_levelsTolevels?: disciplineOrderByRelationAggregateInput
    courses_levels_coursesTocourses?: coursesOrderByWithRelationInput
    materials_materials_levelsTolevels?: materialsOrderByRelationAggregateInput
  }

  export type levelsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: levelsWhereInput | levelsWhereInput[]
    OR?: levelsWhereInput[]
    NOT?: levelsWhereInput | levelsWhereInput[]
    name?: StringFilter<"levels"> | string
    level?: DecimalFilter<"levels"> | Decimal | DecimalJsLike | number | string
    courses?: StringNullableFilter<"levels"> | string | null
    discipline_discipline_levelsTolevels?: DisciplineListRelationFilter
    courses_levels_coursesTocourses?: XOR<CoursesNullableScalarRelationFilter, coursesWhereInput> | null
    materials_materials_levelsTolevels?: MaterialsListRelationFilter
  }, "id">

  export type levelsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    level?: SortOrder
    courses?: SortOrderInput | SortOrder
    _count?: levelsCountOrderByAggregateInput
    _avg?: levelsAvgOrderByAggregateInput
    _max?: levelsMaxOrderByAggregateInput
    _min?: levelsMinOrderByAggregateInput
    _sum?: levelsSumOrderByAggregateInput
  }

  export type levelsScalarWhereWithAggregatesInput = {
    AND?: levelsScalarWhereWithAggregatesInput | levelsScalarWhereWithAggregatesInput[]
    OR?: levelsScalarWhereWithAggregatesInput[]
    NOT?: levelsScalarWhereWithAggregatesInput | levelsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"levels"> | string
    name?: StringWithAggregatesFilter<"levels"> | string
    level?: DecimalWithAggregatesFilter<"levels"> | Decimal | DecimalJsLike | number | string
    courses?: StringNullableWithAggregatesFilter<"levels"> | string | null
  }

  export type materialsWhereInput = {
    AND?: materialsWhereInput | materialsWhereInput[]
    OR?: materialsWhereInput[]
    NOT?: materialsWhereInput | materialsWhereInput[]
    id?: StringFilter<"materials"> | string
    name?: StringFilter<"materials"> | string
    file?: BytesFilter<"materials"> | Uint8Array
    levels?: StringNullableFilter<"materials"> | string | null
    levels_materials_levelsTolevels?: XOR<LevelsNullableScalarRelationFilter, levelsWhereInput> | null
  }

  export type materialsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    file?: SortOrder
    levels?: SortOrderInput | SortOrder
    levels_materials_levelsTolevels?: levelsOrderByWithRelationInput
  }

  export type materialsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: materialsWhereInput | materialsWhereInput[]
    OR?: materialsWhereInput[]
    NOT?: materialsWhereInput | materialsWhereInput[]
    name?: StringFilter<"materials"> | string
    file?: BytesFilter<"materials"> | Uint8Array
    levels?: StringNullableFilter<"materials"> | string | null
    levels_materials_levelsTolevels?: XOR<LevelsNullableScalarRelationFilter, levelsWhereInput> | null
  }, "id">

  export type materialsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    file?: SortOrder
    levels?: SortOrderInput | SortOrder
    _count?: materialsCountOrderByAggregateInput
    _max?: materialsMaxOrderByAggregateInput
    _min?: materialsMinOrderByAggregateInput
  }

  export type materialsScalarWhereWithAggregatesInput = {
    AND?: materialsScalarWhereWithAggregatesInput | materialsScalarWhereWithAggregatesInput[]
    OR?: materialsScalarWhereWithAggregatesInput[]
    NOT?: materialsScalarWhereWithAggregatesInput | materialsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"materials"> | string
    name?: StringWithAggregatesFilter<"materials"> | string
    file?: BytesWithAggregatesFilter<"materials"> | Uint8Array
    levels?: StringNullableWithAggregatesFilter<"materials"> | string | null
  }

  export type monthly_feeWhereInput = {
    AND?: monthly_feeWhereInput | monthly_feeWhereInput[]
    OR?: monthly_feeWhereInput[]
    NOT?: monthly_feeWhereInput | monthly_feeWhereInput[]
    id?: StringFilter<"monthly_fee"> | string
    due_date?: DateTimeFilter<"monthly_fee"> | Date | string
    value?: DecimalFilter<"monthly_fee"> | Decimal | DecimalJsLike | number | string
    paid?: BoolFilter<"monthly_fee"> | boolean
    discount_payment_before_due_date?: DecimalFilter<"monthly_fee"> | Decimal | DecimalJsLike | number | string
    registrations?: StringFilter<"monthly_fee"> | string
    payment_method?: StringNullableFilter<"monthly_fee"> | string | null
    date_of_payment?: DateTimeNullableFilter<"monthly_fee"> | Date | string | null
    registrations_monthly_fee_registrationsToregistrations?: XOR<RegistrationsScalarRelationFilter, registrationsWhereInput>
  }

  export type monthly_feeOrderByWithRelationInput = {
    id?: SortOrder
    due_date?: SortOrder
    value?: SortOrder
    paid?: SortOrder
    discount_payment_before_due_date?: SortOrder
    registrations?: SortOrder
    payment_method?: SortOrderInput | SortOrder
    date_of_payment?: SortOrderInput | SortOrder
    registrations_monthly_fee_registrationsToregistrations?: registrationsOrderByWithRelationInput
  }

  export type monthly_feeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: monthly_feeWhereInput | monthly_feeWhereInput[]
    OR?: monthly_feeWhereInput[]
    NOT?: monthly_feeWhereInput | monthly_feeWhereInput[]
    due_date?: DateTimeFilter<"monthly_fee"> | Date | string
    value?: DecimalFilter<"monthly_fee"> | Decimal | DecimalJsLike | number | string
    paid?: BoolFilter<"monthly_fee"> | boolean
    discount_payment_before_due_date?: DecimalFilter<"monthly_fee"> | Decimal | DecimalJsLike | number | string
    registrations?: StringFilter<"monthly_fee"> | string
    payment_method?: StringNullableFilter<"monthly_fee"> | string | null
    date_of_payment?: DateTimeNullableFilter<"monthly_fee"> | Date | string | null
    registrations_monthly_fee_registrationsToregistrations?: XOR<RegistrationsScalarRelationFilter, registrationsWhereInput>
  }, "id">

  export type monthly_feeOrderByWithAggregationInput = {
    id?: SortOrder
    due_date?: SortOrder
    value?: SortOrder
    paid?: SortOrder
    discount_payment_before_due_date?: SortOrder
    registrations?: SortOrder
    payment_method?: SortOrderInput | SortOrder
    date_of_payment?: SortOrderInput | SortOrder
    _count?: monthly_feeCountOrderByAggregateInput
    _avg?: monthly_feeAvgOrderByAggregateInput
    _max?: monthly_feeMaxOrderByAggregateInput
    _min?: monthly_feeMinOrderByAggregateInput
    _sum?: monthly_feeSumOrderByAggregateInput
  }

  export type monthly_feeScalarWhereWithAggregatesInput = {
    AND?: monthly_feeScalarWhereWithAggregatesInput | monthly_feeScalarWhereWithAggregatesInput[]
    OR?: monthly_feeScalarWhereWithAggregatesInput[]
    NOT?: monthly_feeScalarWhereWithAggregatesInput | monthly_feeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"monthly_fee"> | string
    due_date?: DateTimeWithAggregatesFilter<"monthly_fee"> | Date | string
    value?: DecimalWithAggregatesFilter<"monthly_fee"> | Decimal | DecimalJsLike | number | string
    paid?: BoolWithAggregatesFilter<"monthly_fee"> | boolean
    discount_payment_before_due_date?: DecimalWithAggregatesFilter<"monthly_fee"> | Decimal | DecimalJsLike | number | string
    registrations?: StringWithAggregatesFilter<"monthly_fee"> | string
    payment_method?: StringNullableWithAggregatesFilter<"monthly_fee"> | string | null
    date_of_payment?: DateTimeNullableWithAggregatesFilter<"monthly_fee"> | Date | string | null
  }

  export type presence_listWhereInput = {
    AND?: presence_listWhereInput | presence_listWhereInput[]
    OR?: presence_listWhereInput[]
    NOT?: presence_listWhereInput | presence_listWhereInput[]
    id?: StringFilter<"presence_list"> | string
    is_present?: BoolFilter<"presence_list"> | boolean
    users?: StringFilter<"presence_list"> | string
    classes?: StringFilter<"presence_list"> | string
    classes_presence_list_classesToclasses?: XOR<ClassesScalarRelationFilter, classesWhereInput>
    users_presence_list_usersTousers?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }

  export type presence_listOrderByWithRelationInput = {
    id?: SortOrder
    is_present?: SortOrder
    users?: SortOrder
    classes?: SortOrder
    classes_presence_list_classesToclasses?: classesOrderByWithRelationInput
    users_presence_list_usersTousers?: usersOrderByWithRelationInput
  }

  export type presence_listWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: presence_listWhereInput | presence_listWhereInput[]
    OR?: presence_listWhereInput[]
    NOT?: presence_listWhereInput | presence_listWhereInput[]
    is_present?: BoolFilter<"presence_list"> | boolean
    users?: StringFilter<"presence_list"> | string
    classes?: StringFilter<"presence_list"> | string
    classes_presence_list_classesToclasses?: XOR<ClassesScalarRelationFilter, classesWhereInput>
    users_presence_list_usersTousers?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }, "id">

  export type presence_listOrderByWithAggregationInput = {
    id?: SortOrder
    is_present?: SortOrder
    users?: SortOrder
    classes?: SortOrder
    _count?: presence_listCountOrderByAggregateInput
    _max?: presence_listMaxOrderByAggregateInput
    _min?: presence_listMinOrderByAggregateInput
  }

  export type presence_listScalarWhereWithAggregatesInput = {
    AND?: presence_listScalarWhereWithAggregatesInput | presence_listScalarWhereWithAggregatesInput[]
    OR?: presence_listScalarWhereWithAggregatesInput[]
    NOT?: presence_listScalarWhereWithAggregatesInput | presence_listScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"presence_list"> | string
    is_present?: BoolWithAggregatesFilter<"presence_list"> | boolean
    users?: StringWithAggregatesFilter<"presence_list"> | string
    classes?: StringWithAggregatesFilter<"presence_list"> | string
  }

  export type records_of_studentsWhereInput = {
    AND?: records_of_studentsWhereInput | records_of_studentsWhereInput[]
    OR?: records_of_studentsWhereInput[]
    NOT?: records_of_studentsWhereInput | records_of_studentsWhereInput[]
    id?: IntFilter<"records_of_students"> | number
    registrations?: StringFilter<"records_of_students"> | string
    description?: StringNullableFilter<"records_of_students"> | string | null
    title?: StringNullableFilter<"records_of_students"> | string | null
    created_at?: DateTimeNullableFilter<"records_of_students"> | Date | string | null
    registrations_records_of_students_registrationsToregistrations?: XOR<RegistrationsScalarRelationFilter, registrationsWhereInput>
  }

  export type records_of_studentsOrderByWithRelationInput = {
    id?: SortOrder
    registrations?: SortOrder
    description?: SortOrderInput | SortOrder
    title?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    registrations_records_of_students_registrationsToregistrations?: registrationsOrderByWithRelationInput
  }

  export type records_of_studentsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: records_of_studentsWhereInput | records_of_studentsWhereInput[]
    OR?: records_of_studentsWhereInput[]
    NOT?: records_of_studentsWhereInput | records_of_studentsWhereInput[]
    registrations?: StringFilter<"records_of_students"> | string
    description?: StringNullableFilter<"records_of_students"> | string | null
    title?: StringNullableFilter<"records_of_students"> | string | null
    created_at?: DateTimeNullableFilter<"records_of_students"> | Date | string | null
    registrations_records_of_students_registrationsToregistrations?: XOR<RegistrationsScalarRelationFilter, registrationsWhereInput>
  }, "id">

  export type records_of_studentsOrderByWithAggregationInput = {
    id?: SortOrder
    registrations?: SortOrder
    description?: SortOrderInput | SortOrder
    title?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: records_of_studentsCountOrderByAggregateInput
    _avg?: records_of_studentsAvgOrderByAggregateInput
    _max?: records_of_studentsMaxOrderByAggregateInput
    _min?: records_of_studentsMinOrderByAggregateInput
    _sum?: records_of_studentsSumOrderByAggregateInput
  }

  export type records_of_studentsScalarWhereWithAggregatesInput = {
    AND?: records_of_studentsScalarWhereWithAggregatesInput | records_of_studentsScalarWhereWithAggregatesInput[]
    OR?: records_of_studentsScalarWhereWithAggregatesInput[]
    NOT?: records_of_studentsScalarWhereWithAggregatesInput | records_of_studentsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"records_of_students"> | number
    registrations?: StringWithAggregatesFilter<"records_of_students"> | string
    description?: StringNullableWithAggregatesFilter<"records_of_students"> | string | null
    title?: StringNullableWithAggregatesFilter<"records_of_students"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"records_of_students"> | Date | string | null
  }

  export type registrationsWhereInput = {
    AND?: registrationsWhereInput | registrationsWhereInput[]
    OR?: registrationsWhereInput[]
    NOT?: registrationsWhereInput | registrationsWhereInput[]
    id?: StringFilter<"registrations"> | string
    start_date?: DateTimeFilter<"registrations"> | Date | string
    monthly_fee_amount?: DecimalFilter<"registrations"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeNullableFilter<"registrations"> | Date | string | null
    locked?: BoolNullableFilter<"registrations"> | boolean | null
    completed?: BoolNullableFilter<"registrations"> | boolean | null
    users?: StringNullableFilter<"registrations"> | string | null
    companies?: StringNullableFilter<"registrations"> | string | null
    monthly_fee_monthly_fee_registrationsToregistrations?: Monthly_feeListRelationFilter
    records_of_students_records_of_students_registrationsToregistrations?: Records_of_studentsListRelationFilter
    companies_registrations_companiesTocompanies?: XOR<CompaniesNullableScalarRelationFilter, companiesWhereInput> | null
    users_registrations_usersTousers?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
  }

  export type registrationsOrderByWithRelationInput = {
    id?: SortOrder
    start_date?: SortOrder
    monthly_fee_amount?: SortOrder
    created_at?: SortOrderInput | SortOrder
    locked?: SortOrderInput | SortOrder
    completed?: SortOrderInput | SortOrder
    users?: SortOrderInput | SortOrder
    companies?: SortOrderInput | SortOrder
    monthly_fee_monthly_fee_registrationsToregistrations?: monthly_feeOrderByRelationAggregateInput
    records_of_students_records_of_students_registrationsToregistrations?: records_of_studentsOrderByRelationAggregateInput
    companies_registrations_companiesTocompanies?: companiesOrderByWithRelationInput
    users_registrations_usersTousers?: usersOrderByWithRelationInput
  }

  export type registrationsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: registrationsWhereInput | registrationsWhereInput[]
    OR?: registrationsWhereInput[]
    NOT?: registrationsWhereInput | registrationsWhereInput[]
    start_date?: DateTimeFilter<"registrations"> | Date | string
    monthly_fee_amount?: DecimalFilter<"registrations"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeNullableFilter<"registrations"> | Date | string | null
    locked?: BoolNullableFilter<"registrations"> | boolean | null
    completed?: BoolNullableFilter<"registrations"> | boolean | null
    users?: StringNullableFilter<"registrations"> | string | null
    companies?: StringNullableFilter<"registrations"> | string | null
    monthly_fee_monthly_fee_registrationsToregistrations?: Monthly_feeListRelationFilter
    records_of_students_records_of_students_registrationsToregistrations?: Records_of_studentsListRelationFilter
    companies_registrations_companiesTocompanies?: XOR<CompaniesNullableScalarRelationFilter, companiesWhereInput> | null
    users_registrations_usersTousers?: XOR<UsersNullableScalarRelationFilter, usersWhereInput> | null
  }, "id">

  export type registrationsOrderByWithAggregationInput = {
    id?: SortOrder
    start_date?: SortOrder
    monthly_fee_amount?: SortOrder
    created_at?: SortOrderInput | SortOrder
    locked?: SortOrderInput | SortOrder
    completed?: SortOrderInput | SortOrder
    users?: SortOrderInput | SortOrder
    companies?: SortOrderInput | SortOrder
    _count?: registrationsCountOrderByAggregateInput
    _avg?: registrationsAvgOrderByAggregateInput
    _max?: registrationsMaxOrderByAggregateInput
    _min?: registrationsMinOrderByAggregateInput
    _sum?: registrationsSumOrderByAggregateInput
  }

  export type registrationsScalarWhereWithAggregatesInput = {
    AND?: registrationsScalarWhereWithAggregatesInput | registrationsScalarWhereWithAggregatesInput[]
    OR?: registrationsScalarWhereWithAggregatesInput[]
    NOT?: registrationsScalarWhereWithAggregatesInput | registrationsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"registrations"> | string
    start_date?: DateTimeWithAggregatesFilter<"registrations"> | Date | string
    monthly_fee_amount?: DecimalWithAggregatesFilter<"registrations"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeNullableWithAggregatesFilter<"registrations"> | Date | string | null
    locked?: BoolNullableWithAggregatesFilter<"registrations"> | boolean | null
    completed?: BoolNullableWithAggregatesFilter<"registrations"> | boolean | null
    users?: StringNullableWithAggregatesFilter<"registrations"> | string | null
    companies?: StringNullableWithAggregatesFilter<"registrations"> | string | null
  }

  export type rolesWhereInput = {
    AND?: rolesWhereInput | rolesWhereInput[]
    OR?: rolesWhereInput[]
    NOT?: rolesWhereInput | rolesWhereInput[]
    id?: StringFilter<"roles"> | string
    name?: StringFilter<"roles"> | string
    users_roles?: Users_rolesListRelationFilter
  }

  export type rolesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    users_roles?: users_rolesOrderByRelationAggregateInput
  }

  export type rolesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: rolesWhereInput | rolesWhereInput[]
    OR?: rolesWhereInput[]
    NOT?: rolesWhereInput | rolesWhereInput[]
    name?: StringFilter<"roles"> | string
    users_roles?: Users_rolesListRelationFilter
  }, "id">

  export type rolesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: rolesCountOrderByAggregateInput
    _max?: rolesMaxOrderByAggregateInput
    _min?: rolesMinOrderByAggregateInput
  }

  export type rolesScalarWhereWithAggregatesInput = {
    AND?: rolesScalarWhereWithAggregatesInput | rolesScalarWhereWithAggregatesInput[]
    OR?: rolesScalarWhereWithAggregatesInput[]
    NOT?: rolesScalarWhereWithAggregatesInput | rolesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"roles"> | string
    name?: StringWithAggregatesFilter<"roles"> | string
  }

  export type tasksWhereInput = {
    AND?: tasksWhereInput | tasksWhereInput[]
    OR?: tasksWhereInput[]
    NOT?: tasksWhereInput | tasksWhereInput[]
    id?: StringFilter<"tasks"> | string
    created_at?: DateTimeFilter<"tasks"> | Date | string
    file?: BytesNullableFilter<"tasks"> | Uint8Array | null
    score?: FloatNullableFilter<"tasks"> | number | null
    description?: StringNullableFilter<"tasks"> | string | null
    title?: StringFilter<"tasks"> | string
    disciplines?: StringFilter<"tasks"> | string
    due_date?: DateTimeNullableFilter<"tasks"> | Date | string | null
    discipline?: XOR<DisciplineScalarRelationFilter, disciplineWhereInput>
  }

  export type tasksOrderByWithRelationInput = {
    id?: SortOrder
    created_at?: SortOrder
    file?: SortOrderInput | SortOrder
    score?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    title?: SortOrder
    disciplines?: SortOrder
    due_date?: SortOrderInput | SortOrder
    discipline?: disciplineOrderByWithRelationInput
  }

  export type tasksWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: tasksWhereInput | tasksWhereInput[]
    OR?: tasksWhereInput[]
    NOT?: tasksWhereInput | tasksWhereInput[]
    created_at?: DateTimeFilter<"tasks"> | Date | string
    file?: BytesNullableFilter<"tasks"> | Uint8Array | null
    score?: FloatNullableFilter<"tasks"> | number | null
    description?: StringNullableFilter<"tasks"> | string | null
    title?: StringFilter<"tasks"> | string
    disciplines?: StringFilter<"tasks"> | string
    due_date?: DateTimeNullableFilter<"tasks"> | Date | string | null
    discipline?: XOR<DisciplineScalarRelationFilter, disciplineWhereInput>
  }, "id">

  export type tasksOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    file?: SortOrderInput | SortOrder
    score?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    title?: SortOrder
    disciplines?: SortOrder
    due_date?: SortOrderInput | SortOrder
    _count?: tasksCountOrderByAggregateInput
    _avg?: tasksAvgOrderByAggregateInput
    _max?: tasksMaxOrderByAggregateInput
    _min?: tasksMinOrderByAggregateInput
    _sum?: tasksSumOrderByAggregateInput
  }

  export type tasksScalarWhereWithAggregatesInput = {
    AND?: tasksScalarWhereWithAggregatesInput | tasksScalarWhereWithAggregatesInput[]
    OR?: tasksScalarWhereWithAggregatesInput[]
    NOT?: tasksScalarWhereWithAggregatesInput | tasksScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"tasks"> | string
    created_at?: DateTimeWithAggregatesFilter<"tasks"> | Date | string
    file?: BytesNullableWithAggregatesFilter<"tasks"> | Uint8Array | null
    score?: FloatNullableWithAggregatesFilter<"tasks"> | number | null
    description?: StringNullableWithAggregatesFilter<"tasks"> | string | null
    title?: StringWithAggregatesFilter<"tasks"> | string
    disciplines?: StringWithAggregatesFilter<"tasks"> | string
    due_date?: DateTimeNullableWithAggregatesFilter<"tasks"> | Date | string | null
  }

  export type tokensWhereInput = {
    AND?: tokensWhereInput | tokensWhereInput[]
    OR?: tokensWhereInput[]
    NOT?: tokensWhereInput | tokensWhereInput[]
    id?: StringFilter<"tokens"> | string
    type?: StringFilter<"tokens"> | string
    expires_at?: DateTimeFilter<"tokens"> | Date | string
    createdAt_?: DateTimeFilter<"tokens"> | Date | string
    users?: StringFilter<"tokens"> | string
    users_tokens_usersTousers?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }

  export type tokensOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    expires_at?: SortOrder
    createdAt_?: SortOrder
    users?: SortOrder
    users_tokens_usersTousers?: usersOrderByWithRelationInput
  }

  export type tokensWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: tokensWhereInput | tokensWhereInput[]
    OR?: tokensWhereInput[]
    NOT?: tokensWhereInput | tokensWhereInput[]
    type?: StringFilter<"tokens"> | string
    expires_at?: DateTimeFilter<"tokens"> | Date | string
    createdAt_?: DateTimeFilter<"tokens"> | Date | string
    users?: StringFilter<"tokens"> | string
    users_tokens_usersTousers?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }, "id">

  export type tokensOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    expires_at?: SortOrder
    createdAt_?: SortOrder
    users?: SortOrder
    _count?: tokensCountOrderByAggregateInput
    _max?: tokensMaxOrderByAggregateInput
    _min?: tokensMinOrderByAggregateInput
  }

  export type tokensScalarWhereWithAggregatesInput = {
    AND?: tokensScalarWhereWithAggregatesInput | tokensScalarWhereWithAggregatesInput[]
    OR?: tokensScalarWhereWithAggregatesInput[]
    NOT?: tokensScalarWhereWithAggregatesInput | tokensScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"tokens"> | string
    type?: StringWithAggregatesFilter<"tokens"> | string
    expires_at?: DateTimeWithAggregatesFilter<"tokens"> | Date | string
    createdAt_?: DateTimeWithAggregatesFilter<"tokens"> | Date | string
    users?: StringWithAggregatesFilter<"tokens"> | string
  }

  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    id?: StringFilter<"users"> | string
    name?: StringFilter<"users"> | string
    email?: StringFilter<"users"> | string
    password?: StringFilter<"users"> | string
    avatar_url?: StringNullableFilter<"users"> | string | null
    created_at?: DateTimeNullableFilter<"users"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"users"> | Date | string | null
    cpf?: StringNullableFilter<"users"> | string | null
    phone?: StringNullableFilter<"users"> | string | null
    username?: StringFilter<"users"> | string
    gender?: StringNullableFilter<"users"> | string | null
    date_of_birth?: DateTimeNullableFilter<"users"> | Date | string | null
    active?: BoolNullableFilter<"users"> | boolean | null
    address?: StringNullableFilter<"users"> | string | null
    companies?: StringFilter<"users"> | string
    companies_companies_usersTousers?: CompaniesListRelationFilter
    presence_list_presence_list_usersTousers?: Presence_listListRelationFilter
    registrations_registrations_usersTousers?: RegistrationsListRelationFilter
    tokens_tokens_usersTousers?: TokensListRelationFilter
    companies_users_companiesTocompanies?: XOR<CompaniesScalarRelationFilter, companiesWhereInput>
    users_roles?: Users_rolesListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    avatar_url?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    cpf?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    username?: SortOrder
    gender?: SortOrderInput | SortOrder
    date_of_birth?: SortOrderInput | SortOrder
    active?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    companies?: SortOrder
    companies_companies_usersTousers?: companiesOrderByRelationAggregateInput
    presence_list_presence_list_usersTousers?: presence_listOrderByRelationAggregateInput
    registrations_registrations_usersTousers?: registrationsOrderByRelationAggregateInput
    tokens_tokens_usersTousers?: tokensOrderByRelationAggregateInput
    companies_users_companiesTocompanies?: companiesOrderByWithRelationInput
    users_roles?: users_rolesOrderByRelationAggregateInput
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    username?: string
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    name?: StringFilter<"users"> | string
    password?: StringFilter<"users"> | string
    avatar_url?: StringNullableFilter<"users"> | string | null
    created_at?: DateTimeNullableFilter<"users"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"users"> | Date | string | null
    cpf?: StringNullableFilter<"users"> | string | null
    phone?: StringNullableFilter<"users"> | string | null
    gender?: StringNullableFilter<"users"> | string | null
    date_of_birth?: DateTimeNullableFilter<"users"> | Date | string | null
    active?: BoolNullableFilter<"users"> | boolean | null
    address?: StringNullableFilter<"users"> | string | null
    companies?: StringFilter<"users"> | string
    companies_companies_usersTousers?: CompaniesListRelationFilter
    presence_list_presence_list_usersTousers?: Presence_listListRelationFilter
    registrations_registrations_usersTousers?: RegistrationsListRelationFilter
    tokens_tokens_usersTousers?: TokensListRelationFilter
    companies_users_companiesTocompanies?: XOR<CompaniesScalarRelationFilter, companiesWhereInput>
    users_roles?: Users_rolesListRelationFilter
  }, "id" | "email" | "username">

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    avatar_url?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    cpf?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    username?: SortOrder
    gender?: SortOrderInput | SortOrder
    date_of_birth?: SortOrderInput | SortOrder
    active?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    companies?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"users"> | string
    name?: StringWithAggregatesFilter<"users"> | string
    email?: StringWithAggregatesFilter<"users"> | string
    password?: StringWithAggregatesFilter<"users"> | string
    avatar_url?: StringNullableWithAggregatesFilter<"users"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"users"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"users"> | Date | string | null
    cpf?: StringNullableWithAggregatesFilter<"users"> | string | null
    phone?: StringNullableWithAggregatesFilter<"users"> | string | null
    username?: StringWithAggregatesFilter<"users"> | string
    gender?: StringNullableWithAggregatesFilter<"users"> | string | null
    date_of_birth?: DateTimeNullableWithAggregatesFilter<"users"> | Date | string | null
    active?: BoolNullableWithAggregatesFilter<"users"> | boolean | null
    address?: StringNullableWithAggregatesFilter<"users"> | string | null
    companies?: StringWithAggregatesFilter<"users"> | string
  }

  export type users_rolesWhereInput = {
    AND?: users_rolesWhereInput | users_rolesWhereInput[]
    OR?: users_rolesWhereInput[]
    NOT?: users_rolesWhereInput | users_rolesWhereInput[]
    id?: StringFilter<"users_roles"> | string
    users_id?: StringFilter<"users_roles"> | string
    role_id?: StringFilter<"users_roles"> | string
    roles?: XOR<RolesScalarRelationFilter, rolesWhereInput>
    users?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }

  export type users_rolesOrderByWithRelationInput = {
    id?: SortOrder
    users_id?: SortOrder
    role_id?: SortOrder
    roles?: rolesOrderByWithRelationInput
    users?: usersOrderByWithRelationInput
  }

  export type users_rolesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: users_rolesWhereInput | users_rolesWhereInput[]
    OR?: users_rolesWhereInput[]
    NOT?: users_rolesWhereInput | users_rolesWhereInput[]
    users_id?: StringFilter<"users_roles"> | string
    role_id?: StringFilter<"users_roles"> | string
    roles?: XOR<RolesScalarRelationFilter, rolesWhereInput>
    users?: XOR<UsersScalarRelationFilter, usersWhereInput>
  }, "id">

  export type users_rolesOrderByWithAggregationInput = {
    id?: SortOrder
    users_id?: SortOrder
    role_id?: SortOrder
    _count?: users_rolesCountOrderByAggregateInput
    _max?: users_rolesMaxOrderByAggregateInput
    _min?: users_rolesMinOrderByAggregateInput
  }

  export type users_rolesScalarWhereWithAggregatesInput = {
    AND?: users_rolesScalarWhereWithAggregatesInput | users_rolesScalarWhereWithAggregatesInput[]
    OR?: users_rolesScalarWhereWithAggregatesInput[]
    NOT?: users_rolesScalarWhereWithAggregatesInput | users_rolesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"users_roles"> | string
    users_id?: StringWithAggregatesFilter<"users_roles"> | string
    role_id?: StringWithAggregatesFilter<"users_roles"> | string
  }

  export type RenamedclassCreateInput = {
    id: string
    nome: string
    vacancies: Decimal | DecimalJsLike | number | string
    courses_Renamedclass_coursesTocourses: coursesCreateNestedOneWithoutRenamedclass_Renamedclass_coursesTocoursesInput
    class_days?: class_daysCreateNestedManyWithoutRenamedclassInput
    classes?: classesCreateNestedManyWithoutRenamedclassInput
  }

  export type RenamedclassUncheckedCreateInput = {
    id: string
    nome: string
    courses: string
    vacancies: Decimal | DecimalJsLike | number | string
    class_days?: class_daysUncheckedCreateNestedManyWithoutRenamedclassInput
    classes?: classesUncheckedCreateNestedManyWithoutRenamedclassInput
  }

  export type RenamedclassUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    vacancies?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    courses_Renamedclass_coursesTocourses?: coursesUpdateOneRequiredWithoutRenamedclass_Renamedclass_coursesTocoursesNestedInput
    class_days?: class_daysUpdateManyWithoutRenamedclassNestedInput
    classes?: classesUpdateManyWithoutRenamedclassNestedInput
  }

  export type RenamedclassUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    courses?: StringFieldUpdateOperationsInput | string
    vacancies?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    class_days?: class_daysUncheckedUpdateManyWithoutRenamedclassNestedInput
    classes?: classesUncheckedUpdateManyWithoutRenamedclassNestedInput
  }

  export type RenamedclassCreateManyInput = {
    id: string
    nome: string
    courses: string
    vacancies: Decimal | DecimalJsLike | number | string
  }

  export type RenamedclassUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    vacancies?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type RenamedclassUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    courses?: StringFieldUpdateOperationsInput | string
    vacancies?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type class_daysCreateInput = {
    id: string
    initial_date: Date | string
    final_date: Date | string
    Renamedclass: RenamedclassCreateNestedOneWithoutClass_daysInput
  }

  export type class_daysUncheckedCreateInput = {
    id: string
    initial_date: Date | string
    final_date: Date | string
    class: string
  }

  export type class_daysUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    initial_date?: DateTimeFieldUpdateOperationsInput | Date | string
    final_date?: DateTimeFieldUpdateOperationsInput | Date | string
    Renamedclass?: RenamedclassUpdateOneRequiredWithoutClass_daysNestedInput
  }

  export type class_daysUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    initial_date?: DateTimeFieldUpdateOperationsInput | Date | string
    final_date?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: StringFieldUpdateOperationsInput | string
  }

  export type class_daysCreateManyInput = {
    id: string
    initial_date: Date | string
    final_date: Date | string
    class: string
  }

  export type class_daysUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    initial_date?: DateTimeFieldUpdateOperationsInput | Date | string
    final_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type class_daysUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    initial_date?: DateTimeFieldUpdateOperationsInput | Date | string
    final_date?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: StringFieldUpdateOperationsInput | string
  }

  export type classesCreateInput = {
    id: string
    theme: string
    start_date: Date | string
    end_date: Date | string
    Renamedclass: RenamedclassCreateNestedOneWithoutClassesInput
    presence_list_presence_list_classesToclasses?: presence_listCreateNestedManyWithoutClasses_presence_list_classesToclassesInput
  }

  export type classesUncheckedCreateInput = {
    id: string
    theme: string
    start_date: Date | string
    end_date: Date | string
    class: string
    presence_list_presence_list_classesToclasses?: presence_listUncheckedCreateNestedManyWithoutClasses_presence_list_classesToclassesInput
  }

  export type classesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    theme?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    Renamedclass?: RenamedclassUpdateOneRequiredWithoutClassesNestedInput
    presence_list_presence_list_classesToclasses?: presence_listUpdateManyWithoutClasses_presence_list_classesToclassesNestedInput
  }

  export type classesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    theme?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: StringFieldUpdateOperationsInput | string
    presence_list_presence_list_classesToclasses?: presence_listUncheckedUpdateManyWithoutClasses_presence_list_classesToclassesNestedInput
  }

  export type classesCreateManyInput = {
    id: string
    theme: string
    start_date: Date | string
    end_date: Date | string
    class: string
  }

  export type classesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    theme?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type classesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    theme?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: StringFieldUpdateOperationsInput | string
  }

  export type classroomsCreateInput = {
    id: string
    number: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    block?: string | null
    companies_classrooms_companiesTocompanies?: companiesCreateNestedOneWithoutClassrooms_classrooms_companiesTocompaniesInput
  }

  export type classroomsUncheckedCreateInput = {
    id: string
    number: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    block?: string | null
    companies?: string | null
  }

  export type classroomsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    block?: NullableStringFieldUpdateOperationsInput | string | null
    companies_classrooms_companiesTocompanies?: companiesUpdateOneWithoutClassrooms_classrooms_companiesTocompaniesNestedInput
  }

  export type classroomsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    block?: NullableStringFieldUpdateOperationsInput | string | null
    companies?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type classroomsCreateManyInput = {
    id: string
    number: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    block?: string | null
    companies?: string | null
  }

  export type classroomsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    block?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type classroomsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    block?: NullableStringFieldUpdateOperationsInput | string | null
    companies?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type companiesCreateInput = {
    id: string
    name: string
    created_at?: Date | string | null
    udpated_at?: Date | string | null
    address: string
    classrooms_classrooms_companiesTocompanies?: classroomsCreateNestedManyWithoutCompanies_classrooms_companiesTocompaniesInput
    users_companies_usersTousers: usersCreateNestedOneWithoutCompanies_companies_usersTousersInput
    configs_configs_companiesTocompanies?: configsCreateNestedManyWithoutCompanies_configs_companiesTocompaniesInput
    courses_courses_companiesTocompanies?: coursesCreateNestedManyWithoutCompanies_courses_companiesTocompaniesInput
    registrations_registrations_companiesTocompanies?: registrationsCreateNestedManyWithoutCompanies_registrations_companiesTocompaniesInput
    users_users_companiesTocompanies?: usersCreateNestedManyWithoutCompanies_users_companiesTocompaniesInput
  }

  export type companiesUncheckedCreateInput = {
    id: string
    name: string
    created_at?: Date | string | null
    udpated_at?: Date | string | null
    users: string
    address: string
    classrooms_classrooms_companiesTocompanies?: classroomsUncheckedCreateNestedManyWithoutCompanies_classrooms_companiesTocompaniesInput
    configs_configs_companiesTocompanies?: configsUncheckedCreateNestedManyWithoutCompanies_configs_companiesTocompaniesInput
    courses_courses_companiesTocompanies?: coursesUncheckedCreateNestedManyWithoutCompanies_courses_companiesTocompaniesInput
    registrations_registrations_companiesTocompanies?: registrationsUncheckedCreateNestedManyWithoutCompanies_registrations_companiesTocompaniesInput
    users_users_companiesTocompanies?: usersUncheckedCreateNestedManyWithoutCompanies_users_companiesTocompaniesInput
  }

  export type companiesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    udpated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: StringFieldUpdateOperationsInput | string
    classrooms_classrooms_companiesTocompanies?: classroomsUpdateManyWithoutCompanies_classrooms_companiesTocompaniesNestedInput
    users_companies_usersTousers?: usersUpdateOneRequiredWithoutCompanies_companies_usersTousersNestedInput
    configs_configs_companiesTocompanies?: configsUpdateManyWithoutCompanies_configs_companiesTocompaniesNestedInput
    courses_courses_companiesTocompanies?: coursesUpdateManyWithoutCompanies_courses_companiesTocompaniesNestedInput
    registrations_registrations_companiesTocompanies?: registrationsUpdateManyWithoutCompanies_registrations_companiesTocompaniesNestedInput
    users_users_companiesTocompanies?: usersUpdateManyWithoutCompanies_users_companiesTocompaniesNestedInput
  }

  export type companiesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    udpated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    classrooms_classrooms_companiesTocompanies?: classroomsUncheckedUpdateManyWithoutCompanies_classrooms_companiesTocompaniesNestedInput
    configs_configs_companiesTocompanies?: configsUncheckedUpdateManyWithoutCompanies_configs_companiesTocompaniesNestedInput
    courses_courses_companiesTocompanies?: coursesUncheckedUpdateManyWithoutCompanies_courses_companiesTocompaniesNestedInput
    registrations_registrations_companiesTocompanies?: registrationsUncheckedUpdateManyWithoutCompanies_registrations_companiesTocompaniesNestedInput
    users_users_companiesTocompanies?: usersUncheckedUpdateManyWithoutCompanies_users_companiesTocompaniesNestedInput
  }

  export type companiesCreateManyInput = {
    id: string
    name: string
    created_at?: Date | string | null
    udpated_at?: Date | string | null
    users: string
    address: string
  }

  export type companiesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    udpated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: StringFieldUpdateOperationsInput | string
  }

  export type companiesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    udpated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
  }

  export type configsCreateInput = {
    id: string
    registrations_time?: Decimal | DecimalJsLike | number | string
    companies_configs_companiesTocompanies: companiesCreateNestedOneWithoutConfigs_configs_companiesTocompaniesInput
  }

  export type configsUncheckedCreateInput = {
    id: string
    registrations_time?: Decimal | DecimalJsLike | number | string
    companies: string
  }

  export type configsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    registrations_time?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    companies_configs_companiesTocompanies?: companiesUpdateOneRequiredWithoutConfigs_configs_companiesTocompaniesNestedInput
  }

  export type configsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    registrations_time?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    companies?: StringFieldUpdateOperationsInput | string
  }

  export type configsCreateManyInput = {
    id: string
    registrations_time?: Decimal | DecimalJsLike | number | string
    companies: string
  }

  export type configsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    registrations_time?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type configsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    registrations_time?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    companies?: StringFieldUpdateOperationsInput | string
  }

  export type coursesCreateInput = {
    id: string
    description?: string | null
    created_at?: Date | string
    name: string
    registration_value: Decimal | DecimalJsLike | number | string
    workload: Decimal | DecimalJsLike | number | string
    monthly_fee_value: Decimal | DecimalJsLike | number | string
    minimum_grade: Decimal | DecimalJsLike | number | string
    maximum_grade: Decimal | DecimalJsLike | number | string
    minimum_frequency: Decimal | DecimalJsLike | number | string
    syllabus?: Uint8Array | null
    Renamedclass_Renamedclass_coursesTocourses?: RenamedclassCreateNestedManyWithoutCourses_Renamedclass_coursesTocoursesInput
    companies_courses_companiesTocompanies: companiesCreateNestedOneWithoutCourses_courses_companiesTocompaniesInput
    levels_levels_coursesTocourses?: levelsCreateNestedManyWithoutCourses_levels_coursesTocoursesInput
  }

  export type coursesUncheckedCreateInput = {
    id: string
    description?: string | null
    created_at?: Date | string
    name: string
    registration_value: Decimal | DecimalJsLike | number | string
    companies: string
    workload: Decimal | DecimalJsLike | number | string
    monthly_fee_value: Decimal | DecimalJsLike | number | string
    minimum_grade: Decimal | DecimalJsLike | number | string
    maximum_grade: Decimal | DecimalJsLike | number | string
    minimum_frequency: Decimal | DecimalJsLike | number | string
    syllabus?: Uint8Array | null
    Renamedclass_Renamedclass_coursesTocourses?: RenamedclassUncheckedCreateNestedManyWithoutCourses_Renamedclass_coursesTocoursesInput
    levels_levels_coursesTocourses?: levelsUncheckedCreateNestedManyWithoutCourses_levels_coursesTocoursesInput
  }

  export type coursesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    registration_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    workload?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    monthly_fee_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    minimum_grade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    maximum_grade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    minimum_frequency?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    syllabus?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    Renamedclass_Renamedclass_coursesTocourses?: RenamedclassUpdateManyWithoutCourses_Renamedclass_coursesTocoursesNestedInput
    companies_courses_companiesTocompanies?: companiesUpdateOneRequiredWithoutCourses_courses_companiesTocompaniesNestedInput
    levels_levels_coursesTocourses?: levelsUpdateManyWithoutCourses_levels_coursesTocoursesNestedInput
  }

  export type coursesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    registration_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    companies?: StringFieldUpdateOperationsInput | string
    workload?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    monthly_fee_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    minimum_grade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    maximum_grade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    minimum_frequency?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    syllabus?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    Renamedclass_Renamedclass_coursesTocourses?: RenamedclassUncheckedUpdateManyWithoutCourses_Renamedclass_coursesTocoursesNestedInput
    levels_levels_coursesTocourses?: levelsUncheckedUpdateManyWithoutCourses_levels_coursesTocoursesNestedInput
  }

  export type coursesCreateManyInput = {
    id: string
    description?: string | null
    created_at?: Date | string
    name: string
    registration_value: Decimal | DecimalJsLike | number | string
    companies: string
    workload: Decimal | DecimalJsLike | number | string
    monthly_fee_value: Decimal | DecimalJsLike | number | string
    minimum_grade: Decimal | DecimalJsLike | number | string
    maximum_grade: Decimal | DecimalJsLike | number | string
    minimum_frequency: Decimal | DecimalJsLike | number | string
    syllabus?: Uint8Array | null
  }

  export type coursesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    registration_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    workload?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    monthly_fee_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    minimum_grade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    maximum_grade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    minimum_frequency?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    syllabus?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
  }

  export type coursesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    registration_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    companies?: StringFieldUpdateOperationsInput | string
    workload?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    monthly_fee_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    minimum_grade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    maximum_grade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    minimum_frequency?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    syllabus?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
  }

  export type disciplineCreateInput = {
    id: string
    name: string
    levels_discipline_levelsTolevels: levelsCreateNestedOneWithoutDiscipline_discipline_levelsTolevelsInput
    tasks?: tasksCreateNestedManyWithoutDisciplineInput
  }

  export type disciplineUncheckedCreateInput = {
    id: string
    name: string
    levels: string
    tasks?: tasksUncheckedCreateNestedManyWithoutDisciplineInput
  }

  export type disciplineUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    levels_discipline_levelsTolevels?: levelsUpdateOneRequiredWithoutDiscipline_discipline_levelsTolevelsNestedInput
    tasks?: tasksUpdateManyWithoutDisciplineNestedInput
  }

  export type disciplineUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    levels?: StringFieldUpdateOperationsInput | string
    tasks?: tasksUncheckedUpdateManyWithoutDisciplineNestedInput
  }

  export type disciplineCreateManyInput = {
    id: string
    name: string
    levels: string
  }

  export type disciplineUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type disciplineUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    levels?: StringFieldUpdateOperationsInput | string
  }

  export type levelsCreateInput = {
    id: string
    name: string
    level: Decimal | DecimalJsLike | number | string
    discipline_discipline_levelsTolevels?: disciplineCreateNestedManyWithoutLevels_discipline_levelsTolevelsInput
    courses_levels_coursesTocourses?: coursesCreateNestedOneWithoutLevels_levels_coursesTocoursesInput
    materials_materials_levelsTolevels?: materialsCreateNestedManyWithoutLevels_materials_levelsTolevelsInput
  }

  export type levelsUncheckedCreateInput = {
    id: string
    name: string
    level: Decimal | DecimalJsLike | number | string
    courses?: string | null
    discipline_discipline_levelsTolevels?: disciplineUncheckedCreateNestedManyWithoutLevels_discipline_levelsTolevelsInput
    materials_materials_levelsTolevels?: materialsUncheckedCreateNestedManyWithoutLevels_materials_levelsTolevelsInput
  }

  export type levelsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    level?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discipline_discipline_levelsTolevels?: disciplineUpdateManyWithoutLevels_discipline_levelsTolevelsNestedInput
    courses_levels_coursesTocourses?: coursesUpdateOneWithoutLevels_levels_coursesTocoursesNestedInput
    materials_materials_levelsTolevels?: materialsUpdateManyWithoutLevels_materials_levelsTolevelsNestedInput
  }

  export type levelsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    level?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    courses?: NullableStringFieldUpdateOperationsInput | string | null
    discipline_discipline_levelsTolevels?: disciplineUncheckedUpdateManyWithoutLevels_discipline_levelsTolevelsNestedInput
    materials_materials_levelsTolevels?: materialsUncheckedUpdateManyWithoutLevels_materials_levelsTolevelsNestedInput
  }

  export type levelsCreateManyInput = {
    id: string
    name: string
    level: Decimal | DecimalJsLike | number | string
    courses?: string | null
  }

  export type levelsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    level?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type levelsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    level?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    courses?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type materialsCreateInput = {
    id: string
    name: string
    file: Uint8Array
    levels_materials_levelsTolevels?: levelsCreateNestedOneWithoutMaterials_materials_levelsTolevelsInput
  }

  export type materialsUncheckedCreateInput = {
    id: string
    name: string
    file: Uint8Array
    levels?: string | null
  }

  export type materialsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    file?: BytesFieldUpdateOperationsInput | Uint8Array
    levels_materials_levelsTolevels?: levelsUpdateOneWithoutMaterials_materials_levelsTolevelsNestedInput
  }

  export type materialsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    file?: BytesFieldUpdateOperationsInput | Uint8Array
    levels?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type materialsCreateManyInput = {
    id: string
    name: string
    file: Uint8Array
    levels?: string | null
  }

  export type materialsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    file?: BytesFieldUpdateOperationsInput | Uint8Array
  }

  export type materialsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    file?: BytesFieldUpdateOperationsInput | Uint8Array
    levels?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type monthly_feeCreateInput = {
    id: string
    due_date: Date | string
    value: Decimal | DecimalJsLike | number | string
    paid?: boolean
    discount_payment_before_due_date?: Decimal | DecimalJsLike | number | string
    payment_method?: string | null
    date_of_payment?: Date | string | null
    registrations_monthly_fee_registrationsToregistrations: registrationsCreateNestedOneWithoutMonthly_fee_monthly_fee_registrationsToregistrationsInput
  }

  export type monthly_feeUncheckedCreateInput = {
    id: string
    due_date: Date | string
    value: Decimal | DecimalJsLike | number | string
    paid?: boolean
    discount_payment_before_due_date?: Decimal | DecimalJsLike | number | string
    registrations: string
    payment_method?: string | null
    date_of_payment?: Date | string | null
  }

  export type monthly_feeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paid?: BoolFieldUpdateOperationsInput | boolean
    discount_payment_before_due_date?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payment_method?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_payment?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrations_monthly_fee_registrationsToregistrations?: registrationsUpdateOneRequiredWithoutMonthly_fee_monthly_fee_registrationsToregistrationsNestedInput
  }

  export type monthly_feeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paid?: BoolFieldUpdateOperationsInput | boolean
    discount_payment_before_due_date?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    registrations?: StringFieldUpdateOperationsInput | string
    payment_method?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_payment?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type monthly_feeCreateManyInput = {
    id: string
    due_date: Date | string
    value: Decimal | DecimalJsLike | number | string
    paid?: boolean
    discount_payment_before_due_date?: Decimal | DecimalJsLike | number | string
    registrations: string
    payment_method?: string | null
    date_of_payment?: Date | string | null
  }

  export type monthly_feeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paid?: BoolFieldUpdateOperationsInput | boolean
    discount_payment_before_due_date?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payment_method?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_payment?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type monthly_feeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paid?: BoolFieldUpdateOperationsInput | boolean
    discount_payment_before_due_date?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    registrations?: StringFieldUpdateOperationsInput | string
    payment_method?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_payment?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type presence_listCreateInput = {
    id: string
    is_present?: boolean
    classes_presence_list_classesToclasses: classesCreateNestedOneWithoutPresence_list_presence_list_classesToclassesInput
    users_presence_list_usersTousers: usersCreateNestedOneWithoutPresence_list_presence_list_usersTousersInput
  }

  export type presence_listUncheckedCreateInput = {
    id: string
    is_present?: boolean
    users: string
    classes: string
  }

  export type presence_listUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    is_present?: BoolFieldUpdateOperationsInput | boolean
    classes_presence_list_classesToclasses?: classesUpdateOneRequiredWithoutPresence_list_presence_list_classesToclassesNestedInput
    users_presence_list_usersTousers?: usersUpdateOneRequiredWithoutPresence_list_presence_list_usersTousersNestedInput
  }

  export type presence_listUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    is_present?: BoolFieldUpdateOperationsInput | boolean
    users?: StringFieldUpdateOperationsInput | string
    classes?: StringFieldUpdateOperationsInput | string
  }

  export type presence_listCreateManyInput = {
    id: string
    is_present?: boolean
    users: string
    classes: string
  }

  export type presence_listUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    is_present?: BoolFieldUpdateOperationsInput | boolean
  }

  export type presence_listUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    is_present?: BoolFieldUpdateOperationsInput | boolean
    users?: StringFieldUpdateOperationsInput | string
    classes?: StringFieldUpdateOperationsInput | string
  }

  export type records_of_studentsCreateInput = {
    description?: string | null
    title?: string | null
    created_at?: Date | string | null
    registrations_records_of_students_registrationsToregistrations: registrationsCreateNestedOneWithoutRecords_of_students_records_of_students_registrationsToregistrationsInput
  }

  export type records_of_studentsUncheckedCreateInput = {
    id?: number
    registrations: string
    description?: string | null
    title?: string | null
    created_at?: Date | string | null
  }

  export type records_of_studentsUpdateInput = {
    description?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    registrations_records_of_students_registrationsToregistrations?: registrationsUpdateOneRequiredWithoutRecords_of_students_records_of_students_registrationsToregistrationsNestedInput
  }

  export type records_of_studentsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    registrations?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type records_of_studentsCreateManyInput = {
    id?: number
    registrations: string
    description?: string | null
    title?: string | null
    created_at?: Date | string | null
  }

  export type records_of_studentsUpdateManyMutationInput = {
    description?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type records_of_studentsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    registrations?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type registrationsCreateInput = {
    id: string
    start_date?: Date | string
    monthly_fee_amount?: Decimal | DecimalJsLike | number | string
    created_at?: Date | string | null
    locked?: boolean | null
    completed?: boolean | null
    monthly_fee_monthly_fee_registrationsToregistrations?: monthly_feeCreateNestedManyWithoutRegistrations_monthly_fee_registrationsToregistrationsInput
    records_of_students_records_of_students_registrationsToregistrations?: records_of_studentsCreateNestedManyWithoutRegistrations_records_of_students_registrationsToregistrationsInput
    companies_registrations_companiesTocompanies?: companiesCreateNestedOneWithoutRegistrations_registrations_companiesTocompaniesInput
    users_registrations_usersTousers?: usersCreateNestedOneWithoutRegistrations_registrations_usersTousersInput
  }

  export type registrationsUncheckedCreateInput = {
    id: string
    start_date?: Date | string
    monthly_fee_amount?: Decimal | DecimalJsLike | number | string
    created_at?: Date | string | null
    locked?: boolean | null
    completed?: boolean | null
    users?: string | null
    companies?: string | null
    monthly_fee_monthly_fee_registrationsToregistrations?: monthly_feeUncheckedCreateNestedManyWithoutRegistrations_monthly_fee_registrationsToregistrationsInput
    records_of_students_records_of_students_registrationsToregistrations?: records_of_studentsUncheckedCreateNestedManyWithoutRegistrations_records_of_students_registrationsToregistrationsInput
  }

  export type registrationsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthly_fee_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    locked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    completed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    monthly_fee_monthly_fee_registrationsToregistrations?: monthly_feeUpdateManyWithoutRegistrations_monthly_fee_registrationsToregistrationsNestedInput
    records_of_students_records_of_students_registrationsToregistrations?: records_of_studentsUpdateManyWithoutRegistrations_records_of_students_registrationsToregistrationsNestedInput
    companies_registrations_companiesTocompanies?: companiesUpdateOneWithoutRegistrations_registrations_companiesTocompaniesNestedInput
    users_registrations_usersTousers?: usersUpdateOneWithoutRegistrations_registrations_usersTousersNestedInput
  }

  export type registrationsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthly_fee_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    locked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    completed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    users?: NullableStringFieldUpdateOperationsInput | string | null
    companies?: NullableStringFieldUpdateOperationsInput | string | null
    monthly_fee_monthly_fee_registrationsToregistrations?: monthly_feeUncheckedUpdateManyWithoutRegistrations_monthly_fee_registrationsToregistrationsNestedInput
    records_of_students_records_of_students_registrationsToregistrations?: records_of_studentsUncheckedUpdateManyWithoutRegistrations_records_of_students_registrationsToregistrationsNestedInput
  }

  export type registrationsCreateManyInput = {
    id: string
    start_date?: Date | string
    monthly_fee_amount?: Decimal | DecimalJsLike | number | string
    created_at?: Date | string | null
    locked?: boolean | null
    completed?: boolean | null
    users?: string | null
    companies?: string | null
  }

  export type registrationsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthly_fee_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    locked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    completed?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type registrationsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthly_fee_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    locked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    completed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    users?: NullableStringFieldUpdateOperationsInput | string | null
    companies?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type rolesCreateInput = {
    id: string
    name: string
    users_roles?: users_rolesCreateNestedManyWithoutRolesInput
  }

  export type rolesUncheckedCreateInput = {
    id: string
    name: string
    users_roles?: users_rolesUncheckedCreateNestedManyWithoutRolesInput
  }

  export type rolesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    users_roles?: users_rolesUpdateManyWithoutRolesNestedInput
  }

  export type rolesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    users_roles?: users_rolesUncheckedUpdateManyWithoutRolesNestedInput
  }

  export type rolesCreateManyInput = {
    id: string
    name: string
  }

  export type rolesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type rolesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type tasksCreateInput = {
    id: string
    created_at?: Date | string
    file?: Uint8Array | null
    score?: number | null
    description?: string | null
    title: string
    due_date?: Date | string | null
    discipline: disciplineCreateNestedOneWithoutTasksInput
  }

  export type tasksUncheckedCreateInput = {
    id: string
    created_at?: Date | string
    file?: Uint8Array | null
    score?: number | null
    description?: string | null
    title: string
    disciplines: string
    due_date?: Date | string | null
  }

  export type tasksUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    file?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    discipline?: disciplineUpdateOneRequiredWithoutTasksNestedInput
  }

  export type tasksUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    file?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    disciplines?: StringFieldUpdateOperationsInput | string
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tasksCreateManyInput = {
    id: string
    created_at?: Date | string
    file?: Uint8Array | null
    score?: number | null
    description?: string | null
    title: string
    disciplines: string
    due_date?: Date | string | null
  }

  export type tasksUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    file?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tasksUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    file?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    disciplines?: StringFieldUpdateOperationsInput | string
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tokensCreateInput = {
    id: string
    type: string
    expires_at: Date | string
    createdAt_?: Date | string
    users_tokens_usersTousers: usersCreateNestedOneWithoutTokens_tokens_usersTousersInput
  }

  export type tokensUncheckedCreateInput = {
    id: string
    type: string
    expires_at: Date | string
    createdAt_?: Date | string
    users: string
  }

  export type tokensUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt_?: DateTimeFieldUpdateOperationsInput | Date | string
    users_tokens_usersTousers?: usersUpdateOneRequiredWithoutTokens_tokens_usersTousersNestedInput
  }

  export type tokensUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt_?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: StringFieldUpdateOperationsInput | string
  }

  export type tokensCreateManyInput = {
    id: string
    type: string
    expires_at: Date | string
    createdAt_?: Date | string
    users: string
  }

  export type tokensUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt_?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type tokensUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt_?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: StringFieldUpdateOperationsInput | string
  }

  export type usersCreateInput = {
    id: string
    name: string
    email: string
    password: string
    avatar_url?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    cpf?: string | null
    phone?: string | null
    username: string
    gender?: string | null
    date_of_birth?: Date | string | null
    active?: boolean | null
    address?: string | null
    companies_companies_usersTousers?: companiesCreateNestedManyWithoutUsers_companies_usersTousersInput
    presence_list_presence_list_usersTousers?: presence_listCreateNestedManyWithoutUsers_presence_list_usersTousersInput
    registrations_registrations_usersTousers?: registrationsCreateNestedManyWithoutUsers_registrations_usersTousersInput
    tokens_tokens_usersTousers?: tokensCreateNestedManyWithoutUsers_tokens_usersTousersInput
    companies_users_companiesTocompanies: companiesCreateNestedOneWithoutUsers_users_companiesTocompaniesInput
    users_roles?: users_rolesCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateInput = {
    id: string
    name: string
    email: string
    password: string
    avatar_url?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    cpf?: string | null
    phone?: string | null
    username: string
    gender?: string | null
    date_of_birth?: Date | string | null
    active?: boolean | null
    address?: string | null
    companies: string
    companies_companies_usersTousers?: companiesUncheckedCreateNestedManyWithoutUsers_companies_usersTousersInput
    presence_list_presence_list_usersTousers?: presence_listUncheckedCreateNestedManyWithoutUsers_presence_list_usersTousersInput
    registrations_registrations_usersTousers?: registrationsUncheckedCreateNestedManyWithoutUsers_registrations_usersTousersInput
    tokens_tokens_usersTousers?: tokensUncheckedCreateNestedManyWithoutUsers_tokens_usersTousersInput
    users_roles?: users_rolesUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    companies_companies_usersTousers?: companiesUpdateManyWithoutUsers_companies_usersTousersNestedInput
    presence_list_presence_list_usersTousers?: presence_listUpdateManyWithoutUsers_presence_list_usersTousersNestedInput
    registrations_registrations_usersTousers?: registrationsUpdateManyWithoutUsers_registrations_usersTousersNestedInput
    tokens_tokens_usersTousers?: tokensUpdateManyWithoutUsers_tokens_usersTousersNestedInput
    companies_users_companiesTocompanies?: companiesUpdateOneRequiredWithoutUsers_users_companiesTocompaniesNestedInput
    users_roles?: users_rolesUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    companies?: StringFieldUpdateOperationsInput | string
    companies_companies_usersTousers?: companiesUncheckedUpdateManyWithoutUsers_companies_usersTousersNestedInput
    presence_list_presence_list_usersTousers?: presence_listUncheckedUpdateManyWithoutUsers_presence_list_usersTousersNestedInput
    registrations_registrations_usersTousers?: registrationsUncheckedUpdateManyWithoutUsers_registrations_usersTousersNestedInput
    tokens_tokens_usersTousers?: tokensUncheckedUpdateManyWithoutUsers_tokens_usersTousersNestedInput
    users_roles?: users_rolesUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type usersCreateManyInput = {
    id: string
    name: string
    email: string
    password: string
    avatar_url?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    cpf?: string | null
    phone?: string | null
    username: string
    gender?: string | null
    date_of_birth?: Date | string | null
    active?: boolean | null
    address?: string | null
    companies: string
  }

  export type usersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type usersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    companies?: StringFieldUpdateOperationsInput | string
  }

  export type users_rolesCreateInput = {
    id: string
    roles: rolesCreateNestedOneWithoutUsers_rolesInput
    users: usersCreateNestedOneWithoutUsers_rolesInput
  }

  export type users_rolesUncheckedCreateInput = {
    id: string
    users_id: string
    role_id: string
  }

  export type users_rolesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    roles?: rolesUpdateOneRequiredWithoutUsers_rolesNestedInput
    users?: usersUpdateOneRequiredWithoutUsers_rolesNestedInput
  }

  export type users_rolesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    users_id?: StringFieldUpdateOperationsInput | string
    role_id?: StringFieldUpdateOperationsInput | string
  }

  export type users_rolesCreateManyInput = {
    id: string
    users_id: string
    role_id: string
  }

  export type users_rolesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type users_rolesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    users_id?: StringFieldUpdateOperationsInput | string
    role_id?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type CoursesScalarRelationFilter = {
    is?: coursesWhereInput
    isNot?: coursesWhereInput
  }

  export type Class_daysListRelationFilter = {
    every?: class_daysWhereInput
    some?: class_daysWhereInput
    none?: class_daysWhereInput
  }

  export type ClassesListRelationFilter = {
    every?: classesWhereInput
    some?: classesWhereInput
    none?: classesWhereInput
  }

  export type class_daysOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type classesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RenamedclassCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    courses?: SortOrder
    vacancies?: SortOrder
  }

  export type RenamedclassAvgOrderByAggregateInput = {
    vacancies?: SortOrder
  }

  export type RenamedclassMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    courses?: SortOrder
    vacancies?: SortOrder
  }

  export type RenamedclassMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    courses?: SortOrder
    vacancies?: SortOrder
  }

  export type RenamedclassSumOrderByAggregateInput = {
    vacancies?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type RenamedclassScalarRelationFilter = {
    is?: RenamedclassWhereInput
    isNot?: RenamedclassWhereInput
  }

  export type class_daysCountOrderByAggregateInput = {
    id?: SortOrder
    initial_date?: SortOrder
    final_date?: SortOrder
    class?: SortOrder
  }

  export type class_daysMaxOrderByAggregateInput = {
    id?: SortOrder
    initial_date?: SortOrder
    final_date?: SortOrder
    class?: SortOrder
  }

  export type class_daysMinOrderByAggregateInput = {
    id?: SortOrder
    initial_date?: SortOrder
    final_date?: SortOrder
    class?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type Presence_listListRelationFilter = {
    every?: presence_listWhereInput
    some?: presence_listWhereInput
    none?: presence_listWhereInput
  }

  export type presence_listOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type classesCountOrderByAggregateInput = {
    id?: SortOrder
    theme?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    class?: SortOrder
  }

  export type classesMaxOrderByAggregateInput = {
    id?: SortOrder
    theme?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    class?: SortOrder
  }

  export type classesMinOrderByAggregateInput = {
    id?: SortOrder
    theme?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    class?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type CompaniesNullableScalarRelationFilter = {
    is?: companiesWhereInput | null
    isNot?: companiesWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type classroomsCountOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    created_at?: SortOrder
    block?: SortOrder
    companies?: SortOrder
  }

  export type classroomsAvgOrderByAggregateInput = {
    number?: SortOrder
  }

  export type classroomsMaxOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    created_at?: SortOrder
    block?: SortOrder
    companies?: SortOrder
  }

  export type classroomsMinOrderByAggregateInput = {
    id?: SortOrder
    number?: SortOrder
    created_at?: SortOrder
    block?: SortOrder
    companies?: SortOrder
  }

  export type classroomsSumOrderByAggregateInput = {
    number?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ClassroomsListRelationFilter = {
    every?: classroomsWhereInput
    some?: classroomsWhereInput
    none?: classroomsWhereInput
  }

  export type UsersScalarRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type ConfigsListRelationFilter = {
    every?: configsWhereInput
    some?: configsWhereInput
    none?: configsWhereInput
  }

  export type CoursesListRelationFilter = {
    every?: coursesWhereInput
    some?: coursesWhereInput
    none?: coursesWhereInput
  }

  export type RegistrationsListRelationFilter = {
    every?: registrationsWhereInput
    some?: registrationsWhereInput
    none?: registrationsWhereInput
  }

  export type UsersListRelationFilter = {
    every?: usersWhereInput
    some?: usersWhereInput
    none?: usersWhereInput
  }

  export type classroomsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type configsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type coursesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type registrationsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type companiesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    udpated_at?: SortOrder
    users?: SortOrder
    address?: SortOrder
  }

  export type companiesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    udpated_at?: SortOrder
    users?: SortOrder
    address?: SortOrder
  }

  export type companiesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    created_at?: SortOrder
    udpated_at?: SortOrder
    users?: SortOrder
    address?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type CompaniesScalarRelationFilter = {
    is?: companiesWhereInput
    isNot?: companiesWhereInput
  }

  export type configsCountOrderByAggregateInput = {
    id?: SortOrder
    registrations_time?: SortOrder
    companies?: SortOrder
  }

  export type configsAvgOrderByAggregateInput = {
    registrations_time?: SortOrder
  }

  export type configsMaxOrderByAggregateInput = {
    id?: SortOrder
    registrations_time?: SortOrder
    companies?: SortOrder
  }

  export type configsMinOrderByAggregateInput = {
    id?: SortOrder
    registrations_time?: SortOrder
    companies?: SortOrder
  }

  export type configsSumOrderByAggregateInput = {
    registrations_time?: SortOrder
  }

  export type BytesNullableFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel> | null
    in?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    notIn?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    not?: NestedBytesNullableFilter<$PrismaModel> | Uint8Array | null
  }

  export type RenamedclassListRelationFilter = {
    every?: RenamedclassWhereInput
    some?: RenamedclassWhereInput
    none?: RenamedclassWhereInput
  }

  export type LevelsListRelationFilter = {
    every?: levelsWhereInput
    some?: levelsWhereInput
    none?: levelsWhereInput
  }

  export type RenamedclassOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type levelsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type coursesCountOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    name?: SortOrder
    registration_value?: SortOrder
    companies?: SortOrder
    workload?: SortOrder
    monthly_fee_value?: SortOrder
    minimum_grade?: SortOrder
    maximum_grade?: SortOrder
    minimum_frequency?: SortOrder
    syllabus?: SortOrder
  }

  export type coursesAvgOrderByAggregateInput = {
    registration_value?: SortOrder
    workload?: SortOrder
    monthly_fee_value?: SortOrder
    minimum_grade?: SortOrder
    maximum_grade?: SortOrder
    minimum_frequency?: SortOrder
  }

  export type coursesMaxOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    name?: SortOrder
    registration_value?: SortOrder
    companies?: SortOrder
    workload?: SortOrder
    monthly_fee_value?: SortOrder
    minimum_grade?: SortOrder
    maximum_grade?: SortOrder
    minimum_frequency?: SortOrder
    syllabus?: SortOrder
  }

  export type coursesMinOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    name?: SortOrder
    registration_value?: SortOrder
    companies?: SortOrder
    workload?: SortOrder
    monthly_fee_value?: SortOrder
    minimum_grade?: SortOrder
    maximum_grade?: SortOrder
    minimum_frequency?: SortOrder
    syllabus?: SortOrder
  }

  export type coursesSumOrderByAggregateInput = {
    registration_value?: SortOrder
    workload?: SortOrder
    monthly_fee_value?: SortOrder
    minimum_grade?: SortOrder
    maximum_grade?: SortOrder
    minimum_frequency?: SortOrder
  }

  export type BytesNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel> | null
    in?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    notIn?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    not?: NestedBytesNullableWithAggregatesFilter<$PrismaModel> | Uint8Array | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBytesNullableFilter<$PrismaModel>
    _max?: NestedBytesNullableFilter<$PrismaModel>
  }

  export type LevelsScalarRelationFilter = {
    is?: levelsWhereInput
    isNot?: levelsWhereInput
  }

  export type TasksListRelationFilter = {
    every?: tasksWhereInput
    some?: tasksWhereInput
    none?: tasksWhereInput
  }

  export type tasksOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type disciplineCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    levels?: SortOrder
  }

  export type disciplineMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    levels?: SortOrder
  }

  export type disciplineMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    levels?: SortOrder
  }

  export type DisciplineListRelationFilter = {
    every?: disciplineWhereInput
    some?: disciplineWhereInput
    none?: disciplineWhereInput
  }

  export type CoursesNullableScalarRelationFilter = {
    is?: coursesWhereInput | null
    isNot?: coursesWhereInput | null
  }

  export type MaterialsListRelationFilter = {
    every?: materialsWhereInput
    some?: materialsWhereInput
    none?: materialsWhereInput
  }

  export type disciplineOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type materialsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type levelsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    level?: SortOrder
    courses?: SortOrder
  }

  export type levelsAvgOrderByAggregateInput = {
    level?: SortOrder
  }

  export type levelsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    level?: SortOrder
    courses?: SortOrder
  }

  export type levelsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    level?: SortOrder
    courses?: SortOrder
  }

  export type levelsSumOrderByAggregateInput = {
    level?: SortOrder
  }

  export type BytesFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel>
    in?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel>
    notIn?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel>
    not?: NestedBytesFilter<$PrismaModel> | Uint8Array
  }

  export type LevelsNullableScalarRelationFilter = {
    is?: levelsWhereInput | null
    isNot?: levelsWhereInput | null
  }

  export type materialsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    file?: SortOrder
    levels?: SortOrder
  }

  export type materialsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    file?: SortOrder
    levels?: SortOrder
  }

  export type materialsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    file?: SortOrder
    levels?: SortOrder
  }

  export type BytesWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel>
    in?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel>
    notIn?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel>
    not?: NestedBytesWithAggregatesFilter<$PrismaModel> | Uint8Array
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBytesFilter<$PrismaModel>
    _max?: NestedBytesFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type RegistrationsScalarRelationFilter = {
    is?: registrationsWhereInput
    isNot?: registrationsWhereInput
  }

  export type monthly_feeCountOrderByAggregateInput = {
    id?: SortOrder
    due_date?: SortOrder
    value?: SortOrder
    paid?: SortOrder
    discount_payment_before_due_date?: SortOrder
    registrations?: SortOrder
    payment_method?: SortOrder
    date_of_payment?: SortOrder
  }

  export type monthly_feeAvgOrderByAggregateInput = {
    value?: SortOrder
    discount_payment_before_due_date?: SortOrder
  }

  export type monthly_feeMaxOrderByAggregateInput = {
    id?: SortOrder
    due_date?: SortOrder
    value?: SortOrder
    paid?: SortOrder
    discount_payment_before_due_date?: SortOrder
    registrations?: SortOrder
    payment_method?: SortOrder
    date_of_payment?: SortOrder
  }

  export type monthly_feeMinOrderByAggregateInput = {
    id?: SortOrder
    due_date?: SortOrder
    value?: SortOrder
    paid?: SortOrder
    discount_payment_before_due_date?: SortOrder
    registrations?: SortOrder
    payment_method?: SortOrder
    date_of_payment?: SortOrder
  }

  export type monthly_feeSumOrderByAggregateInput = {
    value?: SortOrder
    discount_payment_before_due_date?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type ClassesScalarRelationFilter = {
    is?: classesWhereInput
    isNot?: classesWhereInput
  }

  export type presence_listCountOrderByAggregateInput = {
    id?: SortOrder
    is_present?: SortOrder
    users?: SortOrder
    classes?: SortOrder
  }

  export type presence_listMaxOrderByAggregateInput = {
    id?: SortOrder
    is_present?: SortOrder
    users?: SortOrder
    classes?: SortOrder
  }

  export type presence_listMinOrderByAggregateInput = {
    id?: SortOrder
    is_present?: SortOrder
    users?: SortOrder
    classes?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type records_of_studentsCountOrderByAggregateInput = {
    id?: SortOrder
    registrations?: SortOrder
    description?: SortOrder
    title?: SortOrder
    created_at?: SortOrder
  }

  export type records_of_studentsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type records_of_studentsMaxOrderByAggregateInput = {
    id?: SortOrder
    registrations?: SortOrder
    description?: SortOrder
    title?: SortOrder
    created_at?: SortOrder
  }

  export type records_of_studentsMinOrderByAggregateInput = {
    id?: SortOrder
    registrations?: SortOrder
    description?: SortOrder
    title?: SortOrder
    created_at?: SortOrder
  }

  export type records_of_studentsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type Monthly_feeListRelationFilter = {
    every?: monthly_feeWhereInput
    some?: monthly_feeWhereInput
    none?: monthly_feeWhereInput
  }

  export type Records_of_studentsListRelationFilter = {
    every?: records_of_studentsWhereInput
    some?: records_of_studentsWhereInput
    none?: records_of_studentsWhereInput
  }

  export type UsersNullableScalarRelationFilter = {
    is?: usersWhereInput | null
    isNot?: usersWhereInput | null
  }

  export type monthly_feeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type records_of_studentsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type registrationsCountOrderByAggregateInput = {
    id?: SortOrder
    start_date?: SortOrder
    monthly_fee_amount?: SortOrder
    created_at?: SortOrder
    locked?: SortOrder
    completed?: SortOrder
    users?: SortOrder
    companies?: SortOrder
  }

  export type registrationsAvgOrderByAggregateInput = {
    monthly_fee_amount?: SortOrder
  }

  export type registrationsMaxOrderByAggregateInput = {
    id?: SortOrder
    start_date?: SortOrder
    monthly_fee_amount?: SortOrder
    created_at?: SortOrder
    locked?: SortOrder
    completed?: SortOrder
    users?: SortOrder
    companies?: SortOrder
  }

  export type registrationsMinOrderByAggregateInput = {
    id?: SortOrder
    start_date?: SortOrder
    monthly_fee_amount?: SortOrder
    created_at?: SortOrder
    locked?: SortOrder
    completed?: SortOrder
    users?: SortOrder
    companies?: SortOrder
  }

  export type registrationsSumOrderByAggregateInput = {
    monthly_fee_amount?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type Users_rolesListRelationFilter = {
    every?: users_rolesWhereInput
    some?: users_rolesWhereInput
    none?: users_rolesWhereInput
  }

  export type users_rolesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type rolesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type rolesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type rolesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type DisciplineScalarRelationFilter = {
    is?: disciplineWhereInput
    isNot?: disciplineWhereInput
  }

  export type tasksCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    file?: SortOrder
    score?: SortOrder
    description?: SortOrder
    title?: SortOrder
    disciplines?: SortOrder
    due_date?: SortOrder
  }

  export type tasksAvgOrderByAggregateInput = {
    score?: SortOrder
  }

  export type tasksMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    file?: SortOrder
    score?: SortOrder
    description?: SortOrder
    title?: SortOrder
    disciplines?: SortOrder
    due_date?: SortOrder
  }

  export type tasksMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    file?: SortOrder
    score?: SortOrder
    description?: SortOrder
    title?: SortOrder
    disciplines?: SortOrder
    due_date?: SortOrder
  }

  export type tasksSumOrderByAggregateInput = {
    score?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type tokensCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    expires_at?: SortOrder
    createdAt_?: SortOrder
    users?: SortOrder
  }

  export type tokensMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    expires_at?: SortOrder
    createdAt_?: SortOrder
    users?: SortOrder
  }

  export type tokensMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    expires_at?: SortOrder
    createdAt_?: SortOrder
    users?: SortOrder
  }

  export type CompaniesListRelationFilter = {
    every?: companiesWhereInput
    some?: companiesWhereInput
    none?: companiesWhereInput
  }

  export type TokensListRelationFilter = {
    every?: tokensWhereInput
    some?: tokensWhereInput
    none?: tokensWhereInput
  }

  export type companiesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type tokensOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    avatar_url?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    cpf?: SortOrder
    phone?: SortOrder
    username?: SortOrder
    gender?: SortOrder
    date_of_birth?: SortOrder
    active?: SortOrder
    address?: SortOrder
    companies?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    avatar_url?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    cpf?: SortOrder
    phone?: SortOrder
    username?: SortOrder
    gender?: SortOrder
    date_of_birth?: SortOrder
    active?: SortOrder
    address?: SortOrder
    companies?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    avatar_url?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    cpf?: SortOrder
    phone?: SortOrder
    username?: SortOrder
    gender?: SortOrder
    date_of_birth?: SortOrder
    active?: SortOrder
    address?: SortOrder
    companies?: SortOrder
  }

  export type RolesScalarRelationFilter = {
    is?: rolesWhereInput
    isNot?: rolesWhereInput
  }

  export type users_rolesCountOrderByAggregateInput = {
    id?: SortOrder
    users_id?: SortOrder
    role_id?: SortOrder
  }

  export type users_rolesMaxOrderByAggregateInput = {
    id?: SortOrder
    users_id?: SortOrder
    role_id?: SortOrder
  }

  export type users_rolesMinOrderByAggregateInput = {
    id?: SortOrder
    users_id?: SortOrder
    role_id?: SortOrder
  }

  export type coursesCreateNestedOneWithoutRenamedclass_Renamedclass_coursesTocoursesInput = {
    create?: XOR<coursesCreateWithoutRenamedclass_Renamedclass_coursesTocoursesInput, coursesUncheckedCreateWithoutRenamedclass_Renamedclass_coursesTocoursesInput>
    connectOrCreate?: coursesCreateOrConnectWithoutRenamedclass_Renamedclass_coursesTocoursesInput
    connect?: coursesWhereUniqueInput
  }

  export type class_daysCreateNestedManyWithoutRenamedclassInput = {
    create?: XOR<class_daysCreateWithoutRenamedclassInput, class_daysUncheckedCreateWithoutRenamedclassInput> | class_daysCreateWithoutRenamedclassInput[] | class_daysUncheckedCreateWithoutRenamedclassInput[]
    connectOrCreate?: class_daysCreateOrConnectWithoutRenamedclassInput | class_daysCreateOrConnectWithoutRenamedclassInput[]
    createMany?: class_daysCreateManyRenamedclassInputEnvelope
    connect?: class_daysWhereUniqueInput | class_daysWhereUniqueInput[]
  }

  export type classesCreateNestedManyWithoutRenamedclassInput = {
    create?: XOR<classesCreateWithoutRenamedclassInput, classesUncheckedCreateWithoutRenamedclassInput> | classesCreateWithoutRenamedclassInput[] | classesUncheckedCreateWithoutRenamedclassInput[]
    connectOrCreate?: classesCreateOrConnectWithoutRenamedclassInput | classesCreateOrConnectWithoutRenamedclassInput[]
    createMany?: classesCreateManyRenamedclassInputEnvelope
    connect?: classesWhereUniqueInput | classesWhereUniqueInput[]
  }

  export type class_daysUncheckedCreateNestedManyWithoutRenamedclassInput = {
    create?: XOR<class_daysCreateWithoutRenamedclassInput, class_daysUncheckedCreateWithoutRenamedclassInput> | class_daysCreateWithoutRenamedclassInput[] | class_daysUncheckedCreateWithoutRenamedclassInput[]
    connectOrCreate?: class_daysCreateOrConnectWithoutRenamedclassInput | class_daysCreateOrConnectWithoutRenamedclassInput[]
    createMany?: class_daysCreateManyRenamedclassInputEnvelope
    connect?: class_daysWhereUniqueInput | class_daysWhereUniqueInput[]
  }

  export type classesUncheckedCreateNestedManyWithoutRenamedclassInput = {
    create?: XOR<classesCreateWithoutRenamedclassInput, classesUncheckedCreateWithoutRenamedclassInput> | classesCreateWithoutRenamedclassInput[] | classesUncheckedCreateWithoutRenamedclassInput[]
    connectOrCreate?: classesCreateOrConnectWithoutRenamedclassInput | classesCreateOrConnectWithoutRenamedclassInput[]
    createMany?: classesCreateManyRenamedclassInputEnvelope
    connect?: classesWhereUniqueInput | classesWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type coursesUpdateOneRequiredWithoutRenamedclass_Renamedclass_coursesTocoursesNestedInput = {
    create?: XOR<coursesCreateWithoutRenamedclass_Renamedclass_coursesTocoursesInput, coursesUncheckedCreateWithoutRenamedclass_Renamedclass_coursesTocoursesInput>
    connectOrCreate?: coursesCreateOrConnectWithoutRenamedclass_Renamedclass_coursesTocoursesInput
    upsert?: coursesUpsertWithoutRenamedclass_Renamedclass_coursesTocoursesInput
    connect?: coursesWhereUniqueInput
    update?: XOR<XOR<coursesUpdateToOneWithWhereWithoutRenamedclass_Renamedclass_coursesTocoursesInput, coursesUpdateWithoutRenamedclass_Renamedclass_coursesTocoursesInput>, coursesUncheckedUpdateWithoutRenamedclass_Renamedclass_coursesTocoursesInput>
  }

  export type class_daysUpdateManyWithoutRenamedclassNestedInput = {
    create?: XOR<class_daysCreateWithoutRenamedclassInput, class_daysUncheckedCreateWithoutRenamedclassInput> | class_daysCreateWithoutRenamedclassInput[] | class_daysUncheckedCreateWithoutRenamedclassInput[]
    connectOrCreate?: class_daysCreateOrConnectWithoutRenamedclassInput | class_daysCreateOrConnectWithoutRenamedclassInput[]
    upsert?: class_daysUpsertWithWhereUniqueWithoutRenamedclassInput | class_daysUpsertWithWhereUniqueWithoutRenamedclassInput[]
    createMany?: class_daysCreateManyRenamedclassInputEnvelope
    set?: class_daysWhereUniqueInput | class_daysWhereUniqueInput[]
    disconnect?: class_daysWhereUniqueInput | class_daysWhereUniqueInput[]
    delete?: class_daysWhereUniqueInput | class_daysWhereUniqueInput[]
    connect?: class_daysWhereUniqueInput | class_daysWhereUniqueInput[]
    update?: class_daysUpdateWithWhereUniqueWithoutRenamedclassInput | class_daysUpdateWithWhereUniqueWithoutRenamedclassInput[]
    updateMany?: class_daysUpdateManyWithWhereWithoutRenamedclassInput | class_daysUpdateManyWithWhereWithoutRenamedclassInput[]
    deleteMany?: class_daysScalarWhereInput | class_daysScalarWhereInput[]
  }

  export type classesUpdateManyWithoutRenamedclassNestedInput = {
    create?: XOR<classesCreateWithoutRenamedclassInput, classesUncheckedCreateWithoutRenamedclassInput> | classesCreateWithoutRenamedclassInput[] | classesUncheckedCreateWithoutRenamedclassInput[]
    connectOrCreate?: classesCreateOrConnectWithoutRenamedclassInput | classesCreateOrConnectWithoutRenamedclassInput[]
    upsert?: classesUpsertWithWhereUniqueWithoutRenamedclassInput | classesUpsertWithWhereUniqueWithoutRenamedclassInput[]
    createMany?: classesCreateManyRenamedclassInputEnvelope
    set?: classesWhereUniqueInput | classesWhereUniqueInput[]
    disconnect?: classesWhereUniqueInput | classesWhereUniqueInput[]
    delete?: classesWhereUniqueInput | classesWhereUniqueInput[]
    connect?: classesWhereUniqueInput | classesWhereUniqueInput[]
    update?: classesUpdateWithWhereUniqueWithoutRenamedclassInput | classesUpdateWithWhereUniqueWithoutRenamedclassInput[]
    updateMany?: classesUpdateManyWithWhereWithoutRenamedclassInput | classesUpdateManyWithWhereWithoutRenamedclassInput[]
    deleteMany?: classesScalarWhereInput | classesScalarWhereInput[]
  }

  export type class_daysUncheckedUpdateManyWithoutRenamedclassNestedInput = {
    create?: XOR<class_daysCreateWithoutRenamedclassInput, class_daysUncheckedCreateWithoutRenamedclassInput> | class_daysCreateWithoutRenamedclassInput[] | class_daysUncheckedCreateWithoutRenamedclassInput[]
    connectOrCreate?: class_daysCreateOrConnectWithoutRenamedclassInput | class_daysCreateOrConnectWithoutRenamedclassInput[]
    upsert?: class_daysUpsertWithWhereUniqueWithoutRenamedclassInput | class_daysUpsertWithWhereUniqueWithoutRenamedclassInput[]
    createMany?: class_daysCreateManyRenamedclassInputEnvelope
    set?: class_daysWhereUniqueInput | class_daysWhereUniqueInput[]
    disconnect?: class_daysWhereUniqueInput | class_daysWhereUniqueInput[]
    delete?: class_daysWhereUniqueInput | class_daysWhereUniqueInput[]
    connect?: class_daysWhereUniqueInput | class_daysWhereUniqueInput[]
    update?: class_daysUpdateWithWhereUniqueWithoutRenamedclassInput | class_daysUpdateWithWhereUniqueWithoutRenamedclassInput[]
    updateMany?: class_daysUpdateManyWithWhereWithoutRenamedclassInput | class_daysUpdateManyWithWhereWithoutRenamedclassInput[]
    deleteMany?: class_daysScalarWhereInput | class_daysScalarWhereInput[]
  }

  export type classesUncheckedUpdateManyWithoutRenamedclassNestedInput = {
    create?: XOR<classesCreateWithoutRenamedclassInput, classesUncheckedCreateWithoutRenamedclassInput> | classesCreateWithoutRenamedclassInput[] | classesUncheckedCreateWithoutRenamedclassInput[]
    connectOrCreate?: classesCreateOrConnectWithoutRenamedclassInput | classesCreateOrConnectWithoutRenamedclassInput[]
    upsert?: classesUpsertWithWhereUniqueWithoutRenamedclassInput | classesUpsertWithWhereUniqueWithoutRenamedclassInput[]
    createMany?: classesCreateManyRenamedclassInputEnvelope
    set?: classesWhereUniqueInput | classesWhereUniqueInput[]
    disconnect?: classesWhereUniqueInput | classesWhereUniqueInput[]
    delete?: classesWhereUniqueInput | classesWhereUniqueInput[]
    connect?: classesWhereUniqueInput | classesWhereUniqueInput[]
    update?: classesUpdateWithWhereUniqueWithoutRenamedclassInput | classesUpdateWithWhereUniqueWithoutRenamedclassInput[]
    updateMany?: classesUpdateManyWithWhereWithoutRenamedclassInput | classesUpdateManyWithWhereWithoutRenamedclassInput[]
    deleteMany?: classesScalarWhereInput | classesScalarWhereInput[]
  }

  export type RenamedclassCreateNestedOneWithoutClass_daysInput = {
    create?: XOR<RenamedclassCreateWithoutClass_daysInput, RenamedclassUncheckedCreateWithoutClass_daysInput>
    connectOrCreate?: RenamedclassCreateOrConnectWithoutClass_daysInput
    connect?: RenamedclassWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type RenamedclassUpdateOneRequiredWithoutClass_daysNestedInput = {
    create?: XOR<RenamedclassCreateWithoutClass_daysInput, RenamedclassUncheckedCreateWithoutClass_daysInput>
    connectOrCreate?: RenamedclassCreateOrConnectWithoutClass_daysInput
    upsert?: RenamedclassUpsertWithoutClass_daysInput
    connect?: RenamedclassWhereUniqueInput
    update?: XOR<XOR<RenamedclassUpdateToOneWithWhereWithoutClass_daysInput, RenamedclassUpdateWithoutClass_daysInput>, RenamedclassUncheckedUpdateWithoutClass_daysInput>
  }

  export type RenamedclassCreateNestedOneWithoutClassesInput = {
    create?: XOR<RenamedclassCreateWithoutClassesInput, RenamedclassUncheckedCreateWithoutClassesInput>
    connectOrCreate?: RenamedclassCreateOrConnectWithoutClassesInput
    connect?: RenamedclassWhereUniqueInput
  }

  export type presence_listCreateNestedManyWithoutClasses_presence_list_classesToclassesInput = {
    create?: XOR<presence_listCreateWithoutClasses_presence_list_classesToclassesInput, presence_listUncheckedCreateWithoutClasses_presence_list_classesToclassesInput> | presence_listCreateWithoutClasses_presence_list_classesToclassesInput[] | presence_listUncheckedCreateWithoutClasses_presence_list_classesToclassesInput[]
    connectOrCreate?: presence_listCreateOrConnectWithoutClasses_presence_list_classesToclassesInput | presence_listCreateOrConnectWithoutClasses_presence_list_classesToclassesInput[]
    createMany?: presence_listCreateManyClasses_presence_list_classesToclassesInputEnvelope
    connect?: presence_listWhereUniqueInput | presence_listWhereUniqueInput[]
  }

  export type presence_listUncheckedCreateNestedManyWithoutClasses_presence_list_classesToclassesInput = {
    create?: XOR<presence_listCreateWithoutClasses_presence_list_classesToclassesInput, presence_listUncheckedCreateWithoutClasses_presence_list_classesToclassesInput> | presence_listCreateWithoutClasses_presence_list_classesToclassesInput[] | presence_listUncheckedCreateWithoutClasses_presence_list_classesToclassesInput[]
    connectOrCreate?: presence_listCreateOrConnectWithoutClasses_presence_list_classesToclassesInput | presence_listCreateOrConnectWithoutClasses_presence_list_classesToclassesInput[]
    createMany?: presence_listCreateManyClasses_presence_list_classesToclassesInputEnvelope
    connect?: presence_listWhereUniqueInput | presence_listWhereUniqueInput[]
  }

  export type RenamedclassUpdateOneRequiredWithoutClassesNestedInput = {
    create?: XOR<RenamedclassCreateWithoutClassesInput, RenamedclassUncheckedCreateWithoutClassesInput>
    connectOrCreate?: RenamedclassCreateOrConnectWithoutClassesInput
    upsert?: RenamedclassUpsertWithoutClassesInput
    connect?: RenamedclassWhereUniqueInput
    update?: XOR<XOR<RenamedclassUpdateToOneWithWhereWithoutClassesInput, RenamedclassUpdateWithoutClassesInput>, RenamedclassUncheckedUpdateWithoutClassesInput>
  }

  export type presence_listUpdateManyWithoutClasses_presence_list_classesToclassesNestedInput = {
    create?: XOR<presence_listCreateWithoutClasses_presence_list_classesToclassesInput, presence_listUncheckedCreateWithoutClasses_presence_list_classesToclassesInput> | presence_listCreateWithoutClasses_presence_list_classesToclassesInput[] | presence_listUncheckedCreateWithoutClasses_presence_list_classesToclassesInput[]
    connectOrCreate?: presence_listCreateOrConnectWithoutClasses_presence_list_classesToclassesInput | presence_listCreateOrConnectWithoutClasses_presence_list_classesToclassesInput[]
    upsert?: presence_listUpsertWithWhereUniqueWithoutClasses_presence_list_classesToclassesInput | presence_listUpsertWithWhereUniqueWithoutClasses_presence_list_classesToclassesInput[]
    createMany?: presence_listCreateManyClasses_presence_list_classesToclassesInputEnvelope
    set?: presence_listWhereUniqueInput | presence_listWhereUniqueInput[]
    disconnect?: presence_listWhereUniqueInput | presence_listWhereUniqueInput[]
    delete?: presence_listWhereUniqueInput | presence_listWhereUniqueInput[]
    connect?: presence_listWhereUniqueInput | presence_listWhereUniqueInput[]
    update?: presence_listUpdateWithWhereUniqueWithoutClasses_presence_list_classesToclassesInput | presence_listUpdateWithWhereUniqueWithoutClasses_presence_list_classesToclassesInput[]
    updateMany?: presence_listUpdateManyWithWhereWithoutClasses_presence_list_classesToclassesInput | presence_listUpdateManyWithWhereWithoutClasses_presence_list_classesToclassesInput[]
    deleteMany?: presence_listScalarWhereInput | presence_listScalarWhereInput[]
  }

  export type presence_listUncheckedUpdateManyWithoutClasses_presence_list_classesToclassesNestedInput = {
    create?: XOR<presence_listCreateWithoutClasses_presence_list_classesToclassesInput, presence_listUncheckedCreateWithoutClasses_presence_list_classesToclassesInput> | presence_listCreateWithoutClasses_presence_list_classesToclassesInput[] | presence_listUncheckedCreateWithoutClasses_presence_list_classesToclassesInput[]
    connectOrCreate?: presence_listCreateOrConnectWithoutClasses_presence_list_classesToclassesInput | presence_listCreateOrConnectWithoutClasses_presence_list_classesToclassesInput[]
    upsert?: presence_listUpsertWithWhereUniqueWithoutClasses_presence_list_classesToclassesInput | presence_listUpsertWithWhereUniqueWithoutClasses_presence_list_classesToclassesInput[]
    createMany?: presence_listCreateManyClasses_presence_list_classesToclassesInputEnvelope
    set?: presence_listWhereUniqueInput | presence_listWhereUniqueInput[]
    disconnect?: presence_listWhereUniqueInput | presence_listWhereUniqueInput[]
    delete?: presence_listWhereUniqueInput | presence_listWhereUniqueInput[]
    connect?: presence_listWhereUniqueInput | presence_listWhereUniqueInput[]
    update?: presence_listUpdateWithWhereUniqueWithoutClasses_presence_list_classesToclassesInput | presence_listUpdateWithWhereUniqueWithoutClasses_presence_list_classesToclassesInput[]
    updateMany?: presence_listUpdateManyWithWhereWithoutClasses_presence_list_classesToclassesInput | presence_listUpdateManyWithWhereWithoutClasses_presence_list_classesToclassesInput[]
    deleteMany?: presence_listScalarWhereInput | presence_listScalarWhereInput[]
  }

  export type companiesCreateNestedOneWithoutClassrooms_classrooms_companiesTocompaniesInput = {
    create?: XOR<companiesCreateWithoutClassrooms_classrooms_companiesTocompaniesInput, companiesUncheckedCreateWithoutClassrooms_classrooms_companiesTocompaniesInput>
    connectOrCreate?: companiesCreateOrConnectWithoutClassrooms_classrooms_companiesTocompaniesInput
    connect?: companiesWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type companiesUpdateOneWithoutClassrooms_classrooms_companiesTocompaniesNestedInput = {
    create?: XOR<companiesCreateWithoutClassrooms_classrooms_companiesTocompaniesInput, companiesUncheckedCreateWithoutClassrooms_classrooms_companiesTocompaniesInput>
    connectOrCreate?: companiesCreateOrConnectWithoutClassrooms_classrooms_companiesTocompaniesInput
    upsert?: companiesUpsertWithoutClassrooms_classrooms_companiesTocompaniesInput
    disconnect?: companiesWhereInput | boolean
    delete?: companiesWhereInput | boolean
    connect?: companiesWhereUniqueInput
    update?: XOR<XOR<companiesUpdateToOneWithWhereWithoutClassrooms_classrooms_companiesTocompaniesInput, companiesUpdateWithoutClassrooms_classrooms_companiesTocompaniesInput>, companiesUncheckedUpdateWithoutClassrooms_classrooms_companiesTocompaniesInput>
  }

  export type classroomsCreateNestedManyWithoutCompanies_classrooms_companiesTocompaniesInput = {
    create?: XOR<classroomsCreateWithoutCompanies_classrooms_companiesTocompaniesInput, classroomsUncheckedCreateWithoutCompanies_classrooms_companiesTocompaniesInput> | classroomsCreateWithoutCompanies_classrooms_companiesTocompaniesInput[] | classroomsUncheckedCreateWithoutCompanies_classrooms_companiesTocompaniesInput[]
    connectOrCreate?: classroomsCreateOrConnectWithoutCompanies_classrooms_companiesTocompaniesInput | classroomsCreateOrConnectWithoutCompanies_classrooms_companiesTocompaniesInput[]
    createMany?: classroomsCreateManyCompanies_classrooms_companiesTocompaniesInputEnvelope
    connect?: classroomsWhereUniqueInput | classroomsWhereUniqueInput[]
  }

  export type usersCreateNestedOneWithoutCompanies_companies_usersTousersInput = {
    create?: XOR<usersCreateWithoutCompanies_companies_usersTousersInput, usersUncheckedCreateWithoutCompanies_companies_usersTousersInput>
    connectOrCreate?: usersCreateOrConnectWithoutCompanies_companies_usersTousersInput
    connect?: usersWhereUniqueInput
  }

  export type configsCreateNestedManyWithoutCompanies_configs_companiesTocompaniesInput = {
    create?: XOR<configsCreateWithoutCompanies_configs_companiesTocompaniesInput, configsUncheckedCreateWithoutCompanies_configs_companiesTocompaniesInput> | configsCreateWithoutCompanies_configs_companiesTocompaniesInput[] | configsUncheckedCreateWithoutCompanies_configs_companiesTocompaniesInput[]
    connectOrCreate?: configsCreateOrConnectWithoutCompanies_configs_companiesTocompaniesInput | configsCreateOrConnectWithoutCompanies_configs_companiesTocompaniesInput[]
    createMany?: configsCreateManyCompanies_configs_companiesTocompaniesInputEnvelope
    connect?: configsWhereUniqueInput | configsWhereUniqueInput[]
  }

  export type coursesCreateNestedManyWithoutCompanies_courses_companiesTocompaniesInput = {
    create?: XOR<coursesCreateWithoutCompanies_courses_companiesTocompaniesInput, coursesUncheckedCreateWithoutCompanies_courses_companiesTocompaniesInput> | coursesCreateWithoutCompanies_courses_companiesTocompaniesInput[] | coursesUncheckedCreateWithoutCompanies_courses_companiesTocompaniesInput[]
    connectOrCreate?: coursesCreateOrConnectWithoutCompanies_courses_companiesTocompaniesInput | coursesCreateOrConnectWithoutCompanies_courses_companiesTocompaniesInput[]
    createMany?: coursesCreateManyCompanies_courses_companiesTocompaniesInputEnvelope
    connect?: coursesWhereUniqueInput | coursesWhereUniqueInput[]
  }

  export type registrationsCreateNestedManyWithoutCompanies_registrations_companiesTocompaniesInput = {
    create?: XOR<registrationsCreateWithoutCompanies_registrations_companiesTocompaniesInput, registrationsUncheckedCreateWithoutCompanies_registrations_companiesTocompaniesInput> | registrationsCreateWithoutCompanies_registrations_companiesTocompaniesInput[] | registrationsUncheckedCreateWithoutCompanies_registrations_companiesTocompaniesInput[]
    connectOrCreate?: registrationsCreateOrConnectWithoutCompanies_registrations_companiesTocompaniesInput | registrationsCreateOrConnectWithoutCompanies_registrations_companiesTocompaniesInput[]
    createMany?: registrationsCreateManyCompanies_registrations_companiesTocompaniesInputEnvelope
    connect?: registrationsWhereUniqueInput | registrationsWhereUniqueInput[]
  }

  export type usersCreateNestedManyWithoutCompanies_users_companiesTocompaniesInput = {
    create?: XOR<usersCreateWithoutCompanies_users_companiesTocompaniesInput, usersUncheckedCreateWithoutCompanies_users_companiesTocompaniesInput> | usersCreateWithoutCompanies_users_companiesTocompaniesInput[] | usersUncheckedCreateWithoutCompanies_users_companiesTocompaniesInput[]
    connectOrCreate?: usersCreateOrConnectWithoutCompanies_users_companiesTocompaniesInput | usersCreateOrConnectWithoutCompanies_users_companiesTocompaniesInput[]
    createMany?: usersCreateManyCompanies_users_companiesTocompaniesInputEnvelope
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
  }

  export type classroomsUncheckedCreateNestedManyWithoutCompanies_classrooms_companiesTocompaniesInput = {
    create?: XOR<classroomsCreateWithoutCompanies_classrooms_companiesTocompaniesInput, classroomsUncheckedCreateWithoutCompanies_classrooms_companiesTocompaniesInput> | classroomsCreateWithoutCompanies_classrooms_companiesTocompaniesInput[] | classroomsUncheckedCreateWithoutCompanies_classrooms_companiesTocompaniesInput[]
    connectOrCreate?: classroomsCreateOrConnectWithoutCompanies_classrooms_companiesTocompaniesInput | classroomsCreateOrConnectWithoutCompanies_classrooms_companiesTocompaniesInput[]
    createMany?: classroomsCreateManyCompanies_classrooms_companiesTocompaniesInputEnvelope
    connect?: classroomsWhereUniqueInput | classroomsWhereUniqueInput[]
  }

  export type configsUncheckedCreateNestedManyWithoutCompanies_configs_companiesTocompaniesInput = {
    create?: XOR<configsCreateWithoutCompanies_configs_companiesTocompaniesInput, configsUncheckedCreateWithoutCompanies_configs_companiesTocompaniesInput> | configsCreateWithoutCompanies_configs_companiesTocompaniesInput[] | configsUncheckedCreateWithoutCompanies_configs_companiesTocompaniesInput[]
    connectOrCreate?: configsCreateOrConnectWithoutCompanies_configs_companiesTocompaniesInput | configsCreateOrConnectWithoutCompanies_configs_companiesTocompaniesInput[]
    createMany?: configsCreateManyCompanies_configs_companiesTocompaniesInputEnvelope
    connect?: configsWhereUniqueInput | configsWhereUniqueInput[]
  }

  export type coursesUncheckedCreateNestedManyWithoutCompanies_courses_companiesTocompaniesInput = {
    create?: XOR<coursesCreateWithoutCompanies_courses_companiesTocompaniesInput, coursesUncheckedCreateWithoutCompanies_courses_companiesTocompaniesInput> | coursesCreateWithoutCompanies_courses_companiesTocompaniesInput[] | coursesUncheckedCreateWithoutCompanies_courses_companiesTocompaniesInput[]
    connectOrCreate?: coursesCreateOrConnectWithoutCompanies_courses_companiesTocompaniesInput | coursesCreateOrConnectWithoutCompanies_courses_companiesTocompaniesInput[]
    createMany?: coursesCreateManyCompanies_courses_companiesTocompaniesInputEnvelope
    connect?: coursesWhereUniqueInput | coursesWhereUniqueInput[]
  }

  export type registrationsUncheckedCreateNestedManyWithoutCompanies_registrations_companiesTocompaniesInput = {
    create?: XOR<registrationsCreateWithoutCompanies_registrations_companiesTocompaniesInput, registrationsUncheckedCreateWithoutCompanies_registrations_companiesTocompaniesInput> | registrationsCreateWithoutCompanies_registrations_companiesTocompaniesInput[] | registrationsUncheckedCreateWithoutCompanies_registrations_companiesTocompaniesInput[]
    connectOrCreate?: registrationsCreateOrConnectWithoutCompanies_registrations_companiesTocompaniesInput | registrationsCreateOrConnectWithoutCompanies_registrations_companiesTocompaniesInput[]
    createMany?: registrationsCreateManyCompanies_registrations_companiesTocompaniesInputEnvelope
    connect?: registrationsWhereUniqueInput | registrationsWhereUniqueInput[]
  }

  export type usersUncheckedCreateNestedManyWithoutCompanies_users_companiesTocompaniesInput = {
    create?: XOR<usersCreateWithoutCompanies_users_companiesTocompaniesInput, usersUncheckedCreateWithoutCompanies_users_companiesTocompaniesInput> | usersCreateWithoutCompanies_users_companiesTocompaniesInput[] | usersUncheckedCreateWithoutCompanies_users_companiesTocompaniesInput[]
    connectOrCreate?: usersCreateOrConnectWithoutCompanies_users_companiesTocompaniesInput | usersCreateOrConnectWithoutCompanies_users_companiesTocompaniesInput[]
    createMany?: usersCreateManyCompanies_users_companiesTocompaniesInputEnvelope
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type classroomsUpdateManyWithoutCompanies_classrooms_companiesTocompaniesNestedInput = {
    create?: XOR<classroomsCreateWithoutCompanies_classrooms_companiesTocompaniesInput, classroomsUncheckedCreateWithoutCompanies_classrooms_companiesTocompaniesInput> | classroomsCreateWithoutCompanies_classrooms_companiesTocompaniesInput[] | classroomsUncheckedCreateWithoutCompanies_classrooms_companiesTocompaniesInput[]
    connectOrCreate?: classroomsCreateOrConnectWithoutCompanies_classrooms_companiesTocompaniesInput | classroomsCreateOrConnectWithoutCompanies_classrooms_companiesTocompaniesInput[]
    upsert?: classroomsUpsertWithWhereUniqueWithoutCompanies_classrooms_companiesTocompaniesInput | classroomsUpsertWithWhereUniqueWithoutCompanies_classrooms_companiesTocompaniesInput[]
    createMany?: classroomsCreateManyCompanies_classrooms_companiesTocompaniesInputEnvelope
    set?: classroomsWhereUniqueInput | classroomsWhereUniqueInput[]
    disconnect?: classroomsWhereUniqueInput | classroomsWhereUniqueInput[]
    delete?: classroomsWhereUniqueInput | classroomsWhereUniqueInput[]
    connect?: classroomsWhereUniqueInput | classroomsWhereUniqueInput[]
    update?: classroomsUpdateWithWhereUniqueWithoutCompanies_classrooms_companiesTocompaniesInput | classroomsUpdateWithWhereUniqueWithoutCompanies_classrooms_companiesTocompaniesInput[]
    updateMany?: classroomsUpdateManyWithWhereWithoutCompanies_classrooms_companiesTocompaniesInput | classroomsUpdateManyWithWhereWithoutCompanies_classrooms_companiesTocompaniesInput[]
    deleteMany?: classroomsScalarWhereInput | classroomsScalarWhereInput[]
  }

  export type usersUpdateOneRequiredWithoutCompanies_companies_usersTousersNestedInput = {
    create?: XOR<usersCreateWithoutCompanies_companies_usersTousersInput, usersUncheckedCreateWithoutCompanies_companies_usersTousersInput>
    connectOrCreate?: usersCreateOrConnectWithoutCompanies_companies_usersTousersInput
    upsert?: usersUpsertWithoutCompanies_companies_usersTousersInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutCompanies_companies_usersTousersInput, usersUpdateWithoutCompanies_companies_usersTousersInput>, usersUncheckedUpdateWithoutCompanies_companies_usersTousersInput>
  }

  export type configsUpdateManyWithoutCompanies_configs_companiesTocompaniesNestedInput = {
    create?: XOR<configsCreateWithoutCompanies_configs_companiesTocompaniesInput, configsUncheckedCreateWithoutCompanies_configs_companiesTocompaniesInput> | configsCreateWithoutCompanies_configs_companiesTocompaniesInput[] | configsUncheckedCreateWithoutCompanies_configs_companiesTocompaniesInput[]
    connectOrCreate?: configsCreateOrConnectWithoutCompanies_configs_companiesTocompaniesInput | configsCreateOrConnectWithoutCompanies_configs_companiesTocompaniesInput[]
    upsert?: configsUpsertWithWhereUniqueWithoutCompanies_configs_companiesTocompaniesInput | configsUpsertWithWhereUniqueWithoutCompanies_configs_companiesTocompaniesInput[]
    createMany?: configsCreateManyCompanies_configs_companiesTocompaniesInputEnvelope
    set?: configsWhereUniqueInput | configsWhereUniqueInput[]
    disconnect?: configsWhereUniqueInput | configsWhereUniqueInput[]
    delete?: configsWhereUniqueInput | configsWhereUniqueInput[]
    connect?: configsWhereUniqueInput | configsWhereUniqueInput[]
    update?: configsUpdateWithWhereUniqueWithoutCompanies_configs_companiesTocompaniesInput | configsUpdateWithWhereUniqueWithoutCompanies_configs_companiesTocompaniesInput[]
    updateMany?: configsUpdateManyWithWhereWithoutCompanies_configs_companiesTocompaniesInput | configsUpdateManyWithWhereWithoutCompanies_configs_companiesTocompaniesInput[]
    deleteMany?: configsScalarWhereInput | configsScalarWhereInput[]
  }

  export type coursesUpdateManyWithoutCompanies_courses_companiesTocompaniesNestedInput = {
    create?: XOR<coursesCreateWithoutCompanies_courses_companiesTocompaniesInput, coursesUncheckedCreateWithoutCompanies_courses_companiesTocompaniesInput> | coursesCreateWithoutCompanies_courses_companiesTocompaniesInput[] | coursesUncheckedCreateWithoutCompanies_courses_companiesTocompaniesInput[]
    connectOrCreate?: coursesCreateOrConnectWithoutCompanies_courses_companiesTocompaniesInput | coursesCreateOrConnectWithoutCompanies_courses_companiesTocompaniesInput[]
    upsert?: coursesUpsertWithWhereUniqueWithoutCompanies_courses_companiesTocompaniesInput | coursesUpsertWithWhereUniqueWithoutCompanies_courses_companiesTocompaniesInput[]
    createMany?: coursesCreateManyCompanies_courses_companiesTocompaniesInputEnvelope
    set?: coursesWhereUniqueInput | coursesWhereUniqueInput[]
    disconnect?: coursesWhereUniqueInput | coursesWhereUniqueInput[]
    delete?: coursesWhereUniqueInput | coursesWhereUniqueInput[]
    connect?: coursesWhereUniqueInput | coursesWhereUniqueInput[]
    update?: coursesUpdateWithWhereUniqueWithoutCompanies_courses_companiesTocompaniesInput | coursesUpdateWithWhereUniqueWithoutCompanies_courses_companiesTocompaniesInput[]
    updateMany?: coursesUpdateManyWithWhereWithoutCompanies_courses_companiesTocompaniesInput | coursesUpdateManyWithWhereWithoutCompanies_courses_companiesTocompaniesInput[]
    deleteMany?: coursesScalarWhereInput | coursesScalarWhereInput[]
  }

  export type registrationsUpdateManyWithoutCompanies_registrations_companiesTocompaniesNestedInput = {
    create?: XOR<registrationsCreateWithoutCompanies_registrations_companiesTocompaniesInput, registrationsUncheckedCreateWithoutCompanies_registrations_companiesTocompaniesInput> | registrationsCreateWithoutCompanies_registrations_companiesTocompaniesInput[] | registrationsUncheckedCreateWithoutCompanies_registrations_companiesTocompaniesInput[]
    connectOrCreate?: registrationsCreateOrConnectWithoutCompanies_registrations_companiesTocompaniesInput | registrationsCreateOrConnectWithoutCompanies_registrations_companiesTocompaniesInput[]
    upsert?: registrationsUpsertWithWhereUniqueWithoutCompanies_registrations_companiesTocompaniesInput | registrationsUpsertWithWhereUniqueWithoutCompanies_registrations_companiesTocompaniesInput[]
    createMany?: registrationsCreateManyCompanies_registrations_companiesTocompaniesInputEnvelope
    set?: registrationsWhereUniqueInput | registrationsWhereUniqueInput[]
    disconnect?: registrationsWhereUniqueInput | registrationsWhereUniqueInput[]
    delete?: registrationsWhereUniqueInput | registrationsWhereUniqueInput[]
    connect?: registrationsWhereUniqueInput | registrationsWhereUniqueInput[]
    update?: registrationsUpdateWithWhereUniqueWithoutCompanies_registrations_companiesTocompaniesInput | registrationsUpdateWithWhereUniqueWithoutCompanies_registrations_companiesTocompaniesInput[]
    updateMany?: registrationsUpdateManyWithWhereWithoutCompanies_registrations_companiesTocompaniesInput | registrationsUpdateManyWithWhereWithoutCompanies_registrations_companiesTocompaniesInput[]
    deleteMany?: registrationsScalarWhereInput | registrationsScalarWhereInput[]
  }

  export type usersUpdateManyWithoutCompanies_users_companiesTocompaniesNestedInput = {
    create?: XOR<usersCreateWithoutCompanies_users_companiesTocompaniesInput, usersUncheckedCreateWithoutCompanies_users_companiesTocompaniesInput> | usersCreateWithoutCompanies_users_companiesTocompaniesInput[] | usersUncheckedCreateWithoutCompanies_users_companiesTocompaniesInput[]
    connectOrCreate?: usersCreateOrConnectWithoutCompanies_users_companiesTocompaniesInput | usersCreateOrConnectWithoutCompanies_users_companiesTocompaniesInput[]
    upsert?: usersUpsertWithWhereUniqueWithoutCompanies_users_companiesTocompaniesInput | usersUpsertWithWhereUniqueWithoutCompanies_users_companiesTocompaniesInput[]
    createMany?: usersCreateManyCompanies_users_companiesTocompaniesInputEnvelope
    set?: usersWhereUniqueInput | usersWhereUniqueInput[]
    disconnect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    delete?: usersWhereUniqueInput | usersWhereUniqueInput[]
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    update?: usersUpdateWithWhereUniqueWithoutCompanies_users_companiesTocompaniesInput | usersUpdateWithWhereUniqueWithoutCompanies_users_companiesTocompaniesInput[]
    updateMany?: usersUpdateManyWithWhereWithoutCompanies_users_companiesTocompaniesInput | usersUpdateManyWithWhereWithoutCompanies_users_companiesTocompaniesInput[]
    deleteMany?: usersScalarWhereInput | usersScalarWhereInput[]
  }

  export type classroomsUncheckedUpdateManyWithoutCompanies_classrooms_companiesTocompaniesNestedInput = {
    create?: XOR<classroomsCreateWithoutCompanies_classrooms_companiesTocompaniesInput, classroomsUncheckedCreateWithoutCompanies_classrooms_companiesTocompaniesInput> | classroomsCreateWithoutCompanies_classrooms_companiesTocompaniesInput[] | classroomsUncheckedCreateWithoutCompanies_classrooms_companiesTocompaniesInput[]
    connectOrCreate?: classroomsCreateOrConnectWithoutCompanies_classrooms_companiesTocompaniesInput | classroomsCreateOrConnectWithoutCompanies_classrooms_companiesTocompaniesInput[]
    upsert?: classroomsUpsertWithWhereUniqueWithoutCompanies_classrooms_companiesTocompaniesInput | classroomsUpsertWithWhereUniqueWithoutCompanies_classrooms_companiesTocompaniesInput[]
    createMany?: classroomsCreateManyCompanies_classrooms_companiesTocompaniesInputEnvelope
    set?: classroomsWhereUniqueInput | classroomsWhereUniqueInput[]
    disconnect?: classroomsWhereUniqueInput | classroomsWhereUniqueInput[]
    delete?: classroomsWhereUniqueInput | classroomsWhereUniqueInput[]
    connect?: classroomsWhereUniqueInput | classroomsWhereUniqueInput[]
    update?: classroomsUpdateWithWhereUniqueWithoutCompanies_classrooms_companiesTocompaniesInput | classroomsUpdateWithWhereUniqueWithoutCompanies_classrooms_companiesTocompaniesInput[]
    updateMany?: classroomsUpdateManyWithWhereWithoutCompanies_classrooms_companiesTocompaniesInput | classroomsUpdateManyWithWhereWithoutCompanies_classrooms_companiesTocompaniesInput[]
    deleteMany?: classroomsScalarWhereInput | classroomsScalarWhereInput[]
  }

  export type configsUncheckedUpdateManyWithoutCompanies_configs_companiesTocompaniesNestedInput = {
    create?: XOR<configsCreateWithoutCompanies_configs_companiesTocompaniesInput, configsUncheckedCreateWithoutCompanies_configs_companiesTocompaniesInput> | configsCreateWithoutCompanies_configs_companiesTocompaniesInput[] | configsUncheckedCreateWithoutCompanies_configs_companiesTocompaniesInput[]
    connectOrCreate?: configsCreateOrConnectWithoutCompanies_configs_companiesTocompaniesInput | configsCreateOrConnectWithoutCompanies_configs_companiesTocompaniesInput[]
    upsert?: configsUpsertWithWhereUniqueWithoutCompanies_configs_companiesTocompaniesInput | configsUpsertWithWhereUniqueWithoutCompanies_configs_companiesTocompaniesInput[]
    createMany?: configsCreateManyCompanies_configs_companiesTocompaniesInputEnvelope
    set?: configsWhereUniqueInput | configsWhereUniqueInput[]
    disconnect?: configsWhereUniqueInput | configsWhereUniqueInput[]
    delete?: configsWhereUniqueInput | configsWhereUniqueInput[]
    connect?: configsWhereUniqueInput | configsWhereUniqueInput[]
    update?: configsUpdateWithWhereUniqueWithoutCompanies_configs_companiesTocompaniesInput | configsUpdateWithWhereUniqueWithoutCompanies_configs_companiesTocompaniesInput[]
    updateMany?: configsUpdateManyWithWhereWithoutCompanies_configs_companiesTocompaniesInput | configsUpdateManyWithWhereWithoutCompanies_configs_companiesTocompaniesInput[]
    deleteMany?: configsScalarWhereInput | configsScalarWhereInput[]
  }

  export type coursesUncheckedUpdateManyWithoutCompanies_courses_companiesTocompaniesNestedInput = {
    create?: XOR<coursesCreateWithoutCompanies_courses_companiesTocompaniesInput, coursesUncheckedCreateWithoutCompanies_courses_companiesTocompaniesInput> | coursesCreateWithoutCompanies_courses_companiesTocompaniesInput[] | coursesUncheckedCreateWithoutCompanies_courses_companiesTocompaniesInput[]
    connectOrCreate?: coursesCreateOrConnectWithoutCompanies_courses_companiesTocompaniesInput | coursesCreateOrConnectWithoutCompanies_courses_companiesTocompaniesInput[]
    upsert?: coursesUpsertWithWhereUniqueWithoutCompanies_courses_companiesTocompaniesInput | coursesUpsertWithWhereUniqueWithoutCompanies_courses_companiesTocompaniesInput[]
    createMany?: coursesCreateManyCompanies_courses_companiesTocompaniesInputEnvelope
    set?: coursesWhereUniqueInput | coursesWhereUniqueInput[]
    disconnect?: coursesWhereUniqueInput | coursesWhereUniqueInput[]
    delete?: coursesWhereUniqueInput | coursesWhereUniqueInput[]
    connect?: coursesWhereUniqueInput | coursesWhereUniqueInput[]
    update?: coursesUpdateWithWhereUniqueWithoutCompanies_courses_companiesTocompaniesInput | coursesUpdateWithWhereUniqueWithoutCompanies_courses_companiesTocompaniesInput[]
    updateMany?: coursesUpdateManyWithWhereWithoutCompanies_courses_companiesTocompaniesInput | coursesUpdateManyWithWhereWithoutCompanies_courses_companiesTocompaniesInput[]
    deleteMany?: coursesScalarWhereInput | coursesScalarWhereInput[]
  }

  export type registrationsUncheckedUpdateManyWithoutCompanies_registrations_companiesTocompaniesNestedInput = {
    create?: XOR<registrationsCreateWithoutCompanies_registrations_companiesTocompaniesInput, registrationsUncheckedCreateWithoutCompanies_registrations_companiesTocompaniesInput> | registrationsCreateWithoutCompanies_registrations_companiesTocompaniesInput[] | registrationsUncheckedCreateWithoutCompanies_registrations_companiesTocompaniesInput[]
    connectOrCreate?: registrationsCreateOrConnectWithoutCompanies_registrations_companiesTocompaniesInput | registrationsCreateOrConnectWithoutCompanies_registrations_companiesTocompaniesInput[]
    upsert?: registrationsUpsertWithWhereUniqueWithoutCompanies_registrations_companiesTocompaniesInput | registrationsUpsertWithWhereUniqueWithoutCompanies_registrations_companiesTocompaniesInput[]
    createMany?: registrationsCreateManyCompanies_registrations_companiesTocompaniesInputEnvelope
    set?: registrationsWhereUniqueInput | registrationsWhereUniqueInput[]
    disconnect?: registrationsWhereUniqueInput | registrationsWhereUniqueInput[]
    delete?: registrationsWhereUniqueInput | registrationsWhereUniqueInput[]
    connect?: registrationsWhereUniqueInput | registrationsWhereUniqueInput[]
    update?: registrationsUpdateWithWhereUniqueWithoutCompanies_registrations_companiesTocompaniesInput | registrationsUpdateWithWhereUniqueWithoutCompanies_registrations_companiesTocompaniesInput[]
    updateMany?: registrationsUpdateManyWithWhereWithoutCompanies_registrations_companiesTocompaniesInput | registrationsUpdateManyWithWhereWithoutCompanies_registrations_companiesTocompaniesInput[]
    deleteMany?: registrationsScalarWhereInput | registrationsScalarWhereInput[]
  }

  export type usersUncheckedUpdateManyWithoutCompanies_users_companiesTocompaniesNestedInput = {
    create?: XOR<usersCreateWithoutCompanies_users_companiesTocompaniesInput, usersUncheckedCreateWithoutCompanies_users_companiesTocompaniesInput> | usersCreateWithoutCompanies_users_companiesTocompaniesInput[] | usersUncheckedCreateWithoutCompanies_users_companiesTocompaniesInput[]
    connectOrCreate?: usersCreateOrConnectWithoutCompanies_users_companiesTocompaniesInput | usersCreateOrConnectWithoutCompanies_users_companiesTocompaniesInput[]
    upsert?: usersUpsertWithWhereUniqueWithoutCompanies_users_companiesTocompaniesInput | usersUpsertWithWhereUniqueWithoutCompanies_users_companiesTocompaniesInput[]
    createMany?: usersCreateManyCompanies_users_companiesTocompaniesInputEnvelope
    set?: usersWhereUniqueInput | usersWhereUniqueInput[]
    disconnect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    delete?: usersWhereUniqueInput | usersWhereUniqueInput[]
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    update?: usersUpdateWithWhereUniqueWithoutCompanies_users_companiesTocompaniesInput | usersUpdateWithWhereUniqueWithoutCompanies_users_companiesTocompaniesInput[]
    updateMany?: usersUpdateManyWithWhereWithoutCompanies_users_companiesTocompaniesInput | usersUpdateManyWithWhereWithoutCompanies_users_companiesTocompaniesInput[]
    deleteMany?: usersScalarWhereInput | usersScalarWhereInput[]
  }

  export type companiesCreateNestedOneWithoutConfigs_configs_companiesTocompaniesInput = {
    create?: XOR<companiesCreateWithoutConfigs_configs_companiesTocompaniesInput, companiesUncheckedCreateWithoutConfigs_configs_companiesTocompaniesInput>
    connectOrCreate?: companiesCreateOrConnectWithoutConfigs_configs_companiesTocompaniesInput
    connect?: companiesWhereUniqueInput
  }

  export type companiesUpdateOneRequiredWithoutConfigs_configs_companiesTocompaniesNestedInput = {
    create?: XOR<companiesCreateWithoutConfigs_configs_companiesTocompaniesInput, companiesUncheckedCreateWithoutConfigs_configs_companiesTocompaniesInput>
    connectOrCreate?: companiesCreateOrConnectWithoutConfigs_configs_companiesTocompaniesInput
    upsert?: companiesUpsertWithoutConfigs_configs_companiesTocompaniesInput
    connect?: companiesWhereUniqueInput
    update?: XOR<XOR<companiesUpdateToOneWithWhereWithoutConfigs_configs_companiesTocompaniesInput, companiesUpdateWithoutConfigs_configs_companiesTocompaniesInput>, companiesUncheckedUpdateWithoutConfigs_configs_companiesTocompaniesInput>
  }

  export type RenamedclassCreateNestedManyWithoutCourses_Renamedclass_coursesTocoursesInput = {
    create?: XOR<RenamedclassCreateWithoutCourses_Renamedclass_coursesTocoursesInput, RenamedclassUncheckedCreateWithoutCourses_Renamedclass_coursesTocoursesInput> | RenamedclassCreateWithoutCourses_Renamedclass_coursesTocoursesInput[] | RenamedclassUncheckedCreateWithoutCourses_Renamedclass_coursesTocoursesInput[]
    connectOrCreate?: RenamedclassCreateOrConnectWithoutCourses_Renamedclass_coursesTocoursesInput | RenamedclassCreateOrConnectWithoutCourses_Renamedclass_coursesTocoursesInput[]
    createMany?: RenamedclassCreateManyCourses_Renamedclass_coursesTocoursesInputEnvelope
    connect?: RenamedclassWhereUniqueInput | RenamedclassWhereUniqueInput[]
  }

  export type companiesCreateNestedOneWithoutCourses_courses_companiesTocompaniesInput = {
    create?: XOR<companiesCreateWithoutCourses_courses_companiesTocompaniesInput, companiesUncheckedCreateWithoutCourses_courses_companiesTocompaniesInput>
    connectOrCreate?: companiesCreateOrConnectWithoutCourses_courses_companiesTocompaniesInput
    connect?: companiesWhereUniqueInput
  }

  export type levelsCreateNestedManyWithoutCourses_levels_coursesTocoursesInput = {
    create?: XOR<levelsCreateWithoutCourses_levels_coursesTocoursesInput, levelsUncheckedCreateWithoutCourses_levels_coursesTocoursesInput> | levelsCreateWithoutCourses_levels_coursesTocoursesInput[] | levelsUncheckedCreateWithoutCourses_levels_coursesTocoursesInput[]
    connectOrCreate?: levelsCreateOrConnectWithoutCourses_levels_coursesTocoursesInput | levelsCreateOrConnectWithoutCourses_levels_coursesTocoursesInput[]
    createMany?: levelsCreateManyCourses_levels_coursesTocoursesInputEnvelope
    connect?: levelsWhereUniqueInput | levelsWhereUniqueInput[]
  }

  export type RenamedclassUncheckedCreateNestedManyWithoutCourses_Renamedclass_coursesTocoursesInput = {
    create?: XOR<RenamedclassCreateWithoutCourses_Renamedclass_coursesTocoursesInput, RenamedclassUncheckedCreateWithoutCourses_Renamedclass_coursesTocoursesInput> | RenamedclassCreateWithoutCourses_Renamedclass_coursesTocoursesInput[] | RenamedclassUncheckedCreateWithoutCourses_Renamedclass_coursesTocoursesInput[]
    connectOrCreate?: RenamedclassCreateOrConnectWithoutCourses_Renamedclass_coursesTocoursesInput | RenamedclassCreateOrConnectWithoutCourses_Renamedclass_coursesTocoursesInput[]
    createMany?: RenamedclassCreateManyCourses_Renamedclass_coursesTocoursesInputEnvelope
    connect?: RenamedclassWhereUniqueInput | RenamedclassWhereUniqueInput[]
  }

  export type levelsUncheckedCreateNestedManyWithoutCourses_levels_coursesTocoursesInput = {
    create?: XOR<levelsCreateWithoutCourses_levels_coursesTocoursesInput, levelsUncheckedCreateWithoutCourses_levels_coursesTocoursesInput> | levelsCreateWithoutCourses_levels_coursesTocoursesInput[] | levelsUncheckedCreateWithoutCourses_levels_coursesTocoursesInput[]
    connectOrCreate?: levelsCreateOrConnectWithoutCourses_levels_coursesTocoursesInput | levelsCreateOrConnectWithoutCourses_levels_coursesTocoursesInput[]
    createMany?: levelsCreateManyCourses_levels_coursesTocoursesInputEnvelope
    connect?: levelsWhereUniqueInput | levelsWhereUniqueInput[]
  }

  export type NullableBytesFieldUpdateOperationsInput = {
    set?: Uint8Array | null
  }

  export type RenamedclassUpdateManyWithoutCourses_Renamedclass_coursesTocoursesNestedInput = {
    create?: XOR<RenamedclassCreateWithoutCourses_Renamedclass_coursesTocoursesInput, RenamedclassUncheckedCreateWithoutCourses_Renamedclass_coursesTocoursesInput> | RenamedclassCreateWithoutCourses_Renamedclass_coursesTocoursesInput[] | RenamedclassUncheckedCreateWithoutCourses_Renamedclass_coursesTocoursesInput[]
    connectOrCreate?: RenamedclassCreateOrConnectWithoutCourses_Renamedclass_coursesTocoursesInput | RenamedclassCreateOrConnectWithoutCourses_Renamedclass_coursesTocoursesInput[]
    upsert?: RenamedclassUpsertWithWhereUniqueWithoutCourses_Renamedclass_coursesTocoursesInput | RenamedclassUpsertWithWhereUniqueWithoutCourses_Renamedclass_coursesTocoursesInput[]
    createMany?: RenamedclassCreateManyCourses_Renamedclass_coursesTocoursesInputEnvelope
    set?: RenamedclassWhereUniqueInput | RenamedclassWhereUniqueInput[]
    disconnect?: RenamedclassWhereUniqueInput | RenamedclassWhereUniqueInput[]
    delete?: RenamedclassWhereUniqueInput | RenamedclassWhereUniqueInput[]
    connect?: RenamedclassWhereUniqueInput | RenamedclassWhereUniqueInput[]
    update?: RenamedclassUpdateWithWhereUniqueWithoutCourses_Renamedclass_coursesTocoursesInput | RenamedclassUpdateWithWhereUniqueWithoutCourses_Renamedclass_coursesTocoursesInput[]
    updateMany?: RenamedclassUpdateManyWithWhereWithoutCourses_Renamedclass_coursesTocoursesInput | RenamedclassUpdateManyWithWhereWithoutCourses_Renamedclass_coursesTocoursesInput[]
    deleteMany?: RenamedclassScalarWhereInput | RenamedclassScalarWhereInput[]
  }

  export type companiesUpdateOneRequiredWithoutCourses_courses_companiesTocompaniesNestedInput = {
    create?: XOR<companiesCreateWithoutCourses_courses_companiesTocompaniesInput, companiesUncheckedCreateWithoutCourses_courses_companiesTocompaniesInput>
    connectOrCreate?: companiesCreateOrConnectWithoutCourses_courses_companiesTocompaniesInput
    upsert?: companiesUpsertWithoutCourses_courses_companiesTocompaniesInput
    connect?: companiesWhereUniqueInput
    update?: XOR<XOR<companiesUpdateToOneWithWhereWithoutCourses_courses_companiesTocompaniesInput, companiesUpdateWithoutCourses_courses_companiesTocompaniesInput>, companiesUncheckedUpdateWithoutCourses_courses_companiesTocompaniesInput>
  }

  export type levelsUpdateManyWithoutCourses_levels_coursesTocoursesNestedInput = {
    create?: XOR<levelsCreateWithoutCourses_levels_coursesTocoursesInput, levelsUncheckedCreateWithoutCourses_levels_coursesTocoursesInput> | levelsCreateWithoutCourses_levels_coursesTocoursesInput[] | levelsUncheckedCreateWithoutCourses_levels_coursesTocoursesInput[]
    connectOrCreate?: levelsCreateOrConnectWithoutCourses_levels_coursesTocoursesInput | levelsCreateOrConnectWithoutCourses_levels_coursesTocoursesInput[]
    upsert?: levelsUpsertWithWhereUniqueWithoutCourses_levels_coursesTocoursesInput | levelsUpsertWithWhereUniqueWithoutCourses_levels_coursesTocoursesInput[]
    createMany?: levelsCreateManyCourses_levels_coursesTocoursesInputEnvelope
    set?: levelsWhereUniqueInput | levelsWhereUniqueInput[]
    disconnect?: levelsWhereUniqueInput | levelsWhereUniqueInput[]
    delete?: levelsWhereUniqueInput | levelsWhereUniqueInput[]
    connect?: levelsWhereUniqueInput | levelsWhereUniqueInput[]
    update?: levelsUpdateWithWhereUniqueWithoutCourses_levels_coursesTocoursesInput | levelsUpdateWithWhereUniqueWithoutCourses_levels_coursesTocoursesInput[]
    updateMany?: levelsUpdateManyWithWhereWithoutCourses_levels_coursesTocoursesInput | levelsUpdateManyWithWhereWithoutCourses_levels_coursesTocoursesInput[]
    deleteMany?: levelsScalarWhereInput | levelsScalarWhereInput[]
  }

  export type RenamedclassUncheckedUpdateManyWithoutCourses_Renamedclass_coursesTocoursesNestedInput = {
    create?: XOR<RenamedclassCreateWithoutCourses_Renamedclass_coursesTocoursesInput, RenamedclassUncheckedCreateWithoutCourses_Renamedclass_coursesTocoursesInput> | RenamedclassCreateWithoutCourses_Renamedclass_coursesTocoursesInput[] | RenamedclassUncheckedCreateWithoutCourses_Renamedclass_coursesTocoursesInput[]
    connectOrCreate?: RenamedclassCreateOrConnectWithoutCourses_Renamedclass_coursesTocoursesInput | RenamedclassCreateOrConnectWithoutCourses_Renamedclass_coursesTocoursesInput[]
    upsert?: RenamedclassUpsertWithWhereUniqueWithoutCourses_Renamedclass_coursesTocoursesInput | RenamedclassUpsertWithWhereUniqueWithoutCourses_Renamedclass_coursesTocoursesInput[]
    createMany?: RenamedclassCreateManyCourses_Renamedclass_coursesTocoursesInputEnvelope
    set?: RenamedclassWhereUniqueInput | RenamedclassWhereUniqueInput[]
    disconnect?: RenamedclassWhereUniqueInput | RenamedclassWhereUniqueInput[]
    delete?: RenamedclassWhereUniqueInput | RenamedclassWhereUniqueInput[]
    connect?: RenamedclassWhereUniqueInput | RenamedclassWhereUniqueInput[]
    update?: RenamedclassUpdateWithWhereUniqueWithoutCourses_Renamedclass_coursesTocoursesInput | RenamedclassUpdateWithWhereUniqueWithoutCourses_Renamedclass_coursesTocoursesInput[]
    updateMany?: RenamedclassUpdateManyWithWhereWithoutCourses_Renamedclass_coursesTocoursesInput | RenamedclassUpdateManyWithWhereWithoutCourses_Renamedclass_coursesTocoursesInput[]
    deleteMany?: RenamedclassScalarWhereInput | RenamedclassScalarWhereInput[]
  }

  export type levelsUncheckedUpdateManyWithoutCourses_levels_coursesTocoursesNestedInput = {
    create?: XOR<levelsCreateWithoutCourses_levels_coursesTocoursesInput, levelsUncheckedCreateWithoutCourses_levels_coursesTocoursesInput> | levelsCreateWithoutCourses_levels_coursesTocoursesInput[] | levelsUncheckedCreateWithoutCourses_levels_coursesTocoursesInput[]
    connectOrCreate?: levelsCreateOrConnectWithoutCourses_levels_coursesTocoursesInput | levelsCreateOrConnectWithoutCourses_levels_coursesTocoursesInput[]
    upsert?: levelsUpsertWithWhereUniqueWithoutCourses_levels_coursesTocoursesInput | levelsUpsertWithWhereUniqueWithoutCourses_levels_coursesTocoursesInput[]
    createMany?: levelsCreateManyCourses_levels_coursesTocoursesInputEnvelope
    set?: levelsWhereUniqueInput | levelsWhereUniqueInput[]
    disconnect?: levelsWhereUniqueInput | levelsWhereUniqueInput[]
    delete?: levelsWhereUniqueInput | levelsWhereUniqueInput[]
    connect?: levelsWhereUniqueInput | levelsWhereUniqueInput[]
    update?: levelsUpdateWithWhereUniqueWithoutCourses_levels_coursesTocoursesInput | levelsUpdateWithWhereUniqueWithoutCourses_levels_coursesTocoursesInput[]
    updateMany?: levelsUpdateManyWithWhereWithoutCourses_levels_coursesTocoursesInput | levelsUpdateManyWithWhereWithoutCourses_levels_coursesTocoursesInput[]
    deleteMany?: levelsScalarWhereInput | levelsScalarWhereInput[]
  }

  export type levelsCreateNestedOneWithoutDiscipline_discipline_levelsTolevelsInput = {
    create?: XOR<levelsCreateWithoutDiscipline_discipline_levelsTolevelsInput, levelsUncheckedCreateWithoutDiscipline_discipline_levelsTolevelsInput>
    connectOrCreate?: levelsCreateOrConnectWithoutDiscipline_discipline_levelsTolevelsInput
    connect?: levelsWhereUniqueInput
  }

  export type tasksCreateNestedManyWithoutDisciplineInput = {
    create?: XOR<tasksCreateWithoutDisciplineInput, tasksUncheckedCreateWithoutDisciplineInput> | tasksCreateWithoutDisciplineInput[] | tasksUncheckedCreateWithoutDisciplineInput[]
    connectOrCreate?: tasksCreateOrConnectWithoutDisciplineInput | tasksCreateOrConnectWithoutDisciplineInput[]
    createMany?: tasksCreateManyDisciplineInputEnvelope
    connect?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
  }

  export type tasksUncheckedCreateNestedManyWithoutDisciplineInput = {
    create?: XOR<tasksCreateWithoutDisciplineInput, tasksUncheckedCreateWithoutDisciplineInput> | tasksCreateWithoutDisciplineInput[] | tasksUncheckedCreateWithoutDisciplineInput[]
    connectOrCreate?: tasksCreateOrConnectWithoutDisciplineInput | tasksCreateOrConnectWithoutDisciplineInput[]
    createMany?: tasksCreateManyDisciplineInputEnvelope
    connect?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
  }

  export type levelsUpdateOneRequiredWithoutDiscipline_discipline_levelsTolevelsNestedInput = {
    create?: XOR<levelsCreateWithoutDiscipline_discipline_levelsTolevelsInput, levelsUncheckedCreateWithoutDiscipline_discipline_levelsTolevelsInput>
    connectOrCreate?: levelsCreateOrConnectWithoutDiscipline_discipline_levelsTolevelsInput
    upsert?: levelsUpsertWithoutDiscipline_discipline_levelsTolevelsInput
    connect?: levelsWhereUniqueInput
    update?: XOR<XOR<levelsUpdateToOneWithWhereWithoutDiscipline_discipline_levelsTolevelsInput, levelsUpdateWithoutDiscipline_discipline_levelsTolevelsInput>, levelsUncheckedUpdateWithoutDiscipline_discipline_levelsTolevelsInput>
  }

  export type tasksUpdateManyWithoutDisciplineNestedInput = {
    create?: XOR<tasksCreateWithoutDisciplineInput, tasksUncheckedCreateWithoutDisciplineInput> | tasksCreateWithoutDisciplineInput[] | tasksUncheckedCreateWithoutDisciplineInput[]
    connectOrCreate?: tasksCreateOrConnectWithoutDisciplineInput | tasksCreateOrConnectWithoutDisciplineInput[]
    upsert?: tasksUpsertWithWhereUniqueWithoutDisciplineInput | tasksUpsertWithWhereUniqueWithoutDisciplineInput[]
    createMany?: tasksCreateManyDisciplineInputEnvelope
    set?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    disconnect?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    delete?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    connect?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    update?: tasksUpdateWithWhereUniqueWithoutDisciplineInput | tasksUpdateWithWhereUniqueWithoutDisciplineInput[]
    updateMany?: tasksUpdateManyWithWhereWithoutDisciplineInput | tasksUpdateManyWithWhereWithoutDisciplineInput[]
    deleteMany?: tasksScalarWhereInput | tasksScalarWhereInput[]
  }

  export type tasksUncheckedUpdateManyWithoutDisciplineNestedInput = {
    create?: XOR<tasksCreateWithoutDisciplineInput, tasksUncheckedCreateWithoutDisciplineInput> | tasksCreateWithoutDisciplineInput[] | tasksUncheckedCreateWithoutDisciplineInput[]
    connectOrCreate?: tasksCreateOrConnectWithoutDisciplineInput | tasksCreateOrConnectWithoutDisciplineInput[]
    upsert?: tasksUpsertWithWhereUniqueWithoutDisciplineInput | tasksUpsertWithWhereUniqueWithoutDisciplineInput[]
    createMany?: tasksCreateManyDisciplineInputEnvelope
    set?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    disconnect?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    delete?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    connect?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    update?: tasksUpdateWithWhereUniqueWithoutDisciplineInput | tasksUpdateWithWhereUniqueWithoutDisciplineInput[]
    updateMany?: tasksUpdateManyWithWhereWithoutDisciplineInput | tasksUpdateManyWithWhereWithoutDisciplineInput[]
    deleteMany?: tasksScalarWhereInput | tasksScalarWhereInput[]
  }

  export type disciplineCreateNestedManyWithoutLevels_discipline_levelsTolevelsInput = {
    create?: XOR<disciplineCreateWithoutLevels_discipline_levelsTolevelsInput, disciplineUncheckedCreateWithoutLevels_discipline_levelsTolevelsInput> | disciplineCreateWithoutLevels_discipline_levelsTolevelsInput[] | disciplineUncheckedCreateWithoutLevels_discipline_levelsTolevelsInput[]
    connectOrCreate?: disciplineCreateOrConnectWithoutLevels_discipline_levelsTolevelsInput | disciplineCreateOrConnectWithoutLevels_discipline_levelsTolevelsInput[]
    createMany?: disciplineCreateManyLevels_discipline_levelsTolevelsInputEnvelope
    connect?: disciplineWhereUniqueInput | disciplineWhereUniqueInput[]
  }

  export type coursesCreateNestedOneWithoutLevels_levels_coursesTocoursesInput = {
    create?: XOR<coursesCreateWithoutLevels_levels_coursesTocoursesInput, coursesUncheckedCreateWithoutLevels_levels_coursesTocoursesInput>
    connectOrCreate?: coursesCreateOrConnectWithoutLevels_levels_coursesTocoursesInput
    connect?: coursesWhereUniqueInput
  }

  export type materialsCreateNestedManyWithoutLevels_materials_levelsTolevelsInput = {
    create?: XOR<materialsCreateWithoutLevels_materials_levelsTolevelsInput, materialsUncheckedCreateWithoutLevels_materials_levelsTolevelsInput> | materialsCreateWithoutLevels_materials_levelsTolevelsInput[] | materialsUncheckedCreateWithoutLevels_materials_levelsTolevelsInput[]
    connectOrCreate?: materialsCreateOrConnectWithoutLevels_materials_levelsTolevelsInput | materialsCreateOrConnectWithoutLevels_materials_levelsTolevelsInput[]
    createMany?: materialsCreateManyLevels_materials_levelsTolevelsInputEnvelope
    connect?: materialsWhereUniqueInput | materialsWhereUniqueInput[]
  }

  export type disciplineUncheckedCreateNestedManyWithoutLevels_discipline_levelsTolevelsInput = {
    create?: XOR<disciplineCreateWithoutLevels_discipline_levelsTolevelsInput, disciplineUncheckedCreateWithoutLevels_discipline_levelsTolevelsInput> | disciplineCreateWithoutLevels_discipline_levelsTolevelsInput[] | disciplineUncheckedCreateWithoutLevels_discipline_levelsTolevelsInput[]
    connectOrCreate?: disciplineCreateOrConnectWithoutLevels_discipline_levelsTolevelsInput | disciplineCreateOrConnectWithoutLevels_discipline_levelsTolevelsInput[]
    createMany?: disciplineCreateManyLevels_discipline_levelsTolevelsInputEnvelope
    connect?: disciplineWhereUniqueInput | disciplineWhereUniqueInput[]
  }

  export type materialsUncheckedCreateNestedManyWithoutLevels_materials_levelsTolevelsInput = {
    create?: XOR<materialsCreateWithoutLevels_materials_levelsTolevelsInput, materialsUncheckedCreateWithoutLevels_materials_levelsTolevelsInput> | materialsCreateWithoutLevels_materials_levelsTolevelsInput[] | materialsUncheckedCreateWithoutLevels_materials_levelsTolevelsInput[]
    connectOrCreate?: materialsCreateOrConnectWithoutLevels_materials_levelsTolevelsInput | materialsCreateOrConnectWithoutLevels_materials_levelsTolevelsInput[]
    createMany?: materialsCreateManyLevels_materials_levelsTolevelsInputEnvelope
    connect?: materialsWhereUniqueInput | materialsWhereUniqueInput[]
  }

  export type disciplineUpdateManyWithoutLevels_discipline_levelsTolevelsNestedInput = {
    create?: XOR<disciplineCreateWithoutLevels_discipline_levelsTolevelsInput, disciplineUncheckedCreateWithoutLevels_discipline_levelsTolevelsInput> | disciplineCreateWithoutLevels_discipline_levelsTolevelsInput[] | disciplineUncheckedCreateWithoutLevels_discipline_levelsTolevelsInput[]
    connectOrCreate?: disciplineCreateOrConnectWithoutLevels_discipline_levelsTolevelsInput | disciplineCreateOrConnectWithoutLevels_discipline_levelsTolevelsInput[]
    upsert?: disciplineUpsertWithWhereUniqueWithoutLevels_discipline_levelsTolevelsInput | disciplineUpsertWithWhereUniqueWithoutLevels_discipline_levelsTolevelsInput[]
    createMany?: disciplineCreateManyLevels_discipline_levelsTolevelsInputEnvelope
    set?: disciplineWhereUniqueInput | disciplineWhereUniqueInput[]
    disconnect?: disciplineWhereUniqueInput | disciplineWhereUniqueInput[]
    delete?: disciplineWhereUniqueInput | disciplineWhereUniqueInput[]
    connect?: disciplineWhereUniqueInput | disciplineWhereUniqueInput[]
    update?: disciplineUpdateWithWhereUniqueWithoutLevels_discipline_levelsTolevelsInput | disciplineUpdateWithWhereUniqueWithoutLevels_discipline_levelsTolevelsInput[]
    updateMany?: disciplineUpdateManyWithWhereWithoutLevels_discipline_levelsTolevelsInput | disciplineUpdateManyWithWhereWithoutLevels_discipline_levelsTolevelsInput[]
    deleteMany?: disciplineScalarWhereInput | disciplineScalarWhereInput[]
  }

  export type coursesUpdateOneWithoutLevels_levels_coursesTocoursesNestedInput = {
    create?: XOR<coursesCreateWithoutLevels_levels_coursesTocoursesInput, coursesUncheckedCreateWithoutLevels_levels_coursesTocoursesInput>
    connectOrCreate?: coursesCreateOrConnectWithoutLevels_levels_coursesTocoursesInput
    upsert?: coursesUpsertWithoutLevels_levels_coursesTocoursesInput
    disconnect?: coursesWhereInput | boolean
    delete?: coursesWhereInput | boolean
    connect?: coursesWhereUniqueInput
    update?: XOR<XOR<coursesUpdateToOneWithWhereWithoutLevels_levels_coursesTocoursesInput, coursesUpdateWithoutLevels_levels_coursesTocoursesInput>, coursesUncheckedUpdateWithoutLevels_levels_coursesTocoursesInput>
  }

  export type materialsUpdateManyWithoutLevels_materials_levelsTolevelsNestedInput = {
    create?: XOR<materialsCreateWithoutLevels_materials_levelsTolevelsInput, materialsUncheckedCreateWithoutLevels_materials_levelsTolevelsInput> | materialsCreateWithoutLevels_materials_levelsTolevelsInput[] | materialsUncheckedCreateWithoutLevels_materials_levelsTolevelsInput[]
    connectOrCreate?: materialsCreateOrConnectWithoutLevels_materials_levelsTolevelsInput | materialsCreateOrConnectWithoutLevels_materials_levelsTolevelsInput[]
    upsert?: materialsUpsertWithWhereUniqueWithoutLevels_materials_levelsTolevelsInput | materialsUpsertWithWhereUniqueWithoutLevels_materials_levelsTolevelsInput[]
    createMany?: materialsCreateManyLevels_materials_levelsTolevelsInputEnvelope
    set?: materialsWhereUniqueInput | materialsWhereUniqueInput[]
    disconnect?: materialsWhereUniqueInput | materialsWhereUniqueInput[]
    delete?: materialsWhereUniqueInput | materialsWhereUniqueInput[]
    connect?: materialsWhereUniqueInput | materialsWhereUniqueInput[]
    update?: materialsUpdateWithWhereUniqueWithoutLevels_materials_levelsTolevelsInput | materialsUpdateWithWhereUniqueWithoutLevels_materials_levelsTolevelsInput[]
    updateMany?: materialsUpdateManyWithWhereWithoutLevels_materials_levelsTolevelsInput | materialsUpdateManyWithWhereWithoutLevels_materials_levelsTolevelsInput[]
    deleteMany?: materialsScalarWhereInput | materialsScalarWhereInput[]
  }

  export type disciplineUncheckedUpdateManyWithoutLevels_discipline_levelsTolevelsNestedInput = {
    create?: XOR<disciplineCreateWithoutLevels_discipline_levelsTolevelsInput, disciplineUncheckedCreateWithoutLevels_discipline_levelsTolevelsInput> | disciplineCreateWithoutLevels_discipline_levelsTolevelsInput[] | disciplineUncheckedCreateWithoutLevels_discipline_levelsTolevelsInput[]
    connectOrCreate?: disciplineCreateOrConnectWithoutLevels_discipline_levelsTolevelsInput | disciplineCreateOrConnectWithoutLevels_discipline_levelsTolevelsInput[]
    upsert?: disciplineUpsertWithWhereUniqueWithoutLevels_discipline_levelsTolevelsInput | disciplineUpsertWithWhereUniqueWithoutLevels_discipline_levelsTolevelsInput[]
    createMany?: disciplineCreateManyLevels_discipline_levelsTolevelsInputEnvelope
    set?: disciplineWhereUniqueInput | disciplineWhereUniqueInput[]
    disconnect?: disciplineWhereUniqueInput | disciplineWhereUniqueInput[]
    delete?: disciplineWhereUniqueInput | disciplineWhereUniqueInput[]
    connect?: disciplineWhereUniqueInput | disciplineWhereUniqueInput[]
    update?: disciplineUpdateWithWhereUniqueWithoutLevels_discipline_levelsTolevelsInput | disciplineUpdateWithWhereUniqueWithoutLevels_discipline_levelsTolevelsInput[]
    updateMany?: disciplineUpdateManyWithWhereWithoutLevels_discipline_levelsTolevelsInput | disciplineUpdateManyWithWhereWithoutLevels_discipline_levelsTolevelsInput[]
    deleteMany?: disciplineScalarWhereInput | disciplineScalarWhereInput[]
  }

  export type materialsUncheckedUpdateManyWithoutLevels_materials_levelsTolevelsNestedInput = {
    create?: XOR<materialsCreateWithoutLevels_materials_levelsTolevelsInput, materialsUncheckedCreateWithoutLevels_materials_levelsTolevelsInput> | materialsCreateWithoutLevels_materials_levelsTolevelsInput[] | materialsUncheckedCreateWithoutLevels_materials_levelsTolevelsInput[]
    connectOrCreate?: materialsCreateOrConnectWithoutLevels_materials_levelsTolevelsInput | materialsCreateOrConnectWithoutLevels_materials_levelsTolevelsInput[]
    upsert?: materialsUpsertWithWhereUniqueWithoutLevels_materials_levelsTolevelsInput | materialsUpsertWithWhereUniqueWithoutLevels_materials_levelsTolevelsInput[]
    createMany?: materialsCreateManyLevels_materials_levelsTolevelsInputEnvelope
    set?: materialsWhereUniqueInput | materialsWhereUniqueInput[]
    disconnect?: materialsWhereUniqueInput | materialsWhereUniqueInput[]
    delete?: materialsWhereUniqueInput | materialsWhereUniqueInput[]
    connect?: materialsWhereUniqueInput | materialsWhereUniqueInput[]
    update?: materialsUpdateWithWhereUniqueWithoutLevels_materials_levelsTolevelsInput | materialsUpdateWithWhereUniqueWithoutLevels_materials_levelsTolevelsInput[]
    updateMany?: materialsUpdateManyWithWhereWithoutLevels_materials_levelsTolevelsInput | materialsUpdateManyWithWhereWithoutLevels_materials_levelsTolevelsInput[]
    deleteMany?: materialsScalarWhereInput | materialsScalarWhereInput[]
  }

  export type levelsCreateNestedOneWithoutMaterials_materials_levelsTolevelsInput = {
    create?: XOR<levelsCreateWithoutMaterials_materials_levelsTolevelsInput, levelsUncheckedCreateWithoutMaterials_materials_levelsTolevelsInput>
    connectOrCreate?: levelsCreateOrConnectWithoutMaterials_materials_levelsTolevelsInput
    connect?: levelsWhereUniqueInput
  }

  export type BytesFieldUpdateOperationsInput = {
    set?: Uint8Array
  }

  export type levelsUpdateOneWithoutMaterials_materials_levelsTolevelsNestedInput = {
    create?: XOR<levelsCreateWithoutMaterials_materials_levelsTolevelsInput, levelsUncheckedCreateWithoutMaterials_materials_levelsTolevelsInput>
    connectOrCreate?: levelsCreateOrConnectWithoutMaterials_materials_levelsTolevelsInput
    upsert?: levelsUpsertWithoutMaterials_materials_levelsTolevelsInput
    disconnect?: levelsWhereInput | boolean
    delete?: levelsWhereInput | boolean
    connect?: levelsWhereUniqueInput
    update?: XOR<XOR<levelsUpdateToOneWithWhereWithoutMaterials_materials_levelsTolevelsInput, levelsUpdateWithoutMaterials_materials_levelsTolevelsInput>, levelsUncheckedUpdateWithoutMaterials_materials_levelsTolevelsInput>
  }

  export type registrationsCreateNestedOneWithoutMonthly_fee_monthly_fee_registrationsToregistrationsInput = {
    create?: XOR<registrationsCreateWithoutMonthly_fee_monthly_fee_registrationsToregistrationsInput, registrationsUncheckedCreateWithoutMonthly_fee_monthly_fee_registrationsToregistrationsInput>
    connectOrCreate?: registrationsCreateOrConnectWithoutMonthly_fee_monthly_fee_registrationsToregistrationsInput
    connect?: registrationsWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type registrationsUpdateOneRequiredWithoutMonthly_fee_monthly_fee_registrationsToregistrationsNestedInput = {
    create?: XOR<registrationsCreateWithoutMonthly_fee_monthly_fee_registrationsToregistrationsInput, registrationsUncheckedCreateWithoutMonthly_fee_monthly_fee_registrationsToregistrationsInput>
    connectOrCreate?: registrationsCreateOrConnectWithoutMonthly_fee_monthly_fee_registrationsToregistrationsInput
    upsert?: registrationsUpsertWithoutMonthly_fee_monthly_fee_registrationsToregistrationsInput
    connect?: registrationsWhereUniqueInput
    update?: XOR<XOR<registrationsUpdateToOneWithWhereWithoutMonthly_fee_monthly_fee_registrationsToregistrationsInput, registrationsUpdateWithoutMonthly_fee_monthly_fee_registrationsToregistrationsInput>, registrationsUncheckedUpdateWithoutMonthly_fee_monthly_fee_registrationsToregistrationsInput>
  }

  export type classesCreateNestedOneWithoutPresence_list_presence_list_classesToclassesInput = {
    create?: XOR<classesCreateWithoutPresence_list_presence_list_classesToclassesInput, classesUncheckedCreateWithoutPresence_list_presence_list_classesToclassesInput>
    connectOrCreate?: classesCreateOrConnectWithoutPresence_list_presence_list_classesToclassesInput
    connect?: classesWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutPresence_list_presence_list_usersTousersInput = {
    create?: XOR<usersCreateWithoutPresence_list_presence_list_usersTousersInput, usersUncheckedCreateWithoutPresence_list_presence_list_usersTousersInput>
    connectOrCreate?: usersCreateOrConnectWithoutPresence_list_presence_list_usersTousersInput
    connect?: usersWhereUniqueInput
  }

  export type classesUpdateOneRequiredWithoutPresence_list_presence_list_classesToclassesNestedInput = {
    create?: XOR<classesCreateWithoutPresence_list_presence_list_classesToclassesInput, classesUncheckedCreateWithoutPresence_list_presence_list_classesToclassesInput>
    connectOrCreate?: classesCreateOrConnectWithoutPresence_list_presence_list_classesToclassesInput
    upsert?: classesUpsertWithoutPresence_list_presence_list_classesToclassesInput
    connect?: classesWhereUniqueInput
    update?: XOR<XOR<classesUpdateToOneWithWhereWithoutPresence_list_presence_list_classesToclassesInput, classesUpdateWithoutPresence_list_presence_list_classesToclassesInput>, classesUncheckedUpdateWithoutPresence_list_presence_list_classesToclassesInput>
  }

  export type usersUpdateOneRequiredWithoutPresence_list_presence_list_usersTousersNestedInput = {
    create?: XOR<usersCreateWithoutPresence_list_presence_list_usersTousersInput, usersUncheckedCreateWithoutPresence_list_presence_list_usersTousersInput>
    connectOrCreate?: usersCreateOrConnectWithoutPresence_list_presence_list_usersTousersInput
    upsert?: usersUpsertWithoutPresence_list_presence_list_usersTousersInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutPresence_list_presence_list_usersTousersInput, usersUpdateWithoutPresence_list_presence_list_usersTousersInput>, usersUncheckedUpdateWithoutPresence_list_presence_list_usersTousersInput>
  }

  export type registrationsCreateNestedOneWithoutRecords_of_students_records_of_students_registrationsToregistrationsInput = {
    create?: XOR<registrationsCreateWithoutRecords_of_students_records_of_students_registrationsToregistrationsInput, registrationsUncheckedCreateWithoutRecords_of_students_records_of_students_registrationsToregistrationsInput>
    connectOrCreate?: registrationsCreateOrConnectWithoutRecords_of_students_records_of_students_registrationsToregistrationsInput
    connect?: registrationsWhereUniqueInput
  }

  export type registrationsUpdateOneRequiredWithoutRecords_of_students_records_of_students_registrationsToregistrationsNestedInput = {
    create?: XOR<registrationsCreateWithoutRecords_of_students_records_of_students_registrationsToregistrationsInput, registrationsUncheckedCreateWithoutRecords_of_students_records_of_students_registrationsToregistrationsInput>
    connectOrCreate?: registrationsCreateOrConnectWithoutRecords_of_students_records_of_students_registrationsToregistrationsInput
    upsert?: registrationsUpsertWithoutRecords_of_students_records_of_students_registrationsToregistrationsInput
    connect?: registrationsWhereUniqueInput
    update?: XOR<XOR<registrationsUpdateToOneWithWhereWithoutRecords_of_students_records_of_students_registrationsToregistrationsInput, registrationsUpdateWithoutRecords_of_students_records_of_students_registrationsToregistrationsInput>, registrationsUncheckedUpdateWithoutRecords_of_students_records_of_students_registrationsToregistrationsInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type monthly_feeCreateNestedManyWithoutRegistrations_monthly_fee_registrationsToregistrationsInput = {
    create?: XOR<monthly_feeCreateWithoutRegistrations_monthly_fee_registrationsToregistrationsInput, monthly_feeUncheckedCreateWithoutRegistrations_monthly_fee_registrationsToregistrationsInput> | monthly_feeCreateWithoutRegistrations_monthly_fee_registrationsToregistrationsInput[] | monthly_feeUncheckedCreateWithoutRegistrations_monthly_fee_registrationsToregistrationsInput[]
    connectOrCreate?: monthly_feeCreateOrConnectWithoutRegistrations_monthly_fee_registrationsToregistrationsInput | monthly_feeCreateOrConnectWithoutRegistrations_monthly_fee_registrationsToregistrationsInput[]
    createMany?: monthly_feeCreateManyRegistrations_monthly_fee_registrationsToregistrationsInputEnvelope
    connect?: monthly_feeWhereUniqueInput | monthly_feeWhereUniqueInput[]
  }

  export type records_of_studentsCreateNestedManyWithoutRegistrations_records_of_students_registrationsToregistrationsInput = {
    create?: XOR<records_of_studentsCreateWithoutRegistrations_records_of_students_registrationsToregistrationsInput, records_of_studentsUncheckedCreateWithoutRegistrations_records_of_students_registrationsToregistrationsInput> | records_of_studentsCreateWithoutRegistrations_records_of_students_registrationsToregistrationsInput[] | records_of_studentsUncheckedCreateWithoutRegistrations_records_of_students_registrationsToregistrationsInput[]
    connectOrCreate?: records_of_studentsCreateOrConnectWithoutRegistrations_records_of_students_registrationsToregistrationsInput | records_of_studentsCreateOrConnectWithoutRegistrations_records_of_students_registrationsToregistrationsInput[]
    createMany?: records_of_studentsCreateManyRegistrations_records_of_students_registrationsToregistrationsInputEnvelope
    connect?: records_of_studentsWhereUniqueInput | records_of_studentsWhereUniqueInput[]
  }

  export type companiesCreateNestedOneWithoutRegistrations_registrations_companiesTocompaniesInput = {
    create?: XOR<companiesCreateWithoutRegistrations_registrations_companiesTocompaniesInput, companiesUncheckedCreateWithoutRegistrations_registrations_companiesTocompaniesInput>
    connectOrCreate?: companiesCreateOrConnectWithoutRegistrations_registrations_companiesTocompaniesInput
    connect?: companiesWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutRegistrations_registrations_usersTousersInput = {
    create?: XOR<usersCreateWithoutRegistrations_registrations_usersTousersInput, usersUncheckedCreateWithoutRegistrations_registrations_usersTousersInput>
    connectOrCreate?: usersCreateOrConnectWithoutRegistrations_registrations_usersTousersInput
    connect?: usersWhereUniqueInput
  }

  export type monthly_feeUncheckedCreateNestedManyWithoutRegistrations_monthly_fee_registrationsToregistrationsInput = {
    create?: XOR<monthly_feeCreateWithoutRegistrations_monthly_fee_registrationsToregistrationsInput, monthly_feeUncheckedCreateWithoutRegistrations_monthly_fee_registrationsToregistrationsInput> | monthly_feeCreateWithoutRegistrations_monthly_fee_registrationsToregistrationsInput[] | monthly_feeUncheckedCreateWithoutRegistrations_monthly_fee_registrationsToregistrationsInput[]
    connectOrCreate?: monthly_feeCreateOrConnectWithoutRegistrations_monthly_fee_registrationsToregistrationsInput | monthly_feeCreateOrConnectWithoutRegistrations_monthly_fee_registrationsToregistrationsInput[]
    createMany?: monthly_feeCreateManyRegistrations_monthly_fee_registrationsToregistrationsInputEnvelope
    connect?: monthly_feeWhereUniqueInput | monthly_feeWhereUniqueInput[]
  }

  export type records_of_studentsUncheckedCreateNestedManyWithoutRegistrations_records_of_students_registrationsToregistrationsInput = {
    create?: XOR<records_of_studentsCreateWithoutRegistrations_records_of_students_registrationsToregistrationsInput, records_of_studentsUncheckedCreateWithoutRegistrations_records_of_students_registrationsToregistrationsInput> | records_of_studentsCreateWithoutRegistrations_records_of_students_registrationsToregistrationsInput[] | records_of_studentsUncheckedCreateWithoutRegistrations_records_of_students_registrationsToregistrationsInput[]
    connectOrCreate?: records_of_studentsCreateOrConnectWithoutRegistrations_records_of_students_registrationsToregistrationsInput | records_of_studentsCreateOrConnectWithoutRegistrations_records_of_students_registrationsToregistrationsInput[]
    createMany?: records_of_studentsCreateManyRegistrations_records_of_students_registrationsToregistrationsInputEnvelope
    connect?: records_of_studentsWhereUniqueInput | records_of_studentsWhereUniqueInput[]
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type monthly_feeUpdateManyWithoutRegistrations_monthly_fee_registrationsToregistrationsNestedInput = {
    create?: XOR<monthly_feeCreateWithoutRegistrations_monthly_fee_registrationsToregistrationsInput, monthly_feeUncheckedCreateWithoutRegistrations_monthly_fee_registrationsToregistrationsInput> | monthly_feeCreateWithoutRegistrations_monthly_fee_registrationsToregistrationsInput[] | monthly_feeUncheckedCreateWithoutRegistrations_monthly_fee_registrationsToregistrationsInput[]
    connectOrCreate?: monthly_feeCreateOrConnectWithoutRegistrations_monthly_fee_registrationsToregistrationsInput | monthly_feeCreateOrConnectWithoutRegistrations_monthly_fee_registrationsToregistrationsInput[]
    upsert?: monthly_feeUpsertWithWhereUniqueWithoutRegistrations_monthly_fee_registrationsToregistrationsInput | monthly_feeUpsertWithWhereUniqueWithoutRegistrations_monthly_fee_registrationsToregistrationsInput[]
    createMany?: monthly_feeCreateManyRegistrations_monthly_fee_registrationsToregistrationsInputEnvelope
    set?: monthly_feeWhereUniqueInput | monthly_feeWhereUniqueInput[]
    disconnect?: monthly_feeWhereUniqueInput | monthly_feeWhereUniqueInput[]
    delete?: monthly_feeWhereUniqueInput | monthly_feeWhereUniqueInput[]
    connect?: monthly_feeWhereUniqueInput | monthly_feeWhereUniqueInput[]
    update?: monthly_feeUpdateWithWhereUniqueWithoutRegistrations_monthly_fee_registrationsToregistrationsInput | monthly_feeUpdateWithWhereUniqueWithoutRegistrations_monthly_fee_registrationsToregistrationsInput[]
    updateMany?: monthly_feeUpdateManyWithWhereWithoutRegistrations_monthly_fee_registrationsToregistrationsInput | monthly_feeUpdateManyWithWhereWithoutRegistrations_monthly_fee_registrationsToregistrationsInput[]
    deleteMany?: monthly_feeScalarWhereInput | monthly_feeScalarWhereInput[]
  }

  export type records_of_studentsUpdateManyWithoutRegistrations_records_of_students_registrationsToregistrationsNestedInput = {
    create?: XOR<records_of_studentsCreateWithoutRegistrations_records_of_students_registrationsToregistrationsInput, records_of_studentsUncheckedCreateWithoutRegistrations_records_of_students_registrationsToregistrationsInput> | records_of_studentsCreateWithoutRegistrations_records_of_students_registrationsToregistrationsInput[] | records_of_studentsUncheckedCreateWithoutRegistrations_records_of_students_registrationsToregistrationsInput[]
    connectOrCreate?: records_of_studentsCreateOrConnectWithoutRegistrations_records_of_students_registrationsToregistrationsInput | records_of_studentsCreateOrConnectWithoutRegistrations_records_of_students_registrationsToregistrationsInput[]
    upsert?: records_of_studentsUpsertWithWhereUniqueWithoutRegistrations_records_of_students_registrationsToregistrationsInput | records_of_studentsUpsertWithWhereUniqueWithoutRegistrations_records_of_students_registrationsToregistrationsInput[]
    createMany?: records_of_studentsCreateManyRegistrations_records_of_students_registrationsToregistrationsInputEnvelope
    set?: records_of_studentsWhereUniqueInput | records_of_studentsWhereUniqueInput[]
    disconnect?: records_of_studentsWhereUniqueInput | records_of_studentsWhereUniqueInput[]
    delete?: records_of_studentsWhereUniqueInput | records_of_studentsWhereUniqueInput[]
    connect?: records_of_studentsWhereUniqueInput | records_of_studentsWhereUniqueInput[]
    update?: records_of_studentsUpdateWithWhereUniqueWithoutRegistrations_records_of_students_registrationsToregistrationsInput | records_of_studentsUpdateWithWhereUniqueWithoutRegistrations_records_of_students_registrationsToregistrationsInput[]
    updateMany?: records_of_studentsUpdateManyWithWhereWithoutRegistrations_records_of_students_registrationsToregistrationsInput | records_of_studentsUpdateManyWithWhereWithoutRegistrations_records_of_students_registrationsToregistrationsInput[]
    deleteMany?: records_of_studentsScalarWhereInput | records_of_studentsScalarWhereInput[]
  }

  export type companiesUpdateOneWithoutRegistrations_registrations_companiesTocompaniesNestedInput = {
    create?: XOR<companiesCreateWithoutRegistrations_registrations_companiesTocompaniesInput, companiesUncheckedCreateWithoutRegistrations_registrations_companiesTocompaniesInput>
    connectOrCreate?: companiesCreateOrConnectWithoutRegistrations_registrations_companiesTocompaniesInput
    upsert?: companiesUpsertWithoutRegistrations_registrations_companiesTocompaniesInput
    disconnect?: companiesWhereInput | boolean
    delete?: companiesWhereInput | boolean
    connect?: companiesWhereUniqueInput
    update?: XOR<XOR<companiesUpdateToOneWithWhereWithoutRegistrations_registrations_companiesTocompaniesInput, companiesUpdateWithoutRegistrations_registrations_companiesTocompaniesInput>, companiesUncheckedUpdateWithoutRegistrations_registrations_companiesTocompaniesInput>
  }

  export type usersUpdateOneWithoutRegistrations_registrations_usersTousersNestedInput = {
    create?: XOR<usersCreateWithoutRegistrations_registrations_usersTousersInput, usersUncheckedCreateWithoutRegistrations_registrations_usersTousersInput>
    connectOrCreate?: usersCreateOrConnectWithoutRegistrations_registrations_usersTousersInput
    upsert?: usersUpsertWithoutRegistrations_registrations_usersTousersInput
    disconnect?: usersWhereInput | boolean
    delete?: usersWhereInput | boolean
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutRegistrations_registrations_usersTousersInput, usersUpdateWithoutRegistrations_registrations_usersTousersInput>, usersUncheckedUpdateWithoutRegistrations_registrations_usersTousersInput>
  }

  export type monthly_feeUncheckedUpdateManyWithoutRegistrations_monthly_fee_registrationsToregistrationsNestedInput = {
    create?: XOR<monthly_feeCreateWithoutRegistrations_monthly_fee_registrationsToregistrationsInput, monthly_feeUncheckedCreateWithoutRegistrations_monthly_fee_registrationsToregistrationsInput> | monthly_feeCreateWithoutRegistrations_monthly_fee_registrationsToregistrationsInput[] | monthly_feeUncheckedCreateWithoutRegistrations_monthly_fee_registrationsToregistrationsInput[]
    connectOrCreate?: monthly_feeCreateOrConnectWithoutRegistrations_monthly_fee_registrationsToregistrationsInput | monthly_feeCreateOrConnectWithoutRegistrations_monthly_fee_registrationsToregistrationsInput[]
    upsert?: monthly_feeUpsertWithWhereUniqueWithoutRegistrations_monthly_fee_registrationsToregistrationsInput | monthly_feeUpsertWithWhereUniqueWithoutRegistrations_monthly_fee_registrationsToregistrationsInput[]
    createMany?: monthly_feeCreateManyRegistrations_monthly_fee_registrationsToregistrationsInputEnvelope
    set?: monthly_feeWhereUniqueInput | monthly_feeWhereUniqueInput[]
    disconnect?: monthly_feeWhereUniqueInput | monthly_feeWhereUniqueInput[]
    delete?: monthly_feeWhereUniqueInput | monthly_feeWhereUniqueInput[]
    connect?: monthly_feeWhereUniqueInput | monthly_feeWhereUniqueInput[]
    update?: monthly_feeUpdateWithWhereUniqueWithoutRegistrations_monthly_fee_registrationsToregistrationsInput | monthly_feeUpdateWithWhereUniqueWithoutRegistrations_monthly_fee_registrationsToregistrationsInput[]
    updateMany?: monthly_feeUpdateManyWithWhereWithoutRegistrations_monthly_fee_registrationsToregistrationsInput | monthly_feeUpdateManyWithWhereWithoutRegistrations_monthly_fee_registrationsToregistrationsInput[]
    deleteMany?: monthly_feeScalarWhereInput | monthly_feeScalarWhereInput[]
  }

  export type records_of_studentsUncheckedUpdateManyWithoutRegistrations_records_of_students_registrationsToregistrationsNestedInput = {
    create?: XOR<records_of_studentsCreateWithoutRegistrations_records_of_students_registrationsToregistrationsInput, records_of_studentsUncheckedCreateWithoutRegistrations_records_of_students_registrationsToregistrationsInput> | records_of_studentsCreateWithoutRegistrations_records_of_students_registrationsToregistrationsInput[] | records_of_studentsUncheckedCreateWithoutRegistrations_records_of_students_registrationsToregistrationsInput[]
    connectOrCreate?: records_of_studentsCreateOrConnectWithoutRegistrations_records_of_students_registrationsToregistrationsInput | records_of_studentsCreateOrConnectWithoutRegistrations_records_of_students_registrationsToregistrationsInput[]
    upsert?: records_of_studentsUpsertWithWhereUniqueWithoutRegistrations_records_of_students_registrationsToregistrationsInput | records_of_studentsUpsertWithWhereUniqueWithoutRegistrations_records_of_students_registrationsToregistrationsInput[]
    createMany?: records_of_studentsCreateManyRegistrations_records_of_students_registrationsToregistrationsInputEnvelope
    set?: records_of_studentsWhereUniqueInput | records_of_studentsWhereUniqueInput[]
    disconnect?: records_of_studentsWhereUniqueInput | records_of_studentsWhereUniqueInput[]
    delete?: records_of_studentsWhereUniqueInput | records_of_studentsWhereUniqueInput[]
    connect?: records_of_studentsWhereUniqueInput | records_of_studentsWhereUniqueInput[]
    update?: records_of_studentsUpdateWithWhereUniqueWithoutRegistrations_records_of_students_registrationsToregistrationsInput | records_of_studentsUpdateWithWhereUniqueWithoutRegistrations_records_of_students_registrationsToregistrationsInput[]
    updateMany?: records_of_studentsUpdateManyWithWhereWithoutRegistrations_records_of_students_registrationsToregistrationsInput | records_of_studentsUpdateManyWithWhereWithoutRegistrations_records_of_students_registrationsToregistrationsInput[]
    deleteMany?: records_of_studentsScalarWhereInput | records_of_studentsScalarWhereInput[]
  }

  export type users_rolesCreateNestedManyWithoutRolesInput = {
    create?: XOR<users_rolesCreateWithoutRolesInput, users_rolesUncheckedCreateWithoutRolesInput> | users_rolesCreateWithoutRolesInput[] | users_rolesUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: users_rolesCreateOrConnectWithoutRolesInput | users_rolesCreateOrConnectWithoutRolesInput[]
    createMany?: users_rolesCreateManyRolesInputEnvelope
    connect?: users_rolesWhereUniqueInput | users_rolesWhereUniqueInput[]
  }

  export type users_rolesUncheckedCreateNestedManyWithoutRolesInput = {
    create?: XOR<users_rolesCreateWithoutRolesInput, users_rolesUncheckedCreateWithoutRolesInput> | users_rolesCreateWithoutRolesInput[] | users_rolesUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: users_rolesCreateOrConnectWithoutRolesInput | users_rolesCreateOrConnectWithoutRolesInput[]
    createMany?: users_rolesCreateManyRolesInputEnvelope
    connect?: users_rolesWhereUniqueInput | users_rolesWhereUniqueInput[]
  }

  export type users_rolesUpdateManyWithoutRolesNestedInput = {
    create?: XOR<users_rolesCreateWithoutRolesInput, users_rolesUncheckedCreateWithoutRolesInput> | users_rolesCreateWithoutRolesInput[] | users_rolesUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: users_rolesCreateOrConnectWithoutRolesInput | users_rolesCreateOrConnectWithoutRolesInput[]
    upsert?: users_rolesUpsertWithWhereUniqueWithoutRolesInput | users_rolesUpsertWithWhereUniqueWithoutRolesInput[]
    createMany?: users_rolesCreateManyRolesInputEnvelope
    set?: users_rolesWhereUniqueInput | users_rolesWhereUniqueInput[]
    disconnect?: users_rolesWhereUniqueInput | users_rolesWhereUniqueInput[]
    delete?: users_rolesWhereUniqueInput | users_rolesWhereUniqueInput[]
    connect?: users_rolesWhereUniqueInput | users_rolesWhereUniqueInput[]
    update?: users_rolesUpdateWithWhereUniqueWithoutRolesInput | users_rolesUpdateWithWhereUniqueWithoutRolesInput[]
    updateMany?: users_rolesUpdateManyWithWhereWithoutRolesInput | users_rolesUpdateManyWithWhereWithoutRolesInput[]
    deleteMany?: users_rolesScalarWhereInput | users_rolesScalarWhereInput[]
  }

  export type users_rolesUncheckedUpdateManyWithoutRolesNestedInput = {
    create?: XOR<users_rolesCreateWithoutRolesInput, users_rolesUncheckedCreateWithoutRolesInput> | users_rolesCreateWithoutRolesInput[] | users_rolesUncheckedCreateWithoutRolesInput[]
    connectOrCreate?: users_rolesCreateOrConnectWithoutRolesInput | users_rolesCreateOrConnectWithoutRolesInput[]
    upsert?: users_rolesUpsertWithWhereUniqueWithoutRolesInput | users_rolesUpsertWithWhereUniqueWithoutRolesInput[]
    createMany?: users_rolesCreateManyRolesInputEnvelope
    set?: users_rolesWhereUniqueInput | users_rolesWhereUniqueInput[]
    disconnect?: users_rolesWhereUniqueInput | users_rolesWhereUniqueInput[]
    delete?: users_rolesWhereUniqueInput | users_rolesWhereUniqueInput[]
    connect?: users_rolesWhereUniqueInput | users_rolesWhereUniqueInput[]
    update?: users_rolesUpdateWithWhereUniqueWithoutRolesInput | users_rolesUpdateWithWhereUniqueWithoutRolesInput[]
    updateMany?: users_rolesUpdateManyWithWhereWithoutRolesInput | users_rolesUpdateManyWithWhereWithoutRolesInput[]
    deleteMany?: users_rolesScalarWhereInput | users_rolesScalarWhereInput[]
  }

  export type disciplineCreateNestedOneWithoutTasksInput = {
    create?: XOR<disciplineCreateWithoutTasksInput, disciplineUncheckedCreateWithoutTasksInput>
    connectOrCreate?: disciplineCreateOrConnectWithoutTasksInput
    connect?: disciplineWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type disciplineUpdateOneRequiredWithoutTasksNestedInput = {
    create?: XOR<disciplineCreateWithoutTasksInput, disciplineUncheckedCreateWithoutTasksInput>
    connectOrCreate?: disciplineCreateOrConnectWithoutTasksInput
    upsert?: disciplineUpsertWithoutTasksInput
    connect?: disciplineWhereUniqueInput
    update?: XOR<XOR<disciplineUpdateToOneWithWhereWithoutTasksInput, disciplineUpdateWithoutTasksInput>, disciplineUncheckedUpdateWithoutTasksInput>
  }

  export type usersCreateNestedOneWithoutTokens_tokens_usersTousersInput = {
    create?: XOR<usersCreateWithoutTokens_tokens_usersTousersInput, usersUncheckedCreateWithoutTokens_tokens_usersTousersInput>
    connectOrCreate?: usersCreateOrConnectWithoutTokens_tokens_usersTousersInput
    connect?: usersWhereUniqueInput
  }

  export type usersUpdateOneRequiredWithoutTokens_tokens_usersTousersNestedInput = {
    create?: XOR<usersCreateWithoutTokens_tokens_usersTousersInput, usersUncheckedCreateWithoutTokens_tokens_usersTousersInput>
    connectOrCreate?: usersCreateOrConnectWithoutTokens_tokens_usersTousersInput
    upsert?: usersUpsertWithoutTokens_tokens_usersTousersInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutTokens_tokens_usersTousersInput, usersUpdateWithoutTokens_tokens_usersTousersInput>, usersUncheckedUpdateWithoutTokens_tokens_usersTousersInput>
  }

  export type companiesCreateNestedManyWithoutUsers_companies_usersTousersInput = {
    create?: XOR<companiesCreateWithoutUsers_companies_usersTousersInput, companiesUncheckedCreateWithoutUsers_companies_usersTousersInput> | companiesCreateWithoutUsers_companies_usersTousersInput[] | companiesUncheckedCreateWithoutUsers_companies_usersTousersInput[]
    connectOrCreate?: companiesCreateOrConnectWithoutUsers_companies_usersTousersInput | companiesCreateOrConnectWithoutUsers_companies_usersTousersInput[]
    createMany?: companiesCreateManyUsers_companies_usersTousersInputEnvelope
    connect?: companiesWhereUniqueInput | companiesWhereUniqueInput[]
  }

  export type presence_listCreateNestedManyWithoutUsers_presence_list_usersTousersInput = {
    create?: XOR<presence_listCreateWithoutUsers_presence_list_usersTousersInput, presence_listUncheckedCreateWithoutUsers_presence_list_usersTousersInput> | presence_listCreateWithoutUsers_presence_list_usersTousersInput[] | presence_listUncheckedCreateWithoutUsers_presence_list_usersTousersInput[]
    connectOrCreate?: presence_listCreateOrConnectWithoutUsers_presence_list_usersTousersInput | presence_listCreateOrConnectWithoutUsers_presence_list_usersTousersInput[]
    createMany?: presence_listCreateManyUsers_presence_list_usersTousersInputEnvelope
    connect?: presence_listWhereUniqueInput | presence_listWhereUniqueInput[]
  }

  export type registrationsCreateNestedManyWithoutUsers_registrations_usersTousersInput = {
    create?: XOR<registrationsCreateWithoutUsers_registrations_usersTousersInput, registrationsUncheckedCreateWithoutUsers_registrations_usersTousersInput> | registrationsCreateWithoutUsers_registrations_usersTousersInput[] | registrationsUncheckedCreateWithoutUsers_registrations_usersTousersInput[]
    connectOrCreate?: registrationsCreateOrConnectWithoutUsers_registrations_usersTousersInput | registrationsCreateOrConnectWithoutUsers_registrations_usersTousersInput[]
    createMany?: registrationsCreateManyUsers_registrations_usersTousersInputEnvelope
    connect?: registrationsWhereUniqueInput | registrationsWhereUniqueInput[]
  }

  export type tokensCreateNestedManyWithoutUsers_tokens_usersTousersInput = {
    create?: XOR<tokensCreateWithoutUsers_tokens_usersTousersInput, tokensUncheckedCreateWithoutUsers_tokens_usersTousersInput> | tokensCreateWithoutUsers_tokens_usersTousersInput[] | tokensUncheckedCreateWithoutUsers_tokens_usersTousersInput[]
    connectOrCreate?: tokensCreateOrConnectWithoutUsers_tokens_usersTousersInput | tokensCreateOrConnectWithoutUsers_tokens_usersTousersInput[]
    createMany?: tokensCreateManyUsers_tokens_usersTousersInputEnvelope
    connect?: tokensWhereUniqueInput | tokensWhereUniqueInput[]
  }

  export type companiesCreateNestedOneWithoutUsers_users_companiesTocompaniesInput = {
    create?: XOR<companiesCreateWithoutUsers_users_companiesTocompaniesInput, companiesUncheckedCreateWithoutUsers_users_companiesTocompaniesInput>
    connectOrCreate?: companiesCreateOrConnectWithoutUsers_users_companiesTocompaniesInput
    connect?: companiesWhereUniqueInput
  }

  export type users_rolesCreateNestedManyWithoutUsersInput = {
    create?: XOR<users_rolesCreateWithoutUsersInput, users_rolesUncheckedCreateWithoutUsersInput> | users_rolesCreateWithoutUsersInput[] | users_rolesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: users_rolesCreateOrConnectWithoutUsersInput | users_rolesCreateOrConnectWithoutUsersInput[]
    createMany?: users_rolesCreateManyUsersInputEnvelope
    connect?: users_rolesWhereUniqueInput | users_rolesWhereUniqueInput[]
  }

  export type companiesUncheckedCreateNestedManyWithoutUsers_companies_usersTousersInput = {
    create?: XOR<companiesCreateWithoutUsers_companies_usersTousersInput, companiesUncheckedCreateWithoutUsers_companies_usersTousersInput> | companiesCreateWithoutUsers_companies_usersTousersInput[] | companiesUncheckedCreateWithoutUsers_companies_usersTousersInput[]
    connectOrCreate?: companiesCreateOrConnectWithoutUsers_companies_usersTousersInput | companiesCreateOrConnectWithoutUsers_companies_usersTousersInput[]
    createMany?: companiesCreateManyUsers_companies_usersTousersInputEnvelope
    connect?: companiesWhereUniqueInput | companiesWhereUniqueInput[]
  }

  export type presence_listUncheckedCreateNestedManyWithoutUsers_presence_list_usersTousersInput = {
    create?: XOR<presence_listCreateWithoutUsers_presence_list_usersTousersInput, presence_listUncheckedCreateWithoutUsers_presence_list_usersTousersInput> | presence_listCreateWithoutUsers_presence_list_usersTousersInput[] | presence_listUncheckedCreateWithoutUsers_presence_list_usersTousersInput[]
    connectOrCreate?: presence_listCreateOrConnectWithoutUsers_presence_list_usersTousersInput | presence_listCreateOrConnectWithoutUsers_presence_list_usersTousersInput[]
    createMany?: presence_listCreateManyUsers_presence_list_usersTousersInputEnvelope
    connect?: presence_listWhereUniqueInput | presence_listWhereUniqueInput[]
  }

  export type registrationsUncheckedCreateNestedManyWithoutUsers_registrations_usersTousersInput = {
    create?: XOR<registrationsCreateWithoutUsers_registrations_usersTousersInput, registrationsUncheckedCreateWithoutUsers_registrations_usersTousersInput> | registrationsCreateWithoutUsers_registrations_usersTousersInput[] | registrationsUncheckedCreateWithoutUsers_registrations_usersTousersInput[]
    connectOrCreate?: registrationsCreateOrConnectWithoutUsers_registrations_usersTousersInput | registrationsCreateOrConnectWithoutUsers_registrations_usersTousersInput[]
    createMany?: registrationsCreateManyUsers_registrations_usersTousersInputEnvelope
    connect?: registrationsWhereUniqueInput | registrationsWhereUniqueInput[]
  }

  export type tokensUncheckedCreateNestedManyWithoutUsers_tokens_usersTousersInput = {
    create?: XOR<tokensCreateWithoutUsers_tokens_usersTousersInput, tokensUncheckedCreateWithoutUsers_tokens_usersTousersInput> | tokensCreateWithoutUsers_tokens_usersTousersInput[] | tokensUncheckedCreateWithoutUsers_tokens_usersTousersInput[]
    connectOrCreate?: tokensCreateOrConnectWithoutUsers_tokens_usersTousersInput | tokensCreateOrConnectWithoutUsers_tokens_usersTousersInput[]
    createMany?: tokensCreateManyUsers_tokens_usersTousersInputEnvelope
    connect?: tokensWhereUniqueInput | tokensWhereUniqueInput[]
  }

  export type users_rolesUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<users_rolesCreateWithoutUsersInput, users_rolesUncheckedCreateWithoutUsersInput> | users_rolesCreateWithoutUsersInput[] | users_rolesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: users_rolesCreateOrConnectWithoutUsersInput | users_rolesCreateOrConnectWithoutUsersInput[]
    createMany?: users_rolesCreateManyUsersInputEnvelope
    connect?: users_rolesWhereUniqueInput | users_rolesWhereUniqueInput[]
  }

  export type companiesUpdateManyWithoutUsers_companies_usersTousersNestedInput = {
    create?: XOR<companiesCreateWithoutUsers_companies_usersTousersInput, companiesUncheckedCreateWithoutUsers_companies_usersTousersInput> | companiesCreateWithoutUsers_companies_usersTousersInput[] | companiesUncheckedCreateWithoutUsers_companies_usersTousersInput[]
    connectOrCreate?: companiesCreateOrConnectWithoutUsers_companies_usersTousersInput | companiesCreateOrConnectWithoutUsers_companies_usersTousersInput[]
    upsert?: companiesUpsertWithWhereUniqueWithoutUsers_companies_usersTousersInput | companiesUpsertWithWhereUniqueWithoutUsers_companies_usersTousersInput[]
    createMany?: companiesCreateManyUsers_companies_usersTousersInputEnvelope
    set?: companiesWhereUniqueInput | companiesWhereUniqueInput[]
    disconnect?: companiesWhereUniqueInput | companiesWhereUniqueInput[]
    delete?: companiesWhereUniqueInput | companiesWhereUniqueInput[]
    connect?: companiesWhereUniqueInput | companiesWhereUniqueInput[]
    update?: companiesUpdateWithWhereUniqueWithoutUsers_companies_usersTousersInput | companiesUpdateWithWhereUniqueWithoutUsers_companies_usersTousersInput[]
    updateMany?: companiesUpdateManyWithWhereWithoutUsers_companies_usersTousersInput | companiesUpdateManyWithWhereWithoutUsers_companies_usersTousersInput[]
    deleteMany?: companiesScalarWhereInput | companiesScalarWhereInput[]
  }

  export type presence_listUpdateManyWithoutUsers_presence_list_usersTousersNestedInput = {
    create?: XOR<presence_listCreateWithoutUsers_presence_list_usersTousersInput, presence_listUncheckedCreateWithoutUsers_presence_list_usersTousersInput> | presence_listCreateWithoutUsers_presence_list_usersTousersInput[] | presence_listUncheckedCreateWithoutUsers_presence_list_usersTousersInput[]
    connectOrCreate?: presence_listCreateOrConnectWithoutUsers_presence_list_usersTousersInput | presence_listCreateOrConnectWithoutUsers_presence_list_usersTousersInput[]
    upsert?: presence_listUpsertWithWhereUniqueWithoutUsers_presence_list_usersTousersInput | presence_listUpsertWithWhereUniqueWithoutUsers_presence_list_usersTousersInput[]
    createMany?: presence_listCreateManyUsers_presence_list_usersTousersInputEnvelope
    set?: presence_listWhereUniqueInput | presence_listWhereUniqueInput[]
    disconnect?: presence_listWhereUniqueInput | presence_listWhereUniqueInput[]
    delete?: presence_listWhereUniqueInput | presence_listWhereUniqueInput[]
    connect?: presence_listWhereUniqueInput | presence_listWhereUniqueInput[]
    update?: presence_listUpdateWithWhereUniqueWithoutUsers_presence_list_usersTousersInput | presence_listUpdateWithWhereUniqueWithoutUsers_presence_list_usersTousersInput[]
    updateMany?: presence_listUpdateManyWithWhereWithoutUsers_presence_list_usersTousersInput | presence_listUpdateManyWithWhereWithoutUsers_presence_list_usersTousersInput[]
    deleteMany?: presence_listScalarWhereInput | presence_listScalarWhereInput[]
  }

  export type registrationsUpdateManyWithoutUsers_registrations_usersTousersNestedInput = {
    create?: XOR<registrationsCreateWithoutUsers_registrations_usersTousersInput, registrationsUncheckedCreateWithoutUsers_registrations_usersTousersInput> | registrationsCreateWithoutUsers_registrations_usersTousersInput[] | registrationsUncheckedCreateWithoutUsers_registrations_usersTousersInput[]
    connectOrCreate?: registrationsCreateOrConnectWithoutUsers_registrations_usersTousersInput | registrationsCreateOrConnectWithoutUsers_registrations_usersTousersInput[]
    upsert?: registrationsUpsertWithWhereUniqueWithoutUsers_registrations_usersTousersInput | registrationsUpsertWithWhereUniqueWithoutUsers_registrations_usersTousersInput[]
    createMany?: registrationsCreateManyUsers_registrations_usersTousersInputEnvelope
    set?: registrationsWhereUniqueInput | registrationsWhereUniqueInput[]
    disconnect?: registrationsWhereUniqueInput | registrationsWhereUniqueInput[]
    delete?: registrationsWhereUniqueInput | registrationsWhereUniqueInput[]
    connect?: registrationsWhereUniqueInput | registrationsWhereUniqueInput[]
    update?: registrationsUpdateWithWhereUniqueWithoutUsers_registrations_usersTousersInput | registrationsUpdateWithWhereUniqueWithoutUsers_registrations_usersTousersInput[]
    updateMany?: registrationsUpdateManyWithWhereWithoutUsers_registrations_usersTousersInput | registrationsUpdateManyWithWhereWithoutUsers_registrations_usersTousersInput[]
    deleteMany?: registrationsScalarWhereInput | registrationsScalarWhereInput[]
  }

  export type tokensUpdateManyWithoutUsers_tokens_usersTousersNestedInput = {
    create?: XOR<tokensCreateWithoutUsers_tokens_usersTousersInput, tokensUncheckedCreateWithoutUsers_tokens_usersTousersInput> | tokensCreateWithoutUsers_tokens_usersTousersInput[] | tokensUncheckedCreateWithoutUsers_tokens_usersTousersInput[]
    connectOrCreate?: tokensCreateOrConnectWithoutUsers_tokens_usersTousersInput | tokensCreateOrConnectWithoutUsers_tokens_usersTousersInput[]
    upsert?: tokensUpsertWithWhereUniqueWithoutUsers_tokens_usersTousersInput | tokensUpsertWithWhereUniqueWithoutUsers_tokens_usersTousersInput[]
    createMany?: tokensCreateManyUsers_tokens_usersTousersInputEnvelope
    set?: tokensWhereUniqueInput | tokensWhereUniqueInput[]
    disconnect?: tokensWhereUniqueInput | tokensWhereUniqueInput[]
    delete?: tokensWhereUniqueInput | tokensWhereUniqueInput[]
    connect?: tokensWhereUniqueInput | tokensWhereUniqueInput[]
    update?: tokensUpdateWithWhereUniqueWithoutUsers_tokens_usersTousersInput | tokensUpdateWithWhereUniqueWithoutUsers_tokens_usersTousersInput[]
    updateMany?: tokensUpdateManyWithWhereWithoutUsers_tokens_usersTousersInput | tokensUpdateManyWithWhereWithoutUsers_tokens_usersTousersInput[]
    deleteMany?: tokensScalarWhereInput | tokensScalarWhereInput[]
  }

  export type companiesUpdateOneRequiredWithoutUsers_users_companiesTocompaniesNestedInput = {
    create?: XOR<companiesCreateWithoutUsers_users_companiesTocompaniesInput, companiesUncheckedCreateWithoutUsers_users_companiesTocompaniesInput>
    connectOrCreate?: companiesCreateOrConnectWithoutUsers_users_companiesTocompaniesInput
    upsert?: companiesUpsertWithoutUsers_users_companiesTocompaniesInput
    connect?: companiesWhereUniqueInput
    update?: XOR<XOR<companiesUpdateToOneWithWhereWithoutUsers_users_companiesTocompaniesInput, companiesUpdateWithoutUsers_users_companiesTocompaniesInput>, companiesUncheckedUpdateWithoutUsers_users_companiesTocompaniesInput>
  }

  export type users_rolesUpdateManyWithoutUsersNestedInput = {
    create?: XOR<users_rolesCreateWithoutUsersInput, users_rolesUncheckedCreateWithoutUsersInput> | users_rolesCreateWithoutUsersInput[] | users_rolesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: users_rolesCreateOrConnectWithoutUsersInput | users_rolesCreateOrConnectWithoutUsersInput[]
    upsert?: users_rolesUpsertWithWhereUniqueWithoutUsersInput | users_rolesUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: users_rolesCreateManyUsersInputEnvelope
    set?: users_rolesWhereUniqueInput | users_rolesWhereUniqueInput[]
    disconnect?: users_rolesWhereUniqueInput | users_rolesWhereUniqueInput[]
    delete?: users_rolesWhereUniqueInput | users_rolesWhereUniqueInput[]
    connect?: users_rolesWhereUniqueInput | users_rolesWhereUniqueInput[]
    update?: users_rolesUpdateWithWhereUniqueWithoutUsersInput | users_rolesUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: users_rolesUpdateManyWithWhereWithoutUsersInput | users_rolesUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: users_rolesScalarWhereInput | users_rolesScalarWhereInput[]
  }

  export type companiesUncheckedUpdateManyWithoutUsers_companies_usersTousersNestedInput = {
    create?: XOR<companiesCreateWithoutUsers_companies_usersTousersInput, companiesUncheckedCreateWithoutUsers_companies_usersTousersInput> | companiesCreateWithoutUsers_companies_usersTousersInput[] | companiesUncheckedCreateWithoutUsers_companies_usersTousersInput[]
    connectOrCreate?: companiesCreateOrConnectWithoutUsers_companies_usersTousersInput | companiesCreateOrConnectWithoutUsers_companies_usersTousersInput[]
    upsert?: companiesUpsertWithWhereUniqueWithoutUsers_companies_usersTousersInput | companiesUpsertWithWhereUniqueWithoutUsers_companies_usersTousersInput[]
    createMany?: companiesCreateManyUsers_companies_usersTousersInputEnvelope
    set?: companiesWhereUniqueInput | companiesWhereUniqueInput[]
    disconnect?: companiesWhereUniqueInput | companiesWhereUniqueInput[]
    delete?: companiesWhereUniqueInput | companiesWhereUniqueInput[]
    connect?: companiesWhereUniqueInput | companiesWhereUniqueInput[]
    update?: companiesUpdateWithWhereUniqueWithoutUsers_companies_usersTousersInput | companiesUpdateWithWhereUniqueWithoutUsers_companies_usersTousersInput[]
    updateMany?: companiesUpdateManyWithWhereWithoutUsers_companies_usersTousersInput | companiesUpdateManyWithWhereWithoutUsers_companies_usersTousersInput[]
    deleteMany?: companiesScalarWhereInput | companiesScalarWhereInput[]
  }

  export type presence_listUncheckedUpdateManyWithoutUsers_presence_list_usersTousersNestedInput = {
    create?: XOR<presence_listCreateWithoutUsers_presence_list_usersTousersInput, presence_listUncheckedCreateWithoutUsers_presence_list_usersTousersInput> | presence_listCreateWithoutUsers_presence_list_usersTousersInput[] | presence_listUncheckedCreateWithoutUsers_presence_list_usersTousersInput[]
    connectOrCreate?: presence_listCreateOrConnectWithoutUsers_presence_list_usersTousersInput | presence_listCreateOrConnectWithoutUsers_presence_list_usersTousersInput[]
    upsert?: presence_listUpsertWithWhereUniqueWithoutUsers_presence_list_usersTousersInput | presence_listUpsertWithWhereUniqueWithoutUsers_presence_list_usersTousersInput[]
    createMany?: presence_listCreateManyUsers_presence_list_usersTousersInputEnvelope
    set?: presence_listWhereUniqueInput | presence_listWhereUniqueInput[]
    disconnect?: presence_listWhereUniqueInput | presence_listWhereUniqueInput[]
    delete?: presence_listWhereUniqueInput | presence_listWhereUniqueInput[]
    connect?: presence_listWhereUniqueInput | presence_listWhereUniqueInput[]
    update?: presence_listUpdateWithWhereUniqueWithoutUsers_presence_list_usersTousersInput | presence_listUpdateWithWhereUniqueWithoutUsers_presence_list_usersTousersInput[]
    updateMany?: presence_listUpdateManyWithWhereWithoutUsers_presence_list_usersTousersInput | presence_listUpdateManyWithWhereWithoutUsers_presence_list_usersTousersInput[]
    deleteMany?: presence_listScalarWhereInput | presence_listScalarWhereInput[]
  }

  export type registrationsUncheckedUpdateManyWithoutUsers_registrations_usersTousersNestedInput = {
    create?: XOR<registrationsCreateWithoutUsers_registrations_usersTousersInput, registrationsUncheckedCreateWithoutUsers_registrations_usersTousersInput> | registrationsCreateWithoutUsers_registrations_usersTousersInput[] | registrationsUncheckedCreateWithoutUsers_registrations_usersTousersInput[]
    connectOrCreate?: registrationsCreateOrConnectWithoutUsers_registrations_usersTousersInput | registrationsCreateOrConnectWithoutUsers_registrations_usersTousersInput[]
    upsert?: registrationsUpsertWithWhereUniqueWithoutUsers_registrations_usersTousersInput | registrationsUpsertWithWhereUniqueWithoutUsers_registrations_usersTousersInput[]
    createMany?: registrationsCreateManyUsers_registrations_usersTousersInputEnvelope
    set?: registrationsWhereUniqueInput | registrationsWhereUniqueInput[]
    disconnect?: registrationsWhereUniqueInput | registrationsWhereUniqueInput[]
    delete?: registrationsWhereUniqueInput | registrationsWhereUniqueInput[]
    connect?: registrationsWhereUniqueInput | registrationsWhereUniqueInput[]
    update?: registrationsUpdateWithWhereUniqueWithoutUsers_registrations_usersTousersInput | registrationsUpdateWithWhereUniqueWithoutUsers_registrations_usersTousersInput[]
    updateMany?: registrationsUpdateManyWithWhereWithoutUsers_registrations_usersTousersInput | registrationsUpdateManyWithWhereWithoutUsers_registrations_usersTousersInput[]
    deleteMany?: registrationsScalarWhereInput | registrationsScalarWhereInput[]
  }

  export type tokensUncheckedUpdateManyWithoutUsers_tokens_usersTousersNestedInput = {
    create?: XOR<tokensCreateWithoutUsers_tokens_usersTousersInput, tokensUncheckedCreateWithoutUsers_tokens_usersTousersInput> | tokensCreateWithoutUsers_tokens_usersTousersInput[] | tokensUncheckedCreateWithoutUsers_tokens_usersTousersInput[]
    connectOrCreate?: tokensCreateOrConnectWithoutUsers_tokens_usersTousersInput | tokensCreateOrConnectWithoutUsers_tokens_usersTousersInput[]
    upsert?: tokensUpsertWithWhereUniqueWithoutUsers_tokens_usersTousersInput | tokensUpsertWithWhereUniqueWithoutUsers_tokens_usersTousersInput[]
    createMany?: tokensCreateManyUsers_tokens_usersTousersInputEnvelope
    set?: tokensWhereUniqueInput | tokensWhereUniqueInput[]
    disconnect?: tokensWhereUniqueInput | tokensWhereUniqueInput[]
    delete?: tokensWhereUniqueInput | tokensWhereUniqueInput[]
    connect?: tokensWhereUniqueInput | tokensWhereUniqueInput[]
    update?: tokensUpdateWithWhereUniqueWithoutUsers_tokens_usersTousersInput | tokensUpdateWithWhereUniqueWithoutUsers_tokens_usersTousersInput[]
    updateMany?: tokensUpdateManyWithWhereWithoutUsers_tokens_usersTousersInput | tokensUpdateManyWithWhereWithoutUsers_tokens_usersTousersInput[]
    deleteMany?: tokensScalarWhereInput | tokensScalarWhereInput[]
  }

  export type users_rolesUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<users_rolesCreateWithoutUsersInput, users_rolesUncheckedCreateWithoutUsersInput> | users_rolesCreateWithoutUsersInput[] | users_rolesUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: users_rolesCreateOrConnectWithoutUsersInput | users_rolesCreateOrConnectWithoutUsersInput[]
    upsert?: users_rolesUpsertWithWhereUniqueWithoutUsersInput | users_rolesUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: users_rolesCreateManyUsersInputEnvelope
    set?: users_rolesWhereUniqueInput | users_rolesWhereUniqueInput[]
    disconnect?: users_rolesWhereUniqueInput | users_rolesWhereUniqueInput[]
    delete?: users_rolesWhereUniqueInput | users_rolesWhereUniqueInput[]
    connect?: users_rolesWhereUniqueInput | users_rolesWhereUniqueInput[]
    update?: users_rolesUpdateWithWhereUniqueWithoutUsersInput | users_rolesUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: users_rolesUpdateManyWithWhereWithoutUsersInput | users_rolesUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: users_rolesScalarWhereInput | users_rolesScalarWhereInput[]
  }

  export type rolesCreateNestedOneWithoutUsers_rolesInput = {
    create?: XOR<rolesCreateWithoutUsers_rolesInput, rolesUncheckedCreateWithoutUsers_rolesInput>
    connectOrCreate?: rolesCreateOrConnectWithoutUsers_rolesInput
    connect?: rolesWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutUsers_rolesInput = {
    create?: XOR<usersCreateWithoutUsers_rolesInput, usersUncheckedCreateWithoutUsers_rolesInput>
    connectOrCreate?: usersCreateOrConnectWithoutUsers_rolesInput
    connect?: usersWhereUniqueInput
  }

  export type rolesUpdateOneRequiredWithoutUsers_rolesNestedInput = {
    create?: XOR<rolesCreateWithoutUsers_rolesInput, rolesUncheckedCreateWithoutUsers_rolesInput>
    connectOrCreate?: rolesCreateOrConnectWithoutUsers_rolesInput
    upsert?: rolesUpsertWithoutUsers_rolesInput
    connect?: rolesWhereUniqueInput
    update?: XOR<XOR<rolesUpdateToOneWithWhereWithoutUsers_rolesInput, rolesUpdateWithoutUsers_rolesInput>, rolesUncheckedUpdateWithoutUsers_rolesInput>
  }

  export type usersUpdateOneRequiredWithoutUsers_rolesNestedInput = {
    create?: XOR<usersCreateWithoutUsers_rolesInput, usersUncheckedCreateWithoutUsers_rolesInput>
    connectOrCreate?: usersCreateOrConnectWithoutUsers_rolesInput
    upsert?: usersUpsertWithoutUsers_rolesInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutUsers_rolesInput, usersUpdateWithoutUsers_rolesInput>, usersUncheckedUpdateWithoutUsers_rolesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBytesNullableFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel> | null
    in?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    notIn?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    not?: NestedBytesNullableFilter<$PrismaModel> | Uint8Array | null
  }

  export type NestedBytesNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel> | null
    in?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    notIn?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    not?: NestedBytesNullableWithAggregatesFilter<$PrismaModel> | Uint8Array | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBytesNullableFilter<$PrismaModel>
    _max?: NestedBytesNullableFilter<$PrismaModel>
  }

  export type NestedBytesFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel>
    in?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel>
    notIn?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel>
    not?: NestedBytesFilter<$PrismaModel> | Uint8Array
  }

  export type NestedBytesWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel>
    in?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel>
    notIn?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel>
    not?: NestedBytesWithAggregatesFilter<$PrismaModel> | Uint8Array
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBytesFilter<$PrismaModel>
    _max?: NestedBytesFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type coursesCreateWithoutRenamedclass_Renamedclass_coursesTocoursesInput = {
    id: string
    description?: string | null
    created_at?: Date | string
    name: string
    registration_value: Decimal | DecimalJsLike | number | string
    workload: Decimal | DecimalJsLike | number | string
    monthly_fee_value: Decimal | DecimalJsLike | number | string
    minimum_grade: Decimal | DecimalJsLike | number | string
    maximum_grade: Decimal | DecimalJsLike | number | string
    minimum_frequency: Decimal | DecimalJsLike | number | string
    syllabus?: Uint8Array | null
    companies_courses_companiesTocompanies: companiesCreateNestedOneWithoutCourses_courses_companiesTocompaniesInput
    levels_levels_coursesTocourses?: levelsCreateNestedManyWithoutCourses_levels_coursesTocoursesInput
  }

  export type coursesUncheckedCreateWithoutRenamedclass_Renamedclass_coursesTocoursesInput = {
    id: string
    description?: string | null
    created_at?: Date | string
    name: string
    registration_value: Decimal | DecimalJsLike | number | string
    companies: string
    workload: Decimal | DecimalJsLike | number | string
    monthly_fee_value: Decimal | DecimalJsLike | number | string
    minimum_grade: Decimal | DecimalJsLike | number | string
    maximum_grade: Decimal | DecimalJsLike | number | string
    minimum_frequency: Decimal | DecimalJsLike | number | string
    syllabus?: Uint8Array | null
    levels_levels_coursesTocourses?: levelsUncheckedCreateNestedManyWithoutCourses_levels_coursesTocoursesInput
  }

  export type coursesCreateOrConnectWithoutRenamedclass_Renamedclass_coursesTocoursesInput = {
    where: coursesWhereUniqueInput
    create: XOR<coursesCreateWithoutRenamedclass_Renamedclass_coursesTocoursesInput, coursesUncheckedCreateWithoutRenamedclass_Renamedclass_coursesTocoursesInput>
  }

  export type class_daysCreateWithoutRenamedclassInput = {
    id: string
    initial_date: Date | string
    final_date: Date | string
  }

  export type class_daysUncheckedCreateWithoutRenamedclassInput = {
    id: string
    initial_date: Date | string
    final_date: Date | string
  }

  export type class_daysCreateOrConnectWithoutRenamedclassInput = {
    where: class_daysWhereUniqueInput
    create: XOR<class_daysCreateWithoutRenamedclassInput, class_daysUncheckedCreateWithoutRenamedclassInput>
  }

  export type class_daysCreateManyRenamedclassInputEnvelope = {
    data: class_daysCreateManyRenamedclassInput | class_daysCreateManyRenamedclassInput[]
    skipDuplicates?: boolean
  }

  export type classesCreateWithoutRenamedclassInput = {
    id: string
    theme: string
    start_date: Date | string
    end_date: Date | string
    presence_list_presence_list_classesToclasses?: presence_listCreateNestedManyWithoutClasses_presence_list_classesToclassesInput
  }

  export type classesUncheckedCreateWithoutRenamedclassInput = {
    id: string
    theme: string
    start_date: Date | string
    end_date: Date | string
    presence_list_presence_list_classesToclasses?: presence_listUncheckedCreateNestedManyWithoutClasses_presence_list_classesToclassesInput
  }

  export type classesCreateOrConnectWithoutRenamedclassInput = {
    where: classesWhereUniqueInput
    create: XOR<classesCreateWithoutRenamedclassInput, classesUncheckedCreateWithoutRenamedclassInput>
  }

  export type classesCreateManyRenamedclassInputEnvelope = {
    data: classesCreateManyRenamedclassInput | classesCreateManyRenamedclassInput[]
    skipDuplicates?: boolean
  }

  export type coursesUpsertWithoutRenamedclass_Renamedclass_coursesTocoursesInput = {
    update: XOR<coursesUpdateWithoutRenamedclass_Renamedclass_coursesTocoursesInput, coursesUncheckedUpdateWithoutRenamedclass_Renamedclass_coursesTocoursesInput>
    create: XOR<coursesCreateWithoutRenamedclass_Renamedclass_coursesTocoursesInput, coursesUncheckedCreateWithoutRenamedclass_Renamedclass_coursesTocoursesInput>
    where?: coursesWhereInput
  }

  export type coursesUpdateToOneWithWhereWithoutRenamedclass_Renamedclass_coursesTocoursesInput = {
    where?: coursesWhereInput
    data: XOR<coursesUpdateWithoutRenamedclass_Renamedclass_coursesTocoursesInput, coursesUncheckedUpdateWithoutRenamedclass_Renamedclass_coursesTocoursesInput>
  }

  export type coursesUpdateWithoutRenamedclass_Renamedclass_coursesTocoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    registration_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    workload?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    monthly_fee_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    minimum_grade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    maximum_grade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    minimum_frequency?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    syllabus?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    companies_courses_companiesTocompanies?: companiesUpdateOneRequiredWithoutCourses_courses_companiesTocompaniesNestedInput
    levels_levels_coursesTocourses?: levelsUpdateManyWithoutCourses_levels_coursesTocoursesNestedInput
  }

  export type coursesUncheckedUpdateWithoutRenamedclass_Renamedclass_coursesTocoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    registration_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    companies?: StringFieldUpdateOperationsInput | string
    workload?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    monthly_fee_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    minimum_grade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    maximum_grade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    minimum_frequency?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    syllabus?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    levels_levels_coursesTocourses?: levelsUncheckedUpdateManyWithoutCourses_levels_coursesTocoursesNestedInput
  }

  export type class_daysUpsertWithWhereUniqueWithoutRenamedclassInput = {
    where: class_daysWhereUniqueInput
    update: XOR<class_daysUpdateWithoutRenamedclassInput, class_daysUncheckedUpdateWithoutRenamedclassInput>
    create: XOR<class_daysCreateWithoutRenamedclassInput, class_daysUncheckedCreateWithoutRenamedclassInput>
  }

  export type class_daysUpdateWithWhereUniqueWithoutRenamedclassInput = {
    where: class_daysWhereUniqueInput
    data: XOR<class_daysUpdateWithoutRenamedclassInput, class_daysUncheckedUpdateWithoutRenamedclassInput>
  }

  export type class_daysUpdateManyWithWhereWithoutRenamedclassInput = {
    where: class_daysScalarWhereInput
    data: XOR<class_daysUpdateManyMutationInput, class_daysUncheckedUpdateManyWithoutRenamedclassInput>
  }

  export type class_daysScalarWhereInput = {
    AND?: class_daysScalarWhereInput | class_daysScalarWhereInput[]
    OR?: class_daysScalarWhereInput[]
    NOT?: class_daysScalarWhereInput | class_daysScalarWhereInput[]
    id?: StringFilter<"class_days"> | string
    initial_date?: DateTimeFilter<"class_days"> | Date | string
    final_date?: DateTimeFilter<"class_days"> | Date | string
    class?: StringFilter<"class_days"> | string
  }

  export type classesUpsertWithWhereUniqueWithoutRenamedclassInput = {
    where: classesWhereUniqueInput
    update: XOR<classesUpdateWithoutRenamedclassInput, classesUncheckedUpdateWithoutRenamedclassInput>
    create: XOR<classesCreateWithoutRenamedclassInput, classesUncheckedCreateWithoutRenamedclassInput>
  }

  export type classesUpdateWithWhereUniqueWithoutRenamedclassInput = {
    where: classesWhereUniqueInput
    data: XOR<classesUpdateWithoutRenamedclassInput, classesUncheckedUpdateWithoutRenamedclassInput>
  }

  export type classesUpdateManyWithWhereWithoutRenamedclassInput = {
    where: classesScalarWhereInput
    data: XOR<classesUpdateManyMutationInput, classesUncheckedUpdateManyWithoutRenamedclassInput>
  }

  export type classesScalarWhereInput = {
    AND?: classesScalarWhereInput | classesScalarWhereInput[]
    OR?: classesScalarWhereInput[]
    NOT?: classesScalarWhereInput | classesScalarWhereInput[]
    id?: StringFilter<"classes"> | string
    theme?: StringFilter<"classes"> | string
    start_date?: DateTimeFilter<"classes"> | Date | string
    end_date?: DateTimeFilter<"classes"> | Date | string
    class?: StringFilter<"classes"> | string
  }

  export type RenamedclassCreateWithoutClass_daysInput = {
    id: string
    nome: string
    vacancies: Decimal | DecimalJsLike | number | string
    courses_Renamedclass_coursesTocourses: coursesCreateNestedOneWithoutRenamedclass_Renamedclass_coursesTocoursesInput
    classes?: classesCreateNestedManyWithoutRenamedclassInput
  }

  export type RenamedclassUncheckedCreateWithoutClass_daysInput = {
    id: string
    nome: string
    courses: string
    vacancies: Decimal | DecimalJsLike | number | string
    classes?: classesUncheckedCreateNestedManyWithoutRenamedclassInput
  }

  export type RenamedclassCreateOrConnectWithoutClass_daysInput = {
    where: RenamedclassWhereUniqueInput
    create: XOR<RenamedclassCreateWithoutClass_daysInput, RenamedclassUncheckedCreateWithoutClass_daysInput>
  }

  export type RenamedclassUpsertWithoutClass_daysInput = {
    update: XOR<RenamedclassUpdateWithoutClass_daysInput, RenamedclassUncheckedUpdateWithoutClass_daysInput>
    create: XOR<RenamedclassCreateWithoutClass_daysInput, RenamedclassUncheckedCreateWithoutClass_daysInput>
    where?: RenamedclassWhereInput
  }

  export type RenamedclassUpdateToOneWithWhereWithoutClass_daysInput = {
    where?: RenamedclassWhereInput
    data: XOR<RenamedclassUpdateWithoutClass_daysInput, RenamedclassUncheckedUpdateWithoutClass_daysInput>
  }

  export type RenamedclassUpdateWithoutClass_daysInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    vacancies?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    courses_Renamedclass_coursesTocourses?: coursesUpdateOneRequiredWithoutRenamedclass_Renamedclass_coursesTocoursesNestedInput
    classes?: classesUpdateManyWithoutRenamedclassNestedInput
  }

  export type RenamedclassUncheckedUpdateWithoutClass_daysInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    courses?: StringFieldUpdateOperationsInput | string
    vacancies?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    classes?: classesUncheckedUpdateManyWithoutRenamedclassNestedInput
  }

  export type RenamedclassCreateWithoutClassesInput = {
    id: string
    nome: string
    vacancies: Decimal | DecimalJsLike | number | string
    courses_Renamedclass_coursesTocourses: coursesCreateNestedOneWithoutRenamedclass_Renamedclass_coursesTocoursesInput
    class_days?: class_daysCreateNestedManyWithoutRenamedclassInput
  }

  export type RenamedclassUncheckedCreateWithoutClassesInput = {
    id: string
    nome: string
    courses: string
    vacancies: Decimal | DecimalJsLike | number | string
    class_days?: class_daysUncheckedCreateNestedManyWithoutRenamedclassInput
  }

  export type RenamedclassCreateOrConnectWithoutClassesInput = {
    where: RenamedclassWhereUniqueInput
    create: XOR<RenamedclassCreateWithoutClassesInput, RenamedclassUncheckedCreateWithoutClassesInput>
  }

  export type presence_listCreateWithoutClasses_presence_list_classesToclassesInput = {
    id: string
    is_present?: boolean
    users_presence_list_usersTousers: usersCreateNestedOneWithoutPresence_list_presence_list_usersTousersInput
  }

  export type presence_listUncheckedCreateWithoutClasses_presence_list_classesToclassesInput = {
    id: string
    is_present?: boolean
    users: string
  }

  export type presence_listCreateOrConnectWithoutClasses_presence_list_classesToclassesInput = {
    where: presence_listWhereUniqueInput
    create: XOR<presence_listCreateWithoutClasses_presence_list_classesToclassesInput, presence_listUncheckedCreateWithoutClasses_presence_list_classesToclassesInput>
  }

  export type presence_listCreateManyClasses_presence_list_classesToclassesInputEnvelope = {
    data: presence_listCreateManyClasses_presence_list_classesToclassesInput | presence_listCreateManyClasses_presence_list_classesToclassesInput[]
    skipDuplicates?: boolean
  }

  export type RenamedclassUpsertWithoutClassesInput = {
    update: XOR<RenamedclassUpdateWithoutClassesInput, RenamedclassUncheckedUpdateWithoutClassesInput>
    create: XOR<RenamedclassCreateWithoutClassesInput, RenamedclassUncheckedCreateWithoutClassesInput>
    where?: RenamedclassWhereInput
  }

  export type RenamedclassUpdateToOneWithWhereWithoutClassesInput = {
    where?: RenamedclassWhereInput
    data: XOR<RenamedclassUpdateWithoutClassesInput, RenamedclassUncheckedUpdateWithoutClassesInput>
  }

  export type RenamedclassUpdateWithoutClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    vacancies?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    courses_Renamedclass_coursesTocourses?: coursesUpdateOneRequiredWithoutRenamedclass_Renamedclass_coursesTocoursesNestedInput
    class_days?: class_daysUpdateManyWithoutRenamedclassNestedInput
  }

  export type RenamedclassUncheckedUpdateWithoutClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    courses?: StringFieldUpdateOperationsInput | string
    vacancies?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    class_days?: class_daysUncheckedUpdateManyWithoutRenamedclassNestedInput
  }

  export type presence_listUpsertWithWhereUniqueWithoutClasses_presence_list_classesToclassesInput = {
    where: presence_listWhereUniqueInput
    update: XOR<presence_listUpdateWithoutClasses_presence_list_classesToclassesInput, presence_listUncheckedUpdateWithoutClasses_presence_list_classesToclassesInput>
    create: XOR<presence_listCreateWithoutClasses_presence_list_classesToclassesInput, presence_listUncheckedCreateWithoutClasses_presence_list_classesToclassesInput>
  }

  export type presence_listUpdateWithWhereUniqueWithoutClasses_presence_list_classesToclassesInput = {
    where: presence_listWhereUniqueInput
    data: XOR<presence_listUpdateWithoutClasses_presence_list_classesToclassesInput, presence_listUncheckedUpdateWithoutClasses_presence_list_classesToclassesInput>
  }

  export type presence_listUpdateManyWithWhereWithoutClasses_presence_list_classesToclassesInput = {
    where: presence_listScalarWhereInput
    data: XOR<presence_listUpdateManyMutationInput, presence_listUncheckedUpdateManyWithoutClasses_presence_list_classesToclassesInput>
  }

  export type presence_listScalarWhereInput = {
    AND?: presence_listScalarWhereInput | presence_listScalarWhereInput[]
    OR?: presence_listScalarWhereInput[]
    NOT?: presence_listScalarWhereInput | presence_listScalarWhereInput[]
    id?: StringFilter<"presence_list"> | string
    is_present?: BoolFilter<"presence_list"> | boolean
    users?: StringFilter<"presence_list"> | string
    classes?: StringFilter<"presence_list"> | string
  }

  export type companiesCreateWithoutClassrooms_classrooms_companiesTocompaniesInput = {
    id: string
    name: string
    created_at?: Date | string | null
    udpated_at?: Date | string | null
    address: string
    users_companies_usersTousers: usersCreateNestedOneWithoutCompanies_companies_usersTousersInput
    configs_configs_companiesTocompanies?: configsCreateNestedManyWithoutCompanies_configs_companiesTocompaniesInput
    courses_courses_companiesTocompanies?: coursesCreateNestedManyWithoutCompanies_courses_companiesTocompaniesInput
    registrations_registrations_companiesTocompanies?: registrationsCreateNestedManyWithoutCompanies_registrations_companiesTocompaniesInput
    users_users_companiesTocompanies?: usersCreateNestedManyWithoutCompanies_users_companiesTocompaniesInput
  }

  export type companiesUncheckedCreateWithoutClassrooms_classrooms_companiesTocompaniesInput = {
    id: string
    name: string
    created_at?: Date | string | null
    udpated_at?: Date | string | null
    users: string
    address: string
    configs_configs_companiesTocompanies?: configsUncheckedCreateNestedManyWithoutCompanies_configs_companiesTocompaniesInput
    courses_courses_companiesTocompanies?: coursesUncheckedCreateNestedManyWithoutCompanies_courses_companiesTocompaniesInput
    registrations_registrations_companiesTocompanies?: registrationsUncheckedCreateNestedManyWithoutCompanies_registrations_companiesTocompaniesInput
    users_users_companiesTocompanies?: usersUncheckedCreateNestedManyWithoutCompanies_users_companiesTocompaniesInput
  }

  export type companiesCreateOrConnectWithoutClassrooms_classrooms_companiesTocompaniesInput = {
    where: companiesWhereUniqueInput
    create: XOR<companiesCreateWithoutClassrooms_classrooms_companiesTocompaniesInput, companiesUncheckedCreateWithoutClassrooms_classrooms_companiesTocompaniesInput>
  }

  export type companiesUpsertWithoutClassrooms_classrooms_companiesTocompaniesInput = {
    update: XOR<companiesUpdateWithoutClassrooms_classrooms_companiesTocompaniesInput, companiesUncheckedUpdateWithoutClassrooms_classrooms_companiesTocompaniesInput>
    create: XOR<companiesCreateWithoutClassrooms_classrooms_companiesTocompaniesInput, companiesUncheckedCreateWithoutClassrooms_classrooms_companiesTocompaniesInput>
    where?: companiesWhereInput
  }

  export type companiesUpdateToOneWithWhereWithoutClassrooms_classrooms_companiesTocompaniesInput = {
    where?: companiesWhereInput
    data: XOR<companiesUpdateWithoutClassrooms_classrooms_companiesTocompaniesInput, companiesUncheckedUpdateWithoutClassrooms_classrooms_companiesTocompaniesInput>
  }

  export type companiesUpdateWithoutClassrooms_classrooms_companiesTocompaniesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    udpated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: StringFieldUpdateOperationsInput | string
    users_companies_usersTousers?: usersUpdateOneRequiredWithoutCompanies_companies_usersTousersNestedInput
    configs_configs_companiesTocompanies?: configsUpdateManyWithoutCompanies_configs_companiesTocompaniesNestedInput
    courses_courses_companiesTocompanies?: coursesUpdateManyWithoutCompanies_courses_companiesTocompaniesNestedInput
    registrations_registrations_companiesTocompanies?: registrationsUpdateManyWithoutCompanies_registrations_companiesTocompaniesNestedInput
    users_users_companiesTocompanies?: usersUpdateManyWithoutCompanies_users_companiesTocompaniesNestedInput
  }

  export type companiesUncheckedUpdateWithoutClassrooms_classrooms_companiesTocompaniesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    udpated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    configs_configs_companiesTocompanies?: configsUncheckedUpdateManyWithoutCompanies_configs_companiesTocompaniesNestedInput
    courses_courses_companiesTocompanies?: coursesUncheckedUpdateManyWithoutCompanies_courses_companiesTocompaniesNestedInput
    registrations_registrations_companiesTocompanies?: registrationsUncheckedUpdateManyWithoutCompanies_registrations_companiesTocompaniesNestedInput
    users_users_companiesTocompanies?: usersUncheckedUpdateManyWithoutCompanies_users_companiesTocompaniesNestedInput
  }

  export type classroomsCreateWithoutCompanies_classrooms_companiesTocompaniesInput = {
    id: string
    number: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    block?: string | null
  }

  export type classroomsUncheckedCreateWithoutCompanies_classrooms_companiesTocompaniesInput = {
    id: string
    number: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    block?: string | null
  }

  export type classroomsCreateOrConnectWithoutCompanies_classrooms_companiesTocompaniesInput = {
    where: classroomsWhereUniqueInput
    create: XOR<classroomsCreateWithoutCompanies_classrooms_companiesTocompaniesInput, classroomsUncheckedCreateWithoutCompanies_classrooms_companiesTocompaniesInput>
  }

  export type classroomsCreateManyCompanies_classrooms_companiesTocompaniesInputEnvelope = {
    data: classroomsCreateManyCompanies_classrooms_companiesTocompaniesInput | classroomsCreateManyCompanies_classrooms_companiesTocompaniesInput[]
    skipDuplicates?: boolean
  }

  export type usersCreateWithoutCompanies_companies_usersTousersInput = {
    id: string
    name: string
    email: string
    password: string
    avatar_url?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    cpf?: string | null
    phone?: string | null
    username: string
    gender?: string | null
    date_of_birth?: Date | string | null
    active?: boolean | null
    address?: string | null
    presence_list_presence_list_usersTousers?: presence_listCreateNestedManyWithoutUsers_presence_list_usersTousersInput
    registrations_registrations_usersTousers?: registrationsCreateNestedManyWithoutUsers_registrations_usersTousersInput
    tokens_tokens_usersTousers?: tokensCreateNestedManyWithoutUsers_tokens_usersTousersInput
    companies_users_companiesTocompanies: companiesCreateNestedOneWithoutUsers_users_companiesTocompaniesInput
    users_roles?: users_rolesCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutCompanies_companies_usersTousersInput = {
    id: string
    name: string
    email: string
    password: string
    avatar_url?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    cpf?: string | null
    phone?: string | null
    username: string
    gender?: string | null
    date_of_birth?: Date | string | null
    active?: boolean | null
    address?: string | null
    companies: string
    presence_list_presence_list_usersTousers?: presence_listUncheckedCreateNestedManyWithoutUsers_presence_list_usersTousersInput
    registrations_registrations_usersTousers?: registrationsUncheckedCreateNestedManyWithoutUsers_registrations_usersTousersInput
    tokens_tokens_usersTousers?: tokensUncheckedCreateNestedManyWithoutUsers_tokens_usersTousersInput
    users_roles?: users_rolesUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutCompanies_companies_usersTousersInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutCompanies_companies_usersTousersInput, usersUncheckedCreateWithoutCompanies_companies_usersTousersInput>
  }

  export type configsCreateWithoutCompanies_configs_companiesTocompaniesInput = {
    id: string
    registrations_time?: Decimal | DecimalJsLike | number | string
  }

  export type configsUncheckedCreateWithoutCompanies_configs_companiesTocompaniesInput = {
    id: string
    registrations_time?: Decimal | DecimalJsLike | number | string
  }

  export type configsCreateOrConnectWithoutCompanies_configs_companiesTocompaniesInput = {
    where: configsWhereUniqueInput
    create: XOR<configsCreateWithoutCompanies_configs_companiesTocompaniesInput, configsUncheckedCreateWithoutCompanies_configs_companiesTocompaniesInput>
  }

  export type configsCreateManyCompanies_configs_companiesTocompaniesInputEnvelope = {
    data: configsCreateManyCompanies_configs_companiesTocompaniesInput | configsCreateManyCompanies_configs_companiesTocompaniesInput[]
    skipDuplicates?: boolean
  }

  export type coursesCreateWithoutCompanies_courses_companiesTocompaniesInput = {
    id: string
    description?: string | null
    created_at?: Date | string
    name: string
    registration_value: Decimal | DecimalJsLike | number | string
    workload: Decimal | DecimalJsLike | number | string
    monthly_fee_value: Decimal | DecimalJsLike | number | string
    minimum_grade: Decimal | DecimalJsLike | number | string
    maximum_grade: Decimal | DecimalJsLike | number | string
    minimum_frequency: Decimal | DecimalJsLike | number | string
    syllabus?: Uint8Array | null
    Renamedclass_Renamedclass_coursesTocourses?: RenamedclassCreateNestedManyWithoutCourses_Renamedclass_coursesTocoursesInput
    levels_levels_coursesTocourses?: levelsCreateNestedManyWithoutCourses_levels_coursesTocoursesInput
  }

  export type coursesUncheckedCreateWithoutCompanies_courses_companiesTocompaniesInput = {
    id: string
    description?: string | null
    created_at?: Date | string
    name: string
    registration_value: Decimal | DecimalJsLike | number | string
    workload: Decimal | DecimalJsLike | number | string
    monthly_fee_value: Decimal | DecimalJsLike | number | string
    minimum_grade: Decimal | DecimalJsLike | number | string
    maximum_grade: Decimal | DecimalJsLike | number | string
    minimum_frequency: Decimal | DecimalJsLike | number | string
    syllabus?: Uint8Array | null
    Renamedclass_Renamedclass_coursesTocourses?: RenamedclassUncheckedCreateNestedManyWithoutCourses_Renamedclass_coursesTocoursesInput
    levels_levels_coursesTocourses?: levelsUncheckedCreateNestedManyWithoutCourses_levels_coursesTocoursesInput
  }

  export type coursesCreateOrConnectWithoutCompanies_courses_companiesTocompaniesInput = {
    where: coursesWhereUniqueInput
    create: XOR<coursesCreateWithoutCompanies_courses_companiesTocompaniesInput, coursesUncheckedCreateWithoutCompanies_courses_companiesTocompaniesInput>
  }

  export type coursesCreateManyCompanies_courses_companiesTocompaniesInputEnvelope = {
    data: coursesCreateManyCompanies_courses_companiesTocompaniesInput | coursesCreateManyCompanies_courses_companiesTocompaniesInput[]
    skipDuplicates?: boolean
  }

  export type registrationsCreateWithoutCompanies_registrations_companiesTocompaniesInput = {
    id: string
    start_date?: Date | string
    monthly_fee_amount?: Decimal | DecimalJsLike | number | string
    created_at?: Date | string | null
    locked?: boolean | null
    completed?: boolean | null
    monthly_fee_monthly_fee_registrationsToregistrations?: monthly_feeCreateNestedManyWithoutRegistrations_monthly_fee_registrationsToregistrationsInput
    records_of_students_records_of_students_registrationsToregistrations?: records_of_studentsCreateNestedManyWithoutRegistrations_records_of_students_registrationsToregistrationsInput
    users_registrations_usersTousers?: usersCreateNestedOneWithoutRegistrations_registrations_usersTousersInput
  }

  export type registrationsUncheckedCreateWithoutCompanies_registrations_companiesTocompaniesInput = {
    id: string
    start_date?: Date | string
    monthly_fee_amount?: Decimal | DecimalJsLike | number | string
    created_at?: Date | string | null
    locked?: boolean | null
    completed?: boolean | null
    users?: string | null
    monthly_fee_monthly_fee_registrationsToregistrations?: monthly_feeUncheckedCreateNestedManyWithoutRegistrations_monthly_fee_registrationsToregistrationsInput
    records_of_students_records_of_students_registrationsToregistrations?: records_of_studentsUncheckedCreateNestedManyWithoutRegistrations_records_of_students_registrationsToregistrationsInput
  }

  export type registrationsCreateOrConnectWithoutCompanies_registrations_companiesTocompaniesInput = {
    where: registrationsWhereUniqueInput
    create: XOR<registrationsCreateWithoutCompanies_registrations_companiesTocompaniesInput, registrationsUncheckedCreateWithoutCompanies_registrations_companiesTocompaniesInput>
  }

  export type registrationsCreateManyCompanies_registrations_companiesTocompaniesInputEnvelope = {
    data: registrationsCreateManyCompanies_registrations_companiesTocompaniesInput | registrationsCreateManyCompanies_registrations_companiesTocompaniesInput[]
    skipDuplicates?: boolean
  }

  export type usersCreateWithoutCompanies_users_companiesTocompaniesInput = {
    id: string
    name: string
    email: string
    password: string
    avatar_url?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    cpf?: string | null
    phone?: string | null
    username: string
    gender?: string | null
    date_of_birth?: Date | string | null
    active?: boolean | null
    address?: string | null
    companies_companies_usersTousers?: companiesCreateNestedManyWithoutUsers_companies_usersTousersInput
    presence_list_presence_list_usersTousers?: presence_listCreateNestedManyWithoutUsers_presence_list_usersTousersInput
    registrations_registrations_usersTousers?: registrationsCreateNestedManyWithoutUsers_registrations_usersTousersInput
    tokens_tokens_usersTousers?: tokensCreateNestedManyWithoutUsers_tokens_usersTousersInput
    users_roles?: users_rolesCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutCompanies_users_companiesTocompaniesInput = {
    id: string
    name: string
    email: string
    password: string
    avatar_url?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    cpf?: string | null
    phone?: string | null
    username: string
    gender?: string | null
    date_of_birth?: Date | string | null
    active?: boolean | null
    address?: string | null
    companies_companies_usersTousers?: companiesUncheckedCreateNestedManyWithoutUsers_companies_usersTousersInput
    presence_list_presence_list_usersTousers?: presence_listUncheckedCreateNestedManyWithoutUsers_presence_list_usersTousersInput
    registrations_registrations_usersTousers?: registrationsUncheckedCreateNestedManyWithoutUsers_registrations_usersTousersInput
    tokens_tokens_usersTousers?: tokensUncheckedCreateNestedManyWithoutUsers_tokens_usersTousersInput
    users_roles?: users_rolesUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutCompanies_users_companiesTocompaniesInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutCompanies_users_companiesTocompaniesInput, usersUncheckedCreateWithoutCompanies_users_companiesTocompaniesInput>
  }

  export type usersCreateManyCompanies_users_companiesTocompaniesInputEnvelope = {
    data: usersCreateManyCompanies_users_companiesTocompaniesInput | usersCreateManyCompanies_users_companiesTocompaniesInput[]
    skipDuplicates?: boolean
  }

  export type classroomsUpsertWithWhereUniqueWithoutCompanies_classrooms_companiesTocompaniesInput = {
    where: classroomsWhereUniqueInput
    update: XOR<classroomsUpdateWithoutCompanies_classrooms_companiesTocompaniesInput, classroomsUncheckedUpdateWithoutCompanies_classrooms_companiesTocompaniesInput>
    create: XOR<classroomsCreateWithoutCompanies_classrooms_companiesTocompaniesInput, classroomsUncheckedCreateWithoutCompanies_classrooms_companiesTocompaniesInput>
  }

  export type classroomsUpdateWithWhereUniqueWithoutCompanies_classrooms_companiesTocompaniesInput = {
    where: classroomsWhereUniqueInput
    data: XOR<classroomsUpdateWithoutCompanies_classrooms_companiesTocompaniesInput, classroomsUncheckedUpdateWithoutCompanies_classrooms_companiesTocompaniesInput>
  }

  export type classroomsUpdateManyWithWhereWithoutCompanies_classrooms_companiesTocompaniesInput = {
    where: classroomsScalarWhereInput
    data: XOR<classroomsUpdateManyMutationInput, classroomsUncheckedUpdateManyWithoutCompanies_classrooms_companiesTocompaniesInput>
  }

  export type classroomsScalarWhereInput = {
    AND?: classroomsScalarWhereInput | classroomsScalarWhereInput[]
    OR?: classroomsScalarWhereInput[]
    NOT?: classroomsScalarWhereInput | classroomsScalarWhereInput[]
    id?: StringFilter<"classrooms"> | string
    number?: DecimalFilter<"classrooms"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFilter<"classrooms"> | Date | string
    block?: StringNullableFilter<"classrooms"> | string | null
    companies?: StringNullableFilter<"classrooms"> | string | null
  }

  export type usersUpsertWithoutCompanies_companies_usersTousersInput = {
    update: XOR<usersUpdateWithoutCompanies_companies_usersTousersInput, usersUncheckedUpdateWithoutCompanies_companies_usersTousersInput>
    create: XOR<usersCreateWithoutCompanies_companies_usersTousersInput, usersUncheckedCreateWithoutCompanies_companies_usersTousersInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutCompanies_companies_usersTousersInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutCompanies_companies_usersTousersInput, usersUncheckedUpdateWithoutCompanies_companies_usersTousersInput>
  }

  export type usersUpdateWithoutCompanies_companies_usersTousersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    presence_list_presence_list_usersTousers?: presence_listUpdateManyWithoutUsers_presence_list_usersTousersNestedInput
    registrations_registrations_usersTousers?: registrationsUpdateManyWithoutUsers_registrations_usersTousersNestedInput
    tokens_tokens_usersTousers?: tokensUpdateManyWithoutUsers_tokens_usersTousersNestedInput
    companies_users_companiesTocompanies?: companiesUpdateOneRequiredWithoutUsers_users_companiesTocompaniesNestedInput
    users_roles?: users_rolesUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutCompanies_companies_usersTousersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    companies?: StringFieldUpdateOperationsInput | string
    presence_list_presence_list_usersTousers?: presence_listUncheckedUpdateManyWithoutUsers_presence_list_usersTousersNestedInput
    registrations_registrations_usersTousers?: registrationsUncheckedUpdateManyWithoutUsers_registrations_usersTousersNestedInput
    tokens_tokens_usersTousers?: tokensUncheckedUpdateManyWithoutUsers_tokens_usersTousersNestedInput
    users_roles?: users_rolesUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type configsUpsertWithWhereUniqueWithoutCompanies_configs_companiesTocompaniesInput = {
    where: configsWhereUniqueInput
    update: XOR<configsUpdateWithoutCompanies_configs_companiesTocompaniesInput, configsUncheckedUpdateWithoutCompanies_configs_companiesTocompaniesInput>
    create: XOR<configsCreateWithoutCompanies_configs_companiesTocompaniesInput, configsUncheckedCreateWithoutCompanies_configs_companiesTocompaniesInput>
  }

  export type configsUpdateWithWhereUniqueWithoutCompanies_configs_companiesTocompaniesInput = {
    where: configsWhereUniqueInput
    data: XOR<configsUpdateWithoutCompanies_configs_companiesTocompaniesInput, configsUncheckedUpdateWithoutCompanies_configs_companiesTocompaniesInput>
  }

  export type configsUpdateManyWithWhereWithoutCompanies_configs_companiesTocompaniesInput = {
    where: configsScalarWhereInput
    data: XOR<configsUpdateManyMutationInput, configsUncheckedUpdateManyWithoutCompanies_configs_companiesTocompaniesInput>
  }

  export type configsScalarWhereInput = {
    AND?: configsScalarWhereInput | configsScalarWhereInput[]
    OR?: configsScalarWhereInput[]
    NOT?: configsScalarWhereInput | configsScalarWhereInput[]
    id?: StringFilter<"configs"> | string
    registrations_time?: DecimalFilter<"configs"> | Decimal | DecimalJsLike | number | string
    companies?: StringFilter<"configs"> | string
  }

  export type coursesUpsertWithWhereUniqueWithoutCompanies_courses_companiesTocompaniesInput = {
    where: coursesWhereUniqueInput
    update: XOR<coursesUpdateWithoutCompanies_courses_companiesTocompaniesInput, coursesUncheckedUpdateWithoutCompanies_courses_companiesTocompaniesInput>
    create: XOR<coursesCreateWithoutCompanies_courses_companiesTocompaniesInput, coursesUncheckedCreateWithoutCompanies_courses_companiesTocompaniesInput>
  }

  export type coursesUpdateWithWhereUniqueWithoutCompanies_courses_companiesTocompaniesInput = {
    where: coursesWhereUniqueInput
    data: XOR<coursesUpdateWithoutCompanies_courses_companiesTocompaniesInput, coursesUncheckedUpdateWithoutCompanies_courses_companiesTocompaniesInput>
  }

  export type coursesUpdateManyWithWhereWithoutCompanies_courses_companiesTocompaniesInput = {
    where: coursesScalarWhereInput
    data: XOR<coursesUpdateManyMutationInput, coursesUncheckedUpdateManyWithoutCompanies_courses_companiesTocompaniesInput>
  }

  export type coursesScalarWhereInput = {
    AND?: coursesScalarWhereInput | coursesScalarWhereInput[]
    OR?: coursesScalarWhereInput[]
    NOT?: coursesScalarWhereInput | coursesScalarWhereInput[]
    id?: StringFilter<"courses"> | string
    description?: StringNullableFilter<"courses"> | string | null
    created_at?: DateTimeFilter<"courses"> | Date | string
    name?: StringFilter<"courses"> | string
    registration_value?: DecimalFilter<"courses"> | Decimal | DecimalJsLike | number | string
    companies?: StringFilter<"courses"> | string
    workload?: DecimalFilter<"courses"> | Decimal | DecimalJsLike | number | string
    monthly_fee_value?: DecimalFilter<"courses"> | Decimal | DecimalJsLike | number | string
    minimum_grade?: DecimalFilter<"courses"> | Decimal | DecimalJsLike | number | string
    maximum_grade?: DecimalFilter<"courses"> | Decimal | DecimalJsLike | number | string
    minimum_frequency?: DecimalFilter<"courses"> | Decimal | DecimalJsLike | number | string
    syllabus?: BytesNullableFilter<"courses"> | Uint8Array | null
  }

  export type registrationsUpsertWithWhereUniqueWithoutCompanies_registrations_companiesTocompaniesInput = {
    where: registrationsWhereUniqueInput
    update: XOR<registrationsUpdateWithoutCompanies_registrations_companiesTocompaniesInput, registrationsUncheckedUpdateWithoutCompanies_registrations_companiesTocompaniesInput>
    create: XOR<registrationsCreateWithoutCompanies_registrations_companiesTocompaniesInput, registrationsUncheckedCreateWithoutCompanies_registrations_companiesTocompaniesInput>
  }

  export type registrationsUpdateWithWhereUniqueWithoutCompanies_registrations_companiesTocompaniesInput = {
    where: registrationsWhereUniqueInput
    data: XOR<registrationsUpdateWithoutCompanies_registrations_companiesTocompaniesInput, registrationsUncheckedUpdateWithoutCompanies_registrations_companiesTocompaniesInput>
  }

  export type registrationsUpdateManyWithWhereWithoutCompanies_registrations_companiesTocompaniesInput = {
    where: registrationsScalarWhereInput
    data: XOR<registrationsUpdateManyMutationInput, registrationsUncheckedUpdateManyWithoutCompanies_registrations_companiesTocompaniesInput>
  }

  export type registrationsScalarWhereInput = {
    AND?: registrationsScalarWhereInput | registrationsScalarWhereInput[]
    OR?: registrationsScalarWhereInput[]
    NOT?: registrationsScalarWhereInput | registrationsScalarWhereInput[]
    id?: StringFilter<"registrations"> | string
    start_date?: DateTimeFilter<"registrations"> | Date | string
    monthly_fee_amount?: DecimalFilter<"registrations"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeNullableFilter<"registrations"> | Date | string | null
    locked?: BoolNullableFilter<"registrations"> | boolean | null
    completed?: BoolNullableFilter<"registrations"> | boolean | null
    users?: StringNullableFilter<"registrations"> | string | null
    companies?: StringNullableFilter<"registrations"> | string | null
  }

  export type usersUpsertWithWhereUniqueWithoutCompanies_users_companiesTocompaniesInput = {
    where: usersWhereUniqueInput
    update: XOR<usersUpdateWithoutCompanies_users_companiesTocompaniesInput, usersUncheckedUpdateWithoutCompanies_users_companiesTocompaniesInput>
    create: XOR<usersCreateWithoutCompanies_users_companiesTocompaniesInput, usersUncheckedCreateWithoutCompanies_users_companiesTocompaniesInput>
  }

  export type usersUpdateWithWhereUniqueWithoutCompanies_users_companiesTocompaniesInput = {
    where: usersWhereUniqueInput
    data: XOR<usersUpdateWithoutCompanies_users_companiesTocompaniesInput, usersUncheckedUpdateWithoutCompanies_users_companiesTocompaniesInput>
  }

  export type usersUpdateManyWithWhereWithoutCompanies_users_companiesTocompaniesInput = {
    where: usersScalarWhereInput
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyWithoutCompanies_users_companiesTocompaniesInput>
  }

  export type usersScalarWhereInput = {
    AND?: usersScalarWhereInput | usersScalarWhereInput[]
    OR?: usersScalarWhereInput[]
    NOT?: usersScalarWhereInput | usersScalarWhereInput[]
    id?: StringFilter<"users"> | string
    name?: StringFilter<"users"> | string
    email?: StringFilter<"users"> | string
    password?: StringFilter<"users"> | string
    avatar_url?: StringNullableFilter<"users"> | string | null
    created_at?: DateTimeNullableFilter<"users"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"users"> | Date | string | null
    cpf?: StringNullableFilter<"users"> | string | null
    phone?: StringNullableFilter<"users"> | string | null
    username?: StringFilter<"users"> | string
    gender?: StringNullableFilter<"users"> | string | null
    date_of_birth?: DateTimeNullableFilter<"users"> | Date | string | null
    active?: BoolNullableFilter<"users"> | boolean | null
    address?: StringNullableFilter<"users"> | string | null
    companies?: StringFilter<"users"> | string
  }

  export type companiesCreateWithoutConfigs_configs_companiesTocompaniesInput = {
    id: string
    name: string
    created_at?: Date | string | null
    udpated_at?: Date | string | null
    address: string
    classrooms_classrooms_companiesTocompanies?: classroomsCreateNestedManyWithoutCompanies_classrooms_companiesTocompaniesInput
    users_companies_usersTousers: usersCreateNestedOneWithoutCompanies_companies_usersTousersInput
    courses_courses_companiesTocompanies?: coursesCreateNestedManyWithoutCompanies_courses_companiesTocompaniesInput
    registrations_registrations_companiesTocompanies?: registrationsCreateNestedManyWithoutCompanies_registrations_companiesTocompaniesInput
    users_users_companiesTocompanies?: usersCreateNestedManyWithoutCompanies_users_companiesTocompaniesInput
  }

  export type companiesUncheckedCreateWithoutConfigs_configs_companiesTocompaniesInput = {
    id: string
    name: string
    created_at?: Date | string | null
    udpated_at?: Date | string | null
    users: string
    address: string
    classrooms_classrooms_companiesTocompanies?: classroomsUncheckedCreateNestedManyWithoutCompanies_classrooms_companiesTocompaniesInput
    courses_courses_companiesTocompanies?: coursesUncheckedCreateNestedManyWithoutCompanies_courses_companiesTocompaniesInput
    registrations_registrations_companiesTocompanies?: registrationsUncheckedCreateNestedManyWithoutCompanies_registrations_companiesTocompaniesInput
    users_users_companiesTocompanies?: usersUncheckedCreateNestedManyWithoutCompanies_users_companiesTocompaniesInput
  }

  export type companiesCreateOrConnectWithoutConfigs_configs_companiesTocompaniesInput = {
    where: companiesWhereUniqueInput
    create: XOR<companiesCreateWithoutConfigs_configs_companiesTocompaniesInput, companiesUncheckedCreateWithoutConfigs_configs_companiesTocompaniesInput>
  }

  export type companiesUpsertWithoutConfigs_configs_companiesTocompaniesInput = {
    update: XOR<companiesUpdateWithoutConfigs_configs_companiesTocompaniesInput, companiesUncheckedUpdateWithoutConfigs_configs_companiesTocompaniesInput>
    create: XOR<companiesCreateWithoutConfigs_configs_companiesTocompaniesInput, companiesUncheckedCreateWithoutConfigs_configs_companiesTocompaniesInput>
    where?: companiesWhereInput
  }

  export type companiesUpdateToOneWithWhereWithoutConfigs_configs_companiesTocompaniesInput = {
    where?: companiesWhereInput
    data: XOR<companiesUpdateWithoutConfigs_configs_companiesTocompaniesInput, companiesUncheckedUpdateWithoutConfigs_configs_companiesTocompaniesInput>
  }

  export type companiesUpdateWithoutConfigs_configs_companiesTocompaniesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    udpated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: StringFieldUpdateOperationsInput | string
    classrooms_classrooms_companiesTocompanies?: classroomsUpdateManyWithoutCompanies_classrooms_companiesTocompaniesNestedInput
    users_companies_usersTousers?: usersUpdateOneRequiredWithoutCompanies_companies_usersTousersNestedInput
    courses_courses_companiesTocompanies?: coursesUpdateManyWithoutCompanies_courses_companiesTocompaniesNestedInput
    registrations_registrations_companiesTocompanies?: registrationsUpdateManyWithoutCompanies_registrations_companiesTocompaniesNestedInput
    users_users_companiesTocompanies?: usersUpdateManyWithoutCompanies_users_companiesTocompaniesNestedInput
  }

  export type companiesUncheckedUpdateWithoutConfigs_configs_companiesTocompaniesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    udpated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    classrooms_classrooms_companiesTocompanies?: classroomsUncheckedUpdateManyWithoutCompanies_classrooms_companiesTocompaniesNestedInput
    courses_courses_companiesTocompanies?: coursesUncheckedUpdateManyWithoutCompanies_courses_companiesTocompaniesNestedInput
    registrations_registrations_companiesTocompanies?: registrationsUncheckedUpdateManyWithoutCompanies_registrations_companiesTocompaniesNestedInput
    users_users_companiesTocompanies?: usersUncheckedUpdateManyWithoutCompanies_users_companiesTocompaniesNestedInput
  }

  export type RenamedclassCreateWithoutCourses_Renamedclass_coursesTocoursesInput = {
    id: string
    nome: string
    vacancies: Decimal | DecimalJsLike | number | string
    class_days?: class_daysCreateNestedManyWithoutRenamedclassInput
    classes?: classesCreateNestedManyWithoutRenamedclassInput
  }

  export type RenamedclassUncheckedCreateWithoutCourses_Renamedclass_coursesTocoursesInput = {
    id: string
    nome: string
    vacancies: Decimal | DecimalJsLike | number | string
    class_days?: class_daysUncheckedCreateNestedManyWithoutRenamedclassInput
    classes?: classesUncheckedCreateNestedManyWithoutRenamedclassInput
  }

  export type RenamedclassCreateOrConnectWithoutCourses_Renamedclass_coursesTocoursesInput = {
    where: RenamedclassWhereUniqueInput
    create: XOR<RenamedclassCreateWithoutCourses_Renamedclass_coursesTocoursesInput, RenamedclassUncheckedCreateWithoutCourses_Renamedclass_coursesTocoursesInput>
  }

  export type RenamedclassCreateManyCourses_Renamedclass_coursesTocoursesInputEnvelope = {
    data: RenamedclassCreateManyCourses_Renamedclass_coursesTocoursesInput | RenamedclassCreateManyCourses_Renamedclass_coursesTocoursesInput[]
    skipDuplicates?: boolean
  }

  export type companiesCreateWithoutCourses_courses_companiesTocompaniesInput = {
    id: string
    name: string
    created_at?: Date | string | null
    udpated_at?: Date | string | null
    address: string
    classrooms_classrooms_companiesTocompanies?: classroomsCreateNestedManyWithoutCompanies_classrooms_companiesTocompaniesInput
    users_companies_usersTousers: usersCreateNestedOneWithoutCompanies_companies_usersTousersInput
    configs_configs_companiesTocompanies?: configsCreateNestedManyWithoutCompanies_configs_companiesTocompaniesInput
    registrations_registrations_companiesTocompanies?: registrationsCreateNestedManyWithoutCompanies_registrations_companiesTocompaniesInput
    users_users_companiesTocompanies?: usersCreateNestedManyWithoutCompanies_users_companiesTocompaniesInput
  }

  export type companiesUncheckedCreateWithoutCourses_courses_companiesTocompaniesInput = {
    id: string
    name: string
    created_at?: Date | string | null
    udpated_at?: Date | string | null
    users: string
    address: string
    classrooms_classrooms_companiesTocompanies?: classroomsUncheckedCreateNestedManyWithoutCompanies_classrooms_companiesTocompaniesInput
    configs_configs_companiesTocompanies?: configsUncheckedCreateNestedManyWithoutCompanies_configs_companiesTocompaniesInput
    registrations_registrations_companiesTocompanies?: registrationsUncheckedCreateNestedManyWithoutCompanies_registrations_companiesTocompaniesInput
    users_users_companiesTocompanies?: usersUncheckedCreateNestedManyWithoutCompanies_users_companiesTocompaniesInput
  }

  export type companiesCreateOrConnectWithoutCourses_courses_companiesTocompaniesInput = {
    where: companiesWhereUniqueInput
    create: XOR<companiesCreateWithoutCourses_courses_companiesTocompaniesInput, companiesUncheckedCreateWithoutCourses_courses_companiesTocompaniesInput>
  }

  export type levelsCreateWithoutCourses_levels_coursesTocoursesInput = {
    id: string
    name: string
    level: Decimal | DecimalJsLike | number | string
    discipline_discipline_levelsTolevels?: disciplineCreateNestedManyWithoutLevels_discipline_levelsTolevelsInput
    materials_materials_levelsTolevels?: materialsCreateNestedManyWithoutLevels_materials_levelsTolevelsInput
  }

  export type levelsUncheckedCreateWithoutCourses_levels_coursesTocoursesInput = {
    id: string
    name: string
    level: Decimal | DecimalJsLike | number | string
    discipline_discipline_levelsTolevels?: disciplineUncheckedCreateNestedManyWithoutLevels_discipline_levelsTolevelsInput
    materials_materials_levelsTolevels?: materialsUncheckedCreateNestedManyWithoutLevels_materials_levelsTolevelsInput
  }

  export type levelsCreateOrConnectWithoutCourses_levels_coursesTocoursesInput = {
    where: levelsWhereUniqueInput
    create: XOR<levelsCreateWithoutCourses_levels_coursesTocoursesInput, levelsUncheckedCreateWithoutCourses_levels_coursesTocoursesInput>
  }

  export type levelsCreateManyCourses_levels_coursesTocoursesInputEnvelope = {
    data: levelsCreateManyCourses_levels_coursesTocoursesInput | levelsCreateManyCourses_levels_coursesTocoursesInput[]
    skipDuplicates?: boolean
  }

  export type RenamedclassUpsertWithWhereUniqueWithoutCourses_Renamedclass_coursesTocoursesInput = {
    where: RenamedclassWhereUniqueInput
    update: XOR<RenamedclassUpdateWithoutCourses_Renamedclass_coursesTocoursesInput, RenamedclassUncheckedUpdateWithoutCourses_Renamedclass_coursesTocoursesInput>
    create: XOR<RenamedclassCreateWithoutCourses_Renamedclass_coursesTocoursesInput, RenamedclassUncheckedCreateWithoutCourses_Renamedclass_coursesTocoursesInput>
  }

  export type RenamedclassUpdateWithWhereUniqueWithoutCourses_Renamedclass_coursesTocoursesInput = {
    where: RenamedclassWhereUniqueInput
    data: XOR<RenamedclassUpdateWithoutCourses_Renamedclass_coursesTocoursesInput, RenamedclassUncheckedUpdateWithoutCourses_Renamedclass_coursesTocoursesInput>
  }

  export type RenamedclassUpdateManyWithWhereWithoutCourses_Renamedclass_coursesTocoursesInput = {
    where: RenamedclassScalarWhereInput
    data: XOR<RenamedclassUpdateManyMutationInput, RenamedclassUncheckedUpdateManyWithoutCourses_Renamedclass_coursesTocoursesInput>
  }

  export type RenamedclassScalarWhereInput = {
    AND?: RenamedclassScalarWhereInput | RenamedclassScalarWhereInput[]
    OR?: RenamedclassScalarWhereInput[]
    NOT?: RenamedclassScalarWhereInput | RenamedclassScalarWhereInput[]
    id?: StringFilter<"Renamedclass"> | string
    nome?: StringFilter<"Renamedclass"> | string
    courses?: StringFilter<"Renamedclass"> | string
    vacancies?: DecimalFilter<"Renamedclass"> | Decimal | DecimalJsLike | number | string
  }

  export type companiesUpsertWithoutCourses_courses_companiesTocompaniesInput = {
    update: XOR<companiesUpdateWithoutCourses_courses_companiesTocompaniesInput, companiesUncheckedUpdateWithoutCourses_courses_companiesTocompaniesInput>
    create: XOR<companiesCreateWithoutCourses_courses_companiesTocompaniesInput, companiesUncheckedCreateWithoutCourses_courses_companiesTocompaniesInput>
    where?: companiesWhereInput
  }

  export type companiesUpdateToOneWithWhereWithoutCourses_courses_companiesTocompaniesInput = {
    where?: companiesWhereInput
    data: XOR<companiesUpdateWithoutCourses_courses_companiesTocompaniesInput, companiesUncheckedUpdateWithoutCourses_courses_companiesTocompaniesInput>
  }

  export type companiesUpdateWithoutCourses_courses_companiesTocompaniesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    udpated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: StringFieldUpdateOperationsInput | string
    classrooms_classrooms_companiesTocompanies?: classroomsUpdateManyWithoutCompanies_classrooms_companiesTocompaniesNestedInput
    users_companies_usersTousers?: usersUpdateOneRequiredWithoutCompanies_companies_usersTousersNestedInput
    configs_configs_companiesTocompanies?: configsUpdateManyWithoutCompanies_configs_companiesTocompaniesNestedInput
    registrations_registrations_companiesTocompanies?: registrationsUpdateManyWithoutCompanies_registrations_companiesTocompaniesNestedInput
    users_users_companiesTocompanies?: usersUpdateManyWithoutCompanies_users_companiesTocompaniesNestedInput
  }

  export type companiesUncheckedUpdateWithoutCourses_courses_companiesTocompaniesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    udpated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    classrooms_classrooms_companiesTocompanies?: classroomsUncheckedUpdateManyWithoutCompanies_classrooms_companiesTocompaniesNestedInput
    configs_configs_companiesTocompanies?: configsUncheckedUpdateManyWithoutCompanies_configs_companiesTocompaniesNestedInput
    registrations_registrations_companiesTocompanies?: registrationsUncheckedUpdateManyWithoutCompanies_registrations_companiesTocompaniesNestedInput
    users_users_companiesTocompanies?: usersUncheckedUpdateManyWithoutCompanies_users_companiesTocompaniesNestedInput
  }

  export type levelsUpsertWithWhereUniqueWithoutCourses_levels_coursesTocoursesInput = {
    where: levelsWhereUniqueInput
    update: XOR<levelsUpdateWithoutCourses_levels_coursesTocoursesInput, levelsUncheckedUpdateWithoutCourses_levels_coursesTocoursesInput>
    create: XOR<levelsCreateWithoutCourses_levels_coursesTocoursesInput, levelsUncheckedCreateWithoutCourses_levels_coursesTocoursesInput>
  }

  export type levelsUpdateWithWhereUniqueWithoutCourses_levels_coursesTocoursesInput = {
    where: levelsWhereUniqueInput
    data: XOR<levelsUpdateWithoutCourses_levels_coursesTocoursesInput, levelsUncheckedUpdateWithoutCourses_levels_coursesTocoursesInput>
  }

  export type levelsUpdateManyWithWhereWithoutCourses_levels_coursesTocoursesInput = {
    where: levelsScalarWhereInput
    data: XOR<levelsUpdateManyMutationInput, levelsUncheckedUpdateManyWithoutCourses_levels_coursesTocoursesInput>
  }

  export type levelsScalarWhereInput = {
    AND?: levelsScalarWhereInput | levelsScalarWhereInput[]
    OR?: levelsScalarWhereInput[]
    NOT?: levelsScalarWhereInput | levelsScalarWhereInput[]
    id?: StringFilter<"levels"> | string
    name?: StringFilter<"levels"> | string
    level?: DecimalFilter<"levels"> | Decimal | DecimalJsLike | number | string
    courses?: StringNullableFilter<"levels"> | string | null
  }

  export type levelsCreateWithoutDiscipline_discipline_levelsTolevelsInput = {
    id: string
    name: string
    level: Decimal | DecimalJsLike | number | string
    courses_levels_coursesTocourses?: coursesCreateNestedOneWithoutLevels_levels_coursesTocoursesInput
    materials_materials_levelsTolevels?: materialsCreateNestedManyWithoutLevels_materials_levelsTolevelsInput
  }

  export type levelsUncheckedCreateWithoutDiscipline_discipline_levelsTolevelsInput = {
    id: string
    name: string
    level: Decimal | DecimalJsLike | number | string
    courses?: string | null
    materials_materials_levelsTolevels?: materialsUncheckedCreateNestedManyWithoutLevels_materials_levelsTolevelsInput
  }

  export type levelsCreateOrConnectWithoutDiscipline_discipline_levelsTolevelsInput = {
    where: levelsWhereUniqueInput
    create: XOR<levelsCreateWithoutDiscipline_discipline_levelsTolevelsInput, levelsUncheckedCreateWithoutDiscipline_discipline_levelsTolevelsInput>
  }

  export type tasksCreateWithoutDisciplineInput = {
    id: string
    created_at?: Date | string
    file?: Uint8Array | null
    score?: number | null
    description?: string | null
    title: string
    due_date?: Date | string | null
  }

  export type tasksUncheckedCreateWithoutDisciplineInput = {
    id: string
    created_at?: Date | string
    file?: Uint8Array | null
    score?: number | null
    description?: string | null
    title: string
    due_date?: Date | string | null
  }

  export type tasksCreateOrConnectWithoutDisciplineInput = {
    where: tasksWhereUniqueInput
    create: XOR<tasksCreateWithoutDisciplineInput, tasksUncheckedCreateWithoutDisciplineInput>
  }

  export type tasksCreateManyDisciplineInputEnvelope = {
    data: tasksCreateManyDisciplineInput | tasksCreateManyDisciplineInput[]
    skipDuplicates?: boolean
  }

  export type levelsUpsertWithoutDiscipline_discipline_levelsTolevelsInput = {
    update: XOR<levelsUpdateWithoutDiscipline_discipline_levelsTolevelsInput, levelsUncheckedUpdateWithoutDiscipline_discipline_levelsTolevelsInput>
    create: XOR<levelsCreateWithoutDiscipline_discipline_levelsTolevelsInput, levelsUncheckedCreateWithoutDiscipline_discipline_levelsTolevelsInput>
    where?: levelsWhereInput
  }

  export type levelsUpdateToOneWithWhereWithoutDiscipline_discipline_levelsTolevelsInput = {
    where?: levelsWhereInput
    data: XOR<levelsUpdateWithoutDiscipline_discipline_levelsTolevelsInput, levelsUncheckedUpdateWithoutDiscipline_discipline_levelsTolevelsInput>
  }

  export type levelsUpdateWithoutDiscipline_discipline_levelsTolevelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    level?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    courses_levels_coursesTocourses?: coursesUpdateOneWithoutLevels_levels_coursesTocoursesNestedInput
    materials_materials_levelsTolevels?: materialsUpdateManyWithoutLevels_materials_levelsTolevelsNestedInput
  }

  export type levelsUncheckedUpdateWithoutDiscipline_discipline_levelsTolevelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    level?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    courses?: NullableStringFieldUpdateOperationsInput | string | null
    materials_materials_levelsTolevels?: materialsUncheckedUpdateManyWithoutLevels_materials_levelsTolevelsNestedInput
  }

  export type tasksUpsertWithWhereUniqueWithoutDisciplineInput = {
    where: tasksWhereUniqueInput
    update: XOR<tasksUpdateWithoutDisciplineInput, tasksUncheckedUpdateWithoutDisciplineInput>
    create: XOR<tasksCreateWithoutDisciplineInput, tasksUncheckedCreateWithoutDisciplineInput>
  }

  export type tasksUpdateWithWhereUniqueWithoutDisciplineInput = {
    where: tasksWhereUniqueInput
    data: XOR<tasksUpdateWithoutDisciplineInput, tasksUncheckedUpdateWithoutDisciplineInput>
  }

  export type tasksUpdateManyWithWhereWithoutDisciplineInput = {
    where: tasksScalarWhereInput
    data: XOR<tasksUpdateManyMutationInput, tasksUncheckedUpdateManyWithoutDisciplineInput>
  }

  export type tasksScalarWhereInput = {
    AND?: tasksScalarWhereInput | tasksScalarWhereInput[]
    OR?: tasksScalarWhereInput[]
    NOT?: tasksScalarWhereInput | tasksScalarWhereInput[]
    id?: StringFilter<"tasks"> | string
    created_at?: DateTimeFilter<"tasks"> | Date | string
    file?: BytesNullableFilter<"tasks"> | Uint8Array | null
    score?: FloatNullableFilter<"tasks"> | number | null
    description?: StringNullableFilter<"tasks"> | string | null
    title?: StringFilter<"tasks"> | string
    disciplines?: StringFilter<"tasks"> | string
    due_date?: DateTimeNullableFilter<"tasks"> | Date | string | null
  }

  export type disciplineCreateWithoutLevels_discipline_levelsTolevelsInput = {
    id: string
    name: string
    tasks?: tasksCreateNestedManyWithoutDisciplineInput
  }

  export type disciplineUncheckedCreateWithoutLevels_discipline_levelsTolevelsInput = {
    id: string
    name: string
    tasks?: tasksUncheckedCreateNestedManyWithoutDisciplineInput
  }

  export type disciplineCreateOrConnectWithoutLevels_discipline_levelsTolevelsInput = {
    where: disciplineWhereUniqueInput
    create: XOR<disciplineCreateWithoutLevels_discipline_levelsTolevelsInput, disciplineUncheckedCreateWithoutLevels_discipline_levelsTolevelsInput>
  }

  export type disciplineCreateManyLevels_discipline_levelsTolevelsInputEnvelope = {
    data: disciplineCreateManyLevels_discipline_levelsTolevelsInput | disciplineCreateManyLevels_discipline_levelsTolevelsInput[]
    skipDuplicates?: boolean
  }

  export type coursesCreateWithoutLevels_levels_coursesTocoursesInput = {
    id: string
    description?: string | null
    created_at?: Date | string
    name: string
    registration_value: Decimal | DecimalJsLike | number | string
    workload: Decimal | DecimalJsLike | number | string
    monthly_fee_value: Decimal | DecimalJsLike | number | string
    minimum_grade: Decimal | DecimalJsLike | number | string
    maximum_grade: Decimal | DecimalJsLike | number | string
    minimum_frequency: Decimal | DecimalJsLike | number | string
    syllabus?: Uint8Array | null
    Renamedclass_Renamedclass_coursesTocourses?: RenamedclassCreateNestedManyWithoutCourses_Renamedclass_coursesTocoursesInput
    companies_courses_companiesTocompanies: companiesCreateNestedOneWithoutCourses_courses_companiesTocompaniesInput
  }

  export type coursesUncheckedCreateWithoutLevels_levels_coursesTocoursesInput = {
    id: string
    description?: string | null
    created_at?: Date | string
    name: string
    registration_value: Decimal | DecimalJsLike | number | string
    companies: string
    workload: Decimal | DecimalJsLike | number | string
    monthly_fee_value: Decimal | DecimalJsLike | number | string
    minimum_grade: Decimal | DecimalJsLike | number | string
    maximum_grade: Decimal | DecimalJsLike | number | string
    minimum_frequency: Decimal | DecimalJsLike | number | string
    syllabus?: Uint8Array | null
    Renamedclass_Renamedclass_coursesTocourses?: RenamedclassUncheckedCreateNestedManyWithoutCourses_Renamedclass_coursesTocoursesInput
  }

  export type coursesCreateOrConnectWithoutLevels_levels_coursesTocoursesInput = {
    where: coursesWhereUniqueInput
    create: XOR<coursesCreateWithoutLevels_levels_coursesTocoursesInput, coursesUncheckedCreateWithoutLevels_levels_coursesTocoursesInput>
  }

  export type materialsCreateWithoutLevels_materials_levelsTolevelsInput = {
    id: string
    name: string
    file: Uint8Array
  }

  export type materialsUncheckedCreateWithoutLevels_materials_levelsTolevelsInput = {
    id: string
    name: string
    file: Uint8Array
  }

  export type materialsCreateOrConnectWithoutLevels_materials_levelsTolevelsInput = {
    where: materialsWhereUniqueInput
    create: XOR<materialsCreateWithoutLevels_materials_levelsTolevelsInput, materialsUncheckedCreateWithoutLevels_materials_levelsTolevelsInput>
  }

  export type materialsCreateManyLevels_materials_levelsTolevelsInputEnvelope = {
    data: materialsCreateManyLevels_materials_levelsTolevelsInput | materialsCreateManyLevels_materials_levelsTolevelsInput[]
    skipDuplicates?: boolean
  }

  export type disciplineUpsertWithWhereUniqueWithoutLevels_discipline_levelsTolevelsInput = {
    where: disciplineWhereUniqueInput
    update: XOR<disciplineUpdateWithoutLevels_discipline_levelsTolevelsInput, disciplineUncheckedUpdateWithoutLevels_discipline_levelsTolevelsInput>
    create: XOR<disciplineCreateWithoutLevels_discipline_levelsTolevelsInput, disciplineUncheckedCreateWithoutLevels_discipline_levelsTolevelsInput>
  }

  export type disciplineUpdateWithWhereUniqueWithoutLevels_discipline_levelsTolevelsInput = {
    where: disciplineWhereUniqueInput
    data: XOR<disciplineUpdateWithoutLevels_discipline_levelsTolevelsInput, disciplineUncheckedUpdateWithoutLevels_discipline_levelsTolevelsInput>
  }

  export type disciplineUpdateManyWithWhereWithoutLevels_discipline_levelsTolevelsInput = {
    where: disciplineScalarWhereInput
    data: XOR<disciplineUpdateManyMutationInput, disciplineUncheckedUpdateManyWithoutLevels_discipline_levelsTolevelsInput>
  }

  export type disciplineScalarWhereInput = {
    AND?: disciplineScalarWhereInput | disciplineScalarWhereInput[]
    OR?: disciplineScalarWhereInput[]
    NOT?: disciplineScalarWhereInput | disciplineScalarWhereInput[]
    id?: StringFilter<"discipline"> | string
    name?: StringFilter<"discipline"> | string
    levels?: StringFilter<"discipline"> | string
  }

  export type coursesUpsertWithoutLevels_levels_coursesTocoursesInput = {
    update: XOR<coursesUpdateWithoutLevels_levels_coursesTocoursesInput, coursesUncheckedUpdateWithoutLevels_levels_coursesTocoursesInput>
    create: XOR<coursesCreateWithoutLevels_levels_coursesTocoursesInput, coursesUncheckedCreateWithoutLevels_levels_coursesTocoursesInput>
    where?: coursesWhereInput
  }

  export type coursesUpdateToOneWithWhereWithoutLevels_levels_coursesTocoursesInput = {
    where?: coursesWhereInput
    data: XOR<coursesUpdateWithoutLevels_levels_coursesTocoursesInput, coursesUncheckedUpdateWithoutLevels_levels_coursesTocoursesInput>
  }

  export type coursesUpdateWithoutLevels_levels_coursesTocoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    registration_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    workload?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    monthly_fee_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    minimum_grade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    maximum_grade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    minimum_frequency?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    syllabus?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    Renamedclass_Renamedclass_coursesTocourses?: RenamedclassUpdateManyWithoutCourses_Renamedclass_coursesTocoursesNestedInput
    companies_courses_companiesTocompanies?: companiesUpdateOneRequiredWithoutCourses_courses_companiesTocompaniesNestedInput
  }

  export type coursesUncheckedUpdateWithoutLevels_levels_coursesTocoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    registration_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    companies?: StringFieldUpdateOperationsInput | string
    workload?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    monthly_fee_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    minimum_grade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    maximum_grade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    minimum_frequency?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    syllabus?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    Renamedclass_Renamedclass_coursesTocourses?: RenamedclassUncheckedUpdateManyWithoutCourses_Renamedclass_coursesTocoursesNestedInput
  }

  export type materialsUpsertWithWhereUniqueWithoutLevels_materials_levelsTolevelsInput = {
    where: materialsWhereUniqueInput
    update: XOR<materialsUpdateWithoutLevels_materials_levelsTolevelsInput, materialsUncheckedUpdateWithoutLevels_materials_levelsTolevelsInput>
    create: XOR<materialsCreateWithoutLevels_materials_levelsTolevelsInput, materialsUncheckedCreateWithoutLevels_materials_levelsTolevelsInput>
  }

  export type materialsUpdateWithWhereUniqueWithoutLevels_materials_levelsTolevelsInput = {
    where: materialsWhereUniqueInput
    data: XOR<materialsUpdateWithoutLevels_materials_levelsTolevelsInput, materialsUncheckedUpdateWithoutLevels_materials_levelsTolevelsInput>
  }

  export type materialsUpdateManyWithWhereWithoutLevels_materials_levelsTolevelsInput = {
    where: materialsScalarWhereInput
    data: XOR<materialsUpdateManyMutationInput, materialsUncheckedUpdateManyWithoutLevels_materials_levelsTolevelsInput>
  }

  export type materialsScalarWhereInput = {
    AND?: materialsScalarWhereInput | materialsScalarWhereInput[]
    OR?: materialsScalarWhereInput[]
    NOT?: materialsScalarWhereInput | materialsScalarWhereInput[]
    id?: StringFilter<"materials"> | string
    name?: StringFilter<"materials"> | string
    file?: BytesFilter<"materials"> | Uint8Array
    levels?: StringNullableFilter<"materials"> | string | null
  }

  export type levelsCreateWithoutMaterials_materials_levelsTolevelsInput = {
    id: string
    name: string
    level: Decimal | DecimalJsLike | number | string
    discipline_discipline_levelsTolevels?: disciplineCreateNestedManyWithoutLevels_discipline_levelsTolevelsInput
    courses_levels_coursesTocourses?: coursesCreateNestedOneWithoutLevels_levels_coursesTocoursesInput
  }

  export type levelsUncheckedCreateWithoutMaterials_materials_levelsTolevelsInput = {
    id: string
    name: string
    level: Decimal | DecimalJsLike | number | string
    courses?: string | null
    discipline_discipline_levelsTolevels?: disciplineUncheckedCreateNestedManyWithoutLevels_discipline_levelsTolevelsInput
  }

  export type levelsCreateOrConnectWithoutMaterials_materials_levelsTolevelsInput = {
    where: levelsWhereUniqueInput
    create: XOR<levelsCreateWithoutMaterials_materials_levelsTolevelsInput, levelsUncheckedCreateWithoutMaterials_materials_levelsTolevelsInput>
  }

  export type levelsUpsertWithoutMaterials_materials_levelsTolevelsInput = {
    update: XOR<levelsUpdateWithoutMaterials_materials_levelsTolevelsInput, levelsUncheckedUpdateWithoutMaterials_materials_levelsTolevelsInput>
    create: XOR<levelsCreateWithoutMaterials_materials_levelsTolevelsInput, levelsUncheckedCreateWithoutMaterials_materials_levelsTolevelsInput>
    where?: levelsWhereInput
  }

  export type levelsUpdateToOneWithWhereWithoutMaterials_materials_levelsTolevelsInput = {
    where?: levelsWhereInput
    data: XOR<levelsUpdateWithoutMaterials_materials_levelsTolevelsInput, levelsUncheckedUpdateWithoutMaterials_materials_levelsTolevelsInput>
  }

  export type levelsUpdateWithoutMaterials_materials_levelsTolevelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    level?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discipline_discipline_levelsTolevels?: disciplineUpdateManyWithoutLevels_discipline_levelsTolevelsNestedInput
    courses_levels_coursesTocourses?: coursesUpdateOneWithoutLevels_levels_coursesTocoursesNestedInput
  }

  export type levelsUncheckedUpdateWithoutMaterials_materials_levelsTolevelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    level?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    courses?: NullableStringFieldUpdateOperationsInput | string | null
    discipline_discipline_levelsTolevels?: disciplineUncheckedUpdateManyWithoutLevels_discipline_levelsTolevelsNestedInput
  }

  export type registrationsCreateWithoutMonthly_fee_monthly_fee_registrationsToregistrationsInput = {
    id: string
    start_date?: Date | string
    monthly_fee_amount?: Decimal | DecimalJsLike | number | string
    created_at?: Date | string | null
    locked?: boolean | null
    completed?: boolean | null
    records_of_students_records_of_students_registrationsToregistrations?: records_of_studentsCreateNestedManyWithoutRegistrations_records_of_students_registrationsToregistrationsInput
    companies_registrations_companiesTocompanies?: companiesCreateNestedOneWithoutRegistrations_registrations_companiesTocompaniesInput
    users_registrations_usersTousers?: usersCreateNestedOneWithoutRegistrations_registrations_usersTousersInput
  }

  export type registrationsUncheckedCreateWithoutMonthly_fee_monthly_fee_registrationsToregistrationsInput = {
    id: string
    start_date?: Date | string
    monthly_fee_amount?: Decimal | DecimalJsLike | number | string
    created_at?: Date | string | null
    locked?: boolean | null
    completed?: boolean | null
    users?: string | null
    companies?: string | null
    records_of_students_records_of_students_registrationsToregistrations?: records_of_studentsUncheckedCreateNestedManyWithoutRegistrations_records_of_students_registrationsToregistrationsInput
  }

  export type registrationsCreateOrConnectWithoutMonthly_fee_monthly_fee_registrationsToregistrationsInput = {
    where: registrationsWhereUniqueInput
    create: XOR<registrationsCreateWithoutMonthly_fee_monthly_fee_registrationsToregistrationsInput, registrationsUncheckedCreateWithoutMonthly_fee_monthly_fee_registrationsToregistrationsInput>
  }

  export type registrationsUpsertWithoutMonthly_fee_monthly_fee_registrationsToregistrationsInput = {
    update: XOR<registrationsUpdateWithoutMonthly_fee_monthly_fee_registrationsToregistrationsInput, registrationsUncheckedUpdateWithoutMonthly_fee_monthly_fee_registrationsToregistrationsInput>
    create: XOR<registrationsCreateWithoutMonthly_fee_monthly_fee_registrationsToregistrationsInput, registrationsUncheckedCreateWithoutMonthly_fee_monthly_fee_registrationsToregistrationsInput>
    where?: registrationsWhereInput
  }

  export type registrationsUpdateToOneWithWhereWithoutMonthly_fee_monthly_fee_registrationsToregistrationsInput = {
    where?: registrationsWhereInput
    data: XOR<registrationsUpdateWithoutMonthly_fee_monthly_fee_registrationsToregistrationsInput, registrationsUncheckedUpdateWithoutMonthly_fee_monthly_fee_registrationsToregistrationsInput>
  }

  export type registrationsUpdateWithoutMonthly_fee_monthly_fee_registrationsToregistrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthly_fee_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    locked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    completed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    records_of_students_records_of_students_registrationsToregistrations?: records_of_studentsUpdateManyWithoutRegistrations_records_of_students_registrationsToregistrationsNestedInput
    companies_registrations_companiesTocompanies?: companiesUpdateOneWithoutRegistrations_registrations_companiesTocompaniesNestedInput
    users_registrations_usersTousers?: usersUpdateOneWithoutRegistrations_registrations_usersTousersNestedInput
  }

  export type registrationsUncheckedUpdateWithoutMonthly_fee_monthly_fee_registrationsToregistrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthly_fee_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    locked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    completed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    users?: NullableStringFieldUpdateOperationsInput | string | null
    companies?: NullableStringFieldUpdateOperationsInput | string | null
    records_of_students_records_of_students_registrationsToregistrations?: records_of_studentsUncheckedUpdateManyWithoutRegistrations_records_of_students_registrationsToregistrationsNestedInput
  }

  export type classesCreateWithoutPresence_list_presence_list_classesToclassesInput = {
    id: string
    theme: string
    start_date: Date | string
    end_date: Date | string
    Renamedclass: RenamedclassCreateNestedOneWithoutClassesInput
  }

  export type classesUncheckedCreateWithoutPresence_list_presence_list_classesToclassesInput = {
    id: string
    theme: string
    start_date: Date | string
    end_date: Date | string
    class: string
  }

  export type classesCreateOrConnectWithoutPresence_list_presence_list_classesToclassesInput = {
    where: classesWhereUniqueInput
    create: XOR<classesCreateWithoutPresence_list_presence_list_classesToclassesInput, classesUncheckedCreateWithoutPresence_list_presence_list_classesToclassesInput>
  }

  export type usersCreateWithoutPresence_list_presence_list_usersTousersInput = {
    id: string
    name: string
    email: string
    password: string
    avatar_url?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    cpf?: string | null
    phone?: string | null
    username: string
    gender?: string | null
    date_of_birth?: Date | string | null
    active?: boolean | null
    address?: string | null
    companies_companies_usersTousers?: companiesCreateNestedManyWithoutUsers_companies_usersTousersInput
    registrations_registrations_usersTousers?: registrationsCreateNestedManyWithoutUsers_registrations_usersTousersInput
    tokens_tokens_usersTousers?: tokensCreateNestedManyWithoutUsers_tokens_usersTousersInput
    companies_users_companiesTocompanies: companiesCreateNestedOneWithoutUsers_users_companiesTocompaniesInput
    users_roles?: users_rolesCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutPresence_list_presence_list_usersTousersInput = {
    id: string
    name: string
    email: string
    password: string
    avatar_url?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    cpf?: string | null
    phone?: string | null
    username: string
    gender?: string | null
    date_of_birth?: Date | string | null
    active?: boolean | null
    address?: string | null
    companies: string
    companies_companies_usersTousers?: companiesUncheckedCreateNestedManyWithoutUsers_companies_usersTousersInput
    registrations_registrations_usersTousers?: registrationsUncheckedCreateNestedManyWithoutUsers_registrations_usersTousersInput
    tokens_tokens_usersTousers?: tokensUncheckedCreateNestedManyWithoutUsers_tokens_usersTousersInput
    users_roles?: users_rolesUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutPresence_list_presence_list_usersTousersInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutPresence_list_presence_list_usersTousersInput, usersUncheckedCreateWithoutPresence_list_presence_list_usersTousersInput>
  }

  export type classesUpsertWithoutPresence_list_presence_list_classesToclassesInput = {
    update: XOR<classesUpdateWithoutPresence_list_presence_list_classesToclassesInput, classesUncheckedUpdateWithoutPresence_list_presence_list_classesToclassesInput>
    create: XOR<classesCreateWithoutPresence_list_presence_list_classesToclassesInput, classesUncheckedCreateWithoutPresence_list_presence_list_classesToclassesInput>
    where?: classesWhereInput
  }

  export type classesUpdateToOneWithWhereWithoutPresence_list_presence_list_classesToclassesInput = {
    where?: classesWhereInput
    data: XOR<classesUpdateWithoutPresence_list_presence_list_classesToclassesInput, classesUncheckedUpdateWithoutPresence_list_presence_list_classesToclassesInput>
  }

  export type classesUpdateWithoutPresence_list_presence_list_classesToclassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    theme?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    Renamedclass?: RenamedclassUpdateOneRequiredWithoutClassesNestedInput
  }

  export type classesUncheckedUpdateWithoutPresence_list_presence_list_classesToclassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    theme?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: StringFieldUpdateOperationsInput | string
  }

  export type usersUpsertWithoutPresence_list_presence_list_usersTousersInput = {
    update: XOR<usersUpdateWithoutPresence_list_presence_list_usersTousersInput, usersUncheckedUpdateWithoutPresence_list_presence_list_usersTousersInput>
    create: XOR<usersCreateWithoutPresence_list_presence_list_usersTousersInput, usersUncheckedCreateWithoutPresence_list_presence_list_usersTousersInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutPresence_list_presence_list_usersTousersInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutPresence_list_presence_list_usersTousersInput, usersUncheckedUpdateWithoutPresence_list_presence_list_usersTousersInput>
  }

  export type usersUpdateWithoutPresence_list_presence_list_usersTousersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    companies_companies_usersTousers?: companiesUpdateManyWithoutUsers_companies_usersTousersNestedInput
    registrations_registrations_usersTousers?: registrationsUpdateManyWithoutUsers_registrations_usersTousersNestedInput
    tokens_tokens_usersTousers?: tokensUpdateManyWithoutUsers_tokens_usersTousersNestedInput
    companies_users_companiesTocompanies?: companiesUpdateOneRequiredWithoutUsers_users_companiesTocompaniesNestedInput
    users_roles?: users_rolesUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutPresence_list_presence_list_usersTousersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    companies?: StringFieldUpdateOperationsInput | string
    companies_companies_usersTousers?: companiesUncheckedUpdateManyWithoutUsers_companies_usersTousersNestedInput
    registrations_registrations_usersTousers?: registrationsUncheckedUpdateManyWithoutUsers_registrations_usersTousersNestedInput
    tokens_tokens_usersTousers?: tokensUncheckedUpdateManyWithoutUsers_tokens_usersTousersNestedInput
    users_roles?: users_rolesUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type registrationsCreateWithoutRecords_of_students_records_of_students_registrationsToregistrationsInput = {
    id: string
    start_date?: Date | string
    monthly_fee_amount?: Decimal | DecimalJsLike | number | string
    created_at?: Date | string | null
    locked?: boolean | null
    completed?: boolean | null
    monthly_fee_monthly_fee_registrationsToregistrations?: monthly_feeCreateNestedManyWithoutRegistrations_monthly_fee_registrationsToregistrationsInput
    companies_registrations_companiesTocompanies?: companiesCreateNestedOneWithoutRegistrations_registrations_companiesTocompaniesInput
    users_registrations_usersTousers?: usersCreateNestedOneWithoutRegistrations_registrations_usersTousersInput
  }

  export type registrationsUncheckedCreateWithoutRecords_of_students_records_of_students_registrationsToregistrationsInput = {
    id: string
    start_date?: Date | string
    monthly_fee_amount?: Decimal | DecimalJsLike | number | string
    created_at?: Date | string | null
    locked?: boolean | null
    completed?: boolean | null
    users?: string | null
    companies?: string | null
    monthly_fee_monthly_fee_registrationsToregistrations?: monthly_feeUncheckedCreateNestedManyWithoutRegistrations_monthly_fee_registrationsToregistrationsInput
  }

  export type registrationsCreateOrConnectWithoutRecords_of_students_records_of_students_registrationsToregistrationsInput = {
    where: registrationsWhereUniqueInput
    create: XOR<registrationsCreateWithoutRecords_of_students_records_of_students_registrationsToregistrationsInput, registrationsUncheckedCreateWithoutRecords_of_students_records_of_students_registrationsToregistrationsInput>
  }

  export type registrationsUpsertWithoutRecords_of_students_records_of_students_registrationsToregistrationsInput = {
    update: XOR<registrationsUpdateWithoutRecords_of_students_records_of_students_registrationsToregistrationsInput, registrationsUncheckedUpdateWithoutRecords_of_students_records_of_students_registrationsToregistrationsInput>
    create: XOR<registrationsCreateWithoutRecords_of_students_records_of_students_registrationsToregistrationsInput, registrationsUncheckedCreateWithoutRecords_of_students_records_of_students_registrationsToregistrationsInput>
    where?: registrationsWhereInput
  }

  export type registrationsUpdateToOneWithWhereWithoutRecords_of_students_records_of_students_registrationsToregistrationsInput = {
    where?: registrationsWhereInput
    data: XOR<registrationsUpdateWithoutRecords_of_students_records_of_students_registrationsToregistrationsInput, registrationsUncheckedUpdateWithoutRecords_of_students_records_of_students_registrationsToregistrationsInput>
  }

  export type registrationsUpdateWithoutRecords_of_students_records_of_students_registrationsToregistrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthly_fee_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    locked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    completed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    monthly_fee_monthly_fee_registrationsToregistrations?: monthly_feeUpdateManyWithoutRegistrations_monthly_fee_registrationsToregistrationsNestedInput
    companies_registrations_companiesTocompanies?: companiesUpdateOneWithoutRegistrations_registrations_companiesTocompaniesNestedInput
    users_registrations_usersTousers?: usersUpdateOneWithoutRegistrations_registrations_usersTousersNestedInput
  }

  export type registrationsUncheckedUpdateWithoutRecords_of_students_records_of_students_registrationsToregistrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthly_fee_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    locked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    completed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    users?: NullableStringFieldUpdateOperationsInput | string | null
    companies?: NullableStringFieldUpdateOperationsInput | string | null
    monthly_fee_monthly_fee_registrationsToregistrations?: monthly_feeUncheckedUpdateManyWithoutRegistrations_monthly_fee_registrationsToregistrationsNestedInput
  }

  export type monthly_feeCreateWithoutRegistrations_monthly_fee_registrationsToregistrationsInput = {
    id: string
    due_date: Date | string
    value: Decimal | DecimalJsLike | number | string
    paid?: boolean
    discount_payment_before_due_date?: Decimal | DecimalJsLike | number | string
    payment_method?: string | null
    date_of_payment?: Date | string | null
  }

  export type monthly_feeUncheckedCreateWithoutRegistrations_monthly_fee_registrationsToregistrationsInput = {
    id: string
    due_date: Date | string
    value: Decimal | DecimalJsLike | number | string
    paid?: boolean
    discount_payment_before_due_date?: Decimal | DecimalJsLike | number | string
    payment_method?: string | null
    date_of_payment?: Date | string | null
  }

  export type monthly_feeCreateOrConnectWithoutRegistrations_monthly_fee_registrationsToregistrationsInput = {
    where: monthly_feeWhereUniqueInput
    create: XOR<monthly_feeCreateWithoutRegistrations_monthly_fee_registrationsToregistrationsInput, monthly_feeUncheckedCreateWithoutRegistrations_monthly_fee_registrationsToregistrationsInput>
  }

  export type monthly_feeCreateManyRegistrations_monthly_fee_registrationsToregistrationsInputEnvelope = {
    data: monthly_feeCreateManyRegistrations_monthly_fee_registrationsToregistrationsInput | monthly_feeCreateManyRegistrations_monthly_fee_registrationsToregistrationsInput[]
    skipDuplicates?: boolean
  }

  export type records_of_studentsCreateWithoutRegistrations_records_of_students_registrationsToregistrationsInput = {
    description?: string | null
    title?: string | null
    created_at?: Date | string | null
  }

  export type records_of_studentsUncheckedCreateWithoutRegistrations_records_of_students_registrationsToregistrationsInput = {
    id?: number
    description?: string | null
    title?: string | null
    created_at?: Date | string | null
  }

  export type records_of_studentsCreateOrConnectWithoutRegistrations_records_of_students_registrationsToregistrationsInput = {
    where: records_of_studentsWhereUniqueInput
    create: XOR<records_of_studentsCreateWithoutRegistrations_records_of_students_registrationsToregistrationsInput, records_of_studentsUncheckedCreateWithoutRegistrations_records_of_students_registrationsToregistrationsInput>
  }

  export type records_of_studentsCreateManyRegistrations_records_of_students_registrationsToregistrationsInputEnvelope = {
    data: records_of_studentsCreateManyRegistrations_records_of_students_registrationsToregistrationsInput | records_of_studentsCreateManyRegistrations_records_of_students_registrationsToregistrationsInput[]
    skipDuplicates?: boolean
  }

  export type companiesCreateWithoutRegistrations_registrations_companiesTocompaniesInput = {
    id: string
    name: string
    created_at?: Date | string | null
    udpated_at?: Date | string | null
    address: string
    classrooms_classrooms_companiesTocompanies?: classroomsCreateNestedManyWithoutCompanies_classrooms_companiesTocompaniesInput
    users_companies_usersTousers: usersCreateNestedOneWithoutCompanies_companies_usersTousersInput
    configs_configs_companiesTocompanies?: configsCreateNestedManyWithoutCompanies_configs_companiesTocompaniesInput
    courses_courses_companiesTocompanies?: coursesCreateNestedManyWithoutCompanies_courses_companiesTocompaniesInput
    users_users_companiesTocompanies?: usersCreateNestedManyWithoutCompanies_users_companiesTocompaniesInput
  }

  export type companiesUncheckedCreateWithoutRegistrations_registrations_companiesTocompaniesInput = {
    id: string
    name: string
    created_at?: Date | string | null
    udpated_at?: Date | string | null
    users: string
    address: string
    classrooms_classrooms_companiesTocompanies?: classroomsUncheckedCreateNestedManyWithoutCompanies_classrooms_companiesTocompaniesInput
    configs_configs_companiesTocompanies?: configsUncheckedCreateNestedManyWithoutCompanies_configs_companiesTocompaniesInput
    courses_courses_companiesTocompanies?: coursesUncheckedCreateNestedManyWithoutCompanies_courses_companiesTocompaniesInput
    users_users_companiesTocompanies?: usersUncheckedCreateNestedManyWithoutCompanies_users_companiesTocompaniesInput
  }

  export type companiesCreateOrConnectWithoutRegistrations_registrations_companiesTocompaniesInput = {
    where: companiesWhereUniqueInput
    create: XOR<companiesCreateWithoutRegistrations_registrations_companiesTocompaniesInput, companiesUncheckedCreateWithoutRegistrations_registrations_companiesTocompaniesInput>
  }

  export type usersCreateWithoutRegistrations_registrations_usersTousersInput = {
    id: string
    name: string
    email: string
    password: string
    avatar_url?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    cpf?: string | null
    phone?: string | null
    username: string
    gender?: string | null
    date_of_birth?: Date | string | null
    active?: boolean | null
    address?: string | null
    companies_companies_usersTousers?: companiesCreateNestedManyWithoutUsers_companies_usersTousersInput
    presence_list_presence_list_usersTousers?: presence_listCreateNestedManyWithoutUsers_presence_list_usersTousersInput
    tokens_tokens_usersTousers?: tokensCreateNestedManyWithoutUsers_tokens_usersTousersInput
    companies_users_companiesTocompanies: companiesCreateNestedOneWithoutUsers_users_companiesTocompaniesInput
    users_roles?: users_rolesCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutRegistrations_registrations_usersTousersInput = {
    id: string
    name: string
    email: string
    password: string
    avatar_url?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    cpf?: string | null
    phone?: string | null
    username: string
    gender?: string | null
    date_of_birth?: Date | string | null
    active?: boolean | null
    address?: string | null
    companies: string
    companies_companies_usersTousers?: companiesUncheckedCreateNestedManyWithoutUsers_companies_usersTousersInput
    presence_list_presence_list_usersTousers?: presence_listUncheckedCreateNestedManyWithoutUsers_presence_list_usersTousersInput
    tokens_tokens_usersTousers?: tokensUncheckedCreateNestedManyWithoutUsers_tokens_usersTousersInput
    users_roles?: users_rolesUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutRegistrations_registrations_usersTousersInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutRegistrations_registrations_usersTousersInput, usersUncheckedCreateWithoutRegistrations_registrations_usersTousersInput>
  }

  export type monthly_feeUpsertWithWhereUniqueWithoutRegistrations_monthly_fee_registrationsToregistrationsInput = {
    where: monthly_feeWhereUniqueInput
    update: XOR<monthly_feeUpdateWithoutRegistrations_monthly_fee_registrationsToregistrationsInput, monthly_feeUncheckedUpdateWithoutRegistrations_monthly_fee_registrationsToregistrationsInput>
    create: XOR<monthly_feeCreateWithoutRegistrations_monthly_fee_registrationsToregistrationsInput, monthly_feeUncheckedCreateWithoutRegistrations_monthly_fee_registrationsToregistrationsInput>
  }

  export type monthly_feeUpdateWithWhereUniqueWithoutRegistrations_monthly_fee_registrationsToregistrationsInput = {
    where: monthly_feeWhereUniqueInput
    data: XOR<monthly_feeUpdateWithoutRegistrations_monthly_fee_registrationsToregistrationsInput, monthly_feeUncheckedUpdateWithoutRegistrations_monthly_fee_registrationsToregistrationsInput>
  }

  export type monthly_feeUpdateManyWithWhereWithoutRegistrations_monthly_fee_registrationsToregistrationsInput = {
    where: monthly_feeScalarWhereInput
    data: XOR<monthly_feeUpdateManyMutationInput, monthly_feeUncheckedUpdateManyWithoutRegistrations_monthly_fee_registrationsToregistrationsInput>
  }

  export type monthly_feeScalarWhereInput = {
    AND?: monthly_feeScalarWhereInput | monthly_feeScalarWhereInput[]
    OR?: monthly_feeScalarWhereInput[]
    NOT?: monthly_feeScalarWhereInput | monthly_feeScalarWhereInput[]
    id?: StringFilter<"monthly_fee"> | string
    due_date?: DateTimeFilter<"monthly_fee"> | Date | string
    value?: DecimalFilter<"monthly_fee"> | Decimal | DecimalJsLike | number | string
    paid?: BoolFilter<"monthly_fee"> | boolean
    discount_payment_before_due_date?: DecimalFilter<"monthly_fee"> | Decimal | DecimalJsLike | number | string
    registrations?: StringFilter<"monthly_fee"> | string
    payment_method?: StringNullableFilter<"monthly_fee"> | string | null
    date_of_payment?: DateTimeNullableFilter<"monthly_fee"> | Date | string | null
  }

  export type records_of_studentsUpsertWithWhereUniqueWithoutRegistrations_records_of_students_registrationsToregistrationsInput = {
    where: records_of_studentsWhereUniqueInput
    update: XOR<records_of_studentsUpdateWithoutRegistrations_records_of_students_registrationsToregistrationsInput, records_of_studentsUncheckedUpdateWithoutRegistrations_records_of_students_registrationsToregistrationsInput>
    create: XOR<records_of_studentsCreateWithoutRegistrations_records_of_students_registrationsToregistrationsInput, records_of_studentsUncheckedCreateWithoutRegistrations_records_of_students_registrationsToregistrationsInput>
  }

  export type records_of_studentsUpdateWithWhereUniqueWithoutRegistrations_records_of_students_registrationsToregistrationsInput = {
    where: records_of_studentsWhereUniqueInput
    data: XOR<records_of_studentsUpdateWithoutRegistrations_records_of_students_registrationsToregistrationsInput, records_of_studentsUncheckedUpdateWithoutRegistrations_records_of_students_registrationsToregistrationsInput>
  }

  export type records_of_studentsUpdateManyWithWhereWithoutRegistrations_records_of_students_registrationsToregistrationsInput = {
    where: records_of_studentsScalarWhereInput
    data: XOR<records_of_studentsUpdateManyMutationInput, records_of_studentsUncheckedUpdateManyWithoutRegistrations_records_of_students_registrationsToregistrationsInput>
  }

  export type records_of_studentsScalarWhereInput = {
    AND?: records_of_studentsScalarWhereInput | records_of_studentsScalarWhereInput[]
    OR?: records_of_studentsScalarWhereInput[]
    NOT?: records_of_studentsScalarWhereInput | records_of_studentsScalarWhereInput[]
    id?: IntFilter<"records_of_students"> | number
    registrations?: StringFilter<"records_of_students"> | string
    description?: StringNullableFilter<"records_of_students"> | string | null
    title?: StringNullableFilter<"records_of_students"> | string | null
    created_at?: DateTimeNullableFilter<"records_of_students"> | Date | string | null
  }

  export type companiesUpsertWithoutRegistrations_registrations_companiesTocompaniesInput = {
    update: XOR<companiesUpdateWithoutRegistrations_registrations_companiesTocompaniesInput, companiesUncheckedUpdateWithoutRegistrations_registrations_companiesTocompaniesInput>
    create: XOR<companiesCreateWithoutRegistrations_registrations_companiesTocompaniesInput, companiesUncheckedCreateWithoutRegistrations_registrations_companiesTocompaniesInput>
    where?: companiesWhereInput
  }

  export type companiesUpdateToOneWithWhereWithoutRegistrations_registrations_companiesTocompaniesInput = {
    where?: companiesWhereInput
    data: XOR<companiesUpdateWithoutRegistrations_registrations_companiesTocompaniesInput, companiesUncheckedUpdateWithoutRegistrations_registrations_companiesTocompaniesInput>
  }

  export type companiesUpdateWithoutRegistrations_registrations_companiesTocompaniesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    udpated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: StringFieldUpdateOperationsInput | string
    classrooms_classrooms_companiesTocompanies?: classroomsUpdateManyWithoutCompanies_classrooms_companiesTocompaniesNestedInput
    users_companies_usersTousers?: usersUpdateOneRequiredWithoutCompanies_companies_usersTousersNestedInput
    configs_configs_companiesTocompanies?: configsUpdateManyWithoutCompanies_configs_companiesTocompaniesNestedInput
    courses_courses_companiesTocompanies?: coursesUpdateManyWithoutCompanies_courses_companiesTocompaniesNestedInput
    users_users_companiesTocompanies?: usersUpdateManyWithoutCompanies_users_companiesTocompaniesNestedInput
  }

  export type companiesUncheckedUpdateWithoutRegistrations_registrations_companiesTocompaniesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    udpated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    classrooms_classrooms_companiesTocompanies?: classroomsUncheckedUpdateManyWithoutCompanies_classrooms_companiesTocompaniesNestedInput
    configs_configs_companiesTocompanies?: configsUncheckedUpdateManyWithoutCompanies_configs_companiesTocompaniesNestedInput
    courses_courses_companiesTocompanies?: coursesUncheckedUpdateManyWithoutCompanies_courses_companiesTocompaniesNestedInput
    users_users_companiesTocompanies?: usersUncheckedUpdateManyWithoutCompanies_users_companiesTocompaniesNestedInput
  }

  export type usersUpsertWithoutRegistrations_registrations_usersTousersInput = {
    update: XOR<usersUpdateWithoutRegistrations_registrations_usersTousersInput, usersUncheckedUpdateWithoutRegistrations_registrations_usersTousersInput>
    create: XOR<usersCreateWithoutRegistrations_registrations_usersTousersInput, usersUncheckedCreateWithoutRegistrations_registrations_usersTousersInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutRegistrations_registrations_usersTousersInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutRegistrations_registrations_usersTousersInput, usersUncheckedUpdateWithoutRegistrations_registrations_usersTousersInput>
  }

  export type usersUpdateWithoutRegistrations_registrations_usersTousersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    companies_companies_usersTousers?: companiesUpdateManyWithoutUsers_companies_usersTousersNestedInput
    presence_list_presence_list_usersTousers?: presence_listUpdateManyWithoutUsers_presence_list_usersTousersNestedInput
    tokens_tokens_usersTousers?: tokensUpdateManyWithoutUsers_tokens_usersTousersNestedInput
    companies_users_companiesTocompanies?: companiesUpdateOneRequiredWithoutUsers_users_companiesTocompaniesNestedInput
    users_roles?: users_rolesUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutRegistrations_registrations_usersTousersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    companies?: StringFieldUpdateOperationsInput | string
    companies_companies_usersTousers?: companiesUncheckedUpdateManyWithoutUsers_companies_usersTousersNestedInput
    presence_list_presence_list_usersTousers?: presence_listUncheckedUpdateManyWithoutUsers_presence_list_usersTousersNestedInput
    tokens_tokens_usersTousers?: tokensUncheckedUpdateManyWithoutUsers_tokens_usersTousersNestedInput
    users_roles?: users_rolesUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type users_rolesCreateWithoutRolesInput = {
    id: string
    users: usersCreateNestedOneWithoutUsers_rolesInput
  }

  export type users_rolesUncheckedCreateWithoutRolesInput = {
    id: string
    users_id: string
  }

  export type users_rolesCreateOrConnectWithoutRolesInput = {
    where: users_rolesWhereUniqueInput
    create: XOR<users_rolesCreateWithoutRolesInput, users_rolesUncheckedCreateWithoutRolesInput>
  }

  export type users_rolesCreateManyRolesInputEnvelope = {
    data: users_rolesCreateManyRolesInput | users_rolesCreateManyRolesInput[]
    skipDuplicates?: boolean
  }

  export type users_rolesUpsertWithWhereUniqueWithoutRolesInput = {
    where: users_rolesWhereUniqueInput
    update: XOR<users_rolesUpdateWithoutRolesInput, users_rolesUncheckedUpdateWithoutRolesInput>
    create: XOR<users_rolesCreateWithoutRolesInput, users_rolesUncheckedCreateWithoutRolesInput>
  }

  export type users_rolesUpdateWithWhereUniqueWithoutRolesInput = {
    where: users_rolesWhereUniqueInput
    data: XOR<users_rolesUpdateWithoutRolesInput, users_rolesUncheckedUpdateWithoutRolesInput>
  }

  export type users_rolesUpdateManyWithWhereWithoutRolesInput = {
    where: users_rolesScalarWhereInput
    data: XOR<users_rolesUpdateManyMutationInput, users_rolesUncheckedUpdateManyWithoutRolesInput>
  }

  export type users_rolesScalarWhereInput = {
    AND?: users_rolesScalarWhereInput | users_rolesScalarWhereInput[]
    OR?: users_rolesScalarWhereInput[]
    NOT?: users_rolesScalarWhereInput | users_rolesScalarWhereInput[]
    id?: StringFilter<"users_roles"> | string
    users_id?: StringFilter<"users_roles"> | string
    role_id?: StringFilter<"users_roles"> | string
  }

  export type disciplineCreateWithoutTasksInput = {
    id: string
    name: string
    levels_discipline_levelsTolevels: levelsCreateNestedOneWithoutDiscipline_discipline_levelsTolevelsInput
  }

  export type disciplineUncheckedCreateWithoutTasksInput = {
    id: string
    name: string
    levels: string
  }

  export type disciplineCreateOrConnectWithoutTasksInput = {
    where: disciplineWhereUniqueInput
    create: XOR<disciplineCreateWithoutTasksInput, disciplineUncheckedCreateWithoutTasksInput>
  }

  export type disciplineUpsertWithoutTasksInput = {
    update: XOR<disciplineUpdateWithoutTasksInput, disciplineUncheckedUpdateWithoutTasksInput>
    create: XOR<disciplineCreateWithoutTasksInput, disciplineUncheckedCreateWithoutTasksInput>
    where?: disciplineWhereInput
  }

  export type disciplineUpdateToOneWithWhereWithoutTasksInput = {
    where?: disciplineWhereInput
    data: XOR<disciplineUpdateWithoutTasksInput, disciplineUncheckedUpdateWithoutTasksInput>
  }

  export type disciplineUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    levels_discipline_levelsTolevels?: levelsUpdateOneRequiredWithoutDiscipline_discipline_levelsTolevelsNestedInput
  }

  export type disciplineUncheckedUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    levels?: StringFieldUpdateOperationsInput | string
  }

  export type usersCreateWithoutTokens_tokens_usersTousersInput = {
    id: string
    name: string
    email: string
    password: string
    avatar_url?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    cpf?: string | null
    phone?: string | null
    username: string
    gender?: string | null
    date_of_birth?: Date | string | null
    active?: boolean | null
    address?: string | null
    companies_companies_usersTousers?: companiesCreateNestedManyWithoutUsers_companies_usersTousersInput
    presence_list_presence_list_usersTousers?: presence_listCreateNestedManyWithoutUsers_presence_list_usersTousersInput
    registrations_registrations_usersTousers?: registrationsCreateNestedManyWithoutUsers_registrations_usersTousersInput
    companies_users_companiesTocompanies: companiesCreateNestedOneWithoutUsers_users_companiesTocompaniesInput
    users_roles?: users_rolesCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutTokens_tokens_usersTousersInput = {
    id: string
    name: string
    email: string
    password: string
    avatar_url?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    cpf?: string | null
    phone?: string | null
    username: string
    gender?: string | null
    date_of_birth?: Date | string | null
    active?: boolean | null
    address?: string | null
    companies: string
    companies_companies_usersTousers?: companiesUncheckedCreateNestedManyWithoutUsers_companies_usersTousersInput
    presence_list_presence_list_usersTousers?: presence_listUncheckedCreateNestedManyWithoutUsers_presence_list_usersTousersInput
    registrations_registrations_usersTousers?: registrationsUncheckedCreateNestedManyWithoutUsers_registrations_usersTousersInput
    users_roles?: users_rolesUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutTokens_tokens_usersTousersInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutTokens_tokens_usersTousersInput, usersUncheckedCreateWithoutTokens_tokens_usersTousersInput>
  }

  export type usersUpsertWithoutTokens_tokens_usersTousersInput = {
    update: XOR<usersUpdateWithoutTokens_tokens_usersTousersInput, usersUncheckedUpdateWithoutTokens_tokens_usersTousersInput>
    create: XOR<usersCreateWithoutTokens_tokens_usersTousersInput, usersUncheckedCreateWithoutTokens_tokens_usersTousersInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutTokens_tokens_usersTousersInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutTokens_tokens_usersTousersInput, usersUncheckedUpdateWithoutTokens_tokens_usersTousersInput>
  }

  export type usersUpdateWithoutTokens_tokens_usersTousersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    companies_companies_usersTousers?: companiesUpdateManyWithoutUsers_companies_usersTousersNestedInput
    presence_list_presence_list_usersTousers?: presence_listUpdateManyWithoutUsers_presence_list_usersTousersNestedInput
    registrations_registrations_usersTousers?: registrationsUpdateManyWithoutUsers_registrations_usersTousersNestedInput
    companies_users_companiesTocompanies?: companiesUpdateOneRequiredWithoutUsers_users_companiesTocompaniesNestedInput
    users_roles?: users_rolesUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutTokens_tokens_usersTousersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    companies?: StringFieldUpdateOperationsInput | string
    companies_companies_usersTousers?: companiesUncheckedUpdateManyWithoutUsers_companies_usersTousersNestedInput
    presence_list_presence_list_usersTousers?: presence_listUncheckedUpdateManyWithoutUsers_presence_list_usersTousersNestedInput
    registrations_registrations_usersTousers?: registrationsUncheckedUpdateManyWithoutUsers_registrations_usersTousersNestedInput
    users_roles?: users_rolesUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type companiesCreateWithoutUsers_companies_usersTousersInput = {
    id: string
    name: string
    created_at?: Date | string | null
    udpated_at?: Date | string | null
    address: string
    classrooms_classrooms_companiesTocompanies?: classroomsCreateNestedManyWithoutCompanies_classrooms_companiesTocompaniesInput
    configs_configs_companiesTocompanies?: configsCreateNestedManyWithoutCompanies_configs_companiesTocompaniesInput
    courses_courses_companiesTocompanies?: coursesCreateNestedManyWithoutCompanies_courses_companiesTocompaniesInput
    registrations_registrations_companiesTocompanies?: registrationsCreateNestedManyWithoutCompanies_registrations_companiesTocompaniesInput
    users_users_companiesTocompanies?: usersCreateNestedManyWithoutCompanies_users_companiesTocompaniesInput
  }

  export type companiesUncheckedCreateWithoutUsers_companies_usersTousersInput = {
    id: string
    name: string
    created_at?: Date | string | null
    udpated_at?: Date | string | null
    address: string
    classrooms_classrooms_companiesTocompanies?: classroomsUncheckedCreateNestedManyWithoutCompanies_classrooms_companiesTocompaniesInput
    configs_configs_companiesTocompanies?: configsUncheckedCreateNestedManyWithoutCompanies_configs_companiesTocompaniesInput
    courses_courses_companiesTocompanies?: coursesUncheckedCreateNestedManyWithoutCompanies_courses_companiesTocompaniesInput
    registrations_registrations_companiesTocompanies?: registrationsUncheckedCreateNestedManyWithoutCompanies_registrations_companiesTocompaniesInput
    users_users_companiesTocompanies?: usersUncheckedCreateNestedManyWithoutCompanies_users_companiesTocompaniesInput
  }

  export type companiesCreateOrConnectWithoutUsers_companies_usersTousersInput = {
    where: companiesWhereUniqueInput
    create: XOR<companiesCreateWithoutUsers_companies_usersTousersInput, companiesUncheckedCreateWithoutUsers_companies_usersTousersInput>
  }

  export type companiesCreateManyUsers_companies_usersTousersInputEnvelope = {
    data: companiesCreateManyUsers_companies_usersTousersInput | companiesCreateManyUsers_companies_usersTousersInput[]
    skipDuplicates?: boolean
  }

  export type presence_listCreateWithoutUsers_presence_list_usersTousersInput = {
    id: string
    is_present?: boolean
    classes_presence_list_classesToclasses: classesCreateNestedOneWithoutPresence_list_presence_list_classesToclassesInput
  }

  export type presence_listUncheckedCreateWithoutUsers_presence_list_usersTousersInput = {
    id: string
    is_present?: boolean
    classes: string
  }

  export type presence_listCreateOrConnectWithoutUsers_presence_list_usersTousersInput = {
    where: presence_listWhereUniqueInput
    create: XOR<presence_listCreateWithoutUsers_presence_list_usersTousersInput, presence_listUncheckedCreateWithoutUsers_presence_list_usersTousersInput>
  }

  export type presence_listCreateManyUsers_presence_list_usersTousersInputEnvelope = {
    data: presence_listCreateManyUsers_presence_list_usersTousersInput | presence_listCreateManyUsers_presence_list_usersTousersInput[]
    skipDuplicates?: boolean
  }

  export type registrationsCreateWithoutUsers_registrations_usersTousersInput = {
    id: string
    start_date?: Date | string
    monthly_fee_amount?: Decimal | DecimalJsLike | number | string
    created_at?: Date | string | null
    locked?: boolean | null
    completed?: boolean | null
    monthly_fee_monthly_fee_registrationsToregistrations?: monthly_feeCreateNestedManyWithoutRegistrations_monthly_fee_registrationsToregistrationsInput
    records_of_students_records_of_students_registrationsToregistrations?: records_of_studentsCreateNestedManyWithoutRegistrations_records_of_students_registrationsToregistrationsInput
    companies_registrations_companiesTocompanies?: companiesCreateNestedOneWithoutRegistrations_registrations_companiesTocompaniesInput
  }

  export type registrationsUncheckedCreateWithoutUsers_registrations_usersTousersInput = {
    id: string
    start_date?: Date | string
    monthly_fee_amount?: Decimal | DecimalJsLike | number | string
    created_at?: Date | string | null
    locked?: boolean | null
    completed?: boolean | null
    companies?: string | null
    monthly_fee_monthly_fee_registrationsToregistrations?: monthly_feeUncheckedCreateNestedManyWithoutRegistrations_monthly_fee_registrationsToregistrationsInput
    records_of_students_records_of_students_registrationsToregistrations?: records_of_studentsUncheckedCreateNestedManyWithoutRegistrations_records_of_students_registrationsToregistrationsInput
  }

  export type registrationsCreateOrConnectWithoutUsers_registrations_usersTousersInput = {
    where: registrationsWhereUniqueInput
    create: XOR<registrationsCreateWithoutUsers_registrations_usersTousersInput, registrationsUncheckedCreateWithoutUsers_registrations_usersTousersInput>
  }

  export type registrationsCreateManyUsers_registrations_usersTousersInputEnvelope = {
    data: registrationsCreateManyUsers_registrations_usersTousersInput | registrationsCreateManyUsers_registrations_usersTousersInput[]
    skipDuplicates?: boolean
  }

  export type tokensCreateWithoutUsers_tokens_usersTousersInput = {
    id: string
    type: string
    expires_at: Date | string
    createdAt_?: Date | string
  }

  export type tokensUncheckedCreateWithoutUsers_tokens_usersTousersInput = {
    id: string
    type: string
    expires_at: Date | string
    createdAt_?: Date | string
  }

  export type tokensCreateOrConnectWithoutUsers_tokens_usersTousersInput = {
    where: tokensWhereUniqueInput
    create: XOR<tokensCreateWithoutUsers_tokens_usersTousersInput, tokensUncheckedCreateWithoutUsers_tokens_usersTousersInput>
  }

  export type tokensCreateManyUsers_tokens_usersTousersInputEnvelope = {
    data: tokensCreateManyUsers_tokens_usersTousersInput | tokensCreateManyUsers_tokens_usersTousersInput[]
    skipDuplicates?: boolean
  }

  export type companiesCreateWithoutUsers_users_companiesTocompaniesInput = {
    id: string
    name: string
    created_at?: Date | string | null
    udpated_at?: Date | string | null
    address: string
    classrooms_classrooms_companiesTocompanies?: classroomsCreateNestedManyWithoutCompanies_classrooms_companiesTocompaniesInput
    users_companies_usersTousers: usersCreateNestedOneWithoutCompanies_companies_usersTousersInput
    configs_configs_companiesTocompanies?: configsCreateNestedManyWithoutCompanies_configs_companiesTocompaniesInput
    courses_courses_companiesTocompanies?: coursesCreateNestedManyWithoutCompanies_courses_companiesTocompaniesInput
    registrations_registrations_companiesTocompanies?: registrationsCreateNestedManyWithoutCompanies_registrations_companiesTocompaniesInput
  }

  export type companiesUncheckedCreateWithoutUsers_users_companiesTocompaniesInput = {
    id: string
    name: string
    created_at?: Date | string | null
    udpated_at?: Date | string | null
    users: string
    address: string
    classrooms_classrooms_companiesTocompanies?: classroomsUncheckedCreateNestedManyWithoutCompanies_classrooms_companiesTocompaniesInput
    configs_configs_companiesTocompanies?: configsUncheckedCreateNestedManyWithoutCompanies_configs_companiesTocompaniesInput
    courses_courses_companiesTocompanies?: coursesUncheckedCreateNestedManyWithoutCompanies_courses_companiesTocompaniesInput
    registrations_registrations_companiesTocompanies?: registrationsUncheckedCreateNestedManyWithoutCompanies_registrations_companiesTocompaniesInput
  }

  export type companiesCreateOrConnectWithoutUsers_users_companiesTocompaniesInput = {
    where: companiesWhereUniqueInput
    create: XOR<companiesCreateWithoutUsers_users_companiesTocompaniesInput, companiesUncheckedCreateWithoutUsers_users_companiesTocompaniesInput>
  }

  export type users_rolesCreateWithoutUsersInput = {
    id: string
    roles: rolesCreateNestedOneWithoutUsers_rolesInput
  }

  export type users_rolesUncheckedCreateWithoutUsersInput = {
    id: string
    role_id: string
  }

  export type users_rolesCreateOrConnectWithoutUsersInput = {
    where: users_rolesWhereUniqueInput
    create: XOR<users_rolesCreateWithoutUsersInput, users_rolesUncheckedCreateWithoutUsersInput>
  }

  export type users_rolesCreateManyUsersInputEnvelope = {
    data: users_rolesCreateManyUsersInput | users_rolesCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type companiesUpsertWithWhereUniqueWithoutUsers_companies_usersTousersInput = {
    where: companiesWhereUniqueInput
    update: XOR<companiesUpdateWithoutUsers_companies_usersTousersInput, companiesUncheckedUpdateWithoutUsers_companies_usersTousersInput>
    create: XOR<companiesCreateWithoutUsers_companies_usersTousersInput, companiesUncheckedCreateWithoutUsers_companies_usersTousersInput>
  }

  export type companiesUpdateWithWhereUniqueWithoutUsers_companies_usersTousersInput = {
    where: companiesWhereUniqueInput
    data: XOR<companiesUpdateWithoutUsers_companies_usersTousersInput, companiesUncheckedUpdateWithoutUsers_companies_usersTousersInput>
  }

  export type companiesUpdateManyWithWhereWithoutUsers_companies_usersTousersInput = {
    where: companiesScalarWhereInput
    data: XOR<companiesUpdateManyMutationInput, companiesUncheckedUpdateManyWithoutUsers_companies_usersTousersInput>
  }

  export type companiesScalarWhereInput = {
    AND?: companiesScalarWhereInput | companiesScalarWhereInput[]
    OR?: companiesScalarWhereInput[]
    NOT?: companiesScalarWhereInput | companiesScalarWhereInput[]
    id?: StringFilter<"companies"> | string
    name?: StringFilter<"companies"> | string
    created_at?: DateTimeNullableFilter<"companies"> | Date | string | null
    udpated_at?: DateTimeNullableFilter<"companies"> | Date | string | null
    users?: StringFilter<"companies"> | string
    address?: StringFilter<"companies"> | string
  }

  export type presence_listUpsertWithWhereUniqueWithoutUsers_presence_list_usersTousersInput = {
    where: presence_listWhereUniqueInput
    update: XOR<presence_listUpdateWithoutUsers_presence_list_usersTousersInput, presence_listUncheckedUpdateWithoutUsers_presence_list_usersTousersInput>
    create: XOR<presence_listCreateWithoutUsers_presence_list_usersTousersInput, presence_listUncheckedCreateWithoutUsers_presence_list_usersTousersInput>
  }

  export type presence_listUpdateWithWhereUniqueWithoutUsers_presence_list_usersTousersInput = {
    where: presence_listWhereUniqueInput
    data: XOR<presence_listUpdateWithoutUsers_presence_list_usersTousersInput, presence_listUncheckedUpdateWithoutUsers_presence_list_usersTousersInput>
  }

  export type presence_listUpdateManyWithWhereWithoutUsers_presence_list_usersTousersInput = {
    where: presence_listScalarWhereInput
    data: XOR<presence_listUpdateManyMutationInput, presence_listUncheckedUpdateManyWithoutUsers_presence_list_usersTousersInput>
  }

  export type registrationsUpsertWithWhereUniqueWithoutUsers_registrations_usersTousersInput = {
    where: registrationsWhereUniqueInput
    update: XOR<registrationsUpdateWithoutUsers_registrations_usersTousersInput, registrationsUncheckedUpdateWithoutUsers_registrations_usersTousersInput>
    create: XOR<registrationsCreateWithoutUsers_registrations_usersTousersInput, registrationsUncheckedCreateWithoutUsers_registrations_usersTousersInput>
  }

  export type registrationsUpdateWithWhereUniqueWithoutUsers_registrations_usersTousersInput = {
    where: registrationsWhereUniqueInput
    data: XOR<registrationsUpdateWithoutUsers_registrations_usersTousersInput, registrationsUncheckedUpdateWithoutUsers_registrations_usersTousersInput>
  }

  export type registrationsUpdateManyWithWhereWithoutUsers_registrations_usersTousersInput = {
    where: registrationsScalarWhereInput
    data: XOR<registrationsUpdateManyMutationInput, registrationsUncheckedUpdateManyWithoutUsers_registrations_usersTousersInput>
  }

  export type tokensUpsertWithWhereUniqueWithoutUsers_tokens_usersTousersInput = {
    where: tokensWhereUniqueInput
    update: XOR<tokensUpdateWithoutUsers_tokens_usersTousersInput, tokensUncheckedUpdateWithoutUsers_tokens_usersTousersInput>
    create: XOR<tokensCreateWithoutUsers_tokens_usersTousersInput, tokensUncheckedCreateWithoutUsers_tokens_usersTousersInput>
  }

  export type tokensUpdateWithWhereUniqueWithoutUsers_tokens_usersTousersInput = {
    where: tokensWhereUniqueInput
    data: XOR<tokensUpdateWithoutUsers_tokens_usersTousersInput, tokensUncheckedUpdateWithoutUsers_tokens_usersTousersInput>
  }

  export type tokensUpdateManyWithWhereWithoutUsers_tokens_usersTousersInput = {
    where: tokensScalarWhereInput
    data: XOR<tokensUpdateManyMutationInput, tokensUncheckedUpdateManyWithoutUsers_tokens_usersTousersInput>
  }

  export type tokensScalarWhereInput = {
    AND?: tokensScalarWhereInput | tokensScalarWhereInput[]
    OR?: tokensScalarWhereInput[]
    NOT?: tokensScalarWhereInput | tokensScalarWhereInput[]
    id?: StringFilter<"tokens"> | string
    type?: StringFilter<"tokens"> | string
    expires_at?: DateTimeFilter<"tokens"> | Date | string
    createdAt_?: DateTimeFilter<"tokens"> | Date | string
    users?: StringFilter<"tokens"> | string
  }

  export type companiesUpsertWithoutUsers_users_companiesTocompaniesInput = {
    update: XOR<companiesUpdateWithoutUsers_users_companiesTocompaniesInput, companiesUncheckedUpdateWithoutUsers_users_companiesTocompaniesInput>
    create: XOR<companiesCreateWithoutUsers_users_companiesTocompaniesInput, companiesUncheckedCreateWithoutUsers_users_companiesTocompaniesInput>
    where?: companiesWhereInput
  }

  export type companiesUpdateToOneWithWhereWithoutUsers_users_companiesTocompaniesInput = {
    where?: companiesWhereInput
    data: XOR<companiesUpdateWithoutUsers_users_companiesTocompaniesInput, companiesUncheckedUpdateWithoutUsers_users_companiesTocompaniesInput>
  }

  export type companiesUpdateWithoutUsers_users_companiesTocompaniesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    udpated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: StringFieldUpdateOperationsInput | string
    classrooms_classrooms_companiesTocompanies?: classroomsUpdateManyWithoutCompanies_classrooms_companiesTocompaniesNestedInput
    users_companies_usersTousers?: usersUpdateOneRequiredWithoutCompanies_companies_usersTousersNestedInput
    configs_configs_companiesTocompanies?: configsUpdateManyWithoutCompanies_configs_companiesTocompaniesNestedInput
    courses_courses_companiesTocompanies?: coursesUpdateManyWithoutCompanies_courses_companiesTocompaniesNestedInput
    registrations_registrations_companiesTocompanies?: registrationsUpdateManyWithoutCompanies_registrations_companiesTocompaniesNestedInput
  }

  export type companiesUncheckedUpdateWithoutUsers_users_companiesTocompaniesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    udpated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    classrooms_classrooms_companiesTocompanies?: classroomsUncheckedUpdateManyWithoutCompanies_classrooms_companiesTocompaniesNestedInput
    configs_configs_companiesTocompanies?: configsUncheckedUpdateManyWithoutCompanies_configs_companiesTocompaniesNestedInput
    courses_courses_companiesTocompanies?: coursesUncheckedUpdateManyWithoutCompanies_courses_companiesTocompaniesNestedInput
    registrations_registrations_companiesTocompanies?: registrationsUncheckedUpdateManyWithoutCompanies_registrations_companiesTocompaniesNestedInput
  }

  export type users_rolesUpsertWithWhereUniqueWithoutUsersInput = {
    where: users_rolesWhereUniqueInput
    update: XOR<users_rolesUpdateWithoutUsersInput, users_rolesUncheckedUpdateWithoutUsersInput>
    create: XOR<users_rolesCreateWithoutUsersInput, users_rolesUncheckedCreateWithoutUsersInput>
  }

  export type users_rolesUpdateWithWhereUniqueWithoutUsersInput = {
    where: users_rolesWhereUniqueInput
    data: XOR<users_rolesUpdateWithoutUsersInput, users_rolesUncheckedUpdateWithoutUsersInput>
  }

  export type users_rolesUpdateManyWithWhereWithoutUsersInput = {
    where: users_rolesScalarWhereInput
    data: XOR<users_rolesUpdateManyMutationInput, users_rolesUncheckedUpdateManyWithoutUsersInput>
  }

  export type rolesCreateWithoutUsers_rolesInput = {
    id: string
    name: string
  }

  export type rolesUncheckedCreateWithoutUsers_rolesInput = {
    id: string
    name: string
  }

  export type rolesCreateOrConnectWithoutUsers_rolesInput = {
    where: rolesWhereUniqueInput
    create: XOR<rolesCreateWithoutUsers_rolesInput, rolesUncheckedCreateWithoutUsers_rolesInput>
  }

  export type usersCreateWithoutUsers_rolesInput = {
    id: string
    name: string
    email: string
    password: string
    avatar_url?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    cpf?: string | null
    phone?: string | null
    username: string
    gender?: string | null
    date_of_birth?: Date | string | null
    active?: boolean | null
    address?: string | null
    companies_companies_usersTousers?: companiesCreateNestedManyWithoutUsers_companies_usersTousersInput
    presence_list_presence_list_usersTousers?: presence_listCreateNestedManyWithoutUsers_presence_list_usersTousersInput
    registrations_registrations_usersTousers?: registrationsCreateNestedManyWithoutUsers_registrations_usersTousersInput
    tokens_tokens_usersTousers?: tokensCreateNestedManyWithoutUsers_tokens_usersTousersInput
    companies_users_companiesTocompanies: companiesCreateNestedOneWithoutUsers_users_companiesTocompaniesInput
  }

  export type usersUncheckedCreateWithoutUsers_rolesInput = {
    id: string
    name: string
    email: string
    password: string
    avatar_url?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    cpf?: string | null
    phone?: string | null
    username: string
    gender?: string | null
    date_of_birth?: Date | string | null
    active?: boolean | null
    address?: string | null
    companies: string
    companies_companies_usersTousers?: companiesUncheckedCreateNestedManyWithoutUsers_companies_usersTousersInput
    presence_list_presence_list_usersTousers?: presence_listUncheckedCreateNestedManyWithoutUsers_presence_list_usersTousersInput
    registrations_registrations_usersTousers?: registrationsUncheckedCreateNestedManyWithoutUsers_registrations_usersTousersInput
    tokens_tokens_usersTousers?: tokensUncheckedCreateNestedManyWithoutUsers_tokens_usersTousersInput
  }

  export type usersCreateOrConnectWithoutUsers_rolesInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutUsers_rolesInput, usersUncheckedCreateWithoutUsers_rolesInput>
  }

  export type rolesUpsertWithoutUsers_rolesInput = {
    update: XOR<rolesUpdateWithoutUsers_rolesInput, rolesUncheckedUpdateWithoutUsers_rolesInput>
    create: XOR<rolesCreateWithoutUsers_rolesInput, rolesUncheckedCreateWithoutUsers_rolesInput>
    where?: rolesWhereInput
  }

  export type rolesUpdateToOneWithWhereWithoutUsers_rolesInput = {
    where?: rolesWhereInput
    data: XOR<rolesUpdateWithoutUsers_rolesInput, rolesUncheckedUpdateWithoutUsers_rolesInput>
  }

  export type rolesUpdateWithoutUsers_rolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type rolesUncheckedUpdateWithoutUsers_rolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type usersUpsertWithoutUsers_rolesInput = {
    update: XOR<usersUpdateWithoutUsers_rolesInput, usersUncheckedUpdateWithoutUsers_rolesInput>
    create: XOR<usersCreateWithoutUsers_rolesInput, usersUncheckedCreateWithoutUsers_rolesInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutUsers_rolesInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutUsers_rolesInput, usersUncheckedUpdateWithoutUsers_rolesInput>
  }

  export type usersUpdateWithoutUsers_rolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    companies_companies_usersTousers?: companiesUpdateManyWithoutUsers_companies_usersTousersNestedInput
    presence_list_presence_list_usersTousers?: presence_listUpdateManyWithoutUsers_presence_list_usersTousersNestedInput
    registrations_registrations_usersTousers?: registrationsUpdateManyWithoutUsers_registrations_usersTousersNestedInput
    tokens_tokens_usersTousers?: tokensUpdateManyWithoutUsers_tokens_usersTousersNestedInput
    companies_users_companiesTocompanies?: companiesUpdateOneRequiredWithoutUsers_users_companiesTocompaniesNestedInput
  }

  export type usersUncheckedUpdateWithoutUsers_rolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    companies?: StringFieldUpdateOperationsInput | string
    companies_companies_usersTousers?: companiesUncheckedUpdateManyWithoutUsers_companies_usersTousersNestedInput
    presence_list_presence_list_usersTousers?: presence_listUncheckedUpdateManyWithoutUsers_presence_list_usersTousersNestedInput
    registrations_registrations_usersTousers?: registrationsUncheckedUpdateManyWithoutUsers_registrations_usersTousersNestedInput
    tokens_tokens_usersTousers?: tokensUncheckedUpdateManyWithoutUsers_tokens_usersTousersNestedInput
  }

  export type class_daysCreateManyRenamedclassInput = {
    id: string
    initial_date: Date | string
    final_date: Date | string
  }

  export type classesCreateManyRenamedclassInput = {
    id: string
    theme: string
    start_date: Date | string
    end_date: Date | string
  }

  export type class_daysUpdateWithoutRenamedclassInput = {
    id?: StringFieldUpdateOperationsInput | string
    initial_date?: DateTimeFieldUpdateOperationsInput | Date | string
    final_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type class_daysUncheckedUpdateWithoutRenamedclassInput = {
    id?: StringFieldUpdateOperationsInput | string
    initial_date?: DateTimeFieldUpdateOperationsInput | Date | string
    final_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type class_daysUncheckedUpdateManyWithoutRenamedclassInput = {
    id?: StringFieldUpdateOperationsInput | string
    initial_date?: DateTimeFieldUpdateOperationsInput | Date | string
    final_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type classesUpdateWithoutRenamedclassInput = {
    id?: StringFieldUpdateOperationsInput | string
    theme?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    presence_list_presence_list_classesToclasses?: presence_listUpdateManyWithoutClasses_presence_list_classesToclassesNestedInput
  }

  export type classesUncheckedUpdateWithoutRenamedclassInput = {
    id?: StringFieldUpdateOperationsInput | string
    theme?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    presence_list_presence_list_classesToclasses?: presence_listUncheckedUpdateManyWithoutClasses_presence_list_classesToclassesNestedInput
  }

  export type classesUncheckedUpdateManyWithoutRenamedclassInput = {
    id?: StringFieldUpdateOperationsInput | string
    theme?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type presence_listCreateManyClasses_presence_list_classesToclassesInput = {
    id: string
    is_present?: boolean
    users: string
  }

  export type presence_listUpdateWithoutClasses_presence_list_classesToclassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    is_present?: BoolFieldUpdateOperationsInput | boolean
    users_presence_list_usersTousers?: usersUpdateOneRequiredWithoutPresence_list_presence_list_usersTousersNestedInput
  }

  export type presence_listUncheckedUpdateWithoutClasses_presence_list_classesToclassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    is_present?: BoolFieldUpdateOperationsInput | boolean
    users?: StringFieldUpdateOperationsInput | string
  }

  export type presence_listUncheckedUpdateManyWithoutClasses_presence_list_classesToclassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    is_present?: BoolFieldUpdateOperationsInput | boolean
    users?: StringFieldUpdateOperationsInput | string
  }

  export type classroomsCreateManyCompanies_classrooms_companiesTocompaniesInput = {
    id: string
    number: Decimal | DecimalJsLike | number | string
    created_at?: Date | string
    block?: string | null
  }

  export type configsCreateManyCompanies_configs_companiesTocompaniesInput = {
    id: string
    registrations_time?: Decimal | DecimalJsLike | number | string
  }

  export type coursesCreateManyCompanies_courses_companiesTocompaniesInput = {
    id: string
    description?: string | null
    created_at?: Date | string
    name: string
    registration_value: Decimal | DecimalJsLike | number | string
    workload: Decimal | DecimalJsLike | number | string
    monthly_fee_value: Decimal | DecimalJsLike | number | string
    minimum_grade: Decimal | DecimalJsLike | number | string
    maximum_grade: Decimal | DecimalJsLike | number | string
    minimum_frequency: Decimal | DecimalJsLike | number | string
    syllabus?: Uint8Array | null
  }

  export type registrationsCreateManyCompanies_registrations_companiesTocompaniesInput = {
    id: string
    start_date?: Date | string
    monthly_fee_amount?: Decimal | DecimalJsLike | number | string
    created_at?: Date | string | null
    locked?: boolean | null
    completed?: boolean | null
    users?: string | null
  }

  export type usersCreateManyCompanies_users_companiesTocompaniesInput = {
    id: string
    name: string
    email: string
    password: string
    avatar_url?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    cpf?: string | null
    phone?: string | null
    username: string
    gender?: string | null
    date_of_birth?: Date | string | null
    active?: boolean | null
    address?: string | null
  }

  export type classroomsUpdateWithoutCompanies_classrooms_companiesTocompaniesInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    block?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type classroomsUncheckedUpdateWithoutCompanies_classrooms_companiesTocompaniesInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    block?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type classroomsUncheckedUpdateManyWithoutCompanies_classrooms_companiesTocompaniesInput = {
    id?: StringFieldUpdateOperationsInput | string
    number?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    block?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type configsUpdateWithoutCompanies_configs_companiesTocompaniesInput = {
    id?: StringFieldUpdateOperationsInput | string
    registrations_time?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type configsUncheckedUpdateWithoutCompanies_configs_companiesTocompaniesInput = {
    id?: StringFieldUpdateOperationsInput | string
    registrations_time?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type configsUncheckedUpdateManyWithoutCompanies_configs_companiesTocompaniesInput = {
    id?: StringFieldUpdateOperationsInput | string
    registrations_time?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type coursesUpdateWithoutCompanies_courses_companiesTocompaniesInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    registration_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    workload?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    monthly_fee_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    minimum_grade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    maximum_grade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    minimum_frequency?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    syllabus?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    Renamedclass_Renamedclass_coursesTocourses?: RenamedclassUpdateManyWithoutCourses_Renamedclass_coursesTocoursesNestedInput
    levels_levels_coursesTocourses?: levelsUpdateManyWithoutCourses_levels_coursesTocoursesNestedInput
  }

  export type coursesUncheckedUpdateWithoutCompanies_courses_companiesTocompaniesInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    registration_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    workload?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    monthly_fee_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    minimum_grade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    maximum_grade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    minimum_frequency?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    syllabus?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    Renamedclass_Renamedclass_coursesTocourses?: RenamedclassUncheckedUpdateManyWithoutCourses_Renamedclass_coursesTocoursesNestedInput
    levels_levels_coursesTocourses?: levelsUncheckedUpdateManyWithoutCourses_levels_coursesTocoursesNestedInput
  }

  export type coursesUncheckedUpdateManyWithoutCompanies_courses_companiesTocompaniesInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    registration_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    workload?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    monthly_fee_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    minimum_grade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    maximum_grade?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    minimum_frequency?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    syllabus?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
  }

  export type registrationsUpdateWithoutCompanies_registrations_companiesTocompaniesInput = {
    id?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthly_fee_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    locked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    completed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    monthly_fee_monthly_fee_registrationsToregistrations?: monthly_feeUpdateManyWithoutRegistrations_monthly_fee_registrationsToregistrationsNestedInput
    records_of_students_records_of_students_registrationsToregistrations?: records_of_studentsUpdateManyWithoutRegistrations_records_of_students_registrationsToregistrationsNestedInput
    users_registrations_usersTousers?: usersUpdateOneWithoutRegistrations_registrations_usersTousersNestedInput
  }

  export type registrationsUncheckedUpdateWithoutCompanies_registrations_companiesTocompaniesInput = {
    id?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthly_fee_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    locked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    completed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    users?: NullableStringFieldUpdateOperationsInput | string | null
    monthly_fee_monthly_fee_registrationsToregistrations?: monthly_feeUncheckedUpdateManyWithoutRegistrations_monthly_fee_registrationsToregistrationsNestedInput
    records_of_students_records_of_students_registrationsToregistrations?: records_of_studentsUncheckedUpdateManyWithoutRegistrations_records_of_students_registrationsToregistrationsNestedInput
  }

  export type registrationsUncheckedUpdateManyWithoutCompanies_registrations_companiesTocompaniesInput = {
    id?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthly_fee_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    locked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    completed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    users?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type usersUpdateWithoutCompanies_users_companiesTocompaniesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    companies_companies_usersTousers?: companiesUpdateManyWithoutUsers_companies_usersTousersNestedInput
    presence_list_presence_list_usersTousers?: presence_listUpdateManyWithoutUsers_presence_list_usersTousersNestedInput
    registrations_registrations_usersTousers?: registrationsUpdateManyWithoutUsers_registrations_usersTousersNestedInput
    tokens_tokens_usersTousers?: tokensUpdateManyWithoutUsers_tokens_usersTousersNestedInput
    users_roles?: users_rolesUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutCompanies_users_companiesTocompaniesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    companies_companies_usersTousers?: companiesUncheckedUpdateManyWithoutUsers_companies_usersTousersNestedInput
    presence_list_presence_list_usersTousers?: presence_listUncheckedUpdateManyWithoutUsers_presence_list_usersTousersNestedInput
    registrations_registrations_usersTousers?: registrationsUncheckedUpdateManyWithoutUsers_registrations_usersTousersNestedInput
    tokens_tokens_usersTousers?: tokensUncheckedUpdateManyWithoutUsers_tokens_usersTousersNestedInput
    users_roles?: users_rolesUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateManyWithoutCompanies_users_companiesTocompaniesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_birth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RenamedclassCreateManyCourses_Renamedclass_coursesTocoursesInput = {
    id: string
    nome: string
    vacancies: Decimal | DecimalJsLike | number | string
  }

  export type levelsCreateManyCourses_levels_coursesTocoursesInput = {
    id: string
    name: string
    level: Decimal | DecimalJsLike | number | string
  }

  export type RenamedclassUpdateWithoutCourses_Renamedclass_coursesTocoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    vacancies?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    class_days?: class_daysUpdateManyWithoutRenamedclassNestedInput
    classes?: classesUpdateManyWithoutRenamedclassNestedInput
  }

  export type RenamedclassUncheckedUpdateWithoutCourses_Renamedclass_coursesTocoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    vacancies?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    class_days?: class_daysUncheckedUpdateManyWithoutRenamedclassNestedInput
    classes?: classesUncheckedUpdateManyWithoutRenamedclassNestedInput
  }

  export type RenamedclassUncheckedUpdateManyWithoutCourses_Renamedclass_coursesTocoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    vacancies?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type levelsUpdateWithoutCourses_levels_coursesTocoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    level?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discipline_discipline_levelsTolevels?: disciplineUpdateManyWithoutLevels_discipline_levelsTolevelsNestedInput
    materials_materials_levelsTolevels?: materialsUpdateManyWithoutLevels_materials_levelsTolevelsNestedInput
  }

  export type levelsUncheckedUpdateWithoutCourses_levels_coursesTocoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    level?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    discipline_discipline_levelsTolevels?: disciplineUncheckedUpdateManyWithoutLevels_discipline_levelsTolevelsNestedInput
    materials_materials_levelsTolevels?: materialsUncheckedUpdateManyWithoutLevels_materials_levelsTolevelsNestedInput
  }

  export type levelsUncheckedUpdateManyWithoutCourses_levels_coursesTocoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    level?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type tasksCreateManyDisciplineInput = {
    id: string
    created_at?: Date | string
    file?: Uint8Array | null
    score?: number | null
    description?: string | null
    title: string
    due_date?: Date | string | null
  }

  export type tasksUpdateWithoutDisciplineInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    file?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tasksUncheckedUpdateWithoutDisciplineInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    file?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type tasksUncheckedUpdateManyWithoutDisciplineInput = {
    id?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    file?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    title?: StringFieldUpdateOperationsInput | string
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type disciplineCreateManyLevels_discipline_levelsTolevelsInput = {
    id: string
    name: string
  }

  export type materialsCreateManyLevels_materials_levelsTolevelsInput = {
    id: string
    name: string
    file: Uint8Array
  }

  export type disciplineUpdateWithoutLevels_discipline_levelsTolevelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tasks?: tasksUpdateManyWithoutDisciplineNestedInput
  }

  export type disciplineUncheckedUpdateWithoutLevels_discipline_levelsTolevelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    tasks?: tasksUncheckedUpdateManyWithoutDisciplineNestedInput
  }

  export type disciplineUncheckedUpdateManyWithoutLevels_discipline_levelsTolevelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type materialsUpdateWithoutLevels_materials_levelsTolevelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    file?: BytesFieldUpdateOperationsInput | Uint8Array
  }

  export type materialsUncheckedUpdateWithoutLevels_materials_levelsTolevelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    file?: BytesFieldUpdateOperationsInput | Uint8Array
  }

  export type materialsUncheckedUpdateManyWithoutLevels_materials_levelsTolevelsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    file?: BytesFieldUpdateOperationsInput | Uint8Array
  }

  export type monthly_feeCreateManyRegistrations_monthly_fee_registrationsToregistrationsInput = {
    id: string
    due_date: Date | string
    value: Decimal | DecimalJsLike | number | string
    paid?: boolean
    discount_payment_before_due_date?: Decimal | DecimalJsLike | number | string
    payment_method?: string | null
    date_of_payment?: Date | string | null
  }

  export type records_of_studentsCreateManyRegistrations_records_of_students_registrationsToregistrationsInput = {
    id?: number
    description?: string | null
    title?: string | null
    created_at?: Date | string | null
  }

  export type monthly_feeUpdateWithoutRegistrations_monthly_fee_registrationsToregistrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paid?: BoolFieldUpdateOperationsInput | boolean
    discount_payment_before_due_date?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payment_method?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_payment?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type monthly_feeUncheckedUpdateWithoutRegistrations_monthly_fee_registrationsToregistrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paid?: BoolFieldUpdateOperationsInput | boolean
    discount_payment_before_due_date?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payment_method?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_payment?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type monthly_feeUncheckedUpdateManyWithoutRegistrations_monthly_fee_registrationsToregistrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paid?: BoolFieldUpdateOperationsInput | boolean
    discount_payment_before_due_date?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payment_method?: NullableStringFieldUpdateOperationsInput | string | null
    date_of_payment?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type records_of_studentsUpdateWithoutRegistrations_records_of_students_registrationsToregistrationsInput = {
    description?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type records_of_studentsUncheckedUpdateWithoutRegistrations_records_of_students_registrationsToregistrationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type records_of_studentsUncheckedUpdateManyWithoutRegistrations_records_of_students_registrationsToregistrationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type users_rolesCreateManyRolesInput = {
    id: string
    users_id: string
  }

  export type users_rolesUpdateWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    users?: usersUpdateOneRequiredWithoutUsers_rolesNestedInput
  }

  export type users_rolesUncheckedUpdateWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    users_id?: StringFieldUpdateOperationsInput | string
  }

  export type users_rolesUncheckedUpdateManyWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    users_id?: StringFieldUpdateOperationsInput | string
  }

  export type companiesCreateManyUsers_companies_usersTousersInput = {
    id: string
    name: string
    created_at?: Date | string | null
    udpated_at?: Date | string | null
    address: string
  }

  export type presence_listCreateManyUsers_presence_list_usersTousersInput = {
    id: string
    is_present?: boolean
    classes: string
  }

  export type registrationsCreateManyUsers_registrations_usersTousersInput = {
    id: string
    start_date?: Date | string
    monthly_fee_amount?: Decimal | DecimalJsLike | number | string
    created_at?: Date | string | null
    locked?: boolean | null
    completed?: boolean | null
    companies?: string | null
  }

  export type tokensCreateManyUsers_tokens_usersTousersInput = {
    id: string
    type: string
    expires_at: Date | string
    createdAt_?: Date | string
  }

  export type users_rolesCreateManyUsersInput = {
    id: string
    role_id: string
  }

  export type companiesUpdateWithoutUsers_companies_usersTousersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    udpated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: StringFieldUpdateOperationsInput | string
    classrooms_classrooms_companiesTocompanies?: classroomsUpdateManyWithoutCompanies_classrooms_companiesTocompaniesNestedInput
    configs_configs_companiesTocompanies?: configsUpdateManyWithoutCompanies_configs_companiesTocompaniesNestedInput
    courses_courses_companiesTocompanies?: coursesUpdateManyWithoutCompanies_courses_companiesTocompaniesNestedInput
    registrations_registrations_companiesTocompanies?: registrationsUpdateManyWithoutCompanies_registrations_companiesTocompaniesNestedInput
    users_users_companiesTocompanies?: usersUpdateManyWithoutCompanies_users_companiesTocompaniesNestedInput
  }

  export type companiesUncheckedUpdateWithoutUsers_companies_usersTousersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    udpated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: StringFieldUpdateOperationsInput | string
    classrooms_classrooms_companiesTocompanies?: classroomsUncheckedUpdateManyWithoutCompanies_classrooms_companiesTocompaniesNestedInput
    configs_configs_companiesTocompanies?: configsUncheckedUpdateManyWithoutCompanies_configs_companiesTocompaniesNestedInput
    courses_courses_companiesTocompanies?: coursesUncheckedUpdateManyWithoutCompanies_courses_companiesTocompaniesNestedInput
    registrations_registrations_companiesTocompanies?: registrationsUncheckedUpdateManyWithoutCompanies_registrations_companiesTocompaniesNestedInput
    users_users_companiesTocompanies?: usersUncheckedUpdateManyWithoutCompanies_users_companiesTocompaniesNestedInput
  }

  export type companiesUncheckedUpdateManyWithoutUsers_companies_usersTousersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    udpated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: StringFieldUpdateOperationsInput | string
  }

  export type presence_listUpdateWithoutUsers_presence_list_usersTousersInput = {
    id?: StringFieldUpdateOperationsInput | string
    is_present?: BoolFieldUpdateOperationsInput | boolean
    classes_presence_list_classesToclasses?: classesUpdateOneRequiredWithoutPresence_list_presence_list_classesToclassesNestedInput
  }

  export type presence_listUncheckedUpdateWithoutUsers_presence_list_usersTousersInput = {
    id?: StringFieldUpdateOperationsInput | string
    is_present?: BoolFieldUpdateOperationsInput | boolean
    classes?: StringFieldUpdateOperationsInput | string
  }

  export type presence_listUncheckedUpdateManyWithoutUsers_presence_list_usersTousersInput = {
    id?: StringFieldUpdateOperationsInput | string
    is_present?: BoolFieldUpdateOperationsInput | boolean
    classes?: StringFieldUpdateOperationsInput | string
  }

  export type registrationsUpdateWithoutUsers_registrations_usersTousersInput = {
    id?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthly_fee_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    locked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    completed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    monthly_fee_monthly_fee_registrationsToregistrations?: monthly_feeUpdateManyWithoutRegistrations_monthly_fee_registrationsToregistrationsNestedInput
    records_of_students_records_of_students_registrationsToregistrations?: records_of_studentsUpdateManyWithoutRegistrations_records_of_students_registrationsToregistrationsNestedInput
    companies_registrations_companiesTocompanies?: companiesUpdateOneWithoutRegistrations_registrations_companiesTocompaniesNestedInput
  }

  export type registrationsUncheckedUpdateWithoutUsers_registrations_usersTousersInput = {
    id?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthly_fee_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    locked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    completed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    companies?: NullableStringFieldUpdateOperationsInput | string | null
    monthly_fee_monthly_fee_registrationsToregistrations?: monthly_feeUncheckedUpdateManyWithoutRegistrations_monthly_fee_registrationsToregistrationsNestedInput
    records_of_students_records_of_students_registrationsToregistrations?: records_of_studentsUncheckedUpdateManyWithoutRegistrations_records_of_students_registrationsToregistrationsNestedInput
  }

  export type registrationsUncheckedUpdateManyWithoutUsers_registrations_usersTousersInput = {
    id?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthly_fee_amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    locked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    completed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    companies?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type tokensUpdateWithoutUsers_tokens_usersTousersInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt_?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type tokensUncheckedUpdateWithoutUsers_tokens_usersTousersInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt_?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type tokensUncheckedUpdateManyWithoutUsers_tokens_usersTousersInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt_?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type users_rolesUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    roles?: rolesUpdateOneRequiredWithoutUsers_rolesNestedInput
  }

  export type users_rolesUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    role_id?: StringFieldUpdateOperationsInput | string
  }

  export type users_rolesUncheckedUpdateManyWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    role_id?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}