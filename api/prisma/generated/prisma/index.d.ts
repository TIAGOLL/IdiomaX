
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model adresses
 * 
 */
export type adresses = $Result.DefaultSelection<Prisma.$adressesPayload>
/**
 * Model auth
 * 
 */
export type auth = $Result.DefaultSelection<Prisma.$authPayload>
/**
 * Model boleto_api
 * 
 */
export type boleto_api = $Result.DefaultSelection<Prisma.$boleto_apiPayload>
/**
 * Model books
 * 
 */
export type books = $Result.DefaultSelection<Prisma.$booksPayload>
/**
 * Model classes
 * 
 */
export type classes = $Result.DefaultSelection<Prisma.$classesPayload>
/**
 * Model classrooms
 * 
 */
export type classrooms = $Result.DefaultSelection<Prisma.$classroomsPayload>
/**
 * Model configs
 * 
 */
export type configs = $Result.DefaultSelection<Prisma.$configsPayload>
/**
 * Model courses
 * 
 */
export type courses = $Result.DefaultSelection<Prisma.$coursesPayload>
/**
 * Model lessons
 * 
 */
export type lessons = $Result.DefaultSelection<Prisma.$lessonsPayload>
/**
 * Model monthly_fee
 * 
 */
export type monthly_fee = $Result.DefaultSelection<Prisma.$monthly_feePayload>
/**
 * Model permissions
 * 
 */
export type permissions = $Result.DefaultSelection<Prisma.$permissionsPayload>
/**
 * Model presence_list
 * 
 */
export type presence_list = $Result.DefaultSelection<Prisma.$presence_listPayload>
/**
 * Model professionals
 * 
 */
export type professionals = $Result.DefaultSelection<Prisma.$professionalsPayload>
/**
 * Model records_of_students
 * 
 */
export type records_of_students = $Result.DefaultSelection<Prisma.$records_of_studentsPayload>
/**
 * Model registrations
 * 
 */
export type registrations = $Result.DefaultSelection<Prisma.$registrationsPayload>
/**
 * Model role
 * 
 */
export type role = $Result.DefaultSelection<Prisma.$rolePayload>
/**
 * Model students
 * 
 */
export type students = $Result.DefaultSelection<Prisma.$studentsPayload>
/**
 * Model students_has_classrooms
 * 
 */
export type students_has_classrooms = $Result.DefaultSelection<Prisma.$students_has_classroomsPayload>
/**
 * Model tasks
 * 
 */
export type tasks = $Result.DefaultSelection<Prisma.$tasksPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Adresses
 * const adresses = await prisma.adresses.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Adresses
   * const adresses = await prisma.adresses.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.adresses`: Exposes CRUD operations for the **adresses** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Adresses
    * const adresses = await prisma.adresses.findMany()
    * ```
    */
  get adresses(): Prisma.adressesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.auth`: Exposes CRUD operations for the **auth** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Auths
    * const auths = await prisma.auth.findMany()
    * ```
    */
  get auth(): Prisma.authDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.boleto_api`: Exposes CRUD operations for the **boleto_api** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Boleto_apis
    * const boleto_apis = await prisma.boleto_api.findMany()
    * ```
    */
  get boleto_api(): Prisma.boleto_apiDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.books`: Exposes CRUD operations for the **books** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Books
    * const books = await prisma.books.findMany()
    * ```
    */
  get books(): Prisma.booksDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.classes`: Exposes CRUD operations for the **classes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Classes
    * const classes = await prisma.classes.findMany()
    * ```
    */
  get classes(): Prisma.classesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.classrooms`: Exposes CRUD operations for the **classrooms** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Classrooms
    * const classrooms = await prisma.classrooms.findMany()
    * ```
    */
  get classrooms(): Prisma.classroomsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.configs`: Exposes CRUD operations for the **configs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Configs
    * const configs = await prisma.configs.findMany()
    * ```
    */
  get configs(): Prisma.configsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.courses`: Exposes CRUD operations for the **courses** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Courses
    * const courses = await prisma.courses.findMany()
    * ```
    */
  get courses(): Prisma.coursesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.lessons`: Exposes CRUD operations for the **lessons** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lessons
    * const lessons = await prisma.lessons.findMany()
    * ```
    */
  get lessons(): Prisma.lessonsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.monthly_fee`: Exposes CRUD operations for the **monthly_fee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Monthly_fees
    * const monthly_fees = await prisma.monthly_fee.findMany()
    * ```
    */
  get monthly_fee(): Prisma.monthly_feeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.permissions`: Exposes CRUD operations for the **permissions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Permissions
    * const permissions = await prisma.permissions.findMany()
    * ```
    */
  get permissions(): Prisma.permissionsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.presence_list`: Exposes CRUD operations for the **presence_list** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Presence_lists
    * const presence_lists = await prisma.presence_list.findMany()
    * ```
    */
  get presence_list(): Prisma.presence_listDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.professionals`: Exposes CRUD operations for the **professionals** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Professionals
    * const professionals = await prisma.professionals.findMany()
    * ```
    */
  get professionals(): Prisma.professionalsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.records_of_students`: Exposes CRUD operations for the **records_of_students** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Records_of_students
    * const records_of_students = await prisma.records_of_students.findMany()
    * ```
    */
  get records_of_students(): Prisma.records_of_studentsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.registrations`: Exposes CRUD operations for the **registrations** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Registrations
    * const registrations = await prisma.registrations.findMany()
    * ```
    */
  get registrations(): Prisma.registrationsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.roleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.students`: Exposes CRUD operations for the **students** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Students
    * const students = await prisma.students.findMany()
    * ```
    */
  get students(): Prisma.studentsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.students_has_classrooms`: Exposes CRUD operations for the **students_has_classrooms** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Students_has_classrooms
    * const students_has_classrooms = await prisma.students_has_classrooms.findMany()
    * ```
    */
  get students_has_classrooms(): Prisma.students_has_classroomsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.tasks`: Exposes CRUD operations for the **tasks** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tasks
    * const tasks = await prisma.tasks.findMany()
    * ```
    */
  get tasks(): Prisma.tasksDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.14.0
   * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    adresses: 'adresses',
    auth: 'auth',
    boleto_api: 'boleto_api',
    books: 'books',
    classes: 'classes',
    classrooms: 'classrooms',
    configs: 'configs',
    courses: 'courses',
    lessons: 'lessons',
    monthly_fee: 'monthly_fee',
    permissions: 'permissions',
    presence_list: 'presence_list',
    professionals: 'professionals',
    records_of_students: 'records_of_students',
    registrations: 'registrations',
    role: 'role',
    students: 'students',
    students_has_classrooms: 'students_has_classrooms',
    tasks: 'tasks'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "adresses" | "auth" | "boleto_api" | "books" | "classes" | "classrooms" | "configs" | "courses" | "lessons" | "monthly_fee" | "permissions" | "presence_list" | "professionals" | "records_of_students" | "registrations" | "role" | "students" | "students_has_classrooms" | "tasks"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      adresses: {
        payload: Prisma.$adressesPayload<ExtArgs>
        fields: Prisma.adressesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.adressesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adressesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.adressesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adressesPayload>
          }
          findFirst: {
            args: Prisma.adressesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adressesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.adressesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adressesPayload>
          }
          findMany: {
            args: Prisma.adressesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adressesPayload>[]
          }
          create: {
            args: Prisma.adressesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adressesPayload>
          }
          createMany: {
            args: Prisma.adressesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.adressesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adressesPayload>[]
          }
          delete: {
            args: Prisma.adressesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adressesPayload>
          }
          update: {
            args: Prisma.adressesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adressesPayload>
          }
          deleteMany: {
            args: Prisma.adressesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.adressesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.adressesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adressesPayload>[]
          }
          upsert: {
            args: Prisma.adressesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$adressesPayload>
          }
          aggregate: {
            args: Prisma.AdressesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdresses>
          }
          groupBy: {
            args: Prisma.adressesGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdressesGroupByOutputType>[]
          }
          count: {
            args: Prisma.adressesCountArgs<ExtArgs>
            result: $Utils.Optional<AdressesCountAggregateOutputType> | number
          }
        }
      }
      auth: {
        payload: Prisma.$authPayload<ExtArgs>
        fields: Prisma.authFieldRefs
        operations: {
          findUnique: {
            args: Prisma.authFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$authPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.authFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$authPayload>
          }
          findFirst: {
            args: Prisma.authFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$authPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.authFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$authPayload>
          }
          findMany: {
            args: Prisma.authFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$authPayload>[]
          }
          create: {
            args: Prisma.authCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$authPayload>
          }
          createMany: {
            args: Prisma.authCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.authCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$authPayload>[]
          }
          delete: {
            args: Prisma.authDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$authPayload>
          }
          update: {
            args: Prisma.authUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$authPayload>
          }
          deleteMany: {
            args: Prisma.authDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.authUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.authUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$authPayload>[]
          }
          upsert: {
            args: Prisma.authUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$authPayload>
          }
          aggregate: {
            args: Prisma.AuthAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuth>
          }
          groupBy: {
            args: Prisma.authGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuthGroupByOutputType>[]
          }
          count: {
            args: Prisma.authCountArgs<ExtArgs>
            result: $Utils.Optional<AuthCountAggregateOutputType> | number
          }
        }
      }
      boleto_api: {
        payload: Prisma.$boleto_apiPayload<ExtArgs>
        fields: Prisma.boleto_apiFieldRefs
        operations: {
          findUnique: {
            args: Prisma.boleto_apiFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$boleto_apiPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.boleto_apiFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$boleto_apiPayload>
          }
          findFirst: {
            args: Prisma.boleto_apiFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$boleto_apiPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.boleto_apiFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$boleto_apiPayload>
          }
          findMany: {
            args: Prisma.boleto_apiFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$boleto_apiPayload>[]
          }
          create: {
            args: Prisma.boleto_apiCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$boleto_apiPayload>
          }
          createMany: {
            args: Prisma.boleto_apiCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.boleto_apiCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$boleto_apiPayload>[]
          }
          delete: {
            args: Prisma.boleto_apiDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$boleto_apiPayload>
          }
          update: {
            args: Prisma.boleto_apiUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$boleto_apiPayload>
          }
          deleteMany: {
            args: Prisma.boleto_apiDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.boleto_apiUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.boleto_apiUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$boleto_apiPayload>[]
          }
          upsert: {
            args: Prisma.boleto_apiUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$boleto_apiPayload>
          }
          aggregate: {
            args: Prisma.Boleto_apiAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBoleto_api>
          }
          groupBy: {
            args: Prisma.boleto_apiGroupByArgs<ExtArgs>
            result: $Utils.Optional<Boleto_apiGroupByOutputType>[]
          }
          count: {
            args: Prisma.boleto_apiCountArgs<ExtArgs>
            result: $Utils.Optional<Boleto_apiCountAggregateOutputType> | number
          }
        }
      }
      books: {
        payload: Prisma.$booksPayload<ExtArgs>
        fields: Prisma.booksFieldRefs
        operations: {
          findUnique: {
            args: Prisma.booksFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$booksPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.booksFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$booksPayload>
          }
          findFirst: {
            args: Prisma.booksFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$booksPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.booksFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$booksPayload>
          }
          findMany: {
            args: Prisma.booksFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$booksPayload>[]
          }
          create: {
            args: Prisma.booksCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$booksPayload>
          }
          createMany: {
            args: Prisma.booksCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.booksCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$booksPayload>[]
          }
          delete: {
            args: Prisma.booksDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$booksPayload>
          }
          update: {
            args: Prisma.booksUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$booksPayload>
          }
          deleteMany: {
            args: Prisma.booksDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.booksUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.booksUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$booksPayload>[]
          }
          upsert: {
            args: Prisma.booksUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$booksPayload>
          }
          aggregate: {
            args: Prisma.BooksAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBooks>
          }
          groupBy: {
            args: Prisma.booksGroupByArgs<ExtArgs>
            result: $Utils.Optional<BooksGroupByOutputType>[]
          }
          count: {
            args: Prisma.booksCountArgs<ExtArgs>
            result: $Utils.Optional<BooksCountAggregateOutputType> | number
          }
        }
      }
      classes: {
        payload: Prisma.$classesPayload<ExtArgs>
        fields: Prisma.classesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.classesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.classesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classesPayload>
          }
          findFirst: {
            args: Prisma.classesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.classesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classesPayload>
          }
          findMany: {
            args: Prisma.classesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classesPayload>[]
          }
          create: {
            args: Prisma.classesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classesPayload>
          }
          createMany: {
            args: Prisma.classesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.classesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classesPayload>[]
          }
          delete: {
            args: Prisma.classesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classesPayload>
          }
          update: {
            args: Prisma.classesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classesPayload>
          }
          deleteMany: {
            args: Prisma.classesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.classesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.classesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classesPayload>[]
          }
          upsert: {
            args: Prisma.classesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classesPayload>
          }
          aggregate: {
            args: Prisma.ClassesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClasses>
          }
          groupBy: {
            args: Prisma.classesGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClassesGroupByOutputType>[]
          }
          count: {
            args: Prisma.classesCountArgs<ExtArgs>
            result: $Utils.Optional<ClassesCountAggregateOutputType> | number
          }
        }
      }
      classrooms: {
        payload: Prisma.$classroomsPayload<ExtArgs>
        fields: Prisma.classroomsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.classroomsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classroomsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.classroomsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classroomsPayload>
          }
          findFirst: {
            args: Prisma.classroomsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classroomsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.classroomsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classroomsPayload>
          }
          findMany: {
            args: Prisma.classroomsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classroomsPayload>[]
          }
          create: {
            args: Prisma.classroomsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classroomsPayload>
          }
          createMany: {
            args: Prisma.classroomsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.classroomsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classroomsPayload>[]
          }
          delete: {
            args: Prisma.classroomsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classroomsPayload>
          }
          update: {
            args: Prisma.classroomsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classroomsPayload>
          }
          deleteMany: {
            args: Prisma.classroomsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.classroomsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.classroomsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classroomsPayload>[]
          }
          upsert: {
            args: Prisma.classroomsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$classroomsPayload>
          }
          aggregate: {
            args: Prisma.ClassroomsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClassrooms>
          }
          groupBy: {
            args: Prisma.classroomsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClassroomsGroupByOutputType>[]
          }
          count: {
            args: Prisma.classroomsCountArgs<ExtArgs>
            result: $Utils.Optional<ClassroomsCountAggregateOutputType> | number
          }
        }
      }
      configs: {
        payload: Prisma.$configsPayload<ExtArgs>
        fields: Prisma.configsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.configsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$configsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.configsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$configsPayload>
          }
          findFirst: {
            args: Prisma.configsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$configsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.configsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$configsPayload>
          }
          findMany: {
            args: Prisma.configsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$configsPayload>[]
          }
          create: {
            args: Prisma.configsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$configsPayload>
          }
          createMany: {
            args: Prisma.configsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.configsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$configsPayload>[]
          }
          delete: {
            args: Prisma.configsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$configsPayload>
          }
          update: {
            args: Prisma.configsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$configsPayload>
          }
          deleteMany: {
            args: Prisma.configsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.configsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.configsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$configsPayload>[]
          }
          upsert: {
            args: Prisma.configsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$configsPayload>
          }
          aggregate: {
            args: Prisma.ConfigsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateConfigs>
          }
          groupBy: {
            args: Prisma.configsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ConfigsGroupByOutputType>[]
          }
          count: {
            args: Prisma.configsCountArgs<ExtArgs>
            result: $Utils.Optional<ConfigsCountAggregateOutputType> | number
          }
        }
      }
      courses: {
        payload: Prisma.$coursesPayload<ExtArgs>
        fields: Prisma.coursesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.coursesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.coursesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursesPayload>
          }
          findFirst: {
            args: Prisma.coursesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.coursesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursesPayload>
          }
          findMany: {
            args: Prisma.coursesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursesPayload>[]
          }
          create: {
            args: Prisma.coursesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursesPayload>
          }
          createMany: {
            args: Prisma.coursesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.coursesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursesPayload>[]
          }
          delete: {
            args: Prisma.coursesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursesPayload>
          }
          update: {
            args: Prisma.coursesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursesPayload>
          }
          deleteMany: {
            args: Prisma.coursesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.coursesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.coursesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursesPayload>[]
          }
          upsert: {
            args: Prisma.coursesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$coursesPayload>
          }
          aggregate: {
            args: Prisma.CoursesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCourses>
          }
          groupBy: {
            args: Prisma.coursesGroupByArgs<ExtArgs>
            result: $Utils.Optional<CoursesGroupByOutputType>[]
          }
          count: {
            args: Prisma.coursesCountArgs<ExtArgs>
            result: $Utils.Optional<CoursesCountAggregateOutputType> | number
          }
        }
      }
      lessons: {
        payload: Prisma.$lessonsPayload<ExtArgs>
        fields: Prisma.lessonsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.lessonsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lessonsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.lessonsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lessonsPayload>
          }
          findFirst: {
            args: Prisma.lessonsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lessonsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.lessonsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lessonsPayload>
          }
          findMany: {
            args: Prisma.lessonsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lessonsPayload>[]
          }
          create: {
            args: Prisma.lessonsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lessonsPayload>
          }
          createMany: {
            args: Prisma.lessonsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.lessonsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lessonsPayload>[]
          }
          delete: {
            args: Prisma.lessonsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lessonsPayload>
          }
          update: {
            args: Prisma.lessonsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lessonsPayload>
          }
          deleteMany: {
            args: Prisma.lessonsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.lessonsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.lessonsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lessonsPayload>[]
          }
          upsert: {
            args: Prisma.lessonsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$lessonsPayload>
          }
          aggregate: {
            args: Prisma.LessonsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLessons>
          }
          groupBy: {
            args: Prisma.lessonsGroupByArgs<ExtArgs>
            result: $Utils.Optional<LessonsGroupByOutputType>[]
          }
          count: {
            args: Prisma.lessonsCountArgs<ExtArgs>
            result: $Utils.Optional<LessonsCountAggregateOutputType> | number
          }
        }
      }
      monthly_fee: {
        payload: Prisma.$monthly_feePayload<ExtArgs>
        fields: Prisma.monthly_feeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.monthly_feeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$monthly_feePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.monthly_feeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$monthly_feePayload>
          }
          findFirst: {
            args: Prisma.monthly_feeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$monthly_feePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.monthly_feeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$monthly_feePayload>
          }
          findMany: {
            args: Prisma.monthly_feeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$monthly_feePayload>[]
          }
          create: {
            args: Prisma.monthly_feeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$monthly_feePayload>
          }
          createMany: {
            args: Prisma.monthly_feeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.monthly_feeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$monthly_feePayload>[]
          }
          delete: {
            args: Prisma.monthly_feeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$monthly_feePayload>
          }
          update: {
            args: Prisma.monthly_feeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$monthly_feePayload>
          }
          deleteMany: {
            args: Prisma.monthly_feeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.monthly_feeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.monthly_feeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$monthly_feePayload>[]
          }
          upsert: {
            args: Prisma.monthly_feeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$monthly_feePayload>
          }
          aggregate: {
            args: Prisma.Monthly_feeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMonthly_fee>
          }
          groupBy: {
            args: Prisma.monthly_feeGroupByArgs<ExtArgs>
            result: $Utils.Optional<Monthly_feeGroupByOutputType>[]
          }
          count: {
            args: Prisma.monthly_feeCountArgs<ExtArgs>
            result: $Utils.Optional<Monthly_feeCountAggregateOutputType> | number
          }
        }
      }
      permissions: {
        payload: Prisma.$permissionsPayload<ExtArgs>
        fields: Prisma.permissionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.permissionsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$permissionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.permissionsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$permissionsPayload>
          }
          findFirst: {
            args: Prisma.permissionsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$permissionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.permissionsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$permissionsPayload>
          }
          findMany: {
            args: Prisma.permissionsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$permissionsPayload>[]
          }
          create: {
            args: Prisma.permissionsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$permissionsPayload>
          }
          createMany: {
            args: Prisma.permissionsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.permissionsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$permissionsPayload>[]
          }
          delete: {
            args: Prisma.permissionsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$permissionsPayload>
          }
          update: {
            args: Prisma.permissionsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$permissionsPayload>
          }
          deleteMany: {
            args: Prisma.permissionsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.permissionsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.permissionsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$permissionsPayload>[]
          }
          upsert: {
            args: Prisma.permissionsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$permissionsPayload>
          }
          aggregate: {
            args: Prisma.PermissionsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePermissions>
          }
          groupBy: {
            args: Prisma.permissionsGroupByArgs<ExtArgs>
            result: $Utils.Optional<PermissionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.permissionsCountArgs<ExtArgs>
            result: $Utils.Optional<PermissionsCountAggregateOutputType> | number
          }
        }
      }
      presence_list: {
        payload: Prisma.$presence_listPayload<ExtArgs>
        fields: Prisma.presence_listFieldRefs
        operations: {
          findUnique: {
            args: Prisma.presence_listFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$presence_listPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.presence_listFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$presence_listPayload>
          }
          findFirst: {
            args: Prisma.presence_listFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$presence_listPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.presence_listFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$presence_listPayload>
          }
          findMany: {
            args: Prisma.presence_listFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$presence_listPayload>[]
          }
          create: {
            args: Prisma.presence_listCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$presence_listPayload>
          }
          createMany: {
            args: Prisma.presence_listCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.presence_listCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$presence_listPayload>[]
          }
          delete: {
            args: Prisma.presence_listDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$presence_listPayload>
          }
          update: {
            args: Prisma.presence_listUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$presence_listPayload>
          }
          deleteMany: {
            args: Prisma.presence_listDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.presence_listUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.presence_listUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$presence_listPayload>[]
          }
          upsert: {
            args: Prisma.presence_listUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$presence_listPayload>
          }
          aggregate: {
            args: Prisma.Presence_listAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePresence_list>
          }
          groupBy: {
            args: Prisma.presence_listGroupByArgs<ExtArgs>
            result: $Utils.Optional<Presence_listGroupByOutputType>[]
          }
          count: {
            args: Prisma.presence_listCountArgs<ExtArgs>
            result: $Utils.Optional<Presence_listCountAggregateOutputType> | number
          }
        }
      }
      professionals: {
        payload: Prisma.$professionalsPayload<ExtArgs>
        fields: Prisma.professionalsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.professionalsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$professionalsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.professionalsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$professionalsPayload>
          }
          findFirst: {
            args: Prisma.professionalsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$professionalsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.professionalsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$professionalsPayload>
          }
          findMany: {
            args: Prisma.professionalsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$professionalsPayload>[]
          }
          create: {
            args: Prisma.professionalsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$professionalsPayload>
          }
          createMany: {
            args: Prisma.professionalsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.professionalsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$professionalsPayload>[]
          }
          delete: {
            args: Prisma.professionalsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$professionalsPayload>
          }
          update: {
            args: Prisma.professionalsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$professionalsPayload>
          }
          deleteMany: {
            args: Prisma.professionalsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.professionalsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.professionalsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$professionalsPayload>[]
          }
          upsert: {
            args: Prisma.professionalsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$professionalsPayload>
          }
          aggregate: {
            args: Prisma.ProfessionalsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfessionals>
          }
          groupBy: {
            args: Prisma.professionalsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfessionalsGroupByOutputType>[]
          }
          count: {
            args: Prisma.professionalsCountArgs<ExtArgs>
            result: $Utils.Optional<ProfessionalsCountAggregateOutputType> | number
          }
        }
      }
      records_of_students: {
        payload: Prisma.$records_of_studentsPayload<ExtArgs>
        fields: Prisma.records_of_studentsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.records_of_studentsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$records_of_studentsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.records_of_studentsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$records_of_studentsPayload>
          }
          findFirst: {
            args: Prisma.records_of_studentsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$records_of_studentsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.records_of_studentsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$records_of_studentsPayload>
          }
          findMany: {
            args: Prisma.records_of_studentsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$records_of_studentsPayload>[]
          }
          create: {
            args: Prisma.records_of_studentsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$records_of_studentsPayload>
          }
          createMany: {
            args: Prisma.records_of_studentsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.records_of_studentsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$records_of_studentsPayload>[]
          }
          delete: {
            args: Prisma.records_of_studentsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$records_of_studentsPayload>
          }
          update: {
            args: Prisma.records_of_studentsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$records_of_studentsPayload>
          }
          deleteMany: {
            args: Prisma.records_of_studentsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.records_of_studentsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.records_of_studentsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$records_of_studentsPayload>[]
          }
          upsert: {
            args: Prisma.records_of_studentsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$records_of_studentsPayload>
          }
          aggregate: {
            args: Prisma.Records_of_studentsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRecords_of_students>
          }
          groupBy: {
            args: Prisma.records_of_studentsGroupByArgs<ExtArgs>
            result: $Utils.Optional<Records_of_studentsGroupByOutputType>[]
          }
          count: {
            args: Prisma.records_of_studentsCountArgs<ExtArgs>
            result: $Utils.Optional<Records_of_studentsCountAggregateOutputType> | number
          }
        }
      }
      registrations: {
        payload: Prisma.$registrationsPayload<ExtArgs>
        fields: Prisma.registrationsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.registrationsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$registrationsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.registrationsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$registrationsPayload>
          }
          findFirst: {
            args: Prisma.registrationsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$registrationsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.registrationsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$registrationsPayload>
          }
          findMany: {
            args: Prisma.registrationsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$registrationsPayload>[]
          }
          create: {
            args: Prisma.registrationsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$registrationsPayload>
          }
          createMany: {
            args: Prisma.registrationsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.registrationsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$registrationsPayload>[]
          }
          delete: {
            args: Prisma.registrationsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$registrationsPayload>
          }
          update: {
            args: Prisma.registrationsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$registrationsPayload>
          }
          deleteMany: {
            args: Prisma.registrationsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.registrationsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.registrationsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$registrationsPayload>[]
          }
          upsert: {
            args: Prisma.registrationsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$registrationsPayload>
          }
          aggregate: {
            args: Prisma.RegistrationsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRegistrations>
          }
          groupBy: {
            args: Prisma.registrationsGroupByArgs<ExtArgs>
            result: $Utils.Optional<RegistrationsGroupByOutputType>[]
          }
          count: {
            args: Prisma.registrationsCountArgs<ExtArgs>
            result: $Utils.Optional<RegistrationsCountAggregateOutputType> | number
          }
        }
      }
      role: {
        payload: Prisma.$rolePayload<ExtArgs>
        fields: Prisma.roleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.roleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.roleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolePayload>
          }
          findFirst: {
            args: Prisma.roleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.roleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolePayload>
          }
          findMany: {
            args: Prisma.roleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolePayload>[]
          }
          create: {
            args: Prisma.roleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolePayload>
          }
          createMany: {
            args: Prisma.roleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.roleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolePayload>[]
          }
          delete: {
            args: Prisma.roleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolePayload>
          }
          update: {
            args: Prisma.roleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolePayload>
          }
          deleteMany: {
            args: Prisma.roleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.roleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.roleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolePayload>[]
          }
          upsert: {
            args: Prisma.roleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rolePayload>
          }
          aggregate: {
            args: Prisma.RoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRole>
          }
          groupBy: {
            args: Prisma.roleGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.roleCountArgs<ExtArgs>
            result: $Utils.Optional<RoleCountAggregateOutputType> | number
          }
        }
      }
      students: {
        payload: Prisma.$studentsPayload<ExtArgs>
        fields: Prisma.studentsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.studentsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studentsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.studentsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studentsPayload>
          }
          findFirst: {
            args: Prisma.studentsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studentsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.studentsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studentsPayload>
          }
          findMany: {
            args: Prisma.studentsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studentsPayload>[]
          }
          create: {
            args: Prisma.studentsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studentsPayload>
          }
          createMany: {
            args: Prisma.studentsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.studentsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studentsPayload>[]
          }
          delete: {
            args: Prisma.studentsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studentsPayload>
          }
          update: {
            args: Prisma.studentsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studentsPayload>
          }
          deleteMany: {
            args: Prisma.studentsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.studentsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.studentsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studentsPayload>[]
          }
          upsert: {
            args: Prisma.studentsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$studentsPayload>
          }
          aggregate: {
            args: Prisma.StudentsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudents>
          }
          groupBy: {
            args: Prisma.studentsGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentsGroupByOutputType>[]
          }
          count: {
            args: Prisma.studentsCountArgs<ExtArgs>
            result: $Utils.Optional<StudentsCountAggregateOutputType> | number
          }
        }
      }
      students_has_classrooms: {
        payload: Prisma.$students_has_classroomsPayload<ExtArgs>
        fields: Prisma.students_has_classroomsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.students_has_classroomsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$students_has_classroomsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.students_has_classroomsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$students_has_classroomsPayload>
          }
          findFirst: {
            args: Prisma.students_has_classroomsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$students_has_classroomsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.students_has_classroomsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$students_has_classroomsPayload>
          }
          findMany: {
            args: Prisma.students_has_classroomsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$students_has_classroomsPayload>[]
          }
          create: {
            args: Prisma.students_has_classroomsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$students_has_classroomsPayload>
          }
          createMany: {
            args: Prisma.students_has_classroomsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.students_has_classroomsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$students_has_classroomsPayload>[]
          }
          delete: {
            args: Prisma.students_has_classroomsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$students_has_classroomsPayload>
          }
          update: {
            args: Prisma.students_has_classroomsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$students_has_classroomsPayload>
          }
          deleteMany: {
            args: Prisma.students_has_classroomsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.students_has_classroomsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.students_has_classroomsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$students_has_classroomsPayload>[]
          }
          upsert: {
            args: Prisma.students_has_classroomsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$students_has_classroomsPayload>
          }
          aggregate: {
            args: Prisma.Students_has_classroomsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudents_has_classrooms>
          }
          groupBy: {
            args: Prisma.students_has_classroomsGroupByArgs<ExtArgs>
            result: $Utils.Optional<Students_has_classroomsGroupByOutputType>[]
          }
          count: {
            args: Prisma.students_has_classroomsCountArgs<ExtArgs>
            result: $Utils.Optional<Students_has_classroomsCountAggregateOutputType> | number
          }
        }
      }
      tasks: {
        payload: Prisma.$tasksPayload<ExtArgs>
        fields: Prisma.tasksFieldRefs
        operations: {
          findUnique: {
            args: Prisma.tasksFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tasksPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.tasksFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tasksPayload>
          }
          findFirst: {
            args: Prisma.tasksFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tasksPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.tasksFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tasksPayload>
          }
          findMany: {
            args: Prisma.tasksFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tasksPayload>[]
          }
          create: {
            args: Prisma.tasksCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tasksPayload>
          }
          createMany: {
            args: Prisma.tasksCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.tasksCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tasksPayload>[]
          }
          delete: {
            args: Prisma.tasksDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tasksPayload>
          }
          update: {
            args: Prisma.tasksUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tasksPayload>
          }
          deleteMany: {
            args: Prisma.tasksDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.tasksUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.tasksUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tasksPayload>[]
          }
          upsert: {
            args: Prisma.tasksUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tasksPayload>
          }
          aggregate: {
            args: Prisma.TasksAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTasks>
          }
          groupBy: {
            args: Prisma.tasksGroupByArgs<ExtArgs>
            result: $Utils.Optional<TasksGroupByOutputType>[]
          }
          count: {
            args: Prisma.tasksCountArgs<ExtArgs>
            result: $Utils.Optional<TasksCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    adresses?: adressesOmit
    auth?: authOmit
    boleto_api?: boleto_apiOmit
    books?: booksOmit
    classes?: classesOmit
    classrooms?: classroomsOmit
    configs?: configsOmit
    courses?: coursesOmit
    lessons?: lessonsOmit
    monthly_fee?: monthly_feeOmit
    permissions?: permissionsOmit
    presence_list?: presence_listOmit
    professionals?: professionalsOmit
    records_of_students?: records_of_studentsOmit
    registrations?: registrationsOmit
    role?: roleOmit
    students?: studentsOmit
    students_has_classrooms?: students_has_classroomsOmit
    tasks?: tasksOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AdressesCountOutputType
   */

  export type AdressesCountOutputType = {
    professionals: number
    students: number
  }

  export type AdressesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    professionals?: boolean | AdressesCountOutputTypeCountProfessionalsArgs
    students?: boolean | AdressesCountOutputTypeCountStudentsArgs
  }

  // Custom InputTypes
  /**
   * AdressesCountOutputType without action
   */
  export type AdressesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdressesCountOutputType
     */
    select?: AdressesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AdressesCountOutputType without action
   */
  export type AdressesCountOutputTypeCountProfessionalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: professionalsWhereInput
  }

  /**
   * AdressesCountOutputType without action
   */
  export type AdressesCountOutputTypeCountStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: studentsWhereInput
  }


  /**
   * Count Type BooksCountOutputType
   */

  export type BooksCountOutputType = {
    classrooms: number
    lessons: number
  }

  export type BooksCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    classrooms?: boolean | BooksCountOutputTypeCountClassroomsArgs
    lessons?: boolean | BooksCountOutputTypeCountLessonsArgs
  }

  // Custom InputTypes
  /**
   * BooksCountOutputType without action
   */
  export type BooksCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BooksCountOutputType
     */
    select?: BooksCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BooksCountOutputType without action
   */
  export type BooksCountOutputTypeCountClassroomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: classroomsWhereInput
  }

  /**
   * BooksCountOutputType without action
   */
  export type BooksCountOutputTypeCountLessonsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: lessonsWhereInput
  }


  /**
   * Count Type ClassroomsCountOutputType
   */

  export type ClassroomsCountOutputType = {
    classes: number
    students_has_classrooms: number
  }

  export type ClassroomsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    classes?: boolean | ClassroomsCountOutputTypeCountClassesArgs
    students_has_classrooms?: boolean | ClassroomsCountOutputTypeCountStudents_has_classroomsArgs
  }

  // Custom InputTypes
  /**
   * ClassroomsCountOutputType without action
   */
  export type ClassroomsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassroomsCountOutputType
     */
    select?: ClassroomsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClassroomsCountOutputType without action
   */
  export type ClassroomsCountOutputTypeCountClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: classesWhereInput
  }

  /**
   * ClassroomsCountOutputType without action
   */
  export type ClassroomsCountOutputTypeCountStudents_has_classroomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: students_has_classroomsWhereInput
  }


  /**
   * Count Type CoursesCountOutputType
   */

  export type CoursesCountOutputType = {
    books: number
    registrations: number
  }

  export type CoursesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    books?: boolean | CoursesCountOutputTypeCountBooksArgs
    registrations?: boolean | CoursesCountOutputTypeCountRegistrationsArgs
  }

  // Custom InputTypes
  /**
   * CoursesCountOutputType without action
   */
  export type CoursesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursesCountOutputType
     */
    select?: CoursesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CoursesCountOutputType without action
   */
  export type CoursesCountOutputTypeCountBooksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: booksWhereInput
  }

  /**
   * CoursesCountOutputType without action
   */
  export type CoursesCountOutputTypeCountRegistrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: registrationsWhereInput
  }


  /**
   * Count Type LessonsCountOutputType
   */

  export type LessonsCountOutputType = {
    tasks: number
  }

  export type LessonsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tasks?: boolean | LessonsCountOutputTypeCountTasksArgs
  }

  // Custom InputTypes
  /**
   * LessonsCountOutputType without action
   */
  export type LessonsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LessonsCountOutputType
     */
    select?: LessonsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LessonsCountOutputType without action
   */
  export type LessonsCountOutputTypeCountTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tasksWhereInput
  }


  /**
   * Count Type Presence_listCountOutputType
   */

  export type Presence_listCountOutputType = {
    classes: number
  }

  export type Presence_listCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    classes?: boolean | Presence_listCountOutputTypeCountClassesArgs
  }

  // Custom InputTypes
  /**
   * Presence_listCountOutputType without action
   */
  export type Presence_listCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Presence_listCountOutputType
     */
    select?: Presence_listCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Presence_listCountOutputType without action
   */
  export type Presence_listCountOutputTypeCountClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: classesWhereInput
  }


  /**
   * Count Type ProfessionalsCountOutputType
   */

  export type ProfessionalsCountOutputType = {
    classes: number
  }

  export type ProfessionalsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    classes?: boolean | ProfessionalsCountOutputTypeCountClassesArgs
  }

  // Custom InputTypes
  /**
   * ProfessionalsCountOutputType without action
   */
  export type ProfessionalsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfessionalsCountOutputType
     */
    select?: ProfessionalsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProfessionalsCountOutputType without action
   */
  export type ProfessionalsCountOutputTypeCountClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: classesWhereInput
  }


  /**
   * Count Type RegistrationsCountOutputType
   */

  export type RegistrationsCountOutputType = {
    monthly_fee: number
    tasks: number
  }

  export type RegistrationsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    monthly_fee?: boolean | RegistrationsCountOutputTypeCountMonthly_feeArgs
    tasks?: boolean | RegistrationsCountOutputTypeCountTasksArgs
  }

  // Custom InputTypes
  /**
   * RegistrationsCountOutputType without action
   */
  export type RegistrationsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegistrationsCountOutputType
     */
    select?: RegistrationsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RegistrationsCountOutputType without action
   */
  export type RegistrationsCountOutputTypeCountMonthly_feeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: monthly_feeWhereInput
  }

  /**
   * RegistrationsCountOutputType without action
   */
  export type RegistrationsCountOutputTypeCountTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tasksWhereInput
  }


  /**
   * Count Type RoleCountOutputType
   */

  export type RoleCountOutputType = {
    professionals: number
  }

  export type RoleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    professionals?: boolean | RoleCountOutputTypeCountProfessionalsArgs
  }

  // Custom InputTypes
  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleCountOutputType
     */
    select?: RoleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountProfessionalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: professionalsWhereInput
  }


  /**
   * Count Type StudentsCountOutputType
   */

  export type StudentsCountOutputType = {
    records_of_students: number
    registrations: number
  }

  export type StudentsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    records_of_students?: boolean | StudentsCountOutputTypeCountRecords_of_studentsArgs
    registrations?: boolean | StudentsCountOutputTypeCountRegistrationsArgs
  }

  // Custom InputTypes
  /**
   * StudentsCountOutputType without action
   */
  export type StudentsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentsCountOutputType
     */
    select?: StudentsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StudentsCountOutputType without action
   */
  export type StudentsCountOutputTypeCountRecords_of_studentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: records_of_studentsWhereInput
  }

  /**
   * StudentsCountOutputType without action
   */
  export type StudentsCountOutputTypeCountRegistrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: registrationsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model adresses
   */

  export type AggregateAdresses = {
    _count: AdressesCountAggregateOutputType | null
    _avg: AdressesAvgAggregateOutputType | null
    _sum: AdressesSumAggregateOutputType | null
    _min: AdressesMinAggregateOutputType | null
    _max: AdressesMaxAggregateOutputType | null
  }

  export type AdressesAvgAggregateOutputType = {
    id: number | null
  }

  export type AdressesSumAggregateOutputType = {
    id: number | null
  }

  export type AdressesMinAggregateOutputType = {
    id: number | null
    street: string | null
    zip_code: string | null
    district: string | null
    complement: string | null
    city: string | null
    state: string | null
    number: string | null
    active: boolean | null
  }

  export type AdressesMaxAggregateOutputType = {
    id: number | null
    street: string | null
    zip_code: string | null
    district: string | null
    complement: string | null
    city: string | null
    state: string | null
    number: string | null
    active: boolean | null
  }

  export type AdressesCountAggregateOutputType = {
    id: number
    street: number
    zip_code: number
    district: number
    complement: number
    city: number
    state: number
    number: number
    active: number
    _all: number
  }


  export type AdressesAvgAggregateInputType = {
    id?: true
  }

  export type AdressesSumAggregateInputType = {
    id?: true
  }

  export type AdressesMinAggregateInputType = {
    id?: true
    street?: true
    zip_code?: true
    district?: true
    complement?: true
    city?: true
    state?: true
    number?: true
    active?: true
  }

  export type AdressesMaxAggregateInputType = {
    id?: true
    street?: true
    zip_code?: true
    district?: true
    complement?: true
    city?: true
    state?: true
    number?: true
    active?: true
  }

  export type AdressesCountAggregateInputType = {
    id?: true
    street?: true
    zip_code?: true
    district?: true
    complement?: true
    city?: true
    state?: true
    number?: true
    active?: true
    _all?: true
  }

  export type AdressesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which adresses to aggregate.
     */
    where?: adressesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of adresses to fetch.
     */
    orderBy?: adressesOrderByWithRelationInput | adressesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: adressesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` adresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` adresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned adresses
    **/
    _count?: true | AdressesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdressesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdressesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdressesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdressesMaxAggregateInputType
  }

  export type GetAdressesAggregateType<T extends AdressesAggregateArgs> = {
        [P in keyof T & keyof AggregateAdresses]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdresses[P]>
      : GetScalarType<T[P], AggregateAdresses[P]>
  }




  export type adressesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: adressesWhereInput
    orderBy?: adressesOrderByWithAggregationInput | adressesOrderByWithAggregationInput[]
    by: AdressesScalarFieldEnum[] | AdressesScalarFieldEnum
    having?: adressesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdressesCountAggregateInputType | true
    _avg?: AdressesAvgAggregateInputType
    _sum?: AdressesSumAggregateInputType
    _min?: AdressesMinAggregateInputType
    _max?: AdressesMaxAggregateInputType
  }

  export type AdressesGroupByOutputType = {
    id: number
    street: string | null
    zip_code: string | null
    district: string | null
    complement: string | null
    city: string | null
    state: string | null
    number: string | null
    active: boolean
    _count: AdressesCountAggregateOutputType | null
    _avg: AdressesAvgAggregateOutputType | null
    _sum: AdressesSumAggregateOutputType | null
    _min: AdressesMinAggregateOutputType | null
    _max: AdressesMaxAggregateOutputType | null
  }

  type GetAdressesGroupByPayload<T extends adressesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdressesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdressesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdressesGroupByOutputType[P]>
            : GetScalarType<T[P], AdressesGroupByOutputType[P]>
        }
      >
    >


  export type adressesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    street?: boolean
    zip_code?: boolean
    district?: boolean
    complement?: boolean
    city?: boolean
    state?: boolean
    number?: boolean
    active?: boolean
    professionals?: boolean | adresses$professionalsArgs<ExtArgs>
    students?: boolean | adresses$studentsArgs<ExtArgs>
    _count?: boolean | AdressesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adresses"]>

  export type adressesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    street?: boolean
    zip_code?: boolean
    district?: boolean
    complement?: boolean
    city?: boolean
    state?: boolean
    number?: boolean
    active?: boolean
  }, ExtArgs["result"]["adresses"]>

  export type adressesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    street?: boolean
    zip_code?: boolean
    district?: boolean
    complement?: boolean
    city?: boolean
    state?: boolean
    number?: boolean
    active?: boolean
  }, ExtArgs["result"]["adresses"]>

  export type adressesSelectScalar = {
    id?: boolean
    street?: boolean
    zip_code?: boolean
    district?: boolean
    complement?: boolean
    city?: boolean
    state?: boolean
    number?: boolean
    active?: boolean
  }

  export type adressesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "street" | "zip_code" | "district" | "complement" | "city" | "state" | "number" | "active", ExtArgs["result"]["adresses"]>
  export type adressesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    professionals?: boolean | adresses$professionalsArgs<ExtArgs>
    students?: boolean | adresses$studentsArgs<ExtArgs>
    _count?: boolean | AdressesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type adressesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type adressesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $adressesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "adresses"
    objects: {
      professionals: Prisma.$professionalsPayload<ExtArgs>[]
      students: Prisma.$studentsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      street: string | null
      zip_code: string | null
      district: string | null
      complement: string | null
      city: string | null
      state: string | null
      number: string | null
      active: boolean
    }, ExtArgs["result"]["adresses"]>
    composites: {}
  }

  type adressesGetPayload<S extends boolean | null | undefined | adressesDefaultArgs> = $Result.GetResult<Prisma.$adressesPayload, S>

  type adressesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<adressesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AdressesCountAggregateInputType | true
    }

  export interface adressesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['adresses'], meta: { name: 'adresses' } }
    /**
     * Find zero or one Adresses that matches the filter.
     * @param {adressesFindUniqueArgs} args - Arguments to find a Adresses
     * @example
     * // Get one Adresses
     * const adresses = await prisma.adresses.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends adressesFindUniqueArgs>(args: SelectSubset<T, adressesFindUniqueArgs<ExtArgs>>): Prisma__adressesClient<$Result.GetResult<Prisma.$adressesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Adresses that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {adressesFindUniqueOrThrowArgs} args - Arguments to find a Adresses
     * @example
     * // Get one Adresses
     * const adresses = await prisma.adresses.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends adressesFindUniqueOrThrowArgs>(args: SelectSubset<T, adressesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__adressesClient<$Result.GetResult<Prisma.$adressesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Adresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adressesFindFirstArgs} args - Arguments to find a Adresses
     * @example
     * // Get one Adresses
     * const adresses = await prisma.adresses.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends adressesFindFirstArgs>(args?: SelectSubset<T, adressesFindFirstArgs<ExtArgs>>): Prisma__adressesClient<$Result.GetResult<Prisma.$adressesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Adresses that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adressesFindFirstOrThrowArgs} args - Arguments to find a Adresses
     * @example
     * // Get one Adresses
     * const adresses = await prisma.adresses.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends adressesFindFirstOrThrowArgs>(args?: SelectSubset<T, adressesFindFirstOrThrowArgs<ExtArgs>>): Prisma__adressesClient<$Result.GetResult<Prisma.$adressesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Adresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adressesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Adresses
     * const adresses = await prisma.adresses.findMany()
     * 
     * // Get first 10 Adresses
     * const adresses = await prisma.adresses.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adressesWithIdOnly = await prisma.adresses.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends adressesFindManyArgs>(args?: SelectSubset<T, adressesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$adressesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Adresses.
     * @param {adressesCreateArgs} args - Arguments to create a Adresses.
     * @example
     * // Create one Adresses
     * const Adresses = await prisma.adresses.create({
     *   data: {
     *     // ... data to create a Adresses
     *   }
     * })
     * 
     */
    create<T extends adressesCreateArgs>(args: SelectSubset<T, adressesCreateArgs<ExtArgs>>): Prisma__adressesClient<$Result.GetResult<Prisma.$adressesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Adresses.
     * @param {adressesCreateManyArgs} args - Arguments to create many Adresses.
     * @example
     * // Create many Adresses
     * const adresses = await prisma.adresses.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends adressesCreateManyArgs>(args?: SelectSubset<T, adressesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Adresses and returns the data saved in the database.
     * @param {adressesCreateManyAndReturnArgs} args - Arguments to create many Adresses.
     * @example
     * // Create many Adresses
     * const adresses = await prisma.adresses.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Adresses and only return the `id`
     * const adressesWithIdOnly = await prisma.adresses.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends adressesCreateManyAndReturnArgs>(args?: SelectSubset<T, adressesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$adressesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Adresses.
     * @param {adressesDeleteArgs} args - Arguments to delete one Adresses.
     * @example
     * // Delete one Adresses
     * const Adresses = await prisma.adresses.delete({
     *   where: {
     *     // ... filter to delete one Adresses
     *   }
     * })
     * 
     */
    delete<T extends adressesDeleteArgs>(args: SelectSubset<T, adressesDeleteArgs<ExtArgs>>): Prisma__adressesClient<$Result.GetResult<Prisma.$adressesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Adresses.
     * @param {adressesUpdateArgs} args - Arguments to update one Adresses.
     * @example
     * // Update one Adresses
     * const adresses = await prisma.adresses.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends adressesUpdateArgs>(args: SelectSubset<T, adressesUpdateArgs<ExtArgs>>): Prisma__adressesClient<$Result.GetResult<Prisma.$adressesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Adresses.
     * @param {adressesDeleteManyArgs} args - Arguments to filter Adresses to delete.
     * @example
     * // Delete a few Adresses
     * const { count } = await prisma.adresses.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends adressesDeleteManyArgs>(args?: SelectSubset<T, adressesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Adresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adressesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Adresses
     * const adresses = await prisma.adresses.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends adressesUpdateManyArgs>(args: SelectSubset<T, adressesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Adresses and returns the data updated in the database.
     * @param {adressesUpdateManyAndReturnArgs} args - Arguments to update many Adresses.
     * @example
     * // Update many Adresses
     * const adresses = await prisma.adresses.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Adresses and only return the `id`
     * const adressesWithIdOnly = await prisma.adresses.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends adressesUpdateManyAndReturnArgs>(args: SelectSubset<T, adressesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$adressesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Adresses.
     * @param {adressesUpsertArgs} args - Arguments to update or create a Adresses.
     * @example
     * // Update or create a Adresses
     * const adresses = await prisma.adresses.upsert({
     *   create: {
     *     // ... data to create a Adresses
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Adresses we want to update
     *   }
     * })
     */
    upsert<T extends adressesUpsertArgs>(args: SelectSubset<T, adressesUpsertArgs<ExtArgs>>): Prisma__adressesClient<$Result.GetResult<Prisma.$adressesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Adresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adressesCountArgs} args - Arguments to filter Adresses to count.
     * @example
     * // Count the number of Adresses
     * const count = await prisma.adresses.count({
     *   where: {
     *     // ... the filter for the Adresses we want to count
     *   }
     * })
    **/
    count<T extends adressesCountArgs>(
      args?: Subset<T, adressesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdressesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Adresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdressesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdressesAggregateArgs>(args: Subset<T, AdressesAggregateArgs>): Prisma.PrismaPromise<GetAdressesAggregateType<T>>

    /**
     * Group by Adresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {adressesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends adressesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: adressesGroupByArgs['orderBy'] }
        : { orderBy?: adressesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, adressesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdressesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the adresses model
   */
  readonly fields: adressesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for adresses.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__adressesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    professionals<T extends adresses$professionalsArgs<ExtArgs> = {}>(args?: Subset<T, adresses$professionalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$professionalsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    students<T extends adresses$studentsArgs<ExtArgs> = {}>(args?: Subset<T, adresses$studentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$studentsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the adresses model
   */
  interface adressesFieldRefs {
    readonly id: FieldRef<"adresses", 'Int'>
    readonly street: FieldRef<"adresses", 'String'>
    readonly zip_code: FieldRef<"adresses", 'String'>
    readonly district: FieldRef<"adresses", 'String'>
    readonly complement: FieldRef<"adresses", 'String'>
    readonly city: FieldRef<"adresses", 'String'>
    readonly state: FieldRef<"adresses", 'String'>
    readonly number: FieldRef<"adresses", 'String'>
    readonly active: FieldRef<"adresses", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * adresses findUnique
   */
  export type adressesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adresses
     */
    select?: adressesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the adresses
     */
    omit?: adressesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adressesInclude<ExtArgs> | null
    /**
     * Filter, which adresses to fetch.
     */
    where: adressesWhereUniqueInput
  }

  /**
   * adresses findUniqueOrThrow
   */
  export type adressesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adresses
     */
    select?: adressesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the adresses
     */
    omit?: adressesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adressesInclude<ExtArgs> | null
    /**
     * Filter, which adresses to fetch.
     */
    where: adressesWhereUniqueInput
  }

  /**
   * adresses findFirst
   */
  export type adressesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adresses
     */
    select?: adressesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the adresses
     */
    omit?: adressesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adressesInclude<ExtArgs> | null
    /**
     * Filter, which adresses to fetch.
     */
    where?: adressesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of adresses to fetch.
     */
    orderBy?: adressesOrderByWithRelationInput | adressesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for adresses.
     */
    cursor?: adressesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` adresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` adresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of adresses.
     */
    distinct?: AdressesScalarFieldEnum | AdressesScalarFieldEnum[]
  }

  /**
   * adresses findFirstOrThrow
   */
  export type adressesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adresses
     */
    select?: adressesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the adresses
     */
    omit?: adressesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adressesInclude<ExtArgs> | null
    /**
     * Filter, which adresses to fetch.
     */
    where?: adressesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of adresses to fetch.
     */
    orderBy?: adressesOrderByWithRelationInput | adressesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for adresses.
     */
    cursor?: adressesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` adresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` adresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of adresses.
     */
    distinct?: AdressesScalarFieldEnum | AdressesScalarFieldEnum[]
  }

  /**
   * adresses findMany
   */
  export type adressesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adresses
     */
    select?: adressesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the adresses
     */
    omit?: adressesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adressesInclude<ExtArgs> | null
    /**
     * Filter, which adresses to fetch.
     */
    where?: adressesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of adresses to fetch.
     */
    orderBy?: adressesOrderByWithRelationInput | adressesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing adresses.
     */
    cursor?: adressesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` adresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` adresses.
     */
    skip?: number
    distinct?: AdressesScalarFieldEnum | AdressesScalarFieldEnum[]
  }

  /**
   * adresses create
   */
  export type adressesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adresses
     */
    select?: adressesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the adresses
     */
    omit?: adressesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adressesInclude<ExtArgs> | null
    /**
     * The data needed to create a adresses.
     */
    data?: XOR<adressesCreateInput, adressesUncheckedCreateInput>
  }

  /**
   * adresses createMany
   */
  export type adressesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many adresses.
     */
    data: adressesCreateManyInput | adressesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * adresses createManyAndReturn
   */
  export type adressesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adresses
     */
    select?: adressesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the adresses
     */
    omit?: adressesOmit<ExtArgs> | null
    /**
     * The data used to create many adresses.
     */
    data: adressesCreateManyInput | adressesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * adresses update
   */
  export type adressesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adresses
     */
    select?: adressesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the adresses
     */
    omit?: adressesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adressesInclude<ExtArgs> | null
    /**
     * The data needed to update a adresses.
     */
    data: XOR<adressesUpdateInput, adressesUncheckedUpdateInput>
    /**
     * Choose, which adresses to update.
     */
    where: adressesWhereUniqueInput
  }

  /**
   * adresses updateMany
   */
  export type adressesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update adresses.
     */
    data: XOR<adressesUpdateManyMutationInput, adressesUncheckedUpdateManyInput>
    /**
     * Filter which adresses to update
     */
    where?: adressesWhereInput
    /**
     * Limit how many adresses to update.
     */
    limit?: number
  }

  /**
   * adresses updateManyAndReturn
   */
  export type adressesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adresses
     */
    select?: adressesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the adresses
     */
    omit?: adressesOmit<ExtArgs> | null
    /**
     * The data used to update adresses.
     */
    data: XOR<adressesUpdateManyMutationInput, adressesUncheckedUpdateManyInput>
    /**
     * Filter which adresses to update
     */
    where?: adressesWhereInput
    /**
     * Limit how many adresses to update.
     */
    limit?: number
  }

  /**
   * adresses upsert
   */
  export type adressesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adresses
     */
    select?: adressesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the adresses
     */
    omit?: adressesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adressesInclude<ExtArgs> | null
    /**
     * The filter to search for the adresses to update in case it exists.
     */
    where: adressesWhereUniqueInput
    /**
     * In case the adresses found by the `where` argument doesn't exist, create a new adresses with this data.
     */
    create: XOR<adressesCreateInput, adressesUncheckedCreateInput>
    /**
     * In case the adresses was found with the provided `where` argument, update it with this data.
     */
    update: XOR<adressesUpdateInput, adressesUncheckedUpdateInput>
  }

  /**
   * adresses delete
   */
  export type adressesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adresses
     */
    select?: adressesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the adresses
     */
    omit?: adressesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adressesInclude<ExtArgs> | null
    /**
     * Filter which adresses to delete.
     */
    where: adressesWhereUniqueInput
  }

  /**
   * adresses deleteMany
   */
  export type adressesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which adresses to delete
     */
    where?: adressesWhereInput
    /**
     * Limit how many adresses to delete.
     */
    limit?: number
  }

  /**
   * adresses.professionals
   */
  export type adresses$professionalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the professionals
     */
    select?: professionalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the professionals
     */
    omit?: professionalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: professionalsInclude<ExtArgs> | null
    where?: professionalsWhereInput
    orderBy?: professionalsOrderByWithRelationInput | professionalsOrderByWithRelationInput[]
    cursor?: professionalsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfessionalsScalarFieldEnum | ProfessionalsScalarFieldEnum[]
  }

  /**
   * adresses.students
   */
  export type adresses$studentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the students
     */
    select?: studentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the students
     */
    omit?: studentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studentsInclude<ExtArgs> | null
    where?: studentsWhereInput
    orderBy?: studentsOrderByWithRelationInput | studentsOrderByWithRelationInput[]
    cursor?: studentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentsScalarFieldEnum | StudentsScalarFieldEnum[]
  }

  /**
   * adresses without action
   */
  export type adressesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the adresses
     */
    select?: adressesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the adresses
     */
    omit?: adressesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: adressesInclude<ExtArgs> | null
  }


  /**
   * Model auth
   */

  export type AggregateAuth = {
    _count: AuthCountAggregateOutputType | null
    _min: AuthMinAggregateOutputType | null
    _max: AuthMaxAggregateOutputType | null
  }

  export type AuthMinAggregateOutputType = {
    token: string | null
    type: string | null
    expires_at: Date | null
    refresh_token: string | null
  }

  export type AuthMaxAggregateOutputType = {
    token: string | null
    type: string | null
    expires_at: Date | null
    refresh_token: string | null
  }

  export type AuthCountAggregateOutputType = {
    token: number
    type: number
    expires_at: number
    refresh_token: number
    _all: number
  }


  export type AuthMinAggregateInputType = {
    token?: true
    type?: true
    expires_at?: true
    refresh_token?: true
  }

  export type AuthMaxAggregateInputType = {
    token?: true
    type?: true
    expires_at?: true
    refresh_token?: true
  }

  export type AuthCountAggregateInputType = {
    token?: true
    type?: true
    expires_at?: true
    refresh_token?: true
    _all?: true
  }

  export type AuthAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which auth to aggregate.
     */
    where?: authWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of auths to fetch.
     */
    orderBy?: authOrderByWithRelationInput | authOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: authWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` auths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` auths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned auths
    **/
    _count?: true | AuthCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuthMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuthMaxAggregateInputType
  }

  export type GetAuthAggregateType<T extends AuthAggregateArgs> = {
        [P in keyof T & keyof AggregateAuth]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuth[P]>
      : GetScalarType<T[P], AggregateAuth[P]>
  }




  export type authGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: authWhereInput
    orderBy?: authOrderByWithAggregationInput | authOrderByWithAggregationInput[]
    by: AuthScalarFieldEnum[] | AuthScalarFieldEnum
    having?: authScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuthCountAggregateInputType | true
    _min?: AuthMinAggregateInputType
    _max?: AuthMaxAggregateInputType
  }

  export type AuthGroupByOutputType = {
    token: string
    type: string
    expires_at: Date
    refresh_token: string
    _count: AuthCountAggregateOutputType | null
    _min: AuthMinAggregateOutputType | null
    _max: AuthMaxAggregateOutputType | null
  }

  type GetAuthGroupByPayload<T extends authGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuthGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuthGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuthGroupByOutputType[P]>
            : GetScalarType<T[P], AuthGroupByOutputType[P]>
        }
      >
    >


  export type authSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    token?: boolean
    type?: boolean
    expires_at?: boolean
    refresh_token?: boolean
  }, ExtArgs["result"]["auth"]>

  export type authSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    token?: boolean
    type?: boolean
    expires_at?: boolean
    refresh_token?: boolean
  }, ExtArgs["result"]["auth"]>

  export type authSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    token?: boolean
    type?: boolean
    expires_at?: boolean
    refresh_token?: boolean
  }, ExtArgs["result"]["auth"]>

  export type authSelectScalar = {
    token?: boolean
    type?: boolean
    expires_at?: boolean
    refresh_token?: boolean
  }

  export type authOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"token" | "type" | "expires_at" | "refresh_token", ExtArgs["result"]["auth"]>

  export type $authPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "auth"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      token: string
      type: string
      expires_at: Date
      refresh_token: string
    }, ExtArgs["result"]["auth"]>
    composites: {}
  }

  type authGetPayload<S extends boolean | null | undefined | authDefaultArgs> = $Result.GetResult<Prisma.$authPayload, S>

  type authCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<authFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AuthCountAggregateInputType | true
    }

  export interface authDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['auth'], meta: { name: 'auth' } }
    /**
     * Find zero or one Auth that matches the filter.
     * @param {authFindUniqueArgs} args - Arguments to find a Auth
     * @example
     * // Get one Auth
     * const auth = await prisma.auth.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends authFindUniqueArgs>(args: SelectSubset<T, authFindUniqueArgs<ExtArgs>>): Prisma__authClient<$Result.GetResult<Prisma.$authPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Auth that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {authFindUniqueOrThrowArgs} args - Arguments to find a Auth
     * @example
     * // Get one Auth
     * const auth = await prisma.auth.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends authFindUniqueOrThrowArgs>(args: SelectSubset<T, authFindUniqueOrThrowArgs<ExtArgs>>): Prisma__authClient<$Result.GetResult<Prisma.$authPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Auth that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authFindFirstArgs} args - Arguments to find a Auth
     * @example
     * // Get one Auth
     * const auth = await prisma.auth.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends authFindFirstArgs>(args?: SelectSubset<T, authFindFirstArgs<ExtArgs>>): Prisma__authClient<$Result.GetResult<Prisma.$authPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Auth that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authFindFirstOrThrowArgs} args - Arguments to find a Auth
     * @example
     * // Get one Auth
     * const auth = await prisma.auth.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends authFindFirstOrThrowArgs>(args?: SelectSubset<T, authFindFirstOrThrowArgs<ExtArgs>>): Prisma__authClient<$Result.GetResult<Prisma.$authPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Auths that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Auths
     * const auths = await prisma.auth.findMany()
     * 
     * // Get first 10 Auths
     * const auths = await prisma.auth.findMany({ take: 10 })
     * 
     * // Only select the `token`
     * const authWithTokenOnly = await prisma.auth.findMany({ select: { token: true } })
     * 
     */
    findMany<T extends authFindManyArgs>(args?: SelectSubset<T, authFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$authPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Auth.
     * @param {authCreateArgs} args - Arguments to create a Auth.
     * @example
     * // Create one Auth
     * const Auth = await prisma.auth.create({
     *   data: {
     *     // ... data to create a Auth
     *   }
     * })
     * 
     */
    create<T extends authCreateArgs>(args: SelectSubset<T, authCreateArgs<ExtArgs>>): Prisma__authClient<$Result.GetResult<Prisma.$authPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Auths.
     * @param {authCreateManyArgs} args - Arguments to create many Auths.
     * @example
     * // Create many Auths
     * const auth = await prisma.auth.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends authCreateManyArgs>(args?: SelectSubset<T, authCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Auths and returns the data saved in the database.
     * @param {authCreateManyAndReturnArgs} args - Arguments to create many Auths.
     * @example
     * // Create many Auths
     * const auth = await prisma.auth.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Auths and only return the `token`
     * const authWithTokenOnly = await prisma.auth.createManyAndReturn({
     *   select: { token: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends authCreateManyAndReturnArgs>(args?: SelectSubset<T, authCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$authPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Auth.
     * @param {authDeleteArgs} args - Arguments to delete one Auth.
     * @example
     * // Delete one Auth
     * const Auth = await prisma.auth.delete({
     *   where: {
     *     // ... filter to delete one Auth
     *   }
     * })
     * 
     */
    delete<T extends authDeleteArgs>(args: SelectSubset<T, authDeleteArgs<ExtArgs>>): Prisma__authClient<$Result.GetResult<Prisma.$authPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Auth.
     * @param {authUpdateArgs} args - Arguments to update one Auth.
     * @example
     * // Update one Auth
     * const auth = await prisma.auth.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends authUpdateArgs>(args: SelectSubset<T, authUpdateArgs<ExtArgs>>): Prisma__authClient<$Result.GetResult<Prisma.$authPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Auths.
     * @param {authDeleteManyArgs} args - Arguments to filter Auths to delete.
     * @example
     * // Delete a few Auths
     * const { count } = await prisma.auth.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends authDeleteManyArgs>(args?: SelectSubset<T, authDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Auths.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Auths
     * const auth = await prisma.auth.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends authUpdateManyArgs>(args: SelectSubset<T, authUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Auths and returns the data updated in the database.
     * @param {authUpdateManyAndReturnArgs} args - Arguments to update many Auths.
     * @example
     * // Update many Auths
     * const auth = await prisma.auth.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Auths and only return the `token`
     * const authWithTokenOnly = await prisma.auth.updateManyAndReturn({
     *   select: { token: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends authUpdateManyAndReturnArgs>(args: SelectSubset<T, authUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$authPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Auth.
     * @param {authUpsertArgs} args - Arguments to update or create a Auth.
     * @example
     * // Update or create a Auth
     * const auth = await prisma.auth.upsert({
     *   create: {
     *     // ... data to create a Auth
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Auth we want to update
     *   }
     * })
     */
    upsert<T extends authUpsertArgs>(args: SelectSubset<T, authUpsertArgs<ExtArgs>>): Prisma__authClient<$Result.GetResult<Prisma.$authPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Auths.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authCountArgs} args - Arguments to filter Auths to count.
     * @example
     * // Count the number of Auths
     * const count = await prisma.auth.count({
     *   where: {
     *     // ... the filter for the Auths we want to count
     *   }
     * })
    **/
    count<T extends authCountArgs>(
      args?: Subset<T, authCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuthCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Auth.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuthAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuthAggregateArgs>(args: Subset<T, AuthAggregateArgs>): Prisma.PrismaPromise<GetAuthAggregateType<T>>

    /**
     * Group by Auth.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {authGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends authGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: authGroupByArgs['orderBy'] }
        : { orderBy?: authGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, authGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuthGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the auth model
   */
  readonly fields: authFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for auth.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__authClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the auth model
   */
  interface authFieldRefs {
    readonly token: FieldRef<"auth", 'String'>
    readonly type: FieldRef<"auth", 'String'>
    readonly expires_at: FieldRef<"auth", 'DateTime'>
    readonly refresh_token: FieldRef<"auth", 'String'>
  }
    

  // Custom InputTypes
  /**
   * auth findUnique
   */
  export type authFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the auth
     */
    select?: authSelect<ExtArgs> | null
    /**
     * Omit specific fields from the auth
     */
    omit?: authOmit<ExtArgs> | null
    /**
     * Filter, which auth to fetch.
     */
    where: authWhereUniqueInput
  }

  /**
   * auth findUniqueOrThrow
   */
  export type authFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the auth
     */
    select?: authSelect<ExtArgs> | null
    /**
     * Omit specific fields from the auth
     */
    omit?: authOmit<ExtArgs> | null
    /**
     * Filter, which auth to fetch.
     */
    where: authWhereUniqueInput
  }

  /**
   * auth findFirst
   */
  export type authFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the auth
     */
    select?: authSelect<ExtArgs> | null
    /**
     * Omit specific fields from the auth
     */
    omit?: authOmit<ExtArgs> | null
    /**
     * Filter, which auth to fetch.
     */
    where?: authWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of auths to fetch.
     */
    orderBy?: authOrderByWithRelationInput | authOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for auths.
     */
    cursor?: authWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` auths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` auths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of auths.
     */
    distinct?: AuthScalarFieldEnum | AuthScalarFieldEnum[]
  }

  /**
   * auth findFirstOrThrow
   */
  export type authFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the auth
     */
    select?: authSelect<ExtArgs> | null
    /**
     * Omit specific fields from the auth
     */
    omit?: authOmit<ExtArgs> | null
    /**
     * Filter, which auth to fetch.
     */
    where?: authWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of auths to fetch.
     */
    orderBy?: authOrderByWithRelationInput | authOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for auths.
     */
    cursor?: authWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` auths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` auths.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of auths.
     */
    distinct?: AuthScalarFieldEnum | AuthScalarFieldEnum[]
  }

  /**
   * auth findMany
   */
  export type authFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the auth
     */
    select?: authSelect<ExtArgs> | null
    /**
     * Omit specific fields from the auth
     */
    omit?: authOmit<ExtArgs> | null
    /**
     * Filter, which auths to fetch.
     */
    where?: authWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of auths to fetch.
     */
    orderBy?: authOrderByWithRelationInput | authOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing auths.
     */
    cursor?: authWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` auths from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` auths.
     */
    skip?: number
    distinct?: AuthScalarFieldEnum | AuthScalarFieldEnum[]
  }

  /**
   * auth create
   */
  export type authCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the auth
     */
    select?: authSelect<ExtArgs> | null
    /**
     * Omit specific fields from the auth
     */
    omit?: authOmit<ExtArgs> | null
    /**
     * The data needed to create a auth.
     */
    data: XOR<authCreateInput, authUncheckedCreateInput>
  }

  /**
   * auth createMany
   */
  export type authCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many auths.
     */
    data: authCreateManyInput | authCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * auth createManyAndReturn
   */
  export type authCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the auth
     */
    select?: authSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the auth
     */
    omit?: authOmit<ExtArgs> | null
    /**
     * The data used to create many auths.
     */
    data: authCreateManyInput | authCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * auth update
   */
  export type authUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the auth
     */
    select?: authSelect<ExtArgs> | null
    /**
     * Omit specific fields from the auth
     */
    omit?: authOmit<ExtArgs> | null
    /**
     * The data needed to update a auth.
     */
    data: XOR<authUpdateInput, authUncheckedUpdateInput>
    /**
     * Choose, which auth to update.
     */
    where: authWhereUniqueInput
  }

  /**
   * auth updateMany
   */
  export type authUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update auths.
     */
    data: XOR<authUpdateManyMutationInput, authUncheckedUpdateManyInput>
    /**
     * Filter which auths to update
     */
    where?: authWhereInput
    /**
     * Limit how many auths to update.
     */
    limit?: number
  }

  /**
   * auth updateManyAndReturn
   */
  export type authUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the auth
     */
    select?: authSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the auth
     */
    omit?: authOmit<ExtArgs> | null
    /**
     * The data used to update auths.
     */
    data: XOR<authUpdateManyMutationInput, authUncheckedUpdateManyInput>
    /**
     * Filter which auths to update
     */
    where?: authWhereInput
    /**
     * Limit how many auths to update.
     */
    limit?: number
  }

  /**
   * auth upsert
   */
  export type authUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the auth
     */
    select?: authSelect<ExtArgs> | null
    /**
     * Omit specific fields from the auth
     */
    omit?: authOmit<ExtArgs> | null
    /**
     * The filter to search for the auth to update in case it exists.
     */
    where: authWhereUniqueInput
    /**
     * In case the auth found by the `where` argument doesn't exist, create a new auth with this data.
     */
    create: XOR<authCreateInput, authUncheckedCreateInput>
    /**
     * In case the auth was found with the provided `where` argument, update it with this data.
     */
    update: XOR<authUpdateInput, authUncheckedUpdateInput>
  }

  /**
   * auth delete
   */
  export type authDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the auth
     */
    select?: authSelect<ExtArgs> | null
    /**
     * Omit specific fields from the auth
     */
    omit?: authOmit<ExtArgs> | null
    /**
     * Filter which auth to delete.
     */
    where: authWhereUniqueInput
  }

  /**
   * auth deleteMany
   */
  export type authDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which auths to delete
     */
    where?: authWhereInput
    /**
     * Limit how many auths to delete.
     */
    limit?: number
  }

  /**
   * auth without action
   */
  export type authDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the auth
     */
    select?: authSelect<ExtArgs> | null
    /**
     * Omit specific fields from the auth
     */
    omit?: authOmit<ExtArgs> | null
  }


  /**
   * Model boleto_api
   */

  export type AggregateBoleto_api = {
    _count: Boleto_apiCountAggregateOutputType | null
    _avg: Boleto_apiAvgAggregateOutputType | null
    _sum: Boleto_apiSumAggregateOutputType | null
    _min: Boleto_apiMinAggregateOutputType | null
    _max: Boleto_apiMaxAggregateOutputType | null
  }

  export type Boleto_apiAvgAggregateOutputType = {
    id: number | null
  }

  export type Boleto_apiSumAggregateOutputType = {
    id: number | null
  }

  export type Boleto_apiMinAggregateOutputType = {
    id: number | null
    developer_application_key: string | null
    client_id: string | null
    client_secret: string | null
  }

  export type Boleto_apiMaxAggregateOutputType = {
    id: number | null
    developer_application_key: string | null
    client_id: string | null
    client_secret: string | null
  }

  export type Boleto_apiCountAggregateOutputType = {
    id: number
    developer_application_key: number
    client_id: number
    client_secret: number
    _all: number
  }


  export type Boleto_apiAvgAggregateInputType = {
    id?: true
  }

  export type Boleto_apiSumAggregateInputType = {
    id?: true
  }

  export type Boleto_apiMinAggregateInputType = {
    id?: true
    developer_application_key?: true
    client_id?: true
    client_secret?: true
  }

  export type Boleto_apiMaxAggregateInputType = {
    id?: true
    developer_application_key?: true
    client_id?: true
    client_secret?: true
  }

  export type Boleto_apiCountAggregateInputType = {
    id?: true
    developer_application_key?: true
    client_id?: true
    client_secret?: true
    _all?: true
  }

  export type Boleto_apiAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which boleto_api to aggregate.
     */
    where?: boleto_apiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of boleto_apis to fetch.
     */
    orderBy?: boleto_apiOrderByWithRelationInput | boleto_apiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: boleto_apiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` boleto_apis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` boleto_apis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned boleto_apis
    **/
    _count?: true | Boleto_apiCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Boleto_apiAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Boleto_apiSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Boleto_apiMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Boleto_apiMaxAggregateInputType
  }

  export type GetBoleto_apiAggregateType<T extends Boleto_apiAggregateArgs> = {
        [P in keyof T & keyof AggregateBoleto_api]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBoleto_api[P]>
      : GetScalarType<T[P], AggregateBoleto_api[P]>
  }




  export type boleto_apiGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: boleto_apiWhereInput
    orderBy?: boleto_apiOrderByWithAggregationInput | boleto_apiOrderByWithAggregationInput[]
    by: Boleto_apiScalarFieldEnum[] | Boleto_apiScalarFieldEnum
    having?: boleto_apiScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Boleto_apiCountAggregateInputType | true
    _avg?: Boleto_apiAvgAggregateInputType
    _sum?: Boleto_apiSumAggregateInputType
    _min?: Boleto_apiMinAggregateInputType
    _max?: Boleto_apiMaxAggregateInputType
  }

  export type Boleto_apiGroupByOutputType = {
    id: number
    developer_application_key: string
    client_id: string
    client_secret: string
    _count: Boleto_apiCountAggregateOutputType | null
    _avg: Boleto_apiAvgAggregateOutputType | null
    _sum: Boleto_apiSumAggregateOutputType | null
    _min: Boleto_apiMinAggregateOutputType | null
    _max: Boleto_apiMaxAggregateOutputType | null
  }

  type GetBoleto_apiGroupByPayload<T extends boleto_apiGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Boleto_apiGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Boleto_apiGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Boleto_apiGroupByOutputType[P]>
            : GetScalarType<T[P], Boleto_apiGroupByOutputType[P]>
        }
      >
    >


  export type boleto_apiSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    developer_application_key?: boolean
    client_id?: boolean
    client_secret?: boolean
  }, ExtArgs["result"]["boleto_api"]>

  export type boleto_apiSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    developer_application_key?: boolean
    client_id?: boolean
    client_secret?: boolean
  }, ExtArgs["result"]["boleto_api"]>

  export type boleto_apiSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    developer_application_key?: boolean
    client_id?: boolean
    client_secret?: boolean
  }, ExtArgs["result"]["boleto_api"]>

  export type boleto_apiSelectScalar = {
    id?: boolean
    developer_application_key?: boolean
    client_id?: boolean
    client_secret?: boolean
  }

  export type boleto_apiOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "developer_application_key" | "client_id" | "client_secret", ExtArgs["result"]["boleto_api"]>

  export type $boleto_apiPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "boleto_api"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      developer_application_key: string
      client_id: string
      client_secret: string
    }, ExtArgs["result"]["boleto_api"]>
    composites: {}
  }

  type boleto_apiGetPayload<S extends boolean | null | undefined | boleto_apiDefaultArgs> = $Result.GetResult<Prisma.$boleto_apiPayload, S>

  type boleto_apiCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<boleto_apiFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Boleto_apiCountAggregateInputType | true
    }

  export interface boleto_apiDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['boleto_api'], meta: { name: 'boleto_api' } }
    /**
     * Find zero or one Boleto_api that matches the filter.
     * @param {boleto_apiFindUniqueArgs} args - Arguments to find a Boleto_api
     * @example
     * // Get one Boleto_api
     * const boleto_api = await prisma.boleto_api.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends boleto_apiFindUniqueArgs>(args: SelectSubset<T, boleto_apiFindUniqueArgs<ExtArgs>>): Prisma__boleto_apiClient<$Result.GetResult<Prisma.$boleto_apiPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Boleto_api that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {boleto_apiFindUniqueOrThrowArgs} args - Arguments to find a Boleto_api
     * @example
     * // Get one Boleto_api
     * const boleto_api = await prisma.boleto_api.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends boleto_apiFindUniqueOrThrowArgs>(args: SelectSubset<T, boleto_apiFindUniqueOrThrowArgs<ExtArgs>>): Prisma__boleto_apiClient<$Result.GetResult<Prisma.$boleto_apiPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Boleto_api that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {boleto_apiFindFirstArgs} args - Arguments to find a Boleto_api
     * @example
     * // Get one Boleto_api
     * const boleto_api = await prisma.boleto_api.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends boleto_apiFindFirstArgs>(args?: SelectSubset<T, boleto_apiFindFirstArgs<ExtArgs>>): Prisma__boleto_apiClient<$Result.GetResult<Prisma.$boleto_apiPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Boleto_api that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {boleto_apiFindFirstOrThrowArgs} args - Arguments to find a Boleto_api
     * @example
     * // Get one Boleto_api
     * const boleto_api = await prisma.boleto_api.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends boleto_apiFindFirstOrThrowArgs>(args?: SelectSubset<T, boleto_apiFindFirstOrThrowArgs<ExtArgs>>): Prisma__boleto_apiClient<$Result.GetResult<Prisma.$boleto_apiPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Boleto_apis that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {boleto_apiFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Boleto_apis
     * const boleto_apis = await prisma.boleto_api.findMany()
     * 
     * // Get first 10 Boleto_apis
     * const boleto_apis = await prisma.boleto_api.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const boleto_apiWithIdOnly = await prisma.boleto_api.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends boleto_apiFindManyArgs>(args?: SelectSubset<T, boleto_apiFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$boleto_apiPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Boleto_api.
     * @param {boleto_apiCreateArgs} args - Arguments to create a Boleto_api.
     * @example
     * // Create one Boleto_api
     * const Boleto_api = await prisma.boleto_api.create({
     *   data: {
     *     // ... data to create a Boleto_api
     *   }
     * })
     * 
     */
    create<T extends boleto_apiCreateArgs>(args: SelectSubset<T, boleto_apiCreateArgs<ExtArgs>>): Prisma__boleto_apiClient<$Result.GetResult<Prisma.$boleto_apiPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Boleto_apis.
     * @param {boleto_apiCreateManyArgs} args - Arguments to create many Boleto_apis.
     * @example
     * // Create many Boleto_apis
     * const boleto_api = await prisma.boleto_api.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends boleto_apiCreateManyArgs>(args?: SelectSubset<T, boleto_apiCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Boleto_apis and returns the data saved in the database.
     * @param {boleto_apiCreateManyAndReturnArgs} args - Arguments to create many Boleto_apis.
     * @example
     * // Create many Boleto_apis
     * const boleto_api = await prisma.boleto_api.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Boleto_apis and only return the `id`
     * const boleto_apiWithIdOnly = await prisma.boleto_api.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends boleto_apiCreateManyAndReturnArgs>(args?: SelectSubset<T, boleto_apiCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$boleto_apiPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Boleto_api.
     * @param {boleto_apiDeleteArgs} args - Arguments to delete one Boleto_api.
     * @example
     * // Delete one Boleto_api
     * const Boleto_api = await prisma.boleto_api.delete({
     *   where: {
     *     // ... filter to delete one Boleto_api
     *   }
     * })
     * 
     */
    delete<T extends boleto_apiDeleteArgs>(args: SelectSubset<T, boleto_apiDeleteArgs<ExtArgs>>): Prisma__boleto_apiClient<$Result.GetResult<Prisma.$boleto_apiPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Boleto_api.
     * @param {boleto_apiUpdateArgs} args - Arguments to update one Boleto_api.
     * @example
     * // Update one Boleto_api
     * const boleto_api = await prisma.boleto_api.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends boleto_apiUpdateArgs>(args: SelectSubset<T, boleto_apiUpdateArgs<ExtArgs>>): Prisma__boleto_apiClient<$Result.GetResult<Prisma.$boleto_apiPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Boleto_apis.
     * @param {boleto_apiDeleteManyArgs} args - Arguments to filter Boleto_apis to delete.
     * @example
     * // Delete a few Boleto_apis
     * const { count } = await prisma.boleto_api.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends boleto_apiDeleteManyArgs>(args?: SelectSubset<T, boleto_apiDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Boleto_apis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {boleto_apiUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Boleto_apis
     * const boleto_api = await prisma.boleto_api.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends boleto_apiUpdateManyArgs>(args: SelectSubset<T, boleto_apiUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Boleto_apis and returns the data updated in the database.
     * @param {boleto_apiUpdateManyAndReturnArgs} args - Arguments to update many Boleto_apis.
     * @example
     * // Update many Boleto_apis
     * const boleto_api = await prisma.boleto_api.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Boleto_apis and only return the `id`
     * const boleto_apiWithIdOnly = await prisma.boleto_api.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends boleto_apiUpdateManyAndReturnArgs>(args: SelectSubset<T, boleto_apiUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$boleto_apiPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Boleto_api.
     * @param {boleto_apiUpsertArgs} args - Arguments to update or create a Boleto_api.
     * @example
     * // Update or create a Boleto_api
     * const boleto_api = await prisma.boleto_api.upsert({
     *   create: {
     *     // ... data to create a Boleto_api
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Boleto_api we want to update
     *   }
     * })
     */
    upsert<T extends boleto_apiUpsertArgs>(args: SelectSubset<T, boleto_apiUpsertArgs<ExtArgs>>): Prisma__boleto_apiClient<$Result.GetResult<Prisma.$boleto_apiPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Boleto_apis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {boleto_apiCountArgs} args - Arguments to filter Boleto_apis to count.
     * @example
     * // Count the number of Boleto_apis
     * const count = await prisma.boleto_api.count({
     *   where: {
     *     // ... the filter for the Boleto_apis we want to count
     *   }
     * })
    **/
    count<T extends boleto_apiCountArgs>(
      args?: Subset<T, boleto_apiCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Boleto_apiCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Boleto_api.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Boleto_apiAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Boleto_apiAggregateArgs>(args: Subset<T, Boleto_apiAggregateArgs>): Prisma.PrismaPromise<GetBoleto_apiAggregateType<T>>

    /**
     * Group by Boleto_api.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {boleto_apiGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends boleto_apiGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: boleto_apiGroupByArgs['orderBy'] }
        : { orderBy?: boleto_apiGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, boleto_apiGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBoleto_apiGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the boleto_api model
   */
  readonly fields: boleto_apiFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for boleto_api.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__boleto_apiClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the boleto_api model
   */
  interface boleto_apiFieldRefs {
    readonly id: FieldRef<"boleto_api", 'Int'>
    readonly developer_application_key: FieldRef<"boleto_api", 'String'>
    readonly client_id: FieldRef<"boleto_api", 'String'>
    readonly client_secret: FieldRef<"boleto_api", 'String'>
  }
    

  // Custom InputTypes
  /**
   * boleto_api findUnique
   */
  export type boleto_apiFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the boleto_api
     */
    select?: boleto_apiSelect<ExtArgs> | null
    /**
     * Omit specific fields from the boleto_api
     */
    omit?: boleto_apiOmit<ExtArgs> | null
    /**
     * Filter, which boleto_api to fetch.
     */
    where: boleto_apiWhereUniqueInput
  }

  /**
   * boleto_api findUniqueOrThrow
   */
  export type boleto_apiFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the boleto_api
     */
    select?: boleto_apiSelect<ExtArgs> | null
    /**
     * Omit specific fields from the boleto_api
     */
    omit?: boleto_apiOmit<ExtArgs> | null
    /**
     * Filter, which boleto_api to fetch.
     */
    where: boleto_apiWhereUniqueInput
  }

  /**
   * boleto_api findFirst
   */
  export type boleto_apiFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the boleto_api
     */
    select?: boleto_apiSelect<ExtArgs> | null
    /**
     * Omit specific fields from the boleto_api
     */
    omit?: boleto_apiOmit<ExtArgs> | null
    /**
     * Filter, which boleto_api to fetch.
     */
    where?: boleto_apiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of boleto_apis to fetch.
     */
    orderBy?: boleto_apiOrderByWithRelationInput | boleto_apiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for boleto_apis.
     */
    cursor?: boleto_apiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` boleto_apis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` boleto_apis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of boleto_apis.
     */
    distinct?: Boleto_apiScalarFieldEnum | Boleto_apiScalarFieldEnum[]
  }

  /**
   * boleto_api findFirstOrThrow
   */
  export type boleto_apiFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the boleto_api
     */
    select?: boleto_apiSelect<ExtArgs> | null
    /**
     * Omit specific fields from the boleto_api
     */
    omit?: boleto_apiOmit<ExtArgs> | null
    /**
     * Filter, which boleto_api to fetch.
     */
    where?: boleto_apiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of boleto_apis to fetch.
     */
    orderBy?: boleto_apiOrderByWithRelationInput | boleto_apiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for boleto_apis.
     */
    cursor?: boleto_apiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` boleto_apis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` boleto_apis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of boleto_apis.
     */
    distinct?: Boleto_apiScalarFieldEnum | Boleto_apiScalarFieldEnum[]
  }

  /**
   * boleto_api findMany
   */
  export type boleto_apiFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the boleto_api
     */
    select?: boleto_apiSelect<ExtArgs> | null
    /**
     * Omit specific fields from the boleto_api
     */
    omit?: boleto_apiOmit<ExtArgs> | null
    /**
     * Filter, which boleto_apis to fetch.
     */
    where?: boleto_apiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of boleto_apis to fetch.
     */
    orderBy?: boleto_apiOrderByWithRelationInput | boleto_apiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing boleto_apis.
     */
    cursor?: boleto_apiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` boleto_apis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` boleto_apis.
     */
    skip?: number
    distinct?: Boleto_apiScalarFieldEnum | Boleto_apiScalarFieldEnum[]
  }

  /**
   * boleto_api create
   */
  export type boleto_apiCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the boleto_api
     */
    select?: boleto_apiSelect<ExtArgs> | null
    /**
     * Omit specific fields from the boleto_api
     */
    omit?: boleto_apiOmit<ExtArgs> | null
    /**
     * The data needed to create a boleto_api.
     */
    data: XOR<boleto_apiCreateInput, boleto_apiUncheckedCreateInput>
  }

  /**
   * boleto_api createMany
   */
  export type boleto_apiCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many boleto_apis.
     */
    data: boleto_apiCreateManyInput | boleto_apiCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * boleto_api createManyAndReturn
   */
  export type boleto_apiCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the boleto_api
     */
    select?: boleto_apiSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the boleto_api
     */
    omit?: boleto_apiOmit<ExtArgs> | null
    /**
     * The data used to create many boleto_apis.
     */
    data: boleto_apiCreateManyInput | boleto_apiCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * boleto_api update
   */
  export type boleto_apiUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the boleto_api
     */
    select?: boleto_apiSelect<ExtArgs> | null
    /**
     * Omit specific fields from the boleto_api
     */
    omit?: boleto_apiOmit<ExtArgs> | null
    /**
     * The data needed to update a boleto_api.
     */
    data: XOR<boleto_apiUpdateInput, boleto_apiUncheckedUpdateInput>
    /**
     * Choose, which boleto_api to update.
     */
    where: boleto_apiWhereUniqueInput
  }

  /**
   * boleto_api updateMany
   */
  export type boleto_apiUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update boleto_apis.
     */
    data: XOR<boleto_apiUpdateManyMutationInput, boleto_apiUncheckedUpdateManyInput>
    /**
     * Filter which boleto_apis to update
     */
    where?: boleto_apiWhereInput
    /**
     * Limit how many boleto_apis to update.
     */
    limit?: number
  }

  /**
   * boleto_api updateManyAndReturn
   */
  export type boleto_apiUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the boleto_api
     */
    select?: boleto_apiSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the boleto_api
     */
    omit?: boleto_apiOmit<ExtArgs> | null
    /**
     * The data used to update boleto_apis.
     */
    data: XOR<boleto_apiUpdateManyMutationInput, boleto_apiUncheckedUpdateManyInput>
    /**
     * Filter which boleto_apis to update
     */
    where?: boleto_apiWhereInput
    /**
     * Limit how many boleto_apis to update.
     */
    limit?: number
  }

  /**
   * boleto_api upsert
   */
  export type boleto_apiUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the boleto_api
     */
    select?: boleto_apiSelect<ExtArgs> | null
    /**
     * Omit specific fields from the boleto_api
     */
    omit?: boleto_apiOmit<ExtArgs> | null
    /**
     * The filter to search for the boleto_api to update in case it exists.
     */
    where: boleto_apiWhereUniqueInput
    /**
     * In case the boleto_api found by the `where` argument doesn't exist, create a new boleto_api with this data.
     */
    create: XOR<boleto_apiCreateInput, boleto_apiUncheckedCreateInput>
    /**
     * In case the boleto_api was found with the provided `where` argument, update it with this data.
     */
    update: XOR<boleto_apiUpdateInput, boleto_apiUncheckedUpdateInput>
  }

  /**
   * boleto_api delete
   */
  export type boleto_apiDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the boleto_api
     */
    select?: boleto_apiSelect<ExtArgs> | null
    /**
     * Omit specific fields from the boleto_api
     */
    omit?: boleto_apiOmit<ExtArgs> | null
    /**
     * Filter which boleto_api to delete.
     */
    where: boleto_apiWhereUniqueInput
  }

  /**
   * boleto_api deleteMany
   */
  export type boleto_apiDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which boleto_apis to delete
     */
    where?: boleto_apiWhereInput
    /**
     * Limit how many boleto_apis to delete.
     */
    limit?: number
  }

  /**
   * boleto_api without action
   */
  export type boleto_apiDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the boleto_api
     */
    select?: boleto_apiSelect<ExtArgs> | null
    /**
     * Omit specific fields from the boleto_api
     */
    omit?: boleto_apiOmit<ExtArgs> | null
  }


  /**
   * Model books
   */

  export type AggregateBooks = {
    _count: BooksCountAggregateOutputType | null
    _avg: BooksAvgAggregateOutputType | null
    _sum: BooksSumAggregateOutputType | null
    _min: BooksMinAggregateOutputType | null
    _max: BooksMaxAggregateOutputType | null
  }

  export type BooksAvgAggregateOutputType = {
    id: number | null
    courses_id: number | null
    position: number | null
  }

  export type BooksSumAggregateOutputType = {
    id: number | null
    courses_id: number | null
    position: number | null
  }

  export type BooksMinAggregateOutputType = {
    id: number | null
    courses_id: number | null
    name: string | null
    position: number | null
  }

  export type BooksMaxAggregateOutputType = {
    id: number | null
    courses_id: number | null
    name: string | null
    position: number | null
  }

  export type BooksCountAggregateOutputType = {
    id: number
    courses_id: number
    name: number
    position: number
    _all: number
  }


  export type BooksAvgAggregateInputType = {
    id?: true
    courses_id?: true
    position?: true
  }

  export type BooksSumAggregateInputType = {
    id?: true
    courses_id?: true
    position?: true
  }

  export type BooksMinAggregateInputType = {
    id?: true
    courses_id?: true
    name?: true
    position?: true
  }

  export type BooksMaxAggregateInputType = {
    id?: true
    courses_id?: true
    name?: true
    position?: true
  }

  export type BooksCountAggregateInputType = {
    id?: true
    courses_id?: true
    name?: true
    position?: true
    _all?: true
  }

  export type BooksAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which books to aggregate.
     */
    where?: booksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of books to fetch.
     */
    orderBy?: booksOrderByWithRelationInput | booksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: booksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` books from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` books.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned books
    **/
    _count?: true | BooksCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BooksAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BooksSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BooksMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BooksMaxAggregateInputType
  }

  export type GetBooksAggregateType<T extends BooksAggregateArgs> = {
        [P in keyof T & keyof AggregateBooks]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBooks[P]>
      : GetScalarType<T[P], AggregateBooks[P]>
  }




  export type booksGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: booksWhereInput
    orderBy?: booksOrderByWithAggregationInput | booksOrderByWithAggregationInput[]
    by: BooksScalarFieldEnum[] | BooksScalarFieldEnum
    having?: booksScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BooksCountAggregateInputType | true
    _avg?: BooksAvgAggregateInputType
    _sum?: BooksSumAggregateInputType
    _min?: BooksMinAggregateInputType
    _max?: BooksMaxAggregateInputType
  }

  export type BooksGroupByOutputType = {
    id: number
    courses_id: number
    name: string
    position: number
    _count: BooksCountAggregateOutputType | null
    _avg: BooksAvgAggregateOutputType | null
    _sum: BooksSumAggregateOutputType | null
    _min: BooksMinAggregateOutputType | null
    _max: BooksMaxAggregateOutputType | null
  }

  type GetBooksGroupByPayload<T extends booksGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BooksGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BooksGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BooksGroupByOutputType[P]>
            : GetScalarType<T[P], BooksGroupByOutputType[P]>
        }
      >
    >


  export type booksSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courses_id?: boolean
    name?: boolean
    position?: boolean
    courses?: boolean | coursesDefaultArgs<ExtArgs>
    classrooms?: boolean | books$classroomsArgs<ExtArgs>
    lessons?: boolean | books$lessonsArgs<ExtArgs>
    _count?: boolean | BooksCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["books"]>

  export type booksSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courses_id?: boolean
    name?: boolean
    position?: boolean
    courses?: boolean | coursesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["books"]>

  export type booksSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courses_id?: boolean
    name?: boolean
    position?: boolean
    courses?: boolean | coursesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["books"]>

  export type booksSelectScalar = {
    id?: boolean
    courses_id?: boolean
    name?: boolean
    position?: boolean
  }

  export type booksOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "courses_id" | "name" | "position", ExtArgs["result"]["books"]>
  export type booksInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    courses?: boolean | coursesDefaultArgs<ExtArgs>
    classrooms?: boolean | books$classroomsArgs<ExtArgs>
    lessons?: boolean | books$lessonsArgs<ExtArgs>
    _count?: boolean | BooksCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type booksIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    courses?: boolean | coursesDefaultArgs<ExtArgs>
  }
  export type booksIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    courses?: boolean | coursesDefaultArgs<ExtArgs>
  }

  export type $booksPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "books"
    objects: {
      courses: Prisma.$coursesPayload<ExtArgs>
      classrooms: Prisma.$classroomsPayload<ExtArgs>[]
      lessons: Prisma.$lessonsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      courses_id: number
      name: string
      position: number
    }, ExtArgs["result"]["books"]>
    composites: {}
  }

  type booksGetPayload<S extends boolean | null | undefined | booksDefaultArgs> = $Result.GetResult<Prisma.$booksPayload, S>

  type booksCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<booksFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BooksCountAggregateInputType | true
    }

  export interface booksDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['books'], meta: { name: 'books' } }
    /**
     * Find zero or one Books that matches the filter.
     * @param {booksFindUniqueArgs} args - Arguments to find a Books
     * @example
     * // Get one Books
     * const books = await prisma.books.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends booksFindUniqueArgs>(args: SelectSubset<T, booksFindUniqueArgs<ExtArgs>>): Prisma__booksClient<$Result.GetResult<Prisma.$booksPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Books that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {booksFindUniqueOrThrowArgs} args - Arguments to find a Books
     * @example
     * // Get one Books
     * const books = await prisma.books.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends booksFindUniqueOrThrowArgs>(args: SelectSubset<T, booksFindUniqueOrThrowArgs<ExtArgs>>): Prisma__booksClient<$Result.GetResult<Prisma.$booksPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Books that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {booksFindFirstArgs} args - Arguments to find a Books
     * @example
     * // Get one Books
     * const books = await prisma.books.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends booksFindFirstArgs>(args?: SelectSubset<T, booksFindFirstArgs<ExtArgs>>): Prisma__booksClient<$Result.GetResult<Prisma.$booksPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Books that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {booksFindFirstOrThrowArgs} args - Arguments to find a Books
     * @example
     * // Get one Books
     * const books = await prisma.books.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends booksFindFirstOrThrowArgs>(args?: SelectSubset<T, booksFindFirstOrThrowArgs<ExtArgs>>): Prisma__booksClient<$Result.GetResult<Prisma.$booksPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Books that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {booksFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Books
     * const books = await prisma.books.findMany()
     * 
     * // Get first 10 Books
     * const books = await prisma.books.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const booksWithIdOnly = await prisma.books.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends booksFindManyArgs>(args?: SelectSubset<T, booksFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$booksPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Books.
     * @param {booksCreateArgs} args - Arguments to create a Books.
     * @example
     * // Create one Books
     * const Books = await prisma.books.create({
     *   data: {
     *     // ... data to create a Books
     *   }
     * })
     * 
     */
    create<T extends booksCreateArgs>(args: SelectSubset<T, booksCreateArgs<ExtArgs>>): Prisma__booksClient<$Result.GetResult<Prisma.$booksPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Books.
     * @param {booksCreateManyArgs} args - Arguments to create many Books.
     * @example
     * // Create many Books
     * const books = await prisma.books.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends booksCreateManyArgs>(args?: SelectSubset<T, booksCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Books and returns the data saved in the database.
     * @param {booksCreateManyAndReturnArgs} args - Arguments to create many Books.
     * @example
     * // Create many Books
     * const books = await prisma.books.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Books and only return the `id`
     * const booksWithIdOnly = await prisma.books.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends booksCreateManyAndReturnArgs>(args?: SelectSubset<T, booksCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$booksPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Books.
     * @param {booksDeleteArgs} args - Arguments to delete one Books.
     * @example
     * // Delete one Books
     * const Books = await prisma.books.delete({
     *   where: {
     *     // ... filter to delete one Books
     *   }
     * })
     * 
     */
    delete<T extends booksDeleteArgs>(args: SelectSubset<T, booksDeleteArgs<ExtArgs>>): Prisma__booksClient<$Result.GetResult<Prisma.$booksPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Books.
     * @param {booksUpdateArgs} args - Arguments to update one Books.
     * @example
     * // Update one Books
     * const books = await prisma.books.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends booksUpdateArgs>(args: SelectSubset<T, booksUpdateArgs<ExtArgs>>): Prisma__booksClient<$Result.GetResult<Prisma.$booksPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Books.
     * @param {booksDeleteManyArgs} args - Arguments to filter Books to delete.
     * @example
     * // Delete a few Books
     * const { count } = await prisma.books.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends booksDeleteManyArgs>(args?: SelectSubset<T, booksDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Books.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {booksUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Books
     * const books = await prisma.books.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends booksUpdateManyArgs>(args: SelectSubset<T, booksUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Books and returns the data updated in the database.
     * @param {booksUpdateManyAndReturnArgs} args - Arguments to update many Books.
     * @example
     * // Update many Books
     * const books = await prisma.books.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Books and only return the `id`
     * const booksWithIdOnly = await prisma.books.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends booksUpdateManyAndReturnArgs>(args: SelectSubset<T, booksUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$booksPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Books.
     * @param {booksUpsertArgs} args - Arguments to update or create a Books.
     * @example
     * // Update or create a Books
     * const books = await prisma.books.upsert({
     *   create: {
     *     // ... data to create a Books
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Books we want to update
     *   }
     * })
     */
    upsert<T extends booksUpsertArgs>(args: SelectSubset<T, booksUpsertArgs<ExtArgs>>): Prisma__booksClient<$Result.GetResult<Prisma.$booksPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Books.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {booksCountArgs} args - Arguments to filter Books to count.
     * @example
     * // Count the number of Books
     * const count = await prisma.books.count({
     *   where: {
     *     // ... the filter for the Books we want to count
     *   }
     * })
    **/
    count<T extends booksCountArgs>(
      args?: Subset<T, booksCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BooksCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Books.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BooksAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BooksAggregateArgs>(args: Subset<T, BooksAggregateArgs>): Prisma.PrismaPromise<GetBooksAggregateType<T>>

    /**
     * Group by Books.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {booksGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends booksGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: booksGroupByArgs['orderBy'] }
        : { orderBy?: booksGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, booksGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBooksGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the books model
   */
  readonly fields: booksFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for books.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__booksClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    courses<T extends coursesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, coursesDefaultArgs<ExtArgs>>): Prisma__coursesClient<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    classrooms<T extends books$classroomsArgs<ExtArgs> = {}>(args?: Subset<T, books$classroomsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$classroomsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    lessons<T extends books$lessonsArgs<ExtArgs> = {}>(args?: Subset<T, books$lessonsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$lessonsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the books model
   */
  interface booksFieldRefs {
    readonly id: FieldRef<"books", 'Int'>
    readonly courses_id: FieldRef<"books", 'Int'>
    readonly name: FieldRef<"books", 'String'>
    readonly position: FieldRef<"books", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * books findUnique
   */
  export type booksFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the books
     */
    select?: booksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the books
     */
    omit?: booksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: booksInclude<ExtArgs> | null
    /**
     * Filter, which books to fetch.
     */
    where: booksWhereUniqueInput
  }

  /**
   * books findUniqueOrThrow
   */
  export type booksFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the books
     */
    select?: booksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the books
     */
    omit?: booksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: booksInclude<ExtArgs> | null
    /**
     * Filter, which books to fetch.
     */
    where: booksWhereUniqueInput
  }

  /**
   * books findFirst
   */
  export type booksFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the books
     */
    select?: booksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the books
     */
    omit?: booksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: booksInclude<ExtArgs> | null
    /**
     * Filter, which books to fetch.
     */
    where?: booksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of books to fetch.
     */
    orderBy?: booksOrderByWithRelationInput | booksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for books.
     */
    cursor?: booksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` books from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` books.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of books.
     */
    distinct?: BooksScalarFieldEnum | BooksScalarFieldEnum[]
  }

  /**
   * books findFirstOrThrow
   */
  export type booksFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the books
     */
    select?: booksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the books
     */
    omit?: booksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: booksInclude<ExtArgs> | null
    /**
     * Filter, which books to fetch.
     */
    where?: booksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of books to fetch.
     */
    orderBy?: booksOrderByWithRelationInput | booksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for books.
     */
    cursor?: booksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` books from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` books.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of books.
     */
    distinct?: BooksScalarFieldEnum | BooksScalarFieldEnum[]
  }

  /**
   * books findMany
   */
  export type booksFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the books
     */
    select?: booksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the books
     */
    omit?: booksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: booksInclude<ExtArgs> | null
    /**
     * Filter, which books to fetch.
     */
    where?: booksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of books to fetch.
     */
    orderBy?: booksOrderByWithRelationInput | booksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing books.
     */
    cursor?: booksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` books from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` books.
     */
    skip?: number
    distinct?: BooksScalarFieldEnum | BooksScalarFieldEnum[]
  }

  /**
   * books create
   */
  export type booksCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the books
     */
    select?: booksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the books
     */
    omit?: booksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: booksInclude<ExtArgs> | null
    /**
     * The data needed to create a books.
     */
    data: XOR<booksCreateInput, booksUncheckedCreateInput>
  }

  /**
   * books createMany
   */
  export type booksCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many books.
     */
    data: booksCreateManyInput | booksCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * books createManyAndReturn
   */
  export type booksCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the books
     */
    select?: booksSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the books
     */
    omit?: booksOmit<ExtArgs> | null
    /**
     * The data used to create many books.
     */
    data: booksCreateManyInput | booksCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: booksIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * books update
   */
  export type booksUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the books
     */
    select?: booksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the books
     */
    omit?: booksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: booksInclude<ExtArgs> | null
    /**
     * The data needed to update a books.
     */
    data: XOR<booksUpdateInput, booksUncheckedUpdateInput>
    /**
     * Choose, which books to update.
     */
    where: booksWhereUniqueInput
  }

  /**
   * books updateMany
   */
  export type booksUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update books.
     */
    data: XOR<booksUpdateManyMutationInput, booksUncheckedUpdateManyInput>
    /**
     * Filter which books to update
     */
    where?: booksWhereInput
    /**
     * Limit how many books to update.
     */
    limit?: number
  }

  /**
   * books updateManyAndReturn
   */
  export type booksUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the books
     */
    select?: booksSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the books
     */
    omit?: booksOmit<ExtArgs> | null
    /**
     * The data used to update books.
     */
    data: XOR<booksUpdateManyMutationInput, booksUncheckedUpdateManyInput>
    /**
     * Filter which books to update
     */
    where?: booksWhereInput
    /**
     * Limit how many books to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: booksIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * books upsert
   */
  export type booksUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the books
     */
    select?: booksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the books
     */
    omit?: booksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: booksInclude<ExtArgs> | null
    /**
     * The filter to search for the books to update in case it exists.
     */
    where: booksWhereUniqueInput
    /**
     * In case the books found by the `where` argument doesn't exist, create a new books with this data.
     */
    create: XOR<booksCreateInput, booksUncheckedCreateInput>
    /**
     * In case the books was found with the provided `where` argument, update it with this data.
     */
    update: XOR<booksUpdateInput, booksUncheckedUpdateInput>
  }

  /**
   * books delete
   */
  export type booksDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the books
     */
    select?: booksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the books
     */
    omit?: booksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: booksInclude<ExtArgs> | null
    /**
     * Filter which books to delete.
     */
    where: booksWhereUniqueInput
  }

  /**
   * books deleteMany
   */
  export type booksDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which books to delete
     */
    where?: booksWhereInput
    /**
     * Limit how many books to delete.
     */
    limit?: number
  }

  /**
   * books.classrooms
   */
  export type books$classroomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classrooms
     */
    select?: classroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classrooms
     */
    omit?: classroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classroomsInclude<ExtArgs> | null
    where?: classroomsWhereInput
    orderBy?: classroomsOrderByWithRelationInput | classroomsOrderByWithRelationInput[]
    cursor?: classroomsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassroomsScalarFieldEnum | ClassroomsScalarFieldEnum[]
  }

  /**
   * books.lessons
   */
  export type books$lessonsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lessons
     */
    select?: lessonsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lessons
     */
    omit?: lessonsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lessonsInclude<ExtArgs> | null
    where?: lessonsWhereInput
    orderBy?: lessonsOrderByWithRelationInput | lessonsOrderByWithRelationInput[]
    cursor?: lessonsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LessonsScalarFieldEnum | LessonsScalarFieldEnum[]
  }

  /**
   * books without action
   */
  export type booksDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the books
     */
    select?: booksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the books
     */
    omit?: booksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: booksInclude<ExtArgs> | null
  }


  /**
   * Model classes
   */

  export type AggregateClasses = {
    _count: ClassesCountAggregateOutputType | null
    _avg: ClassesAvgAggregateOutputType | null
    _sum: ClassesSumAggregateOutputType | null
    _min: ClassesMinAggregateOutputType | null
    _max: ClassesMaxAggregateOutputType | null
  }

  export type ClassesAvgAggregateOutputType = {
    id: number | null
    professionals_id: number | null
    classrooms_id: number | null
    presence_list_id: number | null
  }

  export type ClassesSumAggregateOutputType = {
    id: number | null
    professionals_id: number | null
    classrooms_id: number | null
    presence_list_id: number | null
  }

  export type ClassesMinAggregateOutputType = {
    id: number | null
    theme: string | null
    start_date: Date | null
    end_date: Date | null
    professionals_id: number | null
    classrooms_id: number | null
    presence_list_id: number | null
  }

  export type ClassesMaxAggregateOutputType = {
    id: number | null
    theme: string | null
    start_date: Date | null
    end_date: Date | null
    professionals_id: number | null
    classrooms_id: number | null
    presence_list_id: number | null
  }

  export type ClassesCountAggregateOutputType = {
    id: number
    theme: number
    start_date: number
    end_date: number
    professionals_id: number
    classrooms_id: number
    presence_list_id: number
    _all: number
  }


  export type ClassesAvgAggregateInputType = {
    id?: true
    professionals_id?: true
    classrooms_id?: true
    presence_list_id?: true
  }

  export type ClassesSumAggregateInputType = {
    id?: true
    professionals_id?: true
    classrooms_id?: true
    presence_list_id?: true
  }

  export type ClassesMinAggregateInputType = {
    id?: true
    theme?: true
    start_date?: true
    end_date?: true
    professionals_id?: true
    classrooms_id?: true
    presence_list_id?: true
  }

  export type ClassesMaxAggregateInputType = {
    id?: true
    theme?: true
    start_date?: true
    end_date?: true
    professionals_id?: true
    classrooms_id?: true
    presence_list_id?: true
  }

  export type ClassesCountAggregateInputType = {
    id?: true
    theme?: true
    start_date?: true
    end_date?: true
    professionals_id?: true
    classrooms_id?: true
    presence_list_id?: true
    _all?: true
  }

  export type ClassesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which classes to aggregate.
     */
    where?: classesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of classes to fetch.
     */
    orderBy?: classesOrderByWithRelationInput | classesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: classesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned classes
    **/
    _count?: true | ClassesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClassesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClassesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClassesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClassesMaxAggregateInputType
  }

  export type GetClassesAggregateType<T extends ClassesAggregateArgs> = {
        [P in keyof T & keyof AggregateClasses]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClasses[P]>
      : GetScalarType<T[P], AggregateClasses[P]>
  }




  export type classesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: classesWhereInput
    orderBy?: classesOrderByWithAggregationInput | classesOrderByWithAggregationInput[]
    by: ClassesScalarFieldEnum[] | ClassesScalarFieldEnum
    having?: classesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClassesCountAggregateInputType | true
    _avg?: ClassesAvgAggregateInputType
    _sum?: ClassesSumAggregateInputType
    _min?: ClassesMinAggregateInputType
    _max?: ClassesMaxAggregateInputType
  }

  export type ClassesGroupByOutputType = {
    id: number
    theme: string
    start_date: Date
    end_date: Date
    professionals_id: number
    classrooms_id: number
    presence_list_id: number
    _count: ClassesCountAggregateOutputType | null
    _avg: ClassesAvgAggregateOutputType | null
    _sum: ClassesSumAggregateOutputType | null
    _min: ClassesMinAggregateOutputType | null
    _max: ClassesMaxAggregateOutputType | null
  }

  type GetClassesGroupByPayload<T extends classesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClassesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClassesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClassesGroupByOutputType[P]>
            : GetScalarType<T[P], ClassesGroupByOutputType[P]>
        }
      >
    >


  export type classesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    theme?: boolean
    start_date?: boolean
    end_date?: boolean
    professionals_id?: boolean
    classrooms_id?: boolean
    presence_list_id?: boolean
    classrooms?: boolean | classroomsDefaultArgs<ExtArgs>
    presence_list?: boolean | presence_listDefaultArgs<ExtArgs>
    professionals?: boolean | professionalsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["classes"]>

  export type classesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    theme?: boolean
    start_date?: boolean
    end_date?: boolean
    professionals_id?: boolean
    classrooms_id?: boolean
    presence_list_id?: boolean
    classrooms?: boolean | classroomsDefaultArgs<ExtArgs>
    presence_list?: boolean | presence_listDefaultArgs<ExtArgs>
    professionals?: boolean | professionalsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["classes"]>

  export type classesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    theme?: boolean
    start_date?: boolean
    end_date?: boolean
    professionals_id?: boolean
    classrooms_id?: boolean
    presence_list_id?: boolean
    classrooms?: boolean | classroomsDefaultArgs<ExtArgs>
    presence_list?: boolean | presence_listDefaultArgs<ExtArgs>
    professionals?: boolean | professionalsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["classes"]>

  export type classesSelectScalar = {
    id?: boolean
    theme?: boolean
    start_date?: boolean
    end_date?: boolean
    professionals_id?: boolean
    classrooms_id?: boolean
    presence_list_id?: boolean
  }

  export type classesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "theme" | "start_date" | "end_date" | "professionals_id" | "classrooms_id" | "presence_list_id", ExtArgs["result"]["classes"]>
  export type classesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    classrooms?: boolean | classroomsDefaultArgs<ExtArgs>
    presence_list?: boolean | presence_listDefaultArgs<ExtArgs>
    professionals?: boolean | professionalsDefaultArgs<ExtArgs>
  }
  export type classesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    classrooms?: boolean | classroomsDefaultArgs<ExtArgs>
    presence_list?: boolean | presence_listDefaultArgs<ExtArgs>
    professionals?: boolean | professionalsDefaultArgs<ExtArgs>
  }
  export type classesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    classrooms?: boolean | classroomsDefaultArgs<ExtArgs>
    presence_list?: boolean | presence_listDefaultArgs<ExtArgs>
    professionals?: boolean | professionalsDefaultArgs<ExtArgs>
  }

  export type $classesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "classes"
    objects: {
      classrooms: Prisma.$classroomsPayload<ExtArgs>
      presence_list: Prisma.$presence_listPayload<ExtArgs>
      professionals: Prisma.$professionalsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      theme: string
      start_date: Date
      end_date: Date
      professionals_id: number
      classrooms_id: number
      presence_list_id: number
    }, ExtArgs["result"]["classes"]>
    composites: {}
  }

  type classesGetPayload<S extends boolean | null | undefined | classesDefaultArgs> = $Result.GetResult<Prisma.$classesPayload, S>

  type classesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<classesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClassesCountAggregateInputType | true
    }

  export interface classesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['classes'], meta: { name: 'classes' } }
    /**
     * Find zero or one Classes that matches the filter.
     * @param {classesFindUniqueArgs} args - Arguments to find a Classes
     * @example
     * // Get one Classes
     * const classes = await prisma.classes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends classesFindUniqueArgs>(args: SelectSubset<T, classesFindUniqueArgs<ExtArgs>>): Prisma__classesClient<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Classes that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {classesFindUniqueOrThrowArgs} args - Arguments to find a Classes
     * @example
     * // Get one Classes
     * const classes = await prisma.classes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends classesFindUniqueOrThrowArgs>(args: SelectSubset<T, classesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__classesClient<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Classes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {classesFindFirstArgs} args - Arguments to find a Classes
     * @example
     * // Get one Classes
     * const classes = await prisma.classes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends classesFindFirstArgs>(args?: SelectSubset<T, classesFindFirstArgs<ExtArgs>>): Prisma__classesClient<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Classes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {classesFindFirstOrThrowArgs} args - Arguments to find a Classes
     * @example
     * // Get one Classes
     * const classes = await prisma.classes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends classesFindFirstOrThrowArgs>(args?: SelectSubset<T, classesFindFirstOrThrowArgs<ExtArgs>>): Prisma__classesClient<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Classes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {classesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Classes
     * const classes = await prisma.classes.findMany()
     * 
     * // Get first 10 Classes
     * const classes = await prisma.classes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const classesWithIdOnly = await prisma.classes.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends classesFindManyArgs>(args?: SelectSubset<T, classesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Classes.
     * @param {classesCreateArgs} args - Arguments to create a Classes.
     * @example
     * // Create one Classes
     * const Classes = await prisma.classes.create({
     *   data: {
     *     // ... data to create a Classes
     *   }
     * })
     * 
     */
    create<T extends classesCreateArgs>(args: SelectSubset<T, classesCreateArgs<ExtArgs>>): Prisma__classesClient<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Classes.
     * @param {classesCreateManyArgs} args - Arguments to create many Classes.
     * @example
     * // Create many Classes
     * const classes = await prisma.classes.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends classesCreateManyArgs>(args?: SelectSubset<T, classesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Classes and returns the data saved in the database.
     * @param {classesCreateManyAndReturnArgs} args - Arguments to create many Classes.
     * @example
     * // Create many Classes
     * const classes = await prisma.classes.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Classes and only return the `id`
     * const classesWithIdOnly = await prisma.classes.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends classesCreateManyAndReturnArgs>(args?: SelectSubset<T, classesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Classes.
     * @param {classesDeleteArgs} args - Arguments to delete one Classes.
     * @example
     * // Delete one Classes
     * const Classes = await prisma.classes.delete({
     *   where: {
     *     // ... filter to delete one Classes
     *   }
     * })
     * 
     */
    delete<T extends classesDeleteArgs>(args: SelectSubset<T, classesDeleteArgs<ExtArgs>>): Prisma__classesClient<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Classes.
     * @param {classesUpdateArgs} args - Arguments to update one Classes.
     * @example
     * // Update one Classes
     * const classes = await prisma.classes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends classesUpdateArgs>(args: SelectSubset<T, classesUpdateArgs<ExtArgs>>): Prisma__classesClient<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Classes.
     * @param {classesDeleteManyArgs} args - Arguments to filter Classes to delete.
     * @example
     * // Delete a few Classes
     * const { count } = await prisma.classes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends classesDeleteManyArgs>(args?: SelectSubset<T, classesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {classesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Classes
     * const classes = await prisma.classes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends classesUpdateManyArgs>(args: SelectSubset<T, classesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classes and returns the data updated in the database.
     * @param {classesUpdateManyAndReturnArgs} args - Arguments to update many Classes.
     * @example
     * // Update many Classes
     * const classes = await prisma.classes.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Classes and only return the `id`
     * const classesWithIdOnly = await prisma.classes.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends classesUpdateManyAndReturnArgs>(args: SelectSubset<T, classesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Classes.
     * @param {classesUpsertArgs} args - Arguments to update or create a Classes.
     * @example
     * // Update or create a Classes
     * const classes = await prisma.classes.upsert({
     *   create: {
     *     // ... data to create a Classes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Classes we want to update
     *   }
     * })
     */
    upsert<T extends classesUpsertArgs>(args: SelectSubset<T, classesUpsertArgs<ExtArgs>>): Prisma__classesClient<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {classesCountArgs} args - Arguments to filter Classes to count.
     * @example
     * // Count the number of Classes
     * const count = await prisma.classes.count({
     *   where: {
     *     // ... the filter for the Classes we want to count
     *   }
     * })
    **/
    count<T extends classesCountArgs>(
      args?: Subset<T, classesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClassesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClassesAggregateArgs>(args: Subset<T, ClassesAggregateArgs>): Prisma.PrismaPromise<GetClassesAggregateType<T>>

    /**
     * Group by Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {classesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends classesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: classesGroupByArgs['orderBy'] }
        : { orderBy?: classesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, classesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClassesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the classes model
   */
  readonly fields: classesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for classes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__classesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    classrooms<T extends classroomsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, classroomsDefaultArgs<ExtArgs>>): Prisma__classroomsClient<$Result.GetResult<Prisma.$classroomsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    presence_list<T extends presence_listDefaultArgs<ExtArgs> = {}>(args?: Subset<T, presence_listDefaultArgs<ExtArgs>>): Prisma__presence_listClient<$Result.GetResult<Prisma.$presence_listPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    professionals<T extends professionalsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, professionalsDefaultArgs<ExtArgs>>): Prisma__professionalsClient<$Result.GetResult<Prisma.$professionalsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the classes model
   */
  interface classesFieldRefs {
    readonly id: FieldRef<"classes", 'Int'>
    readonly theme: FieldRef<"classes", 'String'>
    readonly start_date: FieldRef<"classes", 'DateTime'>
    readonly end_date: FieldRef<"classes", 'DateTime'>
    readonly professionals_id: FieldRef<"classes", 'Int'>
    readonly classrooms_id: FieldRef<"classes", 'Int'>
    readonly presence_list_id: FieldRef<"classes", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * classes findUnique
   */
  export type classesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classes
     */
    select?: classesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classes
     */
    omit?: classesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classesInclude<ExtArgs> | null
    /**
     * Filter, which classes to fetch.
     */
    where: classesWhereUniqueInput
  }

  /**
   * classes findUniqueOrThrow
   */
  export type classesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classes
     */
    select?: classesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classes
     */
    omit?: classesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classesInclude<ExtArgs> | null
    /**
     * Filter, which classes to fetch.
     */
    where: classesWhereUniqueInput
  }

  /**
   * classes findFirst
   */
  export type classesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classes
     */
    select?: classesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classes
     */
    omit?: classesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classesInclude<ExtArgs> | null
    /**
     * Filter, which classes to fetch.
     */
    where?: classesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of classes to fetch.
     */
    orderBy?: classesOrderByWithRelationInput | classesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for classes.
     */
    cursor?: classesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of classes.
     */
    distinct?: ClassesScalarFieldEnum | ClassesScalarFieldEnum[]
  }

  /**
   * classes findFirstOrThrow
   */
  export type classesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classes
     */
    select?: classesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classes
     */
    omit?: classesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classesInclude<ExtArgs> | null
    /**
     * Filter, which classes to fetch.
     */
    where?: classesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of classes to fetch.
     */
    orderBy?: classesOrderByWithRelationInput | classesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for classes.
     */
    cursor?: classesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of classes.
     */
    distinct?: ClassesScalarFieldEnum | ClassesScalarFieldEnum[]
  }

  /**
   * classes findMany
   */
  export type classesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classes
     */
    select?: classesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classes
     */
    omit?: classesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classesInclude<ExtArgs> | null
    /**
     * Filter, which classes to fetch.
     */
    where?: classesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of classes to fetch.
     */
    orderBy?: classesOrderByWithRelationInput | classesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing classes.
     */
    cursor?: classesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` classes.
     */
    skip?: number
    distinct?: ClassesScalarFieldEnum | ClassesScalarFieldEnum[]
  }

  /**
   * classes create
   */
  export type classesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classes
     */
    select?: classesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classes
     */
    omit?: classesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classesInclude<ExtArgs> | null
    /**
     * The data needed to create a classes.
     */
    data: XOR<classesCreateInput, classesUncheckedCreateInput>
  }

  /**
   * classes createMany
   */
  export type classesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many classes.
     */
    data: classesCreateManyInput | classesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * classes createManyAndReturn
   */
  export type classesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classes
     */
    select?: classesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the classes
     */
    omit?: classesOmit<ExtArgs> | null
    /**
     * The data used to create many classes.
     */
    data: classesCreateManyInput | classesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * classes update
   */
  export type classesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classes
     */
    select?: classesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classes
     */
    omit?: classesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classesInclude<ExtArgs> | null
    /**
     * The data needed to update a classes.
     */
    data: XOR<classesUpdateInput, classesUncheckedUpdateInput>
    /**
     * Choose, which classes to update.
     */
    where: classesWhereUniqueInput
  }

  /**
   * classes updateMany
   */
  export type classesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update classes.
     */
    data: XOR<classesUpdateManyMutationInput, classesUncheckedUpdateManyInput>
    /**
     * Filter which classes to update
     */
    where?: classesWhereInput
    /**
     * Limit how many classes to update.
     */
    limit?: number
  }

  /**
   * classes updateManyAndReturn
   */
  export type classesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classes
     */
    select?: classesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the classes
     */
    omit?: classesOmit<ExtArgs> | null
    /**
     * The data used to update classes.
     */
    data: XOR<classesUpdateManyMutationInput, classesUncheckedUpdateManyInput>
    /**
     * Filter which classes to update
     */
    where?: classesWhereInput
    /**
     * Limit how many classes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * classes upsert
   */
  export type classesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classes
     */
    select?: classesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classes
     */
    omit?: classesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classesInclude<ExtArgs> | null
    /**
     * The filter to search for the classes to update in case it exists.
     */
    where: classesWhereUniqueInput
    /**
     * In case the classes found by the `where` argument doesn't exist, create a new classes with this data.
     */
    create: XOR<classesCreateInput, classesUncheckedCreateInput>
    /**
     * In case the classes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<classesUpdateInput, classesUncheckedUpdateInput>
  }

  /**
   * classes delete
   */
  export type classesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classes
     */
    select?: classesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classes
     */
    omit?: classesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classesInclude<ExtArgs> | null
    /**
     * Filter which classes to delete.
     */
    where: classesWhereUniqueInput
  }

  /**
   * classes deleteMany
   */
  export type classesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which classes to delete
     */
    where?: classesWhereInput
    /**
     * Limit how many classes to delete.
     */
    limit?: number
  }

  /**
   * classes without action
   */
  export type classesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classes
     */
    select?: classesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classes
     */
    omit?: classesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classesInclude<ExtArgs> | null
  }


  /**
   * Model classrooms
   */

  export type AggregateClassrooms = {
    _count: ClassroomsCountAggregateOutputType | null
    _avg: ClassroomsAvgAggregateOutputType | null
    _sum: ClassroomsSumAggregateOutputType | null
    _min: ClassroomsMinAggregateOutputType | null
    _max: ClassroomsMaxAggregateOutputType | null
  }

  export type ClassroomsAvgAggregateOutputType = {
    id: number | null
    books_id: number | null
  }

  export type ClassroomsSumAggregateOutputType = {
    id: number | null
    books_id: number | null
  }

  export type ClassroomsMinAggregateOutputType = {
    id: number | null
    date: string | null
    hour: string | null
    books_id: number | null
    created_at: Date | null
  }

  export type ClassroomsMaxAggregateOutputType = {
    id: number | null
    date: string | null
    hour: string | null
    books_id: number | null
    created_at: Date | null
  }

  export type ClassroomsCountAggregateOutputType = {
    id: number
    date: number
    hour: number
    books_id: number
    created_at: number
    _all: number
  }


  export type ClassroomsAvgAggregateInputType = {
    id?: true
    books_id?: true
  }

  export type ClassroomsSumAggregateInputType = {
    id?: true
    books_id?: true
  }

  export type ClassroomsMinAggregateInputType = {
    id?: true
    date?: true
    hour?: true
    books_id?: true
    created_at?: true
  }

  export type ClassroomsMaxAggregateInputType = {
    id?: true
    date?: true
    hour?: true
    books_id?: true
    created_at?: true
  }

  export type ClassroomsCountAggregateInputType = {
    id?: true
    date?: true
    hour?: true
    books_id?: true
    created_at?: true
    _all?: true
  }

  export type ClassroomsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which classrooms to aggregate.
     */
    where?: classroomsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of classrooms to fetch.
     */
    orderBy?: classroomsOrderByWithRelationInput | classroomsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: classroomsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` classrooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` classrooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned classrooms
    **/
    _count?: true | ClassroomsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClassroomsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClassroomsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClassroomsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClassroomsMaxAggregateInputType
  }

  export type GetClassroomsAggregateType<T extends ClassroomsAggregateArgs> = {
        [P in keyof T & keyof AggregateClassrooms]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClassrooms[P]>
      : GetScalarType<T[P], AggregateClassrooms[P]>
  }




  export type classroomsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: classroomsWhereInput
    orderBy?: classroomsOrderByWithAggregationInput | classroomsOrderByWithAggregationInput[]
    by: ClassroomsScalarFieldEnum[] | ClassroomsScalarFieldEnum
    having?: classroomsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClassroomsCountAggregateInputType | true
    _avg?: ClassroomsAvgAggregateInputType
    _sum?: ClassroomsSumAggregateInputType
    _min?: ClassroomsMinAggregateInputType
    _max?: ClassroomsMaxAggregateInputType
  }

  export type ClassroomsGroupByOutputType = {
    id: number
    date: string
    hour: string
    books_id: number
    created_at: Date
    _count: ClassroomsCountAggregateOutputType | null
    _avg: ClassroomsAvgAggregateOutputType | null
    _sum: ClassroomsSumAggregateOutputType | null
    _min: ClassroomsMinAggregateOutputType | null
    _max: ClassroomsMaxAggregateOutputType | null
  }

  type GetClassroomsGroupByPayload<T extends classroomsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClassroomsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClassroomsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClassroomsGroupByOutputType[P]>
            : GetScalarType<T[P], ClassroomsGroupByOutputType[P]>
        }
      >
    >


  export type classroomsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    hour?: boolean
    books_id?: boolean
    created_at?: boolean
    classes?: boolean | classrooms$classesArgs<ExtArgs>
    books?: boolean | booksDefaultArgs<ExtArgs>
    students_has_classrooms?: boolean | classrooms$students_has_classroomsArgs<ExtArgs>
    _count?: boolean | ClassroomsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["classrooms"]>

  export type classroomsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    hour?: boolean
    books_id?: boolean
    created_at?: boolean
    books?: boolean | booksDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["classrooms"]>

  export type classroomsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    hour?: boolean
    books_id?: boolean
    created_at?: boolean
    books?: boolean | booksDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["classrooms"]>

  export type classroomsSelectScalar = {
    id?: boolean
    date?: boolean
    hour?: boolean
    books_id?: boolean
    created_at?: boolean
  }

  export type classroomsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "date" | "hour" | "books_id" | "created_at", ExtArgs["result"]["classrooms"]>
  export type classroomsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    classes?: boolean | classrooms$classesArgs<ExtArgs>
    books?: boolean | booksDefaultArgs<ExtArgs>
    students_has_classrooms?: boolean | classrooms$students_has_classroomsArgs<ExtArgs>
    _count?: boolean | ClassroomsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type classroomsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    books?: boolean | booksDefaultArgs<ExtArgs>
  }
  export type classroomsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    books?: boolean | booksDefaultArgs<ExtArgs>
  }

  export type $classroomsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "classrooms"
    objects: {
      classes: Prisma.$classesPayload<ExtArgs>[]
      books: Prisma.$booksPayload<ExtArgs>
      students_has_classrooms: Prisma.$students_has_classroomsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      date: string
      hour: string
      books_id: number
      created_at: Date
    }, ExtArgs["result"]["classrooms"]>
    composites: {}
  }

  type classroomsGetPayload<S extends boolean | null | undefined | classroomsDefaultArgs> = $Result.GetResult<Prisma.$classroomsPayload, S>

  type classroomsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<classroomsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClassroomsCountAggregateInputType | true
    }

  export interface classroomsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['classrooms'], meta: { name: 'classrooms' } }
    /**
     * Find zero or one Classrooms that matches the filter.
     * @param {classroomsFindUniqueArgs} args - Arguments to find a Classrooms
     * @example
     * // Get one Classrooms
     * const classrooms = await prisma.classrooms.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends classroomsFindUniqueArgs>(args: SelectSubset<T, classroomsFindUniqueArgs<ExtArgs>>): Prisma__classroomsClient<$Result.GetResult<Prisma.$classroomsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Classrooms that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {classroomsFindUniqueOrThrowArgs} args - Arguments to find a Classrooms
     * @example
     * // Get one Classrooms
     * const classrooms = await prisma.classrooms.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends classroomsFindUniqueOrThrowArgs>(args: SelectSubset<T, classroomsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__classroomsClient<$Result.GetResult<Prisma.$classroomsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Classrooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {classroomsFindFirstArgs} args - Arguments to find a Classrooms
     * @example
     * // Get one Classrooms
     * const classrooms = await prisma.classrooms.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends classroomsFindFirstArgs>(args?: SelectSubset<T, classroomsFindFirstArgs<ExtArgs>>): Prisma__classroomsClient<$Result.GetResult<Prisma.$classroomsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Classrooms that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {classroomsFindFirstOrThrowArgs} args - Arguments to find a Classrooms
     * @example
     * // Get one Classrooms
     * const classrooms = await prisma.classrooms.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends classroomsFindFirstOrThrowArgs>(args?: SelectSubset<T, classroomsFindFirstOrThrowArgs<ExtArgs>>): Prisma__classroomsClient<$Result.GetResult<Prisma.$classroomsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Classrooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {classroomsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Classrooms
     * const classrooms = await prisma.classrooms.findMany()
     * 
     * // Get first 10 Classrooms
     * const classrooms = await prisma.classrooms.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const classroomsWithIdOnly = await prisma.classrooms.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends classroomsFindManyArgs>(args?: SelectSubset<T, classroomsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$classroomsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Classrooms.
     * @param {classroomsCreateArgs} args - Arguments to create a Classrooms.
     * @example
     * // Create one Classrooms
     * const Classrooms = await prisma.classrooms.create({
     *   data: {
     *     // ... data to create a Classrooms
     *   }
     * })
     * 
     */
    create<T extends classroomsCreateArgs>(args: SelectSubset<T, classroomsCreateArgs<ExtArgs>>): Prisma__classroomsClient<$Result.GetResult<Prisma.$classroomsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Classrooms.
     * @param {classroomsCreateManyArgs} args - Arguments to create many Classrooms.
     * @example
     * // Create many Classrooms
     * const classrooms = await prisma.classrooms.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends classroomsCreateManyArgs>(args?: SelectSubset<T, classroomsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Classrooms and returns the data saved in the database.
     * @param {classroomsCreateManyAndReturnArgs} args - Arguments to create many Classrooms.
     * @example
     * // Create many Classrooms
     * const classrooms = await prisma.classrooms.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Classrooms and only return the `id`
     * const classroomsWithIdOnly = await prisma.classrooms.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends classroomsCreateManyAndReturnArgs>(args?: SelectSubset<T, classroomsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$classroomsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Classrooms.
     * @param {classroomsDeleteArgs} args - Arguments to delete one Classrooms.
     * @example
     * // Delete one Classrooms
     * const Classrooms = await prisma.classrooms.delete({
     *   where: {
     *     // ... filter to delete one Classrooms
     *   }
     * })
     * 
     */
    delete<T extends classroomsDeleteArgs>(args: SelectSubset<T, classroomsDeleteArgs<ExtArgs>>): Prisma__classroomsClient<$Result.GetResult<Prisma.$classroomsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Classrooms.
     * @param {classroomsUpdateArgs} args - Arguments to update one Classrooms.
     * @example
     * // Update one Classrooms
     * const classrooms = await prisma.classrooms.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends classroomsUpdateArgs>(args: SelectSubset<T, classroomsUpdateArgs<ExtArgs>>): Prisma__classroomsClient<$Result.GetResult<Prisma.$classroomsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Classrooms.
     * @param {classroomsDeleteManyArgs} args - Arguments to filter Classrooms to delete.
     * @example
     * // Delete a few Classrooms
     * const { count } = await prisma.classrooms.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends classroomsDeleteManyArgs>(args?: SelectSubset<T, classroomsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classrooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {classroomsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Classrooms
     * const classrooms = await prisma.classrooms.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends classroomsUpdateManyArgs>(args: SelectSubset<T, classroomsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classrooms and returns the data updated in the database.
     * @param {classroomsUpdateManyAndReturnArgs} args - Arguments to update many Classrooms.
     * @example
     * // Update many Classrooms
     * const classrooms = await prisma.classrooms.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Classrooms and only return the `id`
     * const classroomsWithIdOnly = await prisma.classrooms.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends classroomsUpdateManyAndReturnArgs>(args: SelectSubset<T, classroomsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$classroomsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Classrooms.
     * @param {classroomsUpsertArgs} args - Arguments to update or create a Classrooms.
     * @example
     * // Update or create a Classrooms
     * const classrooms = await prisma.classrooms.upsert({
     *   create: {
     *     // ... data to create a Classrooms
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Classrooms we want to update
     *   }
     * })
     */
    upsert<T extends classroomsUpsertArgs>(args: SelectSubset<T, classroomsUpsertArgs<ExtArgs>>): Prisma__classroomsClient<$Result.GetResult<Prisma.$classroomsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Classrooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {classroomsCountArgs} args - Arguments to filter Classrooms to count.
     * @example
     * // Count the number of Classrooms
     * const count = await prisma.classrooms.count({
     *   where: {
     *     // ... the filter for the Classrooms we want to count
     *   }
     * })
    **/
    count<T extends classroomsCountArgs>(
      args?: Subset<T, classroomsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClassroomsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Classrooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassroomsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClassroomsAggregateArgs>(args: Subset<T, ClassroomsAggregateArgs>): Prisma.PrismaPromise<GetClassroomsAggregateType<T>>

    /**
     * Group by Classrooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {classroomsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends classroomsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: classroomsGroupByArgs['orderBy'] }
        : { orderBy?: classroomsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, classroomsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClassroomsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the classrooms model
   */
  readonly fields: classroomsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for classrooms.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__classroomsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    classes<T extends classrooms$classesArgs<ExtArgs> = {}>(args?: Subset<T, classrooms$classesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    books<T extends booksDefaultArgs<ExtArgs> = {}>(args?: Subset<T, booksDefaultArgs<ExtArgs>>): Prisma__booksClient<$Result.GetResult<Prisma.$booksPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    students_has_classrooms<T extends classrooms$students_has_classroomsArgs<ExtArgs> = {}>(args?: Subset<T, classrooms$students_has_classroomsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$students_has_classroomsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the classrooms model
   */
  interface classroomsFieldRefs {
    readonly id: FieldRef<"classrooms", 'Int'>
    readonly date: FieldRef<"classrooms", 'String'>
    readonly hour: FieldRef<"classrooms", 'String'>
    readonly books_id: FieldRef<"classrooms", 'Int'>
    readonly created_at: FieldRef<"classrooms", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * classrooms findUnique
   */
  export type classroomsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classrooms
     */
    select?: classroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classrooms
     */
    omit?: classroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classroomsInclude<ExtArgs> | null
    /**
     * Filter, which classrooms to fetch.
     */
    where: classroomsWhereUniqueInput
  }

  /**
   * classrooms findUniqueOrThrow
   */
  export type classroomsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classrooms
     */
    select?: classroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classrooms
     */
    omit?: classroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classroomsInclude<ExtArgs> | null
    /**
     * Filter, which classrooms to fetch.
     */
    where: classroomsWhereUniqueInput
  }

  /**
   * classrooms findFirst
   */
  export type classroomsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classrooms
     */
    select?: classroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classrooms
     */
    omit?: classroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classroomsInclude<ExtArgs> | null
    /**
     * Filter, which classrooms to fetch.
     */
    where?: classroomsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of classrooms to fetch.
     */
    orderBy?: classroomsOrderByWithRelationInput | classroomsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for classrooms.
     */
    cursor?: classroomsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` classrooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` classrooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of classrooms.
     */
    distinct?: ClassroomsScalarFieldEnum | ClassroomsScalarFieldEnum[]
  }

  /**
   * classrooms findFirstOrThrow
   */
  export type classroomsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classrooms
     */
    select?: classroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classrooms
     */
    omit?: classroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classroomsInclude<ExtArgs> | null
    /**
     * Filter, which classrooms to fetch.
     */
    where?: classroomsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of classrooms to fetch.
     */
    orderBy?: classroomsOrderByWithRelationInput | classroomsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for classrooms.
     */
    cursor?: classroomsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` classrooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` classrooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of classrooms.
     */
    distinct?: ClassroomsScalarFieldEnum | ClassroomsScalarFieldEnum[]
  }

  /**
   * classrooms findMany
   */
  export type classroomsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classrooms
     */
    select?: classroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classrooms
     */
    omit?: classroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classroomsInclude<ExtArgs> | null
    /**
     * Filter, which classrooms to fetch.
     */
    where?: classroomsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of classrooms to fetch.
     */
    orderBy?: classroomsOrderByWithRelationInput | classroomsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing classrooms.
     */
    cursor?: classroomsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` classrooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` classrooms.
     */
    skip?: number
    distinct?: ClassroomsScalarFieldEnum | ClassroomsScalarFieldEnum[]
  }

  /**
   * classrooms create
   */
  export type classroomsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classrooms
     */
    select?: classroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classrooms
     */
    omit?: classroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classroomsInclude<ExtArgs> | null
    /**
     * The data needed to create a classrooms.
     */
    data: XOR<classroomsCreateInput, classroomsUncheckedCreateInput>
  }

  /**
   * classrooms createMany
   */
  export type classroomsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many classrooms.
     */
    data: classroomsCreateManyInput | classroomsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * classrooms createManyAndReturn
   */
  export type classroomsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classrooms
     */
    select?: classroomsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the classrooms
     */
    omit?: classroomsOmit<ExtArgs> | null
    /**
     * The data used to create many classrooms.
     */
    data: classroomsCreateManyInput | classroomsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classroomsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * classrooms update
   */
  export type classroomsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classrooms
     */
    select?: classroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classrooms
     */
    omit?: classroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classroomsInclude<ExtArgs> | null
    /**
     * The data needed to update a classrooms.
     */
    data: XOR<classroomsUpdateInput, classroomsUncheckedUpdateInput>
    /**
     * Choose, which classrooms to update.
     */
    where: classroomsWhereUniqueInput
  }

  /**
   * classrooms updateMany
   */
  export type classroomsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update classrooms.
     */
    data: XOR<classroomsUpdateManyMutationInput, classroomsUncheckedUpdateManyInput>
    /**
     * Filter which classrooms to update
     */
    where?: classroomsWhereInput
    /**
     * Limit how many classrooms to update.
     */
    limit?: number
  }

  /**
   * classrooms updateManyAndReturn
   */
  export type classroomsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classrooms
     */
    select?: classroomsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the classrooms
     */
    omit?: classroomsOmit<ExtArgs> | null
    /**
     * The data used to update classrooms.
     */
    data: XOR<classroomsUpdateManyMutationInput, classroomsUncheckedUpdateManyInput>
    /**
     * Filter which classrooms to update
     */
    where?: classroomsWhereInput
    /**
     * Limit how many classrooms to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classroomsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * classrooms upsert
   */
  export type classroomsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classrooms
     */
    select?: classroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classrooms
     */
    omit?: classroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classroomsInclude<ExtArgs> | null
    /**
     * The filter to search for the classrooms to update in case it exists.
     */
    where: classroomsWhereUniqueInput
    /**
     * In case the classrooms found by the `where` argument doesn't exist, create a new classrooms with this data.
     */
    create: XOR<classroomsCreateInput, classroomsUncheckedCreateInput>
    /**
     * In case the classrooms was found with the provided `where` argument, update it with this data.
     */
    update: XOR<classroomsUpdateInput, classroomsUncheckedUpdateInput>
  }

  /**
   * classrooms delete
   */
  export type classroomsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classrooms
     */
    select?: classroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classrooms
     */
    omit?: classroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classroomsInclude<ExtArgs> | null
    /**
     * Filter which classrooms to delete.
     */
    where: classroomsWhereUniqueInput
  }

  /**
   * classrooms deleteMany
   */
  export type classroomsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which classrooms to delete
     */
    where?: classroomsWhereInput
    /**
     * Limit how many classrooms to delete.
     */
    limit?: number
  }

  /**
   * classrooms.classes
   */
  export type classrooms$classesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classes
     */
    select?: classesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classes
     */
    omit?: classesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classesInclude<ExtArgs> | null
    where?: classesWhereInput
    orderBy?: classesOrderByWithRelationInput | classesOrderByWithRelationInput[]
    cursor?: classesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassesScalarFieldEnum | ClassesScalarFieldEnum[]
  }

  /**
   * classrooms.students_has_classrooms
   */
  export type classrooms$students_has_classroomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the students_has_classrooms
     */
    select?: students_has_classroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the students_has_classrooms
     */
    omit?: students_has_classroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: students_has_classroomsInclude<ExtArgs> | null
    where?: students_has_classroomsWhereInput
    orderBy?: students_has_classroomsOrderByWithRelationInput | students_has_classroomsOrderByWithRelationInput[]
    cursor?: students_has_classroomsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Students_has_classroomsScalarFieldEnum | Students_has_classroomsScalarFieldEnum[]
  }

  /**
   * classrooms without action
   */
  export type classroomsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classrooms
     */
    select?: classroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classrooms
     */
    omit?: classroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classroomsInclude<ExtArgs> | null
  }


  /**
   * Model configs
   */

  export type AggregateConfigs = {
    _count: ConfigsCountAggregateOutputType | null
    _avg: ConfigsAvgAggregateOutputType | null
    _sum: ConfigsSumAggregateOutputType | null
    _min: ConfigsMinAggregateOutputType | null
    _max: ConfigsMaxAggregateOutputType | null
  }

  export type ConfigsAvgAggregateOutputType = {
    id: number | null
    registrations_time: number | null
  }

  export type ConfigsSumAggregateOutputType = {
    id: number | null
    registrations_time: number | null
  }

  export type ConfigsMinAggregateOutputType = {
    id: number | null
    registrations_time: number | null
  }

  export type ConfigsMaxAggregateOutputType = {
    id: number | null
    registrations_time: number | null
  }

  export type ConfigsCountAggregateOutputType = {
    id: number
    registrations_time: number
    _all: number
  }


  export type ConfigsAvgAggregateInputType = {
    id?: true
    registrations_time?: true
  }

  export type ConfigsSumAggregateInputType = {
    id?: true
    registrations_time?: true
  }

  export type ConfigsMinAggregateInputType = {
    id?: true
    registrations_time?: true
  }

  export type ConfigsMaxAggregateInputType = {
    id?: true
    registrations_time?: true
  }

  export type ConfigsCountAggregateInputType = {
    id?: true
    registrations_time?: true
    _all?: true
  }

  export type ConfigsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which configs to aggregate.
     */
    where?: configsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of configs to fetch.
     */
    orderBy?: configsOrderByWithRelationInput | configsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: configsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` configs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` configs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned configs
    **/
    _count?: true | ConfigsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ConfigsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ConfigsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConfigsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConfigsMaxAggregateInputType
  }

  export type GetConfigsAggregateType<T extends ConfigsAggregateArgs> = {
        [P in keyof T & keyof AggregateConfigs]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConfigs[P]>
      : GetScalarType<T[P], AggregateConfigs[P]>
  }




  export type configsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: configsWhereInput
    orderBy?: configsOrderByWithAggregationInput | configsOrderByWithAggregationInput[]
    by: ConfigsScalarFieldEnum[] | ConfigsScalarFieldEnum
    having?: configsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConfigsCountAggregateInputType | true
    _avg?: ConfigsAvgAggregateInputType
    _sum?: ConfigsSumAggregateInputType
    _min?: ConfigsMinAggregateInputType
    _max?: ConfigsMaxAggregateInputType
  }

  export type ConfigsGroupByOutputType = {
    id: number
    registrations_time: number | null
    _count: ConfigsCountAggregateOutputType | null
    _avg: ConfigsAvgAggregateOutputType | null
    _sum: ConfigsSumAggregateOutputType | null
    _min: ConfigsMinAggregateOutputType | null
    _max: ConfigsMaxAggregateOutputType | null
  }

  type GetConfigsGroupByPayload<T extends configsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ConfigsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConfigsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConfigsGroupByOutputType[P]>
            : GetScalarType<T[P], ConfigsGroupByOutputType[P]>
        }
      >
    >


  export type configsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    registrations_time?: boolean
  }, ExtArgs["result"]["configs"]>

  export type configsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    registrations_time?: boolean
  }, ExtArgs["result"]["configs"]>

  export type configsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    registrations_time?: boolean
  }, ExtArgs["result"]["configs"]>

  export type configsSelectScalar = {
    id?: boolean
    registrations_time?: boolean
  }

  export type configsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "registrations_time", ExtArgs["result"]["configs"]>

  export type $configsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "configs"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      registrations_time: number | null
    }, ExtArgs["result"]["configs"]>
    composites: {}
  }

  type configsGetPayload<S extends boolean | null | undefined | configsDefaultArgs> = $Result.GetResult<Prisma.$configsPayload, S>

  type configsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<configsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ConfigsCountAggregateInputType | true
    }

  export interface configsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['configs'], meta: { name: 'configs' } }
    /**
     * Find zero or one Configs that matches the filter.
     * @param {configsFindUniqueArgs} args - Arguments to find a Configs
     * @example
     * // Get one Configs
     * const configs = await prisma.configs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends configsFindUniqueArgs>(args: SelectSubset<T, configsFindUniqueArgs<ExtArgs>>): Prisma__configsClient<$Result.GetResult<Prisma.$configsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Configs that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {configsFindUniqueOrThrowArgs} args - Arguments to find a Configs
     * @example
     * // Get one Configs
     * const configs = await prisma.configs.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends configsFindUniqueOrThrowArgs>(args: SelectSubset<T, configsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__configsClient<$Result.GetResult<Prisma.$configsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Configs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {configsFindFirstArgs} args - Arguments to find a Configs
     * @example
     * // Get one Configs
     * const configs = await prisma.configs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends configsFindFirstArgs>(args?: SelectSubset<T, configsFindFirstArgs<ExtArgs>>): Prisma__configsClient<$Result.GetResult<Prisma.$configsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Configs that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {configsFindFirstOrThrowArgs} args - Arguments to find a Configs
     * @example
     * // Get one Configs
     * const configs = await prisma.configs.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends configsFindFirstOrThrowArgs>(args?: SelectSubset<T, configsFindFirstOrThrowArgs<ExtArgs>>): Prisma__configsClient<$Result.GetResult<Prisma.$configsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Configs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {configsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Configs
     * const configs = await prisma.configs.findMany()
     * 
     * // Get first 10 Configs
     * const configs = await prisma.configs.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const configsWithIdOnly = await prisma.configs.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends configsFindManyArgs>(args?: SelectSubset<T, configsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$configsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Configs.
     * @param {configsCreateArgs} args - Arguments to create a Configs.
     * @example
     * // Create one Configs
     * const Configs = await prisma.configs.create({
     *   data: {
     *     // ... data to create a Configs
     *   }
     * })
     * 
     */
    create<T extends configsCreateArgs>(args: SelectSubset<T, configsCreateArgs<ExtArgs>>): Prisma__configsClient<$Result.GetResult<Prisma.$configsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Configs.
     * @param {configsCreateManyArgs} args - Arguments to create many Configs.
     * @example
     * // Create many Configs
     * const configs = await prisma.configs.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends configsCreateManyArgs>(args?: SelectSubset<T, configsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Configs and returns the data saved in the database.
     * @param {configsCreateManyAndReturnArgs} args - Arguments to create many Configs.
     * @example
     * // Create many Configs
     * const configs = await prisma.configs.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Configs and only return the `id`
     * const configsWithIdOnly = await prisma.configs.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends configsCreateManyAndReturnArgs>(args?: SelectSubset<T, configsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$configsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Configs.
     * @param {configsDeleteArgs} args - Arguments to delete one Configs.
     * @example
     * // Delete one Configs
     * const Configs = await prisma.configs.delete({
     *   where: {
     *     // ... filter to delete one Configs
     *   }
     * })
     * 
     */
    delete<T extends configsDeleteArgs>(args: SelectSubset<T, configsDeleteArgs<ExtArgs>>): Prisma__configsClient<$Result.GetResult<Prisma.$configsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Configs.
     * @param {configsUpdateArgs} args - Arguments to update one Configs.
     * @example
     * // Update one Configs
     * const configs = await prisma.configs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends configsUpdateArgs>(args: SelectSubset<T, configsUpdateArgs<ExtArgs>>): Prisma__configsClient<$Result.GetResult<Prisma.$configsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Configs.
     * @param {configsDeleteManyArgs} args - Arguments to filter Configs to delete.
     * @example
     * // Delete a few Configs
     * const { count } = await prisma.configs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends configsDeleteManyArgs>(args?: SelectSubset<T, configsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Configs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {configsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Configs
     * const configs = await prisma.configs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends configsUpdateManyArgs>(args: SelectSubset<T, configsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Configs and returns the data updated in the database.
     * @param {configsUpdateManyAndReturnArgs} args - Arguments to update many Configs.
     * @example
     * // Update many Configs
     * const configs = await prisma.configs.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Configs and only return the `id`
     * const configsWithIdOnly = await prisma.configs.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends configsUpdateManyAndReturnArgs>(args: SelectSubset<T, configsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$configsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Configs.
     * @param {configsUpsertArgs} args - Arguments to update or create a Configs.
     * @example
     * // Update or create a Configs
     * const configs = await prisma.configs.upsert({
     *   create: {
     *     // ... data to create a Configs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Configs we want to update
     *   }
     * })
     */
    upsert<T extends configsUpsertArgs>(args: SelectSubset<T, configsUpsertArgs<ExtArgs>>): Prisma__configsClient<$Result.GetResult<Prisma.$configsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Configs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {configsCountArgs} args - Arguments to filter Configs to count.
     * @example
     * // Count the number of Configs
     * const count = await prisma.configs.count({
     *   where: {
     *     // ... the filter for the Configs we want to count
     *   }
     * })
    **/
    count<T extends configsCountArgs>(
      args?: Subset<T, configsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConfigsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Configs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConfigsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConfigsAggregateArgs>(args: Subset<T, ConfigsAggregateArgs>): Prisma.PrismaPromise<GetConfigsAggregateType<T>>

    /**
     * Group by Configs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {configsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends configsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: configsGroupByArgs['orderBy'] }
        : { orderBy?: configsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, configsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConfigsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the configs model
   */
  readonly fields: configsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for configs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__configsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the configs model
   */
  interface configsFieldRefs {
    readonly id: FieldRef<"configs", 'Int'>
    readonly registrations_time: FieldRef<"configs", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * configs findUnique
   */
  export type configsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the configs
     */
    select?: configsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the configs
     */
    omit?: configsOmit<ExtArgs> | null
    /**
     * Filter, which configs to fetch.
     */
    where: configsWhereUniqueInput
  }

  /**
   * configs findUniqueOrThrow
   */
  export type configsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the configs
     */
    select?: configsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the configs
     */
    omit?: configsOmit<ExtArgs> | null
    /**
     * Filter, which configs to fetch.
     */
    where: configsWhereUniqueInput
  }

  /**
   * configs findFirst
   */
  export type configsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the configs
     */
    select?: configsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the configs
     */
    omit?: configsOmit<ExtArgs> | null
    /**
     * Filter, which configs to fetch.
     */
    where?: configsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of configs to fetch.
     */
    orderBy?: configsOrderByWithRelationInput | configsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for configs.
     */
    cursor?: configsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` configs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` configs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of configs.
     */
    distinct?: ConfigsScalarFieldEnum | ConfigsScalarFieldEnum[]
  }

  /**
   * configs findFirstOrThrow
   */
  export type configsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the configs
     */
    select?: configsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the configs
     */
    omit?: configsOmit<ExtArgs> | null
    /**
     * Filter, which configs to fetch.
     */
    where?: configsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of configs to fetch.
     */
    orderBy?: configsOrderByWithRelationInput | configsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for configs.
     */
    cursor?: configsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` configs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` configs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of configs.
     */
    distinct?: ConfigsScalarFieldEnum | ConfigsScalarFieldEnum[]
  }

  /**
   * configs findMany
   */
  export type configsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the configs
     */
    select?: configsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the configs
     */
    omit?: configsOmit<ExtArgs> | null
    /**
     * Filter, which configs to fetch.
     */
    where?: configsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of configs to fetch.
     */
    orderBy?: configsOrderByWithRelationInput | configsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing configs.
     */
    cursor?: configsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` configs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` configs.
     */
    skip?: number
    distinct?: ConfigsScalarFieldEnum | ConfigsScalarFieldEnum[]
  }

  /**
   * configs create
   */
  export type configsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the configs
     */
    select?: configsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the configs
     */
    omit?: configsOmit<ExtArgs> | null
    /**
     * The data needed to create a configs.
     */
    data?: XOR<configsCreateInput, configsUncheckedCreateInput>
  }

  /**
   * configs createMany
   */
  export type configsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many configs.
     */
    data: configsCreateManyInput | configsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * configs createManyAndReturn
   */
  export type configsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the configs
     */
    select?: configsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the configs
     */
    omit?: configsOmit<ExtArgs> | null
    /**
     * The data used to create many configs.
     */
    data: configsCreateManyInput | configsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * configs update
   */
  export type configsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the configs
     */
    select?: configsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the configs
     */
    omit?: configsOmit<ExtArgs> | null
    /**
     * The data needed to update a configs.
     */
    data: XOR<configsUpdateInput, configsUncheckedUpdateInput>
    /**
     * Choose, which configs to update.
     */
    where: configsWhereUniqueInput
  }

  /**
   * configs updateMany
   */
  export type configsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update configs.
     */
    data: XOR<configsUpdateManyMutationInput, configsUncheckedUpdateManyInput>
    /**
     * Filter which configs to update
     */
    where?: configsWhereInput
    /**
     * Limit how many configs to update.
     */
    limit?: number
  }

  /**
   * configs updateManyAndReturn
   */
  export type configsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the configs
     */
    select?: configsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the configs
     */
    omit?: configsOmit<ExtArgs> | null
    /**
     * The data used to update configs.
     */
    data: XOR<configsUpdateManyMutationInput, configsUncheckedUpdateManyInput>
    /**
     * Filter which configs to update
     */
    where?: configsWhereInput
    /**
     * Limit how many configs to update.
     */
    limit?: number
  }

  /**
   * configs upsert
   */
  export type configsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the configs
     */
    select?: configsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the configs
     */
    omit?: configsOmit<ExtArgs> | null
    /**
     * The filter to search for the configs to update in case it exists.
     */
    where: configsWhereUniqueInput
    /**
     * In case the configs found by the `where` argument doesn't exist, create a new configs with this data.
     */
    create: XOR<configsCreateInput, configsUncheckedCreateInput>
    /**
     * In case the configs was found with the provided `where` argument, update it with this data.
     */
    update: XOR<configsUpdateInput, configsUncheckedUpdateInput>
  }

  /**
   * configs delete
   */
  export type configsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the configs
     */
    select?: configsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the configs
     */
    omit?: configsOmit<ExtArgs> | null
    /**
     * Filter which configs to delete.
     */
    where: configsWhereUniqueInput
  }

  /**
   * configs deleteMany
   */
  export type configsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which configs to delete
     */
    where?: configsWhereInput
    /**
     * Limit how many configs to delete.
     */
    limit?: number
  }

  /**
   * configs without action
   */
  export type configsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the configs
     */
    select?: configsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the configs
     */
    omit?: configsOmit<ExtArgs> | null
  }


  /**
   * Model courses
   */

  export type AggregateCourses = {
    _count: CoursesCountAggregateOutputType | null
    _avg: CoursesAvgAggregateOutputType | null
    _sum: CoursesSumAggregateOutputType | null
    _min: CoursesMinAggregateOutputType | null
    _max: CoursesMaxAggregateOutputType | null
  }

  export type CoursesAvgAggregateOutputType = {
    id: number | null
    price: number | null
  }

  export type CoursesSumAggregateOutputType = {
    id: number | null
    price: number | null
  }

  export type CoursesMinAggregateOutputType = {
    id: number | null
    name: string | null
    price: number | null
    created_at: Date | null
  }

  export type CoursesMaxAggregateOutputType = {
    id: number | null
    name: string | null
    price: number | null
    created_at: Date | null
  }

  export type CoursesCountAggregateOutputType = {
    id: number
    name: number
    price: number
    created_at: number
    _all: number
  }


  export type CoursesAvgAggregateInputType = {
    id?: true
    price?: true
  }

  export type CoursesSumAggregateInputType = {
    id?: true
    price?: true
  }

  export type CoursesMinAggregateInputType = {
    id?: true
    name?: true
    price?: true
    created_at?: true
  }

  export type CoursesMaxAggregateInputType = {
    id?: true
    name?: true
    price?: true
    created_at?: true
  }

  export type CoursesCountAggregateInputType = {
    id?: true
    name?: true
    price?: true
    created_at?: true
    _all?: true
  }

  export type CoursesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which courses to aggregate.
     */
    where?: coursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of courses to fetch.
     */
    orderBy?: coursesOrderByWithRelationInput | coursesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: coursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned courses
    **/
    _count?: true | CoursesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CoursesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CoursesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CoursesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CoursesMaxAggregateInputType
  }

  export type GetCoursesAggregateType<T extends CoursesAggregateArgs> = {
        [P in keyof T & keyof AggregateCourses]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourses[P]>
      : GetScalarType<T[P], AggregateCourses[P]>
  }




  export type coursesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: coursesWhereInput
    orderBy?: coursesOrderByWithAggregationInput | coursesOrderByWithAggregationInput[]
    by: CoursesScalarFieldEnum[] | CoursesScalarFieldEnum
    having?: coursesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CoursesCountAggregateInputType | true
    _avg?: CoursesAvgAggregateInputType
    _sum?: CoursesSumAggregateInputType
    _min?: CoursesMinAggregateInputType
    _max?: CoursesMaxAggregateInputType
  }

  export type CoursesGroupByOutputType = {
    id: number
    name: string
    price: number
    created_at: Date
    _count: CoursesCountAggregateOutputType | null
    _avg: CoursesAvgAggregateOutputType | null
    _sum: CoursesSumAggregateOutputType | null
    _min: CoursesMinAggregateOutputType | null
    _max: CoursesMaxAggregateOutputType | null
  }

  type GetCoursesGroupByPayload<T extends coursesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CoursesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CoursesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CoursesGroupByOutputType[P]>
            : GetScalarType<T[P], CoursesGroupByOutputType[P]>
        }
      >
    >


  export type coursesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    price?: boolean
    created_at?: boolean
    books?: boolean | courses$booksArgs<ExtArgs>
    registrations?: boolean | courses$registrationsArgs<ExtArgs>
    _count?: boolean | CoursesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["courses"]>

  export type coursesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    price?: boolean
    created_at?: boolean
  }, ExtArgs["result"]["courses"]>

  export type coursesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    price?: boolean
    created_at?: boolean
  }, ExtArgs["result"]["courses"]>

  export type coursesSelectScalar = {
    id?: boolean
    name?: boolean
    price?: boolean
    created_at?: boolean
  }

  export type coursesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "price" | "created_at", ExtArgs["result"]["courses"]>
  export type coursesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    books?: boolean | courses$booksArgs<ExtArgs>
    registrations?: boolean | courses$registrationsArgs<ExtArgs>
    _count?: boolean | CoursesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type coursesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type coursesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $coursesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "courses"
    objects: {
      books: Prisma.$booksPayload<ExtArgs>[]
      registrations: Prisma.$registrationsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      price: number
      created_at: Date
    }, ExtArgs["result"]["courses"]>
    composites: {}
  }

  type coursesGetPayload<S extends boolean | null | undefined | coursesDefaultArgs> = $Result.GetResult<Prisma.$coursesPayload, S>

  type coursesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<coursesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CoursesCountAggregateInputType | true
    }

  export interface coursesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['courses'], meta: { name: 'courses' } }
    /**
     * Find zero or one Courses that matches the filter.
     * @param {coursesFindUniqueArgs} args - Arguments to find a Courses
     * @example
     * // Get one Courses
     * const courses = await prisma.courses.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends coursesFindUniqueArgs>(args: SelectSubset<T, coursesFindUniqueArgs<ExtArgs>>): Prisma__coursesClient<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Courses that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {coursesFindUniqueOrThrowArgs} args - Arguments to find a Courses
     * @example
     * // Get one Courses
     * const courses = await prisma.courses.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends coursesFindUniqueOrThrowArgs>(args: SelectSubset<T, coursesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__coursesClient<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Courses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coursesFindFirstArgs} args - Arguments to find a Courses
     * @example
     * // Get one Courses
     * const courses = await prisma.courses.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends coursesFindFirstArgs>(args?: SelectSubset<T, coursesFindFirstArgs<ExtArgs>>): Prisma__coursesClient<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Courses that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coursesFindFirstOrThrowArgs} args - Arguments to find a Courses
     * @example
     * // Get one Courses
     * const courses = await prisma.courses.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends coursesFindFirstOrThrowArgs>(args?: SelectSubset<T, coursesFindFirstOrThrowArgs<ExtArgs>>): Prisma__coursesClient<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Courses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coursesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Courses
     * const courses = await prisma.courses.findMany()
     * 
     * // Get first 10 Courses
     * const courses = await prisma.courses.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const coursesWithIdOnly = await prisma.courses.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends coursesFindManyArgs>(args?: SelectSubset<T, coursesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Courses.
     * @param {coursesCreateArgs} args - Arguments to create a Courses.
     * @example
     * // Create one Courses
     * const Courses = await prisma.courses.create({
     *   data: {
     *     // ... data to create a Courses
     *   }
     * })
     * 
     */
    create<T extends coursesCreateArgs>(args: SelectSubset<T, coursesCreateArgs<ExtArgs>>): Prisma__coursesClient<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Courses.
     * @param {coursesCreateManyArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const courses = await prisma.courses.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends coursesCreateManyArgs>(args?: SelectSubset<T, coursesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Courses and returns the data saved in the database.
     * @param {coursesCreateManyAndReturnArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const courses = await prisma.courses.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Courses and only return the `id`
     * const coursesWithIdOnly = await prisma.courses.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends coursesCreateManyAndReturnArgs>(args?: SelectSubset<T, coursesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Courses.
     * @param {coursesDeleteArgs} args - Arguments to delete one Courses.
     * @example
     * // Delete one Courses
     * const Courses = await prisma.courses.delete({
     *   where: {
     *     // ... filter to delete one Courses
     *   }
     * })
     * 
     */
    delete<T extends coursesDeleteArgs>(args: SelectSubset<T, coursesDeleteArgs<ExtArgs>>): Prisma__coursesClient<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Courses.
     * @param {coursesUpdateArgs} args - Arguments to update one Courses.
     * @example
     * // Update one Courses
     * const courses = await prisma.courses.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends coursesUpdateArgs>(args: SelectSubset<T, coursesUpdateArgs<ExtArgs>>): Prisma__coursesClient<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Courses.
     * @param {coursesDeleteManyArgs} args - Arguments to filter Courses to delete.
     * @example
     * // Delete a few Courses
     * const { count } = await prisma.courses.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends coursesDeleteManyArgs>(args?: SelectSubset<T, coursesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coursesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Courses
     * const courses = await prisma.courses.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends coursesUpdateManyArgs>(args: SelectSubset<T, coursesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses and returns the data updated in the database.
     * @param {coursesUpdateManyAndReturnArgs} args - Arguments to update many Courses.
     * @example
     * // Update many Courses
     * const courses = await prisma.courses.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Courses and only return the `id`
     * const coursesWithIdOnly = await prisma.courses.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends coursesUpdateManyAndReturnArgs>(args: SelectSubset<T, coursesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Courses.
     * @param {coursesUpsertArgs} args - Arguments to update or create a Courses.
     * @example
     * // Update or create a Courses
     * const courses = await prisma.courses.upsert({
     *   create: {
     *     // ... data to create a Courses
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Courses we want to update
     *   }
     * })
     */
    upsert<T extends coursesUpsertArgs>(args: SelectSubset<T, coursesUpsertArgs<ExtArgs>>): Prisma__coursesClient<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coursesCountArgs} args - Arguments to filter Courses to count.
     * @example
     * // Count the number of Courses
     * const count = await prisma.courses.count({
     *   where: {
     *     // ... the filter for the Courses we want to count
     *   }
     * })
    **/
    count<T extends coursesCountArgs>(
      args?: Subset<T, coursesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CoursesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CoursesAggregateArgs>(args: Subset<T, CoursesAggregateArgs>): Prisma.PrismaPromise<GetCoursesAggregateType<T>>

    /**
     * Group by Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {coursesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends coursesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: coursesGroupByArgs['orderBy'] }
        : { orderBy?: coursesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, coursesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCoursesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the courses model
   */
  readonly fields: coursesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for courses.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__coursesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    books<T extends courses$booksArgs<ExtArgs> = {}>(args?: Subset<T, courses$booksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$booksPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    registrations<T extends courses$registrationsArgs<ExtArgs> = {}>(args?: Subset<T, courses$registrationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$registrationsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the courses model
   */
  interface coursesFieldRefs {
    readonly id: FieldRef<"courses", 'Int'>
    readonly name: FieldRef<"courses", 'String'>
    readonly price: FieldRef<"courses", 'Float'>
    readonly created_at: FieldRef<"courses", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * courses findUnique
   */
  export type coursesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courses
     */
    omit?: coursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
    /**
     * Filter, which courses to fetch.
     */
    where: coursesWhereUniqueInput
  }

  /**
   * courses findUniqueOrThrow
   */
  export type coursesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courses
     */
    omit?: coursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
    /**
     * Filter, which courses to fetch.
     */
    where: coursesWhereUniqueInput
  }

  /**
   * courses findFirst
   */
  export type coursesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courses
     */
    omit?: coursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
    /**
     * Filter, which courses to fetch.
     */
    where?: coursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of courses to fetch.
     */
    orderBy?: coursesOrderByWithRelationInput | coursesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for courses.
     */
    cursor?: coursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of courses.
     */
    distinct?: CoursesScalarFieldEnum | CoursesScalarFieldEnum[]
  }

  /**
   * courses findFirstOrThrow
   */
  export type coursesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courses
     */
    omit?: coursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
    /**
     * Filter, which courses to fetch.
     */
    where?: coursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of courses to fetch.
     */
    orderBy?: coursesOrderByWithRelationInput | coursesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for courses.
     */
    cursor?: coursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of courses.
     */
    distinct?: CoursesScalarFieldEnum | CoursesScalarFieldEnum[]
  }

  /**
   * courses findMany
   */
  export type coursesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courses
     */
    omit?: coursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
    /**
     * Filter, which courses to fetch.
     */
    where?: coursesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of courses to fetch.
     */
    orderBy?: coursesOrderByWithRelationInput | coursesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing courses.
     */
    cursor?: coursesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` courses.
     */
    skip?: number
    distinct?: CoursesScalarFieldEnum | CoursesScalarFieldEnum[]
  }

  /**
   * courses create
   */
  export type coursesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courses
     */
    omit?: coursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
    /**
     * The data needed to create a courses.
     */
    data: XOR<coursesCreateInput, coursesUncheckedCreateInput>
  }

  /**
   * courses createMany
   */
  export type coursesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many courses.
     */
    data: coursesCreateManyInput | coursesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * courses createManyAndReturn
   */
  export type coursesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the courses
     */
    omit?: coursesOmit<ExtArgs> | null
    /**
     * The data used to create many courses.
     */
    data: coursesCreateManyInput | coursesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * courses update
   */
  export type coursesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courses
     */
    omit?: coursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
    /**
     * The data needed to update a courses.
     */
    data: XOR<coursesUpdateInput, coursesUncheckedUpdateInput>
    /**
     * Choose, which courses to update.
     */
    where: coursesWhereUniqueInput
  }

  /**
   * courses updateMany
   */
  export type coursesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update courses.
     */
    data: XOR<coursesUpdateManyMutationInput, coursesUncheckedUpdateManyInput>
    /**
     * Filter which courses to update
     */
    where?: coursesWhereInput
    /**
     * Limit how many courses to update.
     */
    limit?: number
  }

  /**
   * courses updateManyAndReturn
   */
  export type coursesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the courses
     */
    omit?: coursesOmit<ExtArgs> | null
    /**
     * The data used to update courses.
     */
    data: XOR<coursesUpdateManyMutationInput, coursesUncheckedUpdateManyInput>
    /**
     * Filter which courses to update
     */
    where?: coursesWhereInput
    /**
     * Limit how many courses to update.
     */
    limit?: number
  }

  /**
   * courses upsert
   */
  export type coursesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courses
     */
    omit?: coursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
    /**
     * The filter to search for the courses to update in case it exists.
     */
    where: coursesWhereUniqueInput
    /**
     * In case the courses found by the `where` argument doesn't exist, create a new courses with this data.
     */
    create: XOR<coursesCreateInput, coursesUncheckedCreateInput>
    /**
     * In case the courses was found with the provided `where` argument, update it with this data.
     */
    update: XOR<coursesUpdateInput, coursesUncheckedUpdateInput>
  }

  /**
   * courses delete
   */
  export type coursesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courses
     */
    omit?: coursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
    /**
     * Filter which courses to delete.
     */
    where: coursesWhereUniqueInput
  }

  /**
   * courses deleteMany
   */
  export type coursesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which courses to delete
     */
    where?: coursesWhereInput
    /**
     * Limit how many courses to delete.
     */
    limit?: number
  }

  /**
   * courses.books
   */
  export type courses$booksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the books
     */
    select?: booksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the books
     */
    omit?: booksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: booksInclude<ExtArgs> | null
    where?: booksWhereInput
    orderBy?: booksOrderByWithRelationInput | booksOrderByWithRelationInput[]
    cursor?: booksWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BooksScalarFieldEnum | BooksScalarFieldEnum[]
  }

  /**
   * courses.registrations
   */
  export type courses$registrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registrations
     */
    select?: registrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the registrations
     */
    omit?: registrationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registrationsInclude<ExtArgs> | null
    where?: registrationsWhereInput
    orderBy?: registrationsOrderByWithRelationInput | registrationsOrderByWithRelationInput[]
    cursor?: registrationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RegistrationsScalarFieldEnum | RegistrationsScalarFieldEnum[]
  }

  /**
   * courses without action
   */
  export type coursesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the courses
     */
    select?: coursesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the courses
     */
    omit?: coursesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: coursesInclude<ExtArgs> | null
  }


  /**
   * Model lessons
   */

  export type AggregateLessons = {
    _count: LessonsCountAggregateOutputType | null
    _avg: LessonsAvgAggregateOutputType | null
    _sum: LessonsSumAggregateOutputType | null
    _min: LessonsMinAggregateOutputType | null
    _max: LessonsMaxAggregateOutputType | null
  }

  export type LessonsAvgAggregateOutputType = {
    id: number | null
    books_id: number | null
    position: number | null
  }

  export type LessonsSumAggregateOutputType = {
    id: number | null
    books_id: number | null
    position: number | null
  }

  export type LessonsMinAggregateOutputType = {
    id: number | null
    books_id: number | null
    name: string | null
    url: string | null
    position: number | null
  }

  export type LessonsMaxAggregateOutputType = {
    id: number | null
    books_id: number | null
    name: string | null
    url: string | null
    position: number | null
  }

  export type LessonsCountAggregateOutputType = {
    id: number
    books_id: number
    name: number
    url: number
    position: number
    _all: number
  }


  export type LessonsAvgAggregateInputType = {
    id?: true
    books_id?: true
    position?: true
  }

  export type LessonsSumAggregateInputType = {
    id?: true
    books_id?: true
    position?: true
  }

  export type LessonsMinAggregateInputType = {
    id?: true
    books_id?: true
    name?: true
    url?: true
    position?: true
  }

  export type LessonsMaxAggregateInputType = {
    id?: true
    books_id?: true
    name?: true
    url?: true
    position?: true
  }

  export type LessonsCountAggregateInputType = {
    id?: true
    books_id?: true
    name?: true
    url?: true
    position?: true
    _all?: true
  }

  export type LessonsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which lessons to aggregate.
     */
    where?: lessonsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lessons to fetch.
     */
    orderBy?: lessonsOrderByWithRelationInput | lessonsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: lessonsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lessons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lessons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned lessons
    **/
    _count?: true | LessonsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LessonsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LessonsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LessonsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LessonsMaxAggregateInputType
  }

  export type GetLessonsAggregateType<T extends LessonsAggregateArgs> = {
        [P in keyof T & keyof AggregateLessons]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLessons[P]>
      : GetScalarType<T[P], AggregateLessons[P]>
  }




  export type lessonsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: lessonsWhereInput
    orderBy?: lessonsOrderByWithAggregationInput | lessonsOrderByWithAggregationInput[]
    by: LessonsScalarFieldEnum[] | LessonsScalarFieldEnum
    having?: lessonsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LessonsCountAggregateInputType | true
    _avg?: LessonsAvgAggregateInputType
    _sum?: LessonsSumAggregateInputType
    _min?: LessonsMinAggregateInputType
    _max?: LessonsMaxAggregateInputType
  }

  export type LessonsGroupByOutputType = {
    id: number
    books_id: number
    name: string | null
    url: string | null
    position: number | null
    _count: LessonsCountAggregateOutputType | null
    _avg: LessonsAvgAggregateOutputType | null
    _sum: LessonsSumAggregateOutputType | null
    _min: LessonsMinAggregateOutputType | null
    _max: LessonsMaxAggregateOutputType | null
  }

  type GetLessonsGroupByPayload<T extends lessonsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LessonsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LessonsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LessonsGroupByOutputType[P]>
            : GetScalarType<T[P], LessonsGroupByOutputType[P]>
        }
      >
    >


  export type lessonsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    books_id?: boolean
    name?: boolean
    url?: boolean
    position?: boolean
    books?: boolean | booksDefaultArgs<ExtArgs>
    tasks?: boolean | lessons$tasksArgs<ExtArgs>
    _count?: boolean | LessonsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lessons"]>

  export type lessonsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    books_id?: boolean
    name?: boolean
    url?: boolean
    position?: boolean
    books?: boolean | booksDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lessons"]>

  export type lessonsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    books_id?: boolean
    name?: boolean
    url?: boolean
    position?: boolean
    books?: boolean | booksDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lessons"]>

  export type lessonsSelectScalar = {
    id?: boolean
    books_id?: boolean
    name?: boolean
    url?: boolean
    position?: boolean
  }

  export type lessonsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "books_id" | "name" | "url" | "position", ExtArgs["result"]["lessons"]>
  export type lessonsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    books?: boolean | booksDefaultArgs<ExtArgs>
    tasks?: boolean | lessons$tasksArgs<ExtArgs>
    _count?: boolean | LessonsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type lessonsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    books?: boolean | booksDefaultArgs<ExtArgs>
  }
  export type lessonsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    books?: boolean | booksDefaultArgs<ExtArgs>
  }

  export type $lessonsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "lessons"
    objects: {
      books: Prisma.$booksPayload<ExtArgs>
      tasks: Prisma.$tasksPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      books_id: number
      name: string | null
      url: string | null
      position: number | null
    }, ExtArgs["result"]["lessons"]>
    composites: {}
  }

  type lessonsGetPayload<S extends boolean | null | undefined | lessonsDefaultArgs> = $Result.GetResult<Prisma.$lessonsPayload, S>

  type lessonsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<lessonsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LessonsCountAggregateInputType | true
    }

  export interface lessonsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['lessons'], meta: { name: 'lessons' } }
    /**
     * Find zero or one Lessons that matches the filter.
     * @param {lessonsFindUniqueArgs} args - Arguments to find a Lessons
     * @example
     * // Get one Lessons
     * const lessons = await prisma.lessons.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends lessonsFindUniqueArgs>(args: SelectSubset<T, lessonsFindUniqueArgs<ExtArgs>>): Prisma__lessonsClient<$Result.GetResult<Prisma.$lessonsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Lessons that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {lessonsFindUniqueOrThrowArgs} args - Arguments to find a Lessons
     * @example
     * // Get one Lessons
     * const lessons = await prisma.lessons.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends lessonsFindUniqueOrThrowArgs>(args: SelectSubset<T, lessonsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__lessonsClient<$Result.GetResult<Prisma.$lessonsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Lessons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lessonsFindFirstArgs} args - Arguments to find a Lessons
     * @example
     * // Get one Lessons
     * const lessons = await prisma.lessons.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends lessonsFindFirstArgs>(args?: SelectSubset<T, lessonsFindFirstArgs<ExtArgs>>): Prisma__lessonsClient<$Result.GetResult<Prisma.$lessonsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Lessons that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lessonsFindFirstOrThrowArgs} args - Arguments to find a Lessons
     * @example
     * // Get one Lessons
     * const lessons = await prisma.lessons.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends lessonsFindFirstOrThrowArgs>(args?: SelectSubset<T, lessonsFindFirstOrThrowArgs<ExtArgs>>): Prisma__lessonsClient<$Result.GetResult<Prisma.$lessonsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Lessons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lessonsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Lessons
     * const lessons = await prisma.lessons.findMany()
     * 
     * // Get first 10 Lessons
     * const lessons = await prisma.lessons.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lessonsWithIdOnly = await prisma.lessons.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends lessonsFindManyArgs>(args?: SelectSubset<T, lessonsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$lessonsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Lessons.
     * @param {lessonsCreateArgs} args - Arguments to create a Lessons.
     * @example
     * // Create one Lessons
     * const Lessons = await prisma.lessons.create({
     *   data: {
     *     // ... data to create a Lessons
     *   }
     * })
     * 
     */
    create<T extends lessonsCreateArgs>(args: SelectSubset<T, lessonsCreateArgs<ExtArgs>>): Prisma__lessonsClient<$Result.GetResult<Prisma.$lessonsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Lessons.
     * @param {lessonsCreateManyArgs} args - Arguments to create many Lessons.
     * @example
     * // Create many Lessons
     * const lessons = await prisma.lessons.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends lessonsCreateManyArgs>(args?: SelectSubset<T, lessonsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Lessons and returns the data saved in the database.
     * @param {lessonsCreateManyAndReturnArgs} args - Arguments to create many Lessons.
     * @example
     * // Create many Lessons
     * const lessons = await prisma.lessons.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Lessons and only return the `id`
     * const lessonsWithIdOnly = await prisma.lessons.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends lessonsCreateManyAndReturnArgs>(args?: SelectSubset<T, lessonsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$lessonsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Lessons.
     * @param {lessonsDeleteArgs} args - Arguments to delete one Lessons.
     * @example
     * // Delete one Lessons
     * const Lessons = await prisma.lessons.delete({
     *   where: {
     *     // ... filter to delete one Lessons
     *   }
     * })
     * 
     */
    delete<T extends lessonsDeleteArgs>(args: SelectSubset<T, lessonsDeleteArgs<ExtArgs>>): Prisma__lessonsClient<$Result.GetResult<Prisma.$lessonsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Lessons.
     * @param {lessonsUpdateArgs} args - Arguments to update one Lessons.
     * @example
     * // Update one Lessons
     * const lessons = await prisma.lessons.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends lessonsUpdateArgs>(args: SelectSubset<T, lessonsUpdateArgs<ExtArgs>>): Prisma__lessonsClient<$Result.GetResult<Prisma.$lessonsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Lessons.
     * @param {lessonsDeleteManyArgs} args - Arguments to filter Lessons to delete.
     * @example
     * // Delete a few Lessons
     * const { count } = await prisma.lessons.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends lessonsDeleteManyArgs>(args?: SelectSubset<T, lessonsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lessons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lessonsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Lessons
     * const lessons = await prisma.lessons.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends lessonsUpdateManyArgs>(args: SelectSubset<T, lessonsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lessons and returns the data updated in the database.
     * @param {lessonsUpdateManyAndReturnArgs} args - Arguments to update many Lessons.
     * @example
     * // Update many Lessons
     * const lessons = await prisma.lessons.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Lessons and only return the `id`
     * const lessonsWithIdOnly = await prisma.lessons.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends lessonsUpdateManyAndReturnArgs>(args: SelectSubset<T, lessonsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$lessonsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Lessons.
     * @param {lessonsUpsertArgs} args - Arguments to update or create a Lessons.
     * @example
     * // Update or create a Lessons
     * const lessons = await prisma.lessons.upsert({
     *   create: {
     *     // ... data to create a Lessons
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Lessons we want to update
     *   }
     * })
     */
    upsert<T extends lessonsUpsertArgs>(args: SelectSubset<T, lessonsUpsertArgs<ExtArgs>>): Prisma__lessonsClient<$Result.GetResult<Prisma.$lessonsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Lessons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lessonsCountArgs} args - Arguments to filter Lessons to count.
     * @example
     * // Count the number of Lessons
     * const count = await prisma.lessons.count({
     *   where: {
     *     // ... the filter for the Lessons we want to count
     *   }
     * })
    **/
    count<T extends lessonsCountArgs>(
      args?: Subset<T, lessonsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LessonsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Lessons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LessonsAggregateArgs>(args: Subset<T, LessonsAggregateArgs>): Prisma.PrismaPromise<GetLessonsAggregateType<T>>

    /**
     * Group by Lessons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {lessonsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends lessonsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: lessonsGroupByArgs['orderBy'] }
        : { orderBy?: lessonsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, lessonsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLessonsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the lessons model
   */
  readonly fields: lessonsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for lessons.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__lessonsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    books<T extends booksDefaultArgs<ExtArgs> = {}>(args?: Subset<T, booksDefaultArgs<ExtArgs>>): Prisma__booksClient<$Result.GetResult<Prisma.$booksPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tasks<T extends lessons$tasksArgs<ExtArgs> = {}>(args?: Subset<T, lessons$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the lessons model
   */
  interface lessonsFieldRefs {
    readonly id: FieldRef<"lessons", 'Int'>
    readonly books_id: FieldRef<"lessons", 'Int'>
    readonly name: FieldRef<"lessons", 'String'>
    readonly url: FieldRef<"lessons", 'String'>
    readonly position: FieldRef<"lessons", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * lessons findUnique
   */
  export type lessonsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lessons
     */
    select?: lessonsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lessons
     */
    omit?: lessonsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lessonsInclude<ExtArgs> | null
    /**
     * Filter, which lessons to fetch.
     */
    where: lessonsWhereUniqueInput
  }

  /**
   * lessons findUniqueOrThrow
   */
  export type lessonsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lessons
     */
    select?: lessonsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lessons
     */
    omit?: lessonsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lessonsInclude<ExtArgs> | null
    /**
     * Filter, which lessons to fetch.
     */
    where: lessonsWhereUniqueInput
  }

  /**
   * lessons findFirst
   */
  export type lessonsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lessons
     */
    select?: lessonsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lessons
     */
    omit?: lessonsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lessonsInclude<ExtArgs> | null
    /**
     * Filter, which lessons to fetch.
     */
    where?: lessonsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lessons to fetch.
     */
    orderBy?: lessonsOrderByWithRelationInput | lessonsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for lessons.
     */
    cursor?: lessonsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lessons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lessons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of lessons.
     */
    distinct?: LessonsScalarFieldEnum | LessonsScalarFieldEnum[]
  }

  /**
   * lessons findFirstOrThrow
   */
  export type lessonsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lessons
     */
    select?: lessonsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lessons
     */
    omit?: lessonsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lessonsInclude<ExtArgs> | null
    /**
     * Filter, which lessons to fetch.
     */
    where?: lessonsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lessons to fetch.
     */
    orderBy?: lessonsOrderByWithRelationInput | lessonsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for lessons.
     */
    cursor?: lessonsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lessons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lessons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of lessons.
     */
    distinct?: LessonsScalarFieldEnum | LessonsScalarFieldEnum[]
  }

  /**
   * lessons findMany
   */
  export type lessonsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lessons
     */
    select?: lessonsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lessons
     */
    omit?: lessonsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lessonsInclude<ExtArgs> | null
    /**
     * Filter, which lessons to fetch.
     */
    where?: lessonsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of lessons to fetch.
     */
    orderBy?: lessonsOrderByWithRelationInput | lessonsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing lessons.
     */
    cursor?: lessonsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` lessons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` lessons.
     */
    skip?: number
    distinct?: LessonsScalarFieldEnum | LessonsScalarFieldEnum[]
  }

  /**
   * lessons create
   */
  export type lessonsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lessons
     */
    select?: lessonsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lessons
     */
    omit?: lessonsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lessonsInclude<ExtArgs> | null
    /**
     * The data needed to create a lessons.
     */
    data: XOR<lessonsCreateInput, lessonsUncheckedCreateInput>
  }

  /**
   * lessons createMany
   */
  export type lessonsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many lessons.
     */
    data: lessonsCreateManyInput | lessonsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * lessons createManyAndReturn
   */
  export type lessonsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lessons
     */
    select?: lessonsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the lessons
     */
    omit?: lessonsOmit<ExtArgs> | null
    /**
     * The data used to create many lessons.
     */
    data: lessonsCreateManyInput | lessonsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lessonsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * lessons update
   */
  export type lessonsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lessons
     */
    select?: lessonsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lessons
     */
    omit?: lessonsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lessonsInclude<ExtArgs> | null
    /**
     * The data needed to update a lessons.
     */
    data: XOR<lessonsUpdateInput, lessonsUncheckedUpdateInput>
    /**
     * Choose, which lessons to update.
     */
    where: lessonsWhereUniqueInput
  }

  /**
   * lessons updateMany
   */
  export type lessonsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update lessons.
     */
    data: XOR<lessonsUpdateManyMutationInput, lessonsUncheckedUpdateManyInput>
    /**
     * Filter which lessons to update
     */
    where?: lessonsWhereInput
    /**
     * Limit how many lessons to update.
     */
    limit?: number
  }

  /**
   * lessons updateManyAndReturn
   */
  export type lessonsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lessons
     */
    select?: lessonsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the lessons
     */
    omit?: lessonsOmit<ExtArgs> | null
    /**
     * The data used to update lessons.
     */
    data: XOR<lessonsUpdateManyMutationInput, lessonsUncheckedUpdateManyInput>
    /**
     * Filter which lessons to update
     */
    where?: lessonsWhereInput
    /**
     * Limit how many lessons to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lessonsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * lessons upsert
   */
  export type lessonsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lessons
     */
    select?: lessonsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lessons
     */
    omit?: lessonsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lessonsInclude<ExtArgs> | null
    /**
     * The filter to search for the lessons to update in case it exists.
     */
    where: lessonsWhereUniqueInput
    /**
     * In case the lessons found by the `where` argument doesn't exist, create a new lessons with this data.
     */
    create: XOR<lessonsCreateInput, lessonsUncheckedCreateInput>
    /**
     * In case the lessons was found with the provided `where` argument, update it with this data.
     */
    update: XOR<lessonsUpdateInput, lessonsUncheckedUpdateInput>
  }

  /**
   * lessons delete
   */
  export type lessonsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lessons
     */
    select?: lessonsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lessons
     */
    omit?: lessonsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lessonsInclude<ExtArgs> | null
    /**
     * Filter which lessons to delete.
     */
    where: lessonsWhereUniqueInput
  }

  /**
   * lessons deleteMany
   */
  export type lessonsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which lessons to delete
     */
    where?: lessonsWhereInput
    /**
     * Limit how many lessons to delete.
     */
    limit?: number
  }

  /**
   * lessons.tasks
   */
  export type lessons$tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tasks
     */
    omit?: tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    where?: tasksWhereInput
    orderBy?: tasksOrderByWithRelationInput | tasksOrderByWithRelationInput[]
    cursor?: tasksWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TasksScalarFieldEnum | TasksScalarFieldEnum[]
  }

  /**
   * lessons without action
   */
  export type lessonsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the lessons
     */
    select?: lessonsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the lessons
     */
    omit?: lessonsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: lessonsInclude<ExtArgs> | null
  }


  /**
   * Model monthly_fee
   */

  export type AggregateMonthly_fee = {
    _count: Monthly_feeCountAggregateOutputType | null
    _avg: Monthly_feeAvgAggregateOutputType | null
    _sum: Monthly_feeSumAggregateOutputType | null
    _min: Monthly_feeMinAggregateOutputType | null
    _max: Monthly_feeMaxAggregateOutputType | null
  }

  export type Monthly_feeAvgAggregateOutputType = {
    id: number | null
    registrations_id: number | null
    amount_to_be_paid: number | null
    amount_paid: number | null
  }

  export type Monthly_feeSumAggregateOutputType = {
    id: number | null
    registrations_id: number | null
    amount_to_be_paid: number | null
    amount_paid: number | null
  }

  export type Monthly_feeMinAggregateOutputType = {
    id: number | null
    registrations_id: number | null
    due_date: Date | null
    amount_to_be_paid: number | null
    amount_paid: number | null
    date_of_paid: Date | null
    payment_method: string | null
    paid: boolean | null
  }

  export type Monthly_feeMaxAggregateOutputType = {
    id: number | null
    registrations_id: number | null
    due_date: Date | null
    amount_to_be_paid: number | null
    amount_paid: number | null
    date_of_paid: Date | null
    payment_method: string | null
    paid: boolean | null
  }

  export type Monthly_feeCountAggregateOutputType = {
    id: number
    registrations_id: number
    due_date: number
    amount_to_be_paid: number
    amount_paid: number
    date_of_paid: number
    payment_method: number
    paid: number
    _all: number
  }


  export type Monthly_feeAvgAggregateInputType = {
    id?: true
    registrations_id?: true
    amount_to_be_paid?: true
    amount_paid?: true
  }

  export type Monthly_feeSumAggregateInputType = {
    id?: true
    registrations_id?: true
    amount_to_be_paid?: true
    amount_paid?: true
  }

  export type Monthly_feeMinAggregateInputType = {
    id?: true
    registrations_id?: true
    due_date?: true
    amount_to_be_paid?: true
    amount_paid?: true
    date_of_paid?: true
    payment_method?: true
    paid?: true
  }

  export type Monthly_feeMaxAggregateInputType = {
    id?: true
    registrations_id?: true
    due_date?: true
    amount_to_be_paid?: true
    amount_paid?: true
    date_of_paid?: true
    payment_method?: true
    paid?: true
  }

  export type Monthly_feeCountAggregateInputType = {
    id?: true
    registrations_id?: true
    due_date?: true
    amount_to_be_paid?: true
    amount_paid?: true
    date_of_paid?: true
    payment_method?: true
    paid?: true
    _all?: true
  }

  export type Monthly_feeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which monthly_fee to aggregate.
     */
    where?: monthly_feeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of monthly_fees to fetch.
     */
    orderBy?: monthly_feeOrderByWithRelationInput | monthly_feeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: monthly_feeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` monthly_fees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` monthly_fees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned monthly_fees
    **/
    _count?: true | Monthly_feeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Monthly_feeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Monthly_feeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Monthly_feeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Monthly_feeMaxAggregateInputType
  }

  export type GetMonthly_feeAggregateType<T extends Monthly_feeAggregateArgs> = {
        [P in keyof T & keyof AggregateMonthly_fee]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMonthly_fee[P]>
      : GetScalarType<T[P], AggregateMonthly_fee[P]>
  }




  export type monthly_feeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: monthly_feeWhereInput
    orderBy?: monthly_feeOrderByWithAggregationInput | monthly_feeOrderByWithAggregationInput[]
    by: Monthly_feeScalarFieldEnum[] | Monthly_feeScalarFieldEnum
    having?: monthly_feeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Monthly_feeCountAggregateInputType | true
    _avg?: Monthly_feeAvgAggregateInputType
    _sum?: Monthly_feeSumAggregateInputType
    _min?: Monthly_feeMinAggregateInputType
    _max?: Monthly_feeMaxAggregateInputType
  }

  export type Monthly_feeGroupByOutputType = {
    id: number
    registrations_id: number
    due_date: Date | null
    amount_to_be_paid: number | null
    amount_paid: number | null
    date_of_paid: Date | null
    payment_method: string | null
    paid: boolean | null
    _count: Monthly_feeCountAggregateOutputType | null
    _avg: Monthly_feeAvgAggregateOutputType | null
    _sum: Monthly_feeSumAggregateOutputType | null
    _min: Monthly_feeMinAggregateOutputType | null
    _max: Monthly_feeMaxAggregateOutputType | null
  }

  type GetMonthly_feeGroupByPayload<T extends monthly_feeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Monthly_feeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Monthly_feeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Monthly_feeGroupByOutputType[P]>
            : GetScalarType<T[P], Monthly_feeGroupByOutputType[P]>
        }
      >
    >


  export type monthly_feeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    registrations_id?: boolean
    due_date?: boolean
    amount_to_be_paid?: boolean
    amount_paid?: boolean
    date_of_paid?: boolean
    payment_method?: boolean
    paid?: boolean
    registrations?: boolean | registrationsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["monthly_fee"]>

  export type monthly_feeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    registrations_id?: boolean
    due_date?: boolean
    amount_to_be_paid?: boolean
    amount_paid?: boolean
    date_of_paid?: boolean
    payment_method?: boolean
    paid?: boolean
    registrations?: boolean | registrationsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["monthly_fee"]>

  export type monthly_feeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    registrations_id?: boolean
    due_date?: boolean
    amount_to_be_paid?: boolean
    amount_paid?: boolean
    date_of_paid?: boolean
    payment_method?: boolean
    paid?: boolean
    registrations?: boolean | registrationsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["monthly_fee"]>

  export type monthly_feeSelectScalar = {
    id?: boolean
    registrations_id?: boolean
    due_date?: boolean
    amount_to_be_paid?: boolean
    amount_paid?: boolean
    date_of_paid?: boolean
    payment_method?: boolean
    paid?: boolean
  }

  export type monthly_feeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "registrations_id" | "due_date" | "amount_to_be_paid" | "amount_paid" | "date_of_paid" | "payment_method" | "paid", ExtArgs["result"]["monthly_fee"]>
  export type monthly_feeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registrations?: boolean | registrationsDefaultArgs<ExtArgs>
  }
  export type monthly_feeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registrations?: boolean | registrationsDefaultArgs<ExtArgs>
  }
  export type monthly_feeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registrations?: boolean | registrationsDefaultArgs<ExtArgs>
  }

  export type $monthly_feePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "monthly_fee"
    objects: {
      registrations: Prisma.$registrationsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      registrations_id: number
      due_date: Date | null
      amount_to_be_paid: number | null
      amount_paid: number | null
      date_of_paid: Date | null
      payment_method: string | null
      paid: boolean | null
    }, ExtArgs["result"]["monthly_fee"]>
    composites: {}
  }

  type monthly_feeGetPayload<S extends boolean | null | undefined | monthly_feeDefaultArgs> = $Result.GetResult<Prisma.$monthly_feePayload, S>

  type monthly_feeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<monthly_feeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Monthly_feeCountAggregateInputType | true
    }

  export interface monthly_feeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['monthly_fee'], meta: { name: 'monthly_fee' } }
    /**
     * Find zero or one Monthly_fee that matches the filter.
     * @param {monthly_feeFindUniqueArgs} args - Arguments to find a Monthly_fee
     * @example
     * // Get one Monthly_fee
     * const monthly_fee = await prisma.monthly_fee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends monthly_feeFindUniqueArgs>(args: SelectSubset<T, monthly_feeFindUniqueArgs<ExtArgs>>): Prisma__monthly_feeClient<$Result.GetResult<Prisma.$monthly_feePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Monthly_fee that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {monthly_feeFindUniqueOrThrowArgs} args - Arguments to find a Monthly_fee
     * @example
     * // Get one Monthly_fee
     * const monthly_fee = await prisma.monthly_fee.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends monthly_feeFindUniqueOrThrowArgs>(args: SelectSubset<T, monthly_feeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__monthly_feeClient<$Result.GetResult<Prisma.$monthly_feePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Monthly_fee that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {monthly_feeFindFirstArgs} args - Arguments to find a Monthly_fee
     * @example
     * // Get one Monthly_fee
     * const monthly_fee = await prisma.monthly_fee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends monthly_feeFindFirstArgs>(args?: SelectSubset<T, monthly_feeFindFirstArgs<ExtArgs>>): Prisma__monthly_feeClient<$Result.GetResult<Prisma.$monthly_feePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Monthly_fee that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {monthly_feeFindFirstOrThrowArgs} args - Arguments to find a Monthly_fee
     * @example
     * // Get one Monthly_fee
     * const monthly_fee = await prisma.monthly_fee.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends monthly_feeFindFirstOrThrowArgs>(args?: SelectSubset<T, monthly_feeFindFirstOrThrowArgs<ExtArgs>>): Prisma__monthly_feeClient<$Result.GetResult<Prisma.$monthly_feePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Monthly_fees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {monthly_feeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Monthly_fees
     * const monthly_fees = await prisma.monthly_fee.findMany()
     * 
     * // Get first 10 Monthly_fees
     * const monthly_fees = await prisma.monthly_fee.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const monthly_feeWithIdOnly = await prisma.monthly_fee.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends monthly_feeFindManyArgs>(args?: SelectSubset<T, monthly_feeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$monthly_feePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Monthly_fee.
     * @param {monthly_feeCreateArgs} args - Arguments to create a Monthly_fee.
     * @example
     * // Create one Monthly_fee
     * const Monthly_fee = await prisma.monthly_fee.create({
     *   data: {
     *     // ... data to create a Monthly_fee
     *   }
     * })
     * 
     */
    create<T extends monthly_feeCreateArgs>(args: SelectSubset<T, monthly_feeCreateArgs<ExtArgs>>): Prisma__monthly_feeClient<$Result.GetResult<Prisma.$monthly_feePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Monthly_fees.
     * @param {monthly_feeCreateManyArgs} args - Arguments to create many Monthly_fees.
     * @example
     * // Create many Monthly_fees
     * const monthly_fee = await prisma.monthly_fee.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends monthly_feeCreateManyArgs>(args?: SelectSubset<T, monthly_feeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Monthly_fees and returns the data saved in the database.
     * @param {monthly_feeCreateManyAndReturnArgs} args - Arguments to create many Monthly_fees.
     * @example
     * // Create many Monthly_fees
     * const monthly_fee = await prisma.monthly_fee.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Monthly_fees and only return the `id`
     * const monthly_feeWithIdOnly = await prisma.monthly_fee.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends monthly_feeCreateManyAndReturnArgs>(args?: SelectSubset<T, monthly_feeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$monthly_feePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Monthly_fee.
     * @param {monthly_feeDeleteArgs} args - Arguments to delete one Monthly_fee.
     * @example
     * // Delete one Monthly_fee
     * const Monthly_fee = await prisma.monthly_fee.delete({
     *   where: {
     *     // ... filter to delete one Monthly_fee
     *   }
     * })
     * 
     */
    delete<T extends monthly_feeDeleteArgs>(args: SelectSubset<T, monthly_feeDeleteArgs<ExtArgs>>): Prisma__monthly_feeClient<$Result.GetResult<Prisma.$monthly_feePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Monthly_fee.
     * @param {monthly_feeUpdateArgs} args - Arguments to update one Monthly_fee.
     * @example
     * // Update one Monthly_fee
     * const monthly_fee = await prisma.monthly_fee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends monthly_feeUpdateArgs>(args: SelectSubset<T, monthly_feeUpdateArgs<ExtArgs>>): Prisma__monthly_feeClient<$Result.GetResult<Prisma.$monthly_feePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Monthly_fees.
     * @param {monthly_feeDeleteManyArgs} args - Arguments to filter Monthly_fees to delete.
     * @example
     * // Delete a few Monthly_fees
     * const { count } = await prisma.monthly_fee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends monthly_feeDeleteManyArgs>(args?: SelectSubset<T, monthly_feeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Monthly_fees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {monthly_feeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Monthly_fees
     * const monthly_fee = await prisma.monthly_fee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends monthly_feeUpdateManyArgs>(args: SelectSubset<T, monthly_feeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Monthly_fees and returns the data updated in the database.
     * @param {monthly_feeUpdateManyAndReturnArgs} args - Arguments to update many Monthly_fees.
     * @example
     * // Update many Monthly_fees
     * const monthly_fee = await prisma.monthly_fee.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Monthly_fees and only return the `id`
     * const monthly_feeWithIdOnly = await prisma.monthly_fee.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends monthly_feeUpdateManyAndReturnArgs>(args: SelectSubset<T, monthly_feeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$monthly_feePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Monthly_fee.
     * @param {monthly_feeUpsertArgs} args - Arguments to update or create a Monthly_fee.
     * @example
     * // Update or create a Monthly_fee
     * const monthly_fee = await prisma.monthly_fee.upsert({
     *   create: {
     *     // ... data to create a Monthly_fee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Monthly_fee we want to update
     *   }
     * })
     */
    upsert<T extends monthly_feeUpsertArgs>(args: SelectSubset<T, monthly_feeUpsertArgs<ExtArgs>>): Prisma__monthly_feeClient<$Result.GetResult<Prisma.$monthly_feePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Monthly_fees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {monthly_feeCountArgs} args - Arguments to filter Monthly_fees to count.
     * @example
     * // Count the number of Monthly_fees
     * const count = await prisma.monthly_fee.count({
     *   where: {
     *     // ... the filter for the Monthly_fees we want to count
     *   }
     * })
    **/
    count<T extends monthly_feeCountArgs>(
      args?: Subset<T, monthly_feeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Monthly_feeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Monthly_fee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Monthly_feeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Monthly_feeAggregateArgs>(args: Subset<T, Monthly_feeAggregateArgs>): Prisma.PrismaPromise<GetMonthly_feeAggregateType<T>>

    /**
     * Group by Monthly_fee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {monthly_feeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends monthly_feeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: monthly_feeGroupByArgs['orderBy'] }
        : { orderBy?: monthly_feeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, monthly_feeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMonthly_feeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the monthly_fee model
   */
  readonly fields: monthly_feeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for monthly_fee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__monthly_feeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    registrations<T extends registrationsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, registrationsDefaultArgs<ExtArgs>>): Prisma__registrationsClient<$Result.GetResult<Prisma.$registrationsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the monthly_fee model
   */
  interface monthly_feeFieldRefs {
    readonly id: FieldRef<"monthly_fee", 'Int'>
    readonly registrations_id: FieldRef<"monthly_fee", 'Int'>
    readonly due_date: FieldRef<"monthly_fee", 'DateTime'>
    readonly amount_to_be_paid: FieldRef<"monthly_fee", 'Float'>
    readonly amount_paid: FieldRef<"monthly_fee", 'Float'>
    readonly date_of_paid: FieldRef<"monthly_fee", 'DateTime'>
    readonly payment_method: FieldRef<"monthly_fee", 'String'>
    readonly paid: FieldRef<"monthly_fee", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * monthly_fee findUnique
   */
  export type monthly_feeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the monthly_fee
     */
    select?: monthly_feeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the monthly_fee
     */
    omit?: monthly_feeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: monthly_feeInclude<ExtArgs> | null
    /**
     * Filter, which monthly_fee to fetch.
     */
    where: monthly_feeWhereUniqueInput
  }

  /**
   * monthly_fee findUniqueOrThrow
   */
  export type monthly_feeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the monthly_fee
     */
    select?: monthly_feeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the monthly_fee
     */
    omit?: monthly_feeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: monthly_feeInclude<ExtArgs> | null
    /**
     * Filter, which monthly_fee to fetch.
     */
    where: monthly_feeWhereUniqueInput
  }

  /**
   * monthly_fee findFirst
   */
  export type monthly_feeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the monthly_fee
     */
    select?: monthly_feeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the monthly_fee
     */
    omit?: monthly_feeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: monthly_feeInclude<ExtArgs> | null
    /**
     * Filter, which monthly_fee to fetch.
     */
    where?: monthly_feeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of monthly_fees to fetch.
     */
    orderBy?: monthly_feeOrderByWithRelationInput | monthly_feeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for monthly_fees.
     */
    cursor?: monthly_feeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` monthly_fees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` monthly_fees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of monthly_fees.
     */
    distinct?: Monthly_feeScalarFieldEnum | Monthly_feeScalarFieldEnum[]
  }

  /**
   * monthly_fee findFirstOrThrow
   */
  export type monthly_feeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the monthly_fee
     */
    select?: monthly_feeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the monthly_fee
     */
    omit?: monthly_feeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: monthly_feeInclude<ExtArgs> | null
    /**
     * Filter, which monthly_fee to fetch.
     */
    where?: monthly_feeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of monthly_fees to fetch.
     */
    orderBy?: monthly_feeOrderByWithRelationInput | monthly_feeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for monthly_fees.
     */
    cursor?: monthly_feeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` monthly_fees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` monthly_fees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of monthly_fees.
     */
    distinct?: Monthly_feeScalarFieldEnum | Monthly_feeScalarFieldEnum[]
  }

  /**
   * monthly_fee findMany
   */
  export type monthly_feeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the monthly_fee
     */
    select?: monthly_feeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the monthly_fee
     */
    omit?: monthly_feeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: monthly_feeInclude<ExtArgs> | null
    /**
     * Filter, which monthly_fees to fetch.
     */
    where?: monthly_feeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of monthly_fees to fetch.
     */
    orderBy?: monthly_feeOrderByWithRelationInput | monthly_feeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing monthly_fees.
     */
    cursor?: monthly_feeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` monthly_fees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` monthly_fees.
     */
    skip?: number
    distinct?: Monthly_feeScalarFieldEnum | Monthly_feeScalarFieldEnum[]
  }

  /**
   * monthly_fee create
   */
  export type monthly_feeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the monthly_fee
     */
    select?: monthly_feeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the monthly_fee
     */
    omit?: monthly_feeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: monthly_feeInclude<ExtArgs> | null
    /**
     * The data needed to create a monthly_fee.
     */
    data: XOR<monthly_feeCreateInput, monthly_feeUncheckedCreateInput>
  }

  /**
   * monthly_fee createMany
   */
  export type monthly_feeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many monthly_fees.
     */
    data: monthly_feeCreateManyInput | monthly_feeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * monthly_fee createManyAndReturn
   */
  export type monthly_feeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the monthly_fee
     */
    select?: monthly_feeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the monthly_fee
     */
    omit?: monthly_feeOmit<ExtArgs> | null
    /**
     * The data used to create many monthly_fees.
     */
    data: monthly_feeCreateManyInput | monthly_feeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: monthly_feeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * monthly_fee update
   */
  export type monthly_feeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the monthly_fee
     */
    select?: monthly_feeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the monthly_fee
     */
    omit?: monthly_feeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: monthly_feeInclude<ExtArgs> | null
    /**
     * The data needed to update a monthly_fee.
     */
    data: XOR<monthly_feeUpdateInput, monthly_feeUncheckedUpdateInput>
    /**
     * Choose, which monthly_fee to update.
     */
    where: monthly_feeWhereUniqueInput
  }

  /**
   * monthly_fee updateMany
   */
  export type monthly_feeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update monthly_fees.
     */
    data: XOR<monthly_feeUpdateManyMutationInput, monthly_feeUncheckedUpdateManyInput>
    /**
     * Filter which monthly_fees to update
     */
    where?: monthly_feeWhereInput
    /**
     * Limit how many monthly_fees to update.
     */
    limit?: number
  }

  /**
   * monthly_fee updateManyAndReturn
   */
  export type monthly_feeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the monthly_fee
     */
    select?: monthly_feeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the monthly_fee
     */
    omit?: monthly_feeOmit<ExtArgs> | null
    /**
     * The data used to update monthly_fees.
     */
    data: XOR<monthly_feeUpdateManyMutationInput, monthly_feeUncheckedUpdateManyInput>
    /**
     * Filter which monthly_fees to update
     */
    where?: monthly_feeWhereInput
    /**
     * Limit how many monthly_fees to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: monthly_feeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * monthly_fee upsert
   */
  export type monthly_feeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the monthly_fee
     */
    select?: monthly_feeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the monthly_fee
     */
    omit?: monthly_feeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: monthly_feeInclude<ExtArgs> | null
    /**
     * The filter to search for the monthly_fee to update in case it exists.
     */
    where: monthly_feeWhereUniqueInput
    /**
     * In case the monthly_fee found by the `where` argument doesn't exist, create a new monthly_fee with this data.
     */
    create: XOR<monthly_feeCreateInput, monthly_feeUncheckedCreateInput>
    /**
     * In case the monthly_fee was found with the provided `where` argument, update it with this data.
     */
    update: XOR<monthly_feeUpdateInput, monthly_feeUncheckedUpdateInput>
  }

  /**
   * monthly_fee delete
   */
  export type monthly_feeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the monthly_fee
     */
    select?: monthly_feeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the monthly_fee
     */
    omit?: monthly_feeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: monthly_feeInclude<ExtArgs> | null
    /**
     * Filter which monthly_fee to delete.
     */
    where: monthly_feeWhereUniqueInput
  }

  /**
   * monthly_fee deleteMany
   */
  export type monthly_feeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which monthly_fees to delete
     */
    where?: monthly_feeWhereInput
    /**
     * Limit how many monthly_fees to delete.
     */
    limit?: number
  }

  /**
   * monthly_fee without action
   */
  export type monthly_feeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the monthly_fee
     */
    select?: monthly_feeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the monthly_fee
     */
    omit?: monthly_feeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: monthly_feeInclude<ExtArgs> | null
  }


  /**
   * Model permissions
   */

  export type AggregatePermissions = {
    _count: PermissionsCountAggregateOutputType | null
    _avg: PermissionsAvgAggregateOutputType | null
    _sum: PermissionsSumAggregateOutputType | null
    _min: PermissionsMinAggregateOutputType | null
    _max: PermissionsMaxAggregateOutputType | null
  }

  export type PermissionsAvgAggregateOutputType = {
    id: number | null
  }

  export type PermissionsSumAggregateOutputType = {
    id: number | null
  }

  export type PermissionsMinAggregateOutputType = {
    id: number | null
    create_classes: boolean | null
    update_classes: boolean | null
    delete_classes: boolean | null
    update_students: boolean | null
    delete_students: boolean | null
    create_students: boolean | null
    update_professionals: boolean | null
    create_professionals: boolean | null
    delete_professionals: boolean | null
    create_registrations: boolean | null
    update_registrations: boolean | null
    delete_registrations: boolean | null
    dashboard: boolean | null
    create_courses: boolean | null
    update_courses: boolean | null
    delete_courses: boolean | null
    create_classrooms: boolean | null
    update_classrooms: boolean | null
    delete_classrooms: boolean | null
  }

  export type PermissionsMaxAggregateOutputType = {
    id: number | null
    create_classes: boolean | null
    update_classes: boolean | null
    delete_classes: boolean | null
    update_students: boolean | null
    delete_students: boolean | null
    create_students: boolean | null
    update_professionals: boolean | null
    create_professionals: boolean | null
    delete_professionals: boolean | null
    create_registrations: boolean | null
    update_registrations: boolean | null
    delete_registrations: boolean | null
    dashboard: boolean | null
    create_courses: boolean | null
    update_courses: boolean | null
    delete_courses: boolean | null
    create_classrooms: boolean | null
    update_classrooms: boolean | null
    delete_classrooms: boolean | null
  }

  export type PermissionsCountAggregateOutputType = {
    id: number
    create_classes: number
    update_classes: number
    delete_classes: number
    update_students: number
    delete_students: number
    create_students: number
    update_professionals: number
    create_professionals: number
    delete_professionals: number
    create_registrations: number
    update_registrations: number
    delete_registrations: number
    dashboard: number
    create_courses: number
    update_courses: number
    delete_courses: number
    create_classrooms: number
    update_classrooms: number
    delete_classrooms: number
    _all: number
  }


  export type PermissionsAvgAggregateInputType = {
    id?: true
  }

  export type PermissionsSumAggregateInputType = {
    id?: true
  }

  export type PermissionsMinAggregateInputType = {
    id?: true
    create_classes?: true
    update_classes?: true
    delete_classes?: true
    update_students?: true
    delete_students?: true
    create_students?: true
    update_professionals?: true
    create_professionals?: true
    delete_professionals?: true
    create_registrations?: true
    update_registrations?: true
    delete_registrations?: true
    dashboard?: true
    create_courses?: true
    update_courses?: true
    delete_courses?: true
    create_classrooms?: true
    update_classrooms?: true
    delete_classrooms?: true
  }

  export type PermissionsMaxAggregateInputType = {
    id?: true
    create_classes?: true
    update_classes?: true
    delete_classes?: true
    update_students?: true
    delete_students?: true
    create_students?: true
    update_professionals?: true
    create_professionals?: true
    delete_professionals?: true
    create_registrations?: true
    update_registrations?: true
    delete_registrations?: true
    dashboard?: true
    create_courses?: true
    update_courses?: true
    delete_courses?: true
    create_classrooms?: true
    update_classrooms?: true
    delete_classrooms?: true
  }

  export type PermissionsCountAggregateInputType = {
    id?: true
    create_classes?: true
    update_classes?: true
    delete_classes?: true
    update_students?: true
    delete_students?: true
    create_students?: true
    update_professionals?: true
    create_professionals?: true
    delete_professionals?: true
    create_registrations?: true
    update_registrations?: true
    delete_registrations?: true
    dashboard?: true
    create_courses?: true
    update_courses?: true
    delete_courses?: true
    create_classrooms?: true
    update_classrooms?: true
    delete_classrooms?: true
    _all?: true
  }

  export type PermissionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which permissions to aggregate.
     */
    where?: permissionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of permissions to fetch.
     */
    orderBy?: permissionsOrderByWithRelationInput | permissionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: permissionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned permissions
    **/
    _count?: true | PermissionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PermissionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PermissionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PermissionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PermissionsMaxAggregateInputType
  }

  export type GetPermissionsAggregateType<T extends PermissionsAggregateArgs> = {
        [P in keyof T & keyof AggregatePermissions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePermissions[P]>
      : GetScalarType<T[P], AggregatePermissions[P]>
  }




  export type permissionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: permissionsWhereInput
    orderBy?: permissionsOrderByWithAggregationInput | permissionsOrderByWithAggregationInput[]
    by: PermissionsScalarFieldEnum[] | PermissionsScalarFieldEnum
    having?: permissionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PermissionsCountAggregateInputType | true
    _avg?: PermissionsAvgAggregateInputType
    _sum?: PermissionsSumAggregateInputType
    _min?: PermissionsMinAggregateInputType
    _max?: PermissionsMaxAggregateInputType
  }

  export type PermissionsGroupByOutputType = {
    id: number
    create_classes: boolean | null
    update_classes: boolean | null
    delete_classes: boolean | null
    update_students: boolean | null
    delete_students: boolean | null
    create_students: boolean | null
    update_professionals: boolean | null
    create_professionals: boolean | null
    delete_professionals: boolean | null
    create_registrations: boolean | null
    update_registrations: boolean | null
    delete_registrations: boolean | null
    dashboard: boolean | null
    create_courses: boolean | null
    update_courses: boolean | null
    delete_courses: boolean | null
    create_classrooms: boolean | null
    update_classrooms: boolean | null
    delete_classrooms: boolean | null
    _count: PermissionsCountAggregateOutputType | null
    _avg: PermissionsAvgAggregateOutputType | null
    _sum: PermissionsSumAggregateOutputType | null
    _min: PermissionsMinAggregateOutputType | null
    _max: PermissionsMaxAggregateOutputType | null
  }

  type GetPermissionsGroupByPayload<T extends permissionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PermissionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PermissionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PermissionsGroupByOutputType[P]>
            : GetScalarType<T[P], PermissionsGroupByOutputType[P]>
        }
      >
    >


  export type permissionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    create_classes?: boolean
    update_classes?: boolean
    delete_classes?: boolean
    update_students?: boolean
    delete_students?: boolean
    create_students?: boolean
    update_professionals?: boolean
    create_professionals?: boolean
    delete_professionals?: boolean
    create_registrations?: boolean
    update_registrations?: boolean
    delete_registrations?: boolean
    dashboard?: boolean
    create_courses?: boolean
    update_courses?: boolean
    delete_courses?: boolean
    create_classrooms?: boolean
    update_classrooms?: boolean
    delete_classrooms?: boolean
  }, ExtArgs["result"]["permissions"]>

  export type permissionsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    create_classes?: boolean
    update_classes?: boolean
    delete_classes?: boolean
    update_students?: boolean
    delete_students?: boolean
    create_students?: boolean
    update_professionals?: boolean
    create_professionals?: boolean
    delete_professionals?: boolean
    create_registrations?: boolean
    update_registrations?: boolean
    delete_registrations?: boolean
    dashboard?: boolean
    create_courses?: boolean
    update_courses?: boolean
    delete_courses?: boolean
    create_classrooms?: boolean
    update_classrooms?: boolean
    delete_classrooms?: boolean
  }, ExtArgs["result"]["permissions"]>

  export type permissionsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    create_classes?: boolean
    update_classes?: boolean
    delete_classes?: boolean
    update_students?: boolean
    delete_students?: boolean
    create_students?: boolean
    update_professionals?: boolean
    create_professionals?: boolean
    delete_professionals?: boolean
    create_registrations?: boolean
    update_registrations?: boolean
    delete_registrations?: boolean
    dashboard?: boolean
    create_courses?: boolean
    update_courses?: boolean
    delete_courses?: boolean
    create_classrooms?: boolean
    update_classrooms?: boolean
    delete_classrooms?: boolean
  }, ExtArgs["result"]["permissions"]>

  export type permissionsSelectScalar = {
    id?: boolean
    create_classes?: boolean
    update_classes?: boolean
    delete_classes?: boolean
    update_students?: boolean
    delete_students?: boolean
    create_students?: boolean
    update_professionals?: boolean
    create_professionals?: boolean
    delete_professionals?: boolean
    create_registrations?: boolean
    update_registrations?: boolean
    delete_registrations?: boolean
    dashboard?: boolean
    create_courses?: boolean
    update_courses?: boolean
    delete_courses?: boolean
    create_classrooms?: boolean
    update_classrooms?: boolean
    delete_classrooms?: boolean
  }

  export type permissionsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "create_classes" | "update_classes" | "delete_classes" | "update_students" | "delete_students" | "create_students" | "update_professionals" | "create_professionals" | "delete_professionals" | "create_registrations" | "update_registrations" | "delete_registrations" | "dashboard" | "create_courses" | "update_courses" | "delete_courses" | "create_classrooms" | "update_classrooms" | "delete_classrooms", ExtArgs["result"]["permissions"]>

  export type $permissionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "permissions"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      create_classes: boolean | null
      update_classes: boolean | null
      delete_classes: boolean | null
      update_students: boolean | null
      delete_students: boolean | null
      create_students: boolean | null
      update_professionals: boolean | null
      create_professionals: boolean | null
      delete_professionals: boolean | null
      create_registrations: boolean | null
      update_registrations: boolean | null
      delete_registrations: boolean | null
      dashboard: boolean | null
      create_courses: boolean | null
      update_courses: boolean | null
      delete_courses: boolean | null
      create_classrooms: boolean | null
      update_classrooms: boolean | null
      delete_classrooms: boolean | null
    }, ExtArgs["result"]["permissions"]>
    composites: {}
  }

  type permissionsGetPayload<S extends boolean | null | undefined | permissionsDefaultArgs> = $Result.GetResult<Prisma.$permissionsPayload, S>

  type permissionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<permissionsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PermissionsCountAggregateInputType | true
    }

  export interface permissionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['permissions'], meta: { name: 'permissions' } }
    /**
     * Find zero or one Permissions that matches the filter.
     * @param {permissionsFindUniqueArgs} args - Arguments to find a Permissions
     * @example
     * // Get one Permissions
     * const permissions = await prisma.permissions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends permissionsFindUniqueArgs>(args: SelectSubset<T, permissionsFindUniqueArgs<ExtArgs>>): Prisma__permissionsClient<$Result.GetResult<Prisma.$permissionsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Permissions that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {permissionsFindUniqueOrThrowArgs} args - Arguments to find a Permissions
     * @example
     * // Get one Permissions
     * const permissions = await prisma.permissions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends permissionsFindUniqueOrThrowArgs>(args: SelectSubset<T, permissionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__permissionsClient<$Result.GetResult<Prisma.$permissionsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Permissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {permissionsFindFirstArgs} args - Arguments to find a Permissions
     * @example
     * // Get one Permissions
     * const permissions = await prisma.permissions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends permissionsFindFirstArgs>(args?: SelectSubset<T, permissionsFindFirstArgs<ExtArgs>>): Prisma__permissionsClient<$Result.GetResult<Prisma.$permissionsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Permissions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {permissionsFindFirstOrThrowArgs} args - Arguments to find a Permissions
     * @example
     * // Get one Permissions
     * const permissions = await prisma.permissions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends permissionsFindFirstOrThrowArgs>(args?: SelectSubset<T, permissionsFindFirstOrThrowArgs<ExtArgs>>): Prisma__permissionsClient<$Result.GetResult<Prisma.$permissionsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Permissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {permissionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Permissions
     * const permissions = await prisma.permissions.findMany()
     * 
     * // Get first 10 Permissions
     * const permissions = await prisma.permissions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const permissionsWithIdOnly = await prisma.permissions.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends permissionsFindManyArgs>(args?: SelectSubset<T, permissionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$permissionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Permissions.
     * @param {permissionsCreateArgs} args - Arguments to create a Permissions.
     * @example
     * // Create one Permissions
     * const Permissions = await prisma.permissions.create({
     *   data: {
     *     // ... data to create a Permissions
     *   }
     * })
     * 
     */
    create<T extends permissionsCreateArgs>(args: SelectSubset<T, permissionsCreateArgs<ExtArgs>>): Prisma__permissionsClient<$Result.GetResult<Prisma.$permissionsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Permissions.
     * @param {permissionsCreateManyArgs} args - Arguments to create many Permissions.
     * @example
     * // Create many Permissions
     * const permissions = await prisma.permissions.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends permissionsCreateManyArgs>(args?: SelectSubset<T, permissionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Permissions and returns the data saved in the database.
     * @param {permissionsCreateManyAndReturnArgs} args - Arguments to create many Permissions.
     * @example
     * // Create many Permissions
     * const permissions = await prisma.permissions.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Permissions and only return the `id`
     * const permissionsWithIdOnly = await prisma.permissions.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends permissionsCreateManyAndReturnArgs>(args?: SelectSubset<T, permissionsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$permissionsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Permissions.
     * @param {permissionsDeleteArgs} args - Arguments to delete one Permissions.
     * @example
     * // Delete one Permissions
     * const Permissions = await prisma.permissions.delete({
     *   where: {
     *     // ... filter to delete one Permissions
     *   }
     * })
     * 
     */
    delete<T extends permissionsDeleteArgs>(args: SelectSubset<T, permissionsDeleteArgs<ExtArgs>>): Prisma__permissionsClient<$Result.GetResult<Prisma.$permissionsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Permissions.
     * @param {permissionsUpdateArgs} args - Arguments to update one Permissions.
     * @example
     * // Update one Permissions
     * const permissions = await prisma.permissions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends permissionsUpdateArgs>(args: SelectSubset<T, permissionsUpdateArgs<ExtArgs>>): Prisma__permissionsClient<$Result.GetResult<Prisma.$permissionsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Permissions.
     * @param {permissionsDeleteManyArgs} args - Arguments to filter Permissions to delete.
     * @example
     * // Delete a few Permissions
     * const { count } = await prisma.permissions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends permissionsDeleteManyArgs>(args?: SelectSubset<T, permissionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {permissionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Permissions
     * const permissions = await prisma.permissions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends permissionsUpdateManyArgs>(args: SelectSubset<T, permissionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Permissions and returns the data updated in the database.
     * @param {permissionsUpdateManyAndReturnArgs} args - Arguments to update many Permissions.
     * @example
     * // Update many Permissions
     * const permissions = await prisma.permissions.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Permissions and only return the `id`
     * const permissionsWithIdOnly = await prisma.permissions.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends permissionsUpdateManyAndReturnArgs>(args: SelectSubset<T, permissionsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$permissionsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Permissions.
     * @param {permissionsUpsertArgs} args - Arguments to update or create a Permissions.
     * @example
     * // Update or create a Permissions
     * const permissions = await prisma.permissions.upsert({
     *   create: {
     *     // ... data to create a Permissions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Permissions we want to update
     *   }
     * })
     */
    upsert<T extends permissionsUpsertArgs>(args: SelectSubset<T, permissionsUpsertArgs<ExtArgs>>): Prisma__permissionsClient<$Result.GetResult<Prisma.$permissionsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {permissionsCountArgs} args - Arguments to filter Permissions to count.
     * @example
     * // Count the number of Permissions
     * const count = await prisma.permissions.count({
     *   where: {
     *     // ... the filter for the Permissions we want to count
     *   }
     * })
    **/
    count<T extends permissionsCountArgs>(
      args?: Subset<T, permissionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PermissionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PermissionsAggregateArgs>(args: Subset<T, PermissionsAggregateArgs>): Prisma.PrismaPromise<GetPermissionsAggregateType<T>>

    /**
     * Group by Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {permissionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends permissionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: permissionsGroupByArgs['orderBy'] }
        : { orderBy?: permissionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, permissionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPermissionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the permissions model
   */
  readonly fields: permissionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for permissions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__permissionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the permissions model
   */
  interface permissionsFieldRefs {
    readonly id: FieldRef<"permissions", 'Int'>
    readonly create_classes: FieldRef<"permissions", 'Boolean'>
    readonly update_classes: FieldRef<"permissions", 'Boolean'>
    readonly delete_classes: FieldRef<"permissions", 'Boolean'>
    readonly update_students: FieldRef<"permissions", 'Boolean'>
    readonly delete_students: FieldRef<"permissions", 'Boolean'>
    readonly create_students: FieldRef<"permissions", 'Boolean'>
    readonly update_professionals: FieldRef<"permissions", 'Boolean'>
    readonly create_professionals: FieldRef<"permissions", 'Boolean'>
    readonly delete_professionals: FieldRef<"permissions", 'Boolean'>
    readonly create_registrations: FieldRef<"permissions", 'Boolean'>
    readonly update_registrations: FieldRef<"permissions", 'Boolean'>
    readonly delete_registrations: FieldRef<"permissions", 'Boolean'>
    readonly dashboard: FieldRef<"permissions", 'Boolean'>
    readonly create_courses: FieldRef<"permissions", 'Boolean'>
    readonly update_courses: FieldRef<"permissions", 'Boolean'>
    readonly delete_courses: FieldRef<"permissions", 'Boolean'>
    readonly create_classrooms: FieldRef<"permissions", 'Boolean'>
    readonly update_classrooms: FieldRef<"permissions", 'Boolean'>
    readonly delete_classrooms: FieldRef<"permissions", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * permissions findUnique
   */
  export type permissionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissions
     */
    select?: permissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the permissions
     */
    omit?: permissionsOmit<ExtArgs> | null
    /**
     * Filter, which permissions to fetch.
     */
    where: permissionsWhereUniqueInput
  }

  /**
   * permissions findUniqueOrThrow
   */
  export type permissionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissions
     */
    select?: permissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the permissions
     */
    omit?: permissionsOmit<ExtArgs> | null
    /**
     * Filter, which permissions to fetch.
     */
    where: permissionsWhereUniqueInput
  }

  /**
   * permissions findFirst
   */
  export type permissionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissions
     */
    select?: permissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the permissions
     */
    omit?: permissionsOmit<ExtArgs> | null
    /**
     * Filter, which permissions to fetch.
     */
    where?: permissionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of permissions to fetch.
     */
    orderBy?: permissionsOrderByWithRelationInput | permissionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for permissions.
     */
    cursor?: permissionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of permissions.
     */
    distinct?: PermissionsScalarFieldEnum | PermissionsScalarFieldEnum[]
  }

  /**
   * permissions findFirstOrThrow
   */
  export type permissionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissions
     */
    select?: permissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the permissions
     */
    omit?: permissionsOmit<ExtArgs> | null
    /**
     * Filter, which permissions to fetch.
     */
    where?: permissionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of permissions to fetch.
     */
    orderBy?: permissionsOrderByWithRelationInput | permissionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for permissions.
     */
    cursor?: permissionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of permissions.
     */
    distinct?: PermissionsScalarFieldEnum | PermissionsScalarFieldEnum[]
  }

  /**
   * permissions findMany
   */
  export type permissionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissions
     */
    select?: permissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the permissions
     */
    omit?: permissionsOmit<ExtArgs> | null
    /**
     * Filter, which permissions to fetch.
     */
    where?: permissionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of permissions to fetch.
     */
    orderBy?: permissionsOrderByWithRelationInput | permissionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing permissions.
     */
    cursor?: permissionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` permissions.
     */
    skip?: number
    distinct?: PermissionsScalarFieldEnum | PermissionsScalarFieldEnum[]
  }

  /**
   * permissions create
   */
  export type permissionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissions
     */
    select?: permissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the permissions
     */
    omit?: permissionsOmit<ExtArgs> | null
    /**
     * The data needed to create a permissions.
     */
    data?: XOR<permissionsCreateInput, permissionsUncheckedCreateInput>
  }

  /**
   * permissions createMany
   */
  export type permissionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many permissions.
     */
    data: permissionsCreateManyInput | permissionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * permissions createManyAndReturn
   */
  export type permissionsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissions
     */
    select?: permissionsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the permissions
     */
    omit?: permissionsOmit<ExtArgs> | null
    /**
     * The data used to create many permissions.
     */
    data: permissionsCreateManyInput | permissionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * permissions update
   */
  export type permissionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissions
     */
    select?: permissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the permissions
     */
    omit?: permissionsOmit<ExtArgs> | null
    /**
     * The data needed to update a permissions.
     */
    data: XOR<permissionsUpdateInput, permissionsUncheckedUpdateInput>
    /**
     * Choose, which permissions to update.
     */
    where: permissionsWhereUniqueInput
  }

  /**
   * permissions updateMany
   */
  export type permissionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update permissions.
     */
    data: XOR<permissionsUpdateManyMutationInput, permissionsUncheckedUpdateManyInput>
    /**
     * Filter which permissions to update
     */
    where?: permissionsWhereInput
    /**
     * Limit how many permissions to update.
     */
    limit?: number
  }

  /**
   * permissions updateManyAndReturn
   */
  export type permissionsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissions
     */
    select?: permissionsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the permissions
     */
    omit?: permissionsOmit<ExtArgs> | null
    /**
     * The data used to update permissions.
     */
    data: XOR<permissionsUpdateManyMutationInput, permissionsUncheckedUpdateManyInput>
    /**
     * Filter which permissions to update
     */
    where?: permissionsWhereInput
    /**
     * Limit how many permissions to update.
     */
    limit?: number
  }

  /**
   * permissions upsert
   */
  export type permissionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissions
     */
    select?: permissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the permissions
     */
    omit?: permissionsOmit<ExtArgs> | null
    /**
     * The filter to search for the permissions to update in case it exists.
     */
    where: permissionsWhereUniqueInput
    /**
     * In case the permissions found by the `where` argument doesn't exist, create a new permissions with this data.
     */
    create: XOR<permissionsCreateInput, permissionsUncheckedCreateInput>
    /**
     * In case the permissions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<permissionsUpdateInput, permissionsUncheckedUpdateInput>
  }

  /**
   * permissions delete
   */
  export type permissionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissions
     */
    select?: permissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the permissions
     */
    omit?: permissionsOmit<ExtArgs> | null
    /**
     * Filter which permissions to delete.
     */
    where: permissionsWhereUniqueInput
  }

  /**
   * permissions deleteMany
   */
  export type permissionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which permissions to delete
     */
    where?: permissionsWhereInput
    /**
     * Limit how many permissions to delete.
     */
    limit?: number
  }

  /**
   * permissions without action
   */
  export type permissionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the permissions
     */
    select?: permissionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the permissions
     */
    omit?: permissionsOmit<ExtArgs> | null
  }


  /**
   * Model presence_list
   */

  export type AggregatePresence_list = {
    _count: Presence_listCountAggregateOutputType | null
    _avg: Presence_listAvgAggregateOutputType | null
    _sum: Presence_listSumAggregateOutputType | null
    _min: Presence_listMinAggregateOutputType | null
    _max: Presence_listMaxAggregateOutputType | null
  }

  export type Presence_listAvgAggregateOutputType = {
    id: number | null
  }

  export type Presence_listSumAggregateOutputType = {
    id: number | null
  }

  export type Presence_listMinAggregateOutputType = {
    id: number | null
    date: Date | null
    is_present: boolean | null
    time_arrived: Date | null
  }

  export type Presence_listMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    is_present: boolean | null
    time_arrived: Date | null
  }

  export type Presence_listCountAggregateOutputType = {
    id: number
    date: number
    is_present: number
    time_arrived: number
    _all: number
  }


  export type Presence_listAvgAggregateInputType = {
    id?: true
  }

  export type Presence_listSumAggregateInputType = {
    id?: true
  }

  export type Presence_listMinAggregateInputType = {
    id?: true
    date?: true
    is_present?: true
    time_arrived?: true
  }

  export type Presence_listMaxAggregateInputType = {
    id?: true
    date?: true
    is_present?: true
    time_arrived?: true
  }

  export type Presence_listCountAggregateInputType = {
    id?: true
    date?: true
    is_present?: true
    time_arrived?: true
    _all?: true
  }

  export type Presence_listAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which presence_list to aggregate.
     */
    where?: presence_listWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of presence_lists to fetch.
     */
    orderBy?: presence_listOrderByWithRelationInput | presence_listOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: presence_listWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` presence_lists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` presence_lists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned presence_lists
    **/
    _count?: true | Presence_listCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Presence_listAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Presence_listSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Presence_listMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Presence_listMaxAggregateInputType
  }

  export type GetPresence_listAggregateType<T extends Presence_listAggregateArgs> = {
        [P in keyof T & keyof AggregatePresence_list]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePresence_list[P]>
      : GetScalarType<T[P], AggregatePresence_list[P]>
  }




  export type presence_listGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: presence_listWhereInput
    orderBy?: presence_listOrderByWithAggregationInput | presence_listOrderByWithAggregationInput[]
    by: Presence_listScalarFieldEnum[] | Presence_listScalarFieldEnum
    having?: presence_listScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Presence_listCountAggregateInputType | true
    _avg?: Presence_listAvgAggregateInputType
    _sum?: Presence_listSumAggregateInputType
    _min?: Presence_listMinAggregateInputType
    _max?: Presence_listMaxAggregateInputType
  }

  export type Presence_listGroupByOutputType = {
    id: number
    date: Date | null
    is_present: boolean | null
    time_arrived: Date | null
    _count: Presence_listCountAggregateOutputType | null
    _avg: Presence_listAvgAggregateOutputType | null
    _sum: Presence_listSumAggregateOutputType | null
    _min: Presence_listMinAggregateOutputType | null
    _max: Presence_listMaxAggregateOutputType | null
  }

  type GetPresence_listGroupByPayload<T extends presence_listGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Presence_listGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Presence_listGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Presence_listGroupByOutputType[P]>
            : GetScalarType<T[P], Presence_listGroupByOutputType[P]>
        }
      >
    >


  export type presence_listSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    is_present?: boolean
    time_arrived?: boolean
    classes?: boolean | presence_list$classesArgs<ExtArgs>
    _count?: boolean | Presence_listCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["presence_list"]>

  export type presence_listSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    is_present?: boolean
    time_arrived?: boolean
  }, ExtArgs["result"]["presence_list"]>

  export type presence_listSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    is_present?: boolean
    time_arrived?: boolean
  }, ExtArgs["result"]["presence_list"]>

  export type presence_listSelectScalar = {
    id?: boolean
    date?: boolean
    is_present?: boolean
    time_arrived?: boolean
  }

  export type presence_listOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "date" | "is_present" | "time_arrived", ExtArgs["result"]["presence_list"]>
  export type presence_listInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    classes?: boolean | presence_list$classesArgs<ExtArgs>
    _count?: boolean | Presence_listCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type presence_listIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type presence_listIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $presence_listPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "presence_list"
    objects: {
      classes: Prisma.$classesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      date: Date | null
      is_present: boolean | null
      time_arrived: Date | null
    }, ExtArgs["result"]["presence_list"]>
    composites: {}
  }

  type presence_listGetPayload<S extends boolean | null | undefined | presence_listDefaultArgs> = $Result.GetResult<Prisma.$presence_listPayload, S>

  type presence_listCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<presence_listFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Presence_listCountAggregateInputType | true
    }

  export interface presence_listDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['presence_list'], meta: { name: 'presence_list' } }
    /**
     * Find zero or one Presence_list that matches the filter.
     * @param {presence_listFindUniqueArgs} args - Arguments to find a Presence_list
     * @example
     * // Get one Presence_list
     * const presence_list = await prisma.presence_list.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends presence_listFindUniqueArgs>(args: SelectSubset<T, presence_listFindUniqueArgs<ExtArgs>>): Prisma__presence_listClient<$Result.GetResult<Prisma.$presence_listPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Presence_list that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {presence_listFindUniqueOrThrowArgs} args - Arguments to find a Presence_list
     * @example
     * // Get one Presence_list
     * const presence_list = await prisma.presence_list.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends presence_listFindUniqueOrThrowArgs>(args: SelectSubset<T, presence_listFindUniqueOrThrowArgs<ExtArgs>>): Prisma__presence_listClient<$Result.GetResult<Prisma.$presence_listPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Presence_list that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {presence_listFindFirstArgs} args - Arguments to find a Presence_list
     * @example
     * // Get one Presence_list
     * const presence_list = await prisma.presence_list.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends presence_listFindFirstArgs>(args?: SelectSubset<T, presence_listFindFirstArgs<ExtArgs>>): Prisma__presence_listClient<$Result.GetResult<Prisma.$presence_listPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Presence_list that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {presence_listFindFirstOrThrowArgs} args - Arguments to find a Presence_list
     * @example
     * // Get one Presence_list
     * const presence_list = await prisma.presence_list.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends presence_listFindFirstOrThrowArgs>(args?: SelectSubset<T, presence_listFindFirstOrThrowArgs<ExtArgs>>): Prisma__presence_listClient<$Result.GetResult<Prisma.$presence_listPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Presence_lists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {presence_listFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Presence_lists
     * const presence_lists = await prisma.presence_list.findMany()
     * 
     * // Get first 10 Presence_lists
     * const presence_lists = await prisma.presence_list.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const presence_listWithIdOnly = await prisma.presence_list.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends presence_listFindManyArgs>(args?: SelectSubset<T, presence_listFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$presence_listPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Presence_list.
     * @param {presence_listCreateArgs} args - Arguments to create a Presence_list.
     * @example
     * // Create one Presence_list
     * const Presence_list = await prisma.presence_list.create({
     *   data: {
     *     // ... data to create a Presence_list
     *   }
     * })
     * 
     */
    create<T extends presence_listCreateArgs>(args: SelectSubset<T, presence_listCreateArgs<ExtArgs>>): Prisma__presence_listClient<$Result.GetResult<Prisma.$presence_listPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Presence_lists.
     * @param {presence_listCreateManyArgs} args - Arguments to create many Presence_lists.
     * @example
     * // Create many Presence_lists
     * const presence_list = await prisma.presence_list.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends presence_listCreateManyArgs>(args?: SelectSubset<T, presence_listCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Presence_lists and returns the data saved in the database.
     * @param {presence_listCreateManyAndReturnArgs} args - Arguments to create many Presence_lists.
     * @example
     * // Create many Presence_lists
     * const presence_list = await prisma.presence_list.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Presence_lists and only return the `id`
     * const presence_listWithIdOnly = await prisma.presence_list.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends presence_listCreateManyAndReturnArgs>(args?: SelectSubset<T, presence_listCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$presence_listPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Presence_list.
     * @param {presence_listDeleteArgs} args - Arguments to delete one Presence_list.
     * @example
     * // Delete one Presence_list
     * const Presence_list = await prisma.presence_list.delete({
     *   where: {
     *     // ... filter to delete one Presence_list
     *   }
     * })
     * 
     */
    delete<T extends presence_listDeleteArgs>(args: SelectSubset<T, presence_listDeleteArgs<ExtArgs>>): Prisma__presence_listClient<$Result.GetResult<Prisma.$presence_listPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Presence_list.
     * @param {presence_listUpdateArgs} args - Arguments to update one Presence_list.
     * @example
     * // Update one Presence_list
     * const presence_list = await prisma.presence_list.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends presence_listUpdateArgs>(args: SelectSubset<T, presence_listUpdateArgs<ExtArgs>>): Prisma__presence_listClient<$Result.GetResult<Prisma.$presence_listPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Presence_lists.
     * @param {presence_listDeleteManyArgs} args - Arguments to filter Presence_lists to delete.
     * @example
     * // Delete a few Presence_lists
     * const { count } = await prisma.presence_list.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends presence_listDeleteManyArgs>(args?: SelectSubset<T, presence_listDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Presence_lists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {presence_listUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Presence_lists
     * const presence_list = await prisma.presence_list.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends presence_listUpdateManyArgs>(args: SelectSubset<T, presence_listUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Presence_lists and returns the data updated in the database.
     * @param {presence_listUpdateManyAndReturnArgs} args - Arguments to update many Presence_lists.
     * @example
     * // Update many Presence_lists
     * const presence_list = await prisma.presence_list.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Presence_lists and only return the `id`
     * const presence_listWithIdOnly = await prisma.presence_list.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends presence_listUpdateManyAndReturnArgs>(args: SelectSubset<T, presence_listUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$presence_listPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Presence_list.
     * @param {presence_listUpsertArgs} args - Arguments to update or create a Presence_list.
     * @example
     * // Update or create a Presence_list
     * const presence_list = await prisma.presence_list.upsert({
     *   create: {
     *     // ... data to create a Presence_list
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Presence_list we want to update
     *   }
     * })
     */
    upsert<T extends presence_listUpsertArgs>(args: SelectSubset<T, presence_listUpsertArgs<ExtArgs>>): Prisma__presence_listClient<$Result.GetResult<Prisma.$presence_listPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Presence_lists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {presence_listCountArgs} args - Arguments to filter Presence_lists to count.
     * @example
     * // Count the number of Presence_lists
     * const count = await prisma.presence_list.count({
     *   where: {
     *     // ... the filter for the Presence_lists we want to count
     *   }
     * })
    **/
    count<T extends presence_listCountArgs>(
      args?: Subset<T, presence_listCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Presence_listCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Presence_list.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Presence_listAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Presence_listAggregateArgs>(args: Subset<T, Presence_listAggregateArgs>): Prisma.PrismaPromise<GetPresence_listAggregateType<T>>

    /**
     * Group by Presence_list.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {presence_listGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends presence_listGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: presence_listGroupByArgs['orderBy'] }
        : { orderBy?: presence_listGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, presence_listGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPresence_listGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the presence_list model
   */
  readonly fields: presence_listFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for presence_list.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__presence_listClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    classes<T extends presence_list$classesArgs<ExtArgs> = {}>(args?: Subset<T, presence_list$classesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the presence_list model
   */
  interface presence_listFieldRefs {
    readonly id: FieldRef<"presence_list", 'Int'>
    readonly date: FieldRef<"presence_list", 'DateTime'>
    readonly is_present: FieldRef<"presence_list", 'Boolean'>
    readonly time_arrived: FieldRef<"presence_list", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * presence_list findUnique
   */
  export type presence_listFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the presence_list
     */
    select?: presence_listSelect<ExtArgs> | null
    /**
     * Omit specific fields from the presence_list
     */
    omit?: presence_listOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: presence_listInclude<ExtArgs> | null
    /**
     * Filter, which presence_list to fetch.
     */
    where: presence_listWhereUniqueInput
  }

  /**
   * presence_list findUniqueOrThrow
   */
  export type presence_listFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the presence_list
     */
    select?: presence_listSelect<ExtArgs> | null
    /**
     * Omit specific fields from the presence_list
     */
    omit?: presence_listOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: presence_listInclude<ExtArgs> | null
    /**
     * Filter, which presence_list to fetch.
     */
    where: presence_listWhereUniqueInput
  }

  /**
   * presence_list findFirst
   */
  export type presence_listFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the presence_list
     */
    select?: presence_listSelect<ExtArgs> | null
    /**
     * Omit specific fields from the presence_list
     */
    omit?: presence_listOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: presence_listInclude<ExtArgs> | null
    /**
     * Filter, which presence_list to fetch.
     */
    where?: presence_listWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of presence_lists to fetch.
     */
    orderBy?: presence_listOrderByWithRelationInput | presence_listOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for presence_lists.
     */
    cursor?: presence_listWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` presence_lists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` presence_lists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of presence_lists.
     */
    distinct?: Presence_listScalarFieldEnum | Presence_listScalarFieldEnum[]
  }

  /**
   * presence_list findFirstOrThrow
   */
  export type presence_listFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the presence_list
     */
    select?: presence_listSelect<ExtArgs> | null
    /**
     * Omit specific fields from the presence_list
     */
    omit?: presence_listOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: presence_listInclude<ExtArgs> | null
    /**
     * Filter, which presence_list to fetch.
     */
    where?: presence_listWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of presence_lists to fetch.
     */
    orderBy?: presence_listOrderByWithRelationInput | presence_listOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for presence_lists.
     */
    cursor?: presence_listWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` presence_lists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` presence_lists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of presence_lists.
     */
    distinct?: Presence_listScalarFieldEnum | Presence_listScalarFieldEnum[]
  }

  /**
   * presence_list findMany
   */
  export type presence_listFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the presence_list
     */
    select?: presence_listSelect<ExtArgs> | null
    /**
     * Omit specific fields from the presence_list
     */
    omit?: presence_listOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: presence_listInclude<ExtArgs> | null
    /**
     * Filter, which presence_lists to fetch.
     */
    where?: presence_listWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of presence_lists to fetch.
     */
    orderBy?: presence_listOrderByWithRelationInput | presence_listOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing presence_lists.
     */
    cursor?: presence_listWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` presence_lists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` presence_lists.
     */
    skip?: number
    distinct?: Presence_listScalarFieldEnum | Presence_listScalarFieldEnum[]
  }

  /**
   * presence_list create
   */
  export type presence_listCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the presence_list
     */
    select?: presence_listSelect<ExtArgs> | null
    /**
     * Omit specific fields from the presence_list
     */
    omit?: presence_listOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: presence_listInclude<ExtArgs> | null
    /**
     * The data needed to create a presence_list.
     */
    data?: XOR<presence_listCreateInput, presence_listUncheckedCreateInput>
  }

  /**
   * presence_list createMany
   */
  export type presence_listCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many presence_lists.
     */
    data: presence_listCreateManyInput | presence_listCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * presence_list createManyAndReturn
   */
  export type presence_listCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the presence_list
     */
    select?: presence_listSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the presence_list
     */
    omit?: presence_listOmit<ExtArgs> | null
    /**
     * The data used to create many presence_lists.
     */
    data: presence_listCreateManyInput | presence_listCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * presence_list update
   */
  export type presence_listUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the presence_list
     */
    select?: presence_listSelect<ExtArgs> | null
    /**
     * Omit specific fields from the presence_list
     */
    omit?: presence_listOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: presence_listInclude<ExtArgs> | null
    /**
     * The data needed to update a presence_list.
     */
    data: XOR<presence_listUpdateInput, presence_listUncheckedUpdateInput>
    /**
     * Choose, which presence_list to update.
     */
    where: presence_listWhereUniqueInput
  }

  /**
   * presence_list updateMany
   */
  export type presence_listUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update presence_lists.
     */
    data: XOR<presence_listUpdateManyMutationInput, presence_listUncheckedUpdateManyInput>
    /**
     * Filter which presence_lists to update
     */
    where?: presence_listWhereInput
    /**
     * Limit how many presence_lists to update.
     */
    limit?: number
  }

  /**
   * presence_list updateManyAndReturn
   */
  export type presence_listUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the presence_list
     */
    select?: presence_listSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the presence_list
     */
    omit?: presence_listOmit<ExtArgs> | null
    /**
     * The data used to update presence_lists.
     */
    data: XOR<presence_listUpdateManyMutationInput, presence_listUncheckedUpdateManyInput>
    /**
     * Filter which presence_lists to update
     */
    where?: presence_listWhereInput
    /**
     * Limit how many presence_lists to update.
     */
    limit?: number
  }

  /**
   * presence_list upsert
   */
  export type presence_listUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the presence_list
     */
    select?: presence_listSelect<ExtArgs> | null
    /**
     * Omit specific fields from the presence_list
     */
    omit?: presence_listOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: presence_listInclude<ExtArgs> | null
    /**
     * The filter to search for the presence_list to update in case it exists.
     */
    where: presence_listWhereUniqueInput
    /**
     * In case the presence_list found by the `where` argument doesn't exist, create a new presence_list with this data.
     */
    create: XOR<presence_listCreateInput, presence_listUncheckedCreateInput>
    /**
     * In case the presence_list was found with the provided `where` argument, update it with this data.
     */
    update: XOR<presence_listUpdateInput, presence_listUncheckedUpdateInput>
  }

  /**
   * presence_list delete
   */
  export type presence_listDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the presence_list
     */
    select?: presence_listSelect<ExtArgs> | null
    /**
     * Omit specific fields from the presence_list
     */
    omit?: presence_listOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: presence_listInclude<ExtArgs> | null
    /**
     * Filter which presence_list to delete.
     */
    where: presence_listWhereUniqueInput
  }

  /**
   * presence_list deleteMany
   */
  export type presence_listDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which presence_lists to delete
     */
    where?: presence_listWhereInput
    /**
     * Limit how many presence_lists to delete.
     */
    limit?: number
  }

  /**
   * presence_list.classes
   */
  export type presence_list$classesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classes
     */
    select?: classesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classes
     */
    omit?: classesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classesInclude<ExtArgs> | null
    where?: classesWhereInput
    orderBy?: classesOrderByWithRelationInput | classesOrderByWithRelationInput[]
    cursor?: classesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassesScalarFieldEnum | ClassesScalarFieldEnum[]
  }

  /**
   * presence_list without action
   */
  export type presence_listDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the presence_list
     */
    select?: presence_listSelect<ExtArgs> | null
    /**
     * Omit specific fields from the presence_list
     */
    omit?: presence_listOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: presence_listInclude<ExtArgs> | null
  }


  /**
   * Model professionals
   */

  export type AggregateProfessionals = {
    _count: ProfessionalsCountAggregateOutputType | null
    _avg: ProfessionalsAvgAggregateOutputType | null
    _sum: ProfessionalsSumAggregateOutputType | null
    _min: ProfessionalsMinAggregateOutputType | null
    _max: ProfessionalsMaxAggregateOutputType | null
  }

  export type ProfessionalsAvgAggregateOutputType = {
    id: number | null
    role_id: number | null
    adresses_id: number | null
    hour_value: number | null
  }

  export type ProfessionalsSumAggregateOutputType = {
    id: number | null
    role_id: number | null
    adresses_id: number | null
    hour_value: number | null
  }

  export type ProfessionalsMinAggregateOutputType = {
    id: number | null
    role_id: number | null
    adresses_id: number | null
    cpf: string | null
    name: string | null
    first_name: string | null
    last_name: string | null
    phone: string | null
    email: string | null
    gender: string | null
    date_of_birth: Date | null
    active: boolean | null
    admin: boolean | null
    avatar_url: string | null
    password: string | null
    user: string | null
    hour_value: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ProfessionalsMaxAggregateOutputType = {
    id: number | null
    role_id: number | null
    adresses_id: number | null
    cpf: string | null
    name: string | null
    first_name: string | null
    last_name: string | null
    phone: string | null
    email: string | null
    gender: string | null
    date_of_birth: Date | null
    active: boolean | null
    admin: boolean | null
    avatar_url: string | null
    password: string | null
    user: string | null
    hour_value: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ProfessionalsCountAggregateOutputType = {
    id: number
    role_id: number
    adresses_id: number
    cpf: number
    name: number
    first_name: number
    last_name: number
    phone: number
    email: number
    gender: number
    date_of_birth: number
    active: number
    admin: number
    avatar_url: number
    password: number
    user: number
    hour_value: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type ProfessionalsAvgAggregateInputType = {
    id?: true
    role_id?: true
    adresses_id?: true
    hour_value?: true
  }

  export type ProfessionalsSumAggregateInputType = {
    id?: true
    role_id?: true
    adresses_id?: true
    hour_value?: true
  }

  export type ProfessionalsMinAggregateInputType = {
    id?: true
    role_id?: true
    adresses_id?: true
    cpf?: true
    name?: true
    first_name?: true
    last_name?: true
    phone?: true
    email?: true
    gender?: true
    date_of_birth?: true
    active?: true
    admin?: true
    avatar_url?: true
    password?: true
    user?: true
    hour_value?: true
    created_at?: true
    updated_at?: true
  }

  export type ProfessionalsMaxAggregateInputType = {
    id?: true
    role_id?: true
    adresses_id?: true
    cpf?: true
    name?: true
    first_name?: true
    last_name?: true
    phone?: true
    email?: true
    gender?: true
    date_of_birth?: true
    active?: true
    admin?: true
    avatar_url?: true
    password?: true
    user?: true
    hour_value?: true
    created_at?: true
    updated_at?: true
  }

  export type ProfessionalsCountAggregateInputType = {
    id?: true
    role_id?: true
    adresses_id?: true
    cpf?: true
    name?: true
    first_name?: true
    last_name?: true
    phone?: true
    email?: true
    gender?: true
    date_of_birth?: true
    active?: true
    admin?: true
    avatar_url?: true
    password?: true
    user?: true
    hour_value?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type ProfessionalsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which professionals to aggregate.
     */
    where?: professionalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of professionals to fetch.
     */
    orderBy?: professionalsOrderByWithRelationInput | professionalsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: professionalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` professionals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` professionals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned professionals
    **/
    _count?: true | ProfessionalsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfessionalsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfessionalsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfessionalsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfessionalsMaxAggregateInputType
  }

  export type GetProfessionalsAggregateType<T extends ProfessionalsAggregateArgs> = {
        [P in keyof T & keyof AggregateProfessionals]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfessionals[P]>
      : GetScalarType<T[P], AggregateProfessionals[P]>
  }




  export type professionalsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: professionalsWhereInput
    orderBy?: professionalsOrderByWithAggregationInput | professionalsOrderByWithAggregationInput[]
    by: ProfessionalsScalarFieldEnum[] | ProfessionalsScalarFieldEnum
    having?: professionalsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfessionalsCountAggregateInputType | true
    _avg?: ProfessionalsAvgAggregateInputType
    _sum?: ProfessionalsSumAggregateInputType
    _min?: ProfessionalsMinAggregateInputType
    _max?: ProfessionalsMaxAggregateInputType
  }

  export type ProfessionalsGroupByOutputType = {
    id: number
    role_id: number
    adresses_id: number
    cpf: string
    name: string | null
    first_name: string
    last_name: string
    phone: string
    email: string
    gender: string
    date_of_birth: Date
    active: boolean
    admin: boolean
    avatar_url: string | null
    password: string
    user: string
    hour_value: number | null
    created_at: Date | null
    updated_at: Date | null
    _count: ProfessionalsCountAggregateOutputType | null
    _avg: ProfessionalsAvgAggregateOutputType | null
    _sum: ProfessionalsSumAggregateOutputType | null
    _min: ProfessionalsMinAggregateOutputType | null
    _max: ProfessionalsMaxAggregateOutputType | null
  }

  type GetProfessionalsGroupByPayload<T extends professionalsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfessionalsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfessionalsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfessionalsGroupByOutputType[P]>
            : GetScalarType<T[P], ProfessionalsGroupByOutputType[P]>
        }
      >
    >


  export type professionalsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role_id?: boolean
    adresses_id?: boolean
    cpf?: boolean
    name?: boolean
    first_name?: boolean
    last_name?: boolean
    phone?: boolean
    email?: boolean
    gender?: boolean
    date_of_birth?: boolean
    active?: boolean
    admin?: boolean
    avatar_url?: boolean
    password?: boolean
    user?: boolean
    hour_value?: boolean
    created_at?: boolean
    updated_at?: boolean
    classes?: boolean | professionals$classesArgs<ExtArgs>
    adresses?: boolean | adressesDefaultArgs<ExtArgs>
    role?: boolean | roleDefaultArgs<ExtArgs>
    _count?: boolean | ProfessionalsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["professionals"]>

  export type professionalsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role_id?: boolean
    adresses_id?: boolean
    cpf?: boolean
    name?: boolean
    first_name?: boolean
    last_name?: boolean
    phone?: boolean
    email?: boolean
    gender?: boolean
    date_of_birth?: boolean
    active?: boolean
    admin?: boolean
    avatar_url?: boolean
    password?: boolean
    user?: boolean
    hour_value?: boolean
    created_at?: boolean
    updated_at?: boolean
    adresses?: boolean | adressesDefaultArgs<ExtArgs>
    role?: boolean | roleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["professionals"]>

  export type professionalsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role_id?: boolean
    adresses_id?: boolean
    cpf?: boolean
    name?: boolean
    first_name?: boolean
    last_name?: boolean
    phone?: boolean
    email?: boolean
    gender?: boolean
    date_of_birth?: boolean
    active?: boolean
    admin?: boolean
    avatar_url?: boolean
    password?: boolean
    user?: boolean
    hour_value?: boolean
    created_at?: boolean
    updated_at?: boolean
    adresses?: boolean | adressesDefaultArgs<ExtArgs>
    role?: boolean | roleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["professionals"]>

  export type professionalsSelectScalar = {
    id?: boolean
    role_id?: boolean
    adresses_id?: boolean
    cpf?: boolean
    name?: boolean
    first_name?: boolean
    last_name?: boolean
    phone?: boolean
    email?: boolean
    gender?: boolean
    date_of_birth?: boolean
    active?: boolean
    admin?: boolean
    avatar_url?: boolean
    password?: boolean
    user?: boolean
    hour_value?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type professionalsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "role_id" | "adresses_id" | "cpf" | "name" | "first_name" | "last_name" | "phone" | "email" | "gender" | "date_of_birth" | "active" | "admin" | "avatar_url" | "password" | "user" | "hour_value" | "created_at" | "updated_at", ExtArgs["result"]["professionals"]>
  export type professionalsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    classes?: boolean | professionals$classesArgs<ExtArgs>
    adresses?: boolean | adressesDefaultArgs<ExtArgs>
    role?: boolean | roleDefaultArgs<ExtArgs>
    _count?: boolean | ProfessionalsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type professionalsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    adresses?: boolean | adressesDefaultArgs<ExtArgs>
    role?: boolean | roleDefaultArgs<ExtArgs>
  }
  export type professionalsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    adresses?: boolean | adressesDefaultArgs<ExtArgs>
    role?: boolean | roleDefaultArgs<ExtArgs>
  }

  export type $professionalsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "professionals"
    objects: {
      classes: Prisma.$classesPayload<ExtArgs>[]
      adresses: Prisma.$adressesPayload<ExtArgs>
      role: Prisma.$rolePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      role_id: number
      adresses_id: number
      cpf: string
      name: string | null
      first_name: string
      last_name: string
      phone: string
      email: string
      gender: string
      date_of_birth: Date
      active: boolean
      admin: boolean
      avatar_url: string | null
      password: string
      user: string
      hour_value: number | null
      created_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["professionals"]>
    composites: {}
  }

  type professionalsGetPayload<S extends boolean | null | undefined | professionalsDefaultArgs> = $Result.GetResult<Prisma.$professionalsPayload, S>

  type professionalsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<professionalsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProfessionalsCountAggregateInputType | true
    }

  export interface professionalsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['professionals'], meta: { name: 'professionals' } }
    /**
     * Find zero or one Professionals that matches the filter.
     * @param {professionalsFindUniqueArgs} args - Arguments to find a Professionals
     * @example
     * // Get one Professionals
     * const professionals = await prisma.professionals.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends professionalsFindUniqueArgs>(args: SelectSubset<T, professionalsFindUniqueArgs<ExtArgs>>): Prisma__professionalsClient<$Result.GetResult<Prisma.$professionalsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Professionals that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {professionalsFindUniqueOrThrowArgs} args - Arguments to find a Professionals
     * @example
     * // Get one Professionals
     * const professionals = await prisma.professionals.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends professionalsFindUniqueOrThrowArgs>(args: SelectSubset<T, professionalsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__professionalsClient<$Result.GetResult<Prisma.$professionalsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Professionals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {professionalsFindFirstArgs} args - Arguments to find a Professionals
     * @example
     * // Get one Professionals
     * const professionals = await prisma.professionals.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends professionalsFindFirstArgs>(args?: SelectSubset<T, professionalsFindFirstArgs<ExtArgs>>): Prisma__professionalsClient<$Result.GetResult<Prisma.$professionalsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Professionals that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {professionalsFindFirstOrThrowArgs} args - Arguments to find a Professionals
     * @example
     * // Get one Professionals
     * const professionals = await prisma.professionals.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends professionalsFindFirstOrThrowArgs>(args?: SelectSubset<T, professionalsFindFirstOrThrowArgs<ExtArgs>>): Prisma__professionalsClient<$Result.GetResult<Prisma.$professionalsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Professionals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {professionalsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Professionals
     * const professionals = await prisma.professionals.findMany()
     * 
     * // Get first 10 Professionals
     * const professionals = await prisma.professionals.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const professionalsWithIdOnly = await prisma.professionals.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends professionalsFindManyArgs>(args?: SelectSubset<T, professionalsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$professionalsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Professionals.
     * @param {professionalsCreateArgs} args - Arguments to create a Professionals.
     * @example
     * // Create one Professionals
     * const Professionals = await prisma.professionals.create({
     *   data: {
     *     // ... data to create a Professionals
     *   }
     * })
     * 
     */
    create<T extends professionalsCreateArgs>(args: SelectSubset<T, professionalsCreateArgs<ExtArgs>>): Prisma__professionalsClient<$Result.GetResult<Prisma.$professionalsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Professionals.
     * @param {professionalsCreateManyArgs} args - Arguments to create many Professionals.
     * @example
     * // Create many Professionals
     * const professionals = await prisma.professionals.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends professionalsCreateManyArgs>(args?: SelectSubset<T, professionalsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Professionals and returns the data saved in the database.
     * @param {professionalsCreateManyAndReturnArgs} args - Arguments to create many Professionals.
     * @example
     * // Create many Professionals
     * const professionals = await prisma.professionals.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Professionals and only return the `id`
     * const professionalsWithIdOnly = await prisma.professionals.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends professionalsCreateManyAndReturnArgs>(args?: SelectSubset<T, professionalsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$professionalsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Professionals.
     * @param {professionalsDeleteArgs} args - Arguments to delete one Professionals.
     * @example
     * // Delete one Professionals
     * const Professionals = await prisma.professionals.delete({
     *   where: {
     *     // ... filter to delete one Professionals
     *   }
     * })
     * 
     */
    delete<T extends professionalsDeleteArgs>(args: SelectSubset<T, professionalsDeleteArgs<ExtArgs>>): Prisma__professionalsClient<$Result.GetResult<Prisma.$professionalsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Professionals.
     * @param {professionalsUpdateArgs} args - Arguments to update one Professionals.
     * @example
     * // Update one Professionals
     * const professionals = await prisma.professionals.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends professionalsUpdateArgs>(args: SelectSubset<T, professionalsUpdateArgs<ExtArgs>>): Prisma__professionalsClient<$Result.GetResult<Prisma.$professionalsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Professionals.
     * @param {professionalsDeleteManyArgs} args - Arguments to filter Professionals to delete.
     * @example
     * // Delete a few Professionals
     * const { count } = await prisma.professionals.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends professionalsDeleteManyArgs>(args?: SelectSubset<T, professionalsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Professionals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {professionalsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Professionals
     * const professionals = await prisma.professionals.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends professionalsUpdateManyArgs>(args: SelectSubset<T, professionalsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Professionals and returns the data updated in the database.
     * @param {professionalsUpdateManyAndReturnArgs} args - Arguments to update many Professionals.
     * @example
     * // Update many Professionals
     * const professionals = await prisma.professionals.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Professionals and only return the `id`
     * const professionalsWithIdOnly = await prisma.professionals.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends professionalsUpdateManyAndReturnArgs>(args: SelectSubset<T, professionalsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$professionalsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Professionals.
     * @param {professionalsUpsertArgs} args - Arguments to update or create a Professionals.
     * @example
     * // Update or create a Professionals
     * const professionals = await prisma.professionals.upsert({
     *   create: {
     *     // ... data to create a Professionals
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Professionals we want to update
     *   }
     * })
     */
    upsert<T extends professionalsUpsertArgs>(args: SelectSubset<T, professionalsUpsertArgs<ExtArgs>>): Prisma__professionalsClient<$Result.GetResult<Prisma.$professionalsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Professionals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {professionalsCountArgs} args - Arguments to filter Professionals to count.
     * @example
     * // Count the number of Professionals
     * const count = await prisma.professionals.count({
     *   where: {
     *     // ... the filter for the Professionals we want to count
     *   }
     * })
    **/
    count<T extends professionalsCountArgs>(
      args?: Subset<T, professionalsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfessionalsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Professionals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfessionalsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfessionalsAggregateArgs>(args: Subset<T, ProfessionalsAggregateArgs>): Prisma.PrismaPromise<GetProfessionalsAggregateType<T>>

    /**
     * Group by Professionals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {professionalsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends professionalsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: professionalsGroupByArgs['orderBy'] }
        : { orderBy?: professionalsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, professionalsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfessionalsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the professionals model
   */
  readonly fields: professionalsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for professionals.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__professionalsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    classes<T extends professionals$classesArgs<ExtArgs> = {}>(args?: Subset<T, professionals$classesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$classesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    adresses<T extends adressesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, adressesDefaultArgs<ExtArgs>>): Prisma__adressesClient<$Result.GetResult<Prisma.$adressesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    role<T extends roleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, roleDefaultArgs<ExtArgs>>): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the professionals model
   */
  interface professionalsFieldRefs {
    readonly id: FieldRef<"professionals", 'Int'>
    readonly role_id: FieldRef<"professionals", 'Int'>
    readonly adresses_id: FieldRef<"professionals", 'Int'>
    readonly cpf: FieldRef<"professionals", 'String'>
    readonly name: FieldRef<"professionals", 'String'>
    readonly first_name: FieldRef<"professionals", 'String'>
    readonly last_name: FieldRef<"professionals", 'String'>
    readonly phone: FieldRef<"professionals", 'String'>
    readonly email: FieldRef<"professionals", 'String'>
    readonly gender: FieldRef<"professionals", 'String'>
    readonly date_of_birth: FieldRef<"professionals", 'DateTime'>
    readonly active: FieldRef<"professionals", 'Boolean'>
    readonly admin: FieldRef<"professionals", 'Boolean'>
    readonly avatar_url: FieldRef<"professionals", 'String'>
    readonly password: FieldRef<"professionals", 'String'>
    readonly user: FieldRef<"professionals", 'String'>
    readonly hour_value: FieldRef<"professionals", 'Float'>
    readonly created_at: FieldRef<"professionals", 'DateTime'>
    readonly updated_at: FieldRef<"professionals", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * professionals findUnique
   */
  export type professionalsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the professionals
     */
    select?: professionalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the professionals
     */
    omit?: professionalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: professionalsInclude<ExtArgs> | null
    /**
     * Filter, which professionals to fetch.
     */
    where: professionalsWhereUniqueInput
  }

  /**
   * professionals findUniqueOrThrow
   */
  export type professionalsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the professionals
     */
    select?: professionalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the professionals
     */
    omit?: professionalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: professionalsInclude<ExtArgs> | null
    /**
     * Filter, which professionals to fetch.
     */
    where: professionalsWhereUniqueInput
  }

  /**
   * professionals findFirst
   */
  export type professionalsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the professionals
     */
    select?: professionalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the professionals
     */
    omit?: professionalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: professionalsInclude<ExtArgs> | null
    /**
     * Filter, which professionals to fetch.
     */
    where?: professionalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of professionals to fetch.
     */
    orderBy?: professionalsOrderByWithRelationInput | professionalsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for professionals.
     */
    cursor?: professionalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` professionals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` professionals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of professionals.
     */
    distinct?: ProfessionalsScalarFieldEnum | ProfessionalsScalarFieldEnum[]
  }

  /**
   * professionals findFirstOrThrow
   */
  export type professionalsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the professionals
     */
    select?: professionalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the professionals
     */
    omit?: professionalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: professionalsInclude<ExtArgs> | null
    /**
     * Filter, which professionals to fetch.
     */
    where?: professionalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of professionals to fetch.
     */
    orderBy?: professionalsOrderByWithRelationInput | professionalsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for professionals.
     */
    cursor?: professionalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` professionals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` professionals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of professionals.
     */
    distinct?: ProfessionalsScalarFieldEnum | ProfessionalsScalarFieldEnum[]
  }

  /**
   * professionals findMany
   */
  export type professionalsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the professionals
     */
    select?: professionalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the professionals
     */
    omit?: professionalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: professionalsInclude<ExtArgs> | null
    /**
     * Filter, which professionals to fetch.
     */
    where?: professionalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of professionals to fetch.
     */
    orderBy?: professionalsOrderByWithRelationInput | professionalsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing professionals.
     */
    cursor?: professionalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` professionals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` professionals.
     */
    skip?: number
    distinct?: ProfessionalsScalarFieldEnum | ProfessionalsScalarFieldEnum[]
  }

  /**
   * professionals create
   */
  export type professionalsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the professionals
     */
    select?: professionalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the professionals
     */
    omit?: professionalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: professionalsInclude<ExtArgs> | null
    /**
     * The data needed to create a professionals.
     */
    data: XOR<professionalsCreateInput, professionalsUncheckedCreateInput>
  }

  /**
   * professionals createMany
   */
  export type professionalsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many professionals.
     */
    data: professionalsCreateManyInput | professionalsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * professionals createManyAndReturn
   */
  export type professionalsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the professionals
     */
    select?: professionalsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the professionals
     */
    omit?: professionalsOmit<ExtArgs> | null
    /**
     * The data used to create many professionals.
     */
    data: professionalsCreateManyInput | professionalsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: professionalsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * professionals update
   */
  export type professionalsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the professionals
     */
    select?: professionalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the professionals
     */
    omit?: professionalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: professionalsInclude<ExtArgs> | null
    /**
     * The data needed to update a professionals.
     */
    data: XOR<professionalsUpdateInput, professionalsUncheckedUpdateInput>
    /**
     * Choose, which professionals to update.
     */
    where: professionalsWhereUniqueInput
  }

  /**
   * professionals updateMany
   */
  export type professionalsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update professionals.
     */
    data: XOR<professionalsUpdateManyMutationInput, professionalsUncheckedUpdateManyInput>
    /**
     * Filter which professionals to update
     */
    where?: professionalsWhereInput
    /**
     * Limit how many professionals to update.
     */
    limit?: number
  }

  /**
   * professionals updateManyAndReturn
   */
  export type professionalsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the professionals
     */
    select?: professionalsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the professionals
     */
    omit?: professionalsOmit<ExtArgs> | null
    /**
     * The data used to update professionals.
     */
    data: XOR<professionalsUpdateManyMutationInput, professionalsUncheckedUpdateManyInput>
    /**
     * Filter which professionals to update
     */
    where?: professionalsWhereInput
    /**
     * Limit how many professionals to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: professionalsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * professionals upsert
   */
  export type professionalsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the professionals
     */
    select?: professionalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the professionals
     */
    omit?: professionalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: professionalsInclude<ExtArgs> | null
    /**
     * The filter to search for the professionals to update in case it exists.
     */
    where: professionalsWhereUniqueInput
    /**
     * In case the professionals found by the `where` argument doesn't exist, create a new professionals with this data.
     */
    create: XOR<professionalsCreateInput, professionalsUncheckedCreateInput>
    /**
     * In case the professionals was found with the provided `where` argument, update it with this data.
     */
    update: XOR<professionalsUpdateInput, professionalsUncheckedUpdateInput>
  }

  /**
   * professionals delete
   */
  export type professionalsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the professionals
     */
    select?: professionalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the professionals
     */
    omit?: professionalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: professionalsInclude<ExtArgs> | null
    /**
     * Filter which professionals to delete.
     */
    where: professionalsWhereUniqueInput
  }

  /**
   * professionals deleteMany
   */
  export type professionalsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which professionals to delete
     */
    where?: professionalsWhereInput
    /**
     * Limit how many professionals to delete.
     */
    limit?: number
  }

  /**
   * professionals.classes
   */
  export type professionals$classesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the classes
     */
    select?: classesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the classes
     */
    omit?: classesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: classesInclude<ExtArgs> | null
    where?: classesWhereInput
    orderBy?: classesOrderByWithRelationInput | classesOrderByWithRelationInput[]
    cursor?: classesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassesScalarFieldEnum | ClassesScalarFieldEnum[]
  }

  /**
   * professionals without action
   */
  export type professionalsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the professionals
     */
    select?: professionalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the professionals
     */
    omit?: professionalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: professionalsInclude<ExtArgs> | null
  }


  /**
   * Model records_of_students
   */

  export type AggregateRecords_of_students = {
    _count: Records_of_studentsCountAggregateOutputType | null
    _avg: Records_of_studentsAvgAggregateOutputType | null
    _sum: Records_of_studentsSumAggregateOutputType | null
    _min: Records_of_studentsMinAggregateOutputType | null
    _max: Records_of_studentsMaxAggregateOutputType | null
  }

  export type Records_of_studentsAvgAggregateOutputType = {
    id: number | null
    students_id: number | null
  }

  export type Records_of_studentsSumAggregateOutputType = {
    id: number | null
    students_id: number | null
  }

  export type Records_of_studentsMinAggregateOutputType = {
    id: number | null
    students_id: number | null
    description: string | null
    title: string | null
    date: Date | null
  }

  export type Records_of_studentsMaxAggregateOutputType = {
    id: number | null
    students_id: number | null
    description: string | null
    title: string | null
    date: Date | null
  }

  export type Records_of_studentsCountAggregateOutputType = {
    id: number
    students_id: number
    description: number
    title: number
    date: number
    _all: number
  }


  export type Records_of_studentsAvgAggregateInputType = {
    id?: true
    students_id?: true
  }

  export type Records_of_studentsSumAggregateInputType = {
    id?: true
    students_id?: true
  }

  export type Records_of_studentsMinAggregateInputType = {
    id?: true
    students_id?: true
    description?: true
    title?: true
    date?: true
  }

  export type Records_of_studentsMaxAggregateInputType = {
    id?: true
    students_id?: true
    description?: true
    title?: true
    date?: true
  }

  export type Records_of_studentsCountAggregateInputType = {
    id?: true
    students_id?: true
    description?: true
    title?: true
    date?: true
    _all?: true
  }

  export type Records_of_studentsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which records_of_students to aggregate.
     */
    where?: records_of_studentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of records_of_students to fetch.
     */
    orderBy?: records_of_studentsOrderByWithRelationInput | records_of_studentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: records_of_studentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` records_of_students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` records_of_students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned records_of_students
    **/
    _count?: true | Records_of_studentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Records_of_studentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Records_of_studentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Records_of_studentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Records_of_studentsMaxAggregateInputType
  }

  export type GetRecords_of_studentsAggregateType<T extends Records_of_studentsAggregateArgs> = {
        [P in keyof T & keyof AggregateRecords_of_students]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecords_of_students[P]>
      : GetScalarType<T[P], AggregateRecords_of_students[P]>
  }




  export type records_of_studentsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: records_of_studentsWhereInput
    orderBy?: records_of_studentsOrderByWithAggregationInput | records_of_studentsOrderByWithAggregationInput[]
    by: Records_of_studentsScalarFieldEnum[] | Records_of_studentsScalarFieldEnum
    having?: records_of_studentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Records_of_studentsCountAggregateInputType | true
    _avg?: Records_of_studentsAvgAggregateInputType
    _sum?: Records_of_studentsSumAggregateInputType
    _min?: Records_of_studentsMinAggregateInputType
    _max?: Records_of_studentsMaxAggregateInputType
  }

  export type Records_of_studentsGroupByOutputType = {
    id: number
    students_id: number
    description: string | null
    title: string | null
    date: Date | null
    _count: Records_of_studentsCountAggregateOutputType | null
    _avg: Records_of_studentsAvgAggregateOutputType | null
    _sum: Records_of_studentsSumAggregateOutputType | null
    _min: Records_of_studentsMinAggregateOutputType | null
    _max: Records_of_studentsMaxAggregateOutputType | null
  }

  type GetRecords_of_studentsGroupByPayload<T extends records_of_studentsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Records_of_studentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Records_of_studentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Records_of_studentsGroupByOutputType[P]>
            : GetScalarType<T[P], Records_of_studentsGroupByOutputType[P]>
        }
      >
    >


  export type records_of_studentsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    students_id?: boolean
    description?: boolean
    title?: boolean
    date?: boolean
    students?: boolean | studentsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["records_of_students"]>

  export type records_of_studentsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    students_id?: boolean
    description?: boolean
    title?: boolean
    date?: boolean
    students?: boolean | studentsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["records_of_students"]>

  export type records_of_studentsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    students_id?: boolean
    description?: boolean
    title?: boolean
    date?: boolean
    students?: boolean | studentsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["records_of_students"]>

  export type records_of_studentsSelectScalar = {
    id?: boolean
    students_id?: boolean
    description?: boolean
    title?: boolean
    date?: boolean
  }

  export type records_of_studentsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "students_id" | "description" | "title" | "date", ExtArgs["result"]["records_of_students"]>
  export type records_of_studentsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    students?: boolean | studentsDefaultArgs<ExtArgs>
  }
  export type records_of_studentsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    students?: boolean | studentsDefaultArgs<ExtArgs>
  }
  export type records_of_studentsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    students?: boolean | studentsDefaultArgs<ExtArgs>
  }

  export type $records_of_studentsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "records_of_students"
    objects: {
      students: Prisma.$studentsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      students_id: number
      description: string | null
      title: string | null
      date: Date | null
    }, ExtArgs["result"]["records_of_students"]>
    composites: {}
  }

  type records_of_studentsGetPayload<S extends boolean | null | undefined | records_of_studentsDefaultArgs> = $Result.GetResult<Prisma.$records_of_studentsPayload, S>

  type records_of_studentsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<records_of_studentsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Records_of_studentsCountAggregateInputType | true
    }

  export interface records_of_studentsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['records_of_students'], meta: { name: 'records_of_students' } }
    /**
     * Find zero or one Records_of_students that matches the filter.
     * @param {records_of_studentsFindUniqueArgs} args - Arguments to find a Records_of_students
     * @example
     * // Get one Records_of_students
     * const records_of_students = await prisma.records_of_students.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends records_of_studentsFindUniqueArgs>(args: SelectSubset<T, records_of_studentsFindUniqueArgs<ExtArgs>>): Prisma__records_of_studentsClient<$Result.GetResult<Prisma.$records_of_studentsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Records_of_students that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {records_of_studentsFindUniqueOrThrowArgs} args - Arguments to find a Records_of_students
     * @example
     * // Get one Records_of_students
     * const records_of_students = await prisma.records_of_students.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends records_of_studentsFindUniqueOrThrowArgs>(args: SelectSubset<T, records_of_studentsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__records_of_studentsClient<$Result.GetResult<Prisma.$records_of_studentsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Records_of_students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {records_of_studentsFindFirstArgs} args - Arguments to find a Records_of_students
     * @example
     * // Get one Records_of_students
     * const records_of_students = await prisma.records_of_students.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends records_of_studentsFindFirstArgs>(args?: SelectSubset<T, records_of_studentsFindFirstArgs<ExtArgs>>): Prisma__records_of_studentsClient<$Result.GetResult<Prisma.$records_of_studentsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Records_of_students that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {records_of_studentsFindFirstOrThrowArgs} args - Arguments to find a Records_of_students
     * @example
     * // Get one Records_of_students
     * const records_of_students = await prisma.records_of_students.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends records_of_studentsFindFirstOrThrowArgs>(args?: SelectSubset<T, records_of_studentsFindFirstOrThrowArgs<ExtArgs>>): Prisma__records_of_studentsClient<$Result.GetResult<Prisma.$records_of_studentsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Records_of_students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {records_of_studentsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Records_of_students
     * const records_of_students = await prisma.records_of_students.findMany()
     * 
     * // Get first 10 Records_of_students
     * const records_of_students = await prisma.records_of_students.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const records_of_studentsWithIdOnly = await prisma.records_of_students.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends records_of_studentsFindManyArgs>(args?: SelectSubset<T, records_of_studentsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$records_of_studentsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Records_of_students.
     * @param {records_of_studentsCreateArgs} args - Arguments to create a Records_of_students.
     * @example
     * // Create one Records_of_students
     * const Records_of_students = await prisma.records_of_students.create({
     *   data: {
     *     // ... data to create a Records_of_students
     *   }
     * })
     * 
     */
    create<T extends records_of_studentsCreateArgs>(args: SelectSubset<T, records_of_studentsCreateArgs<ExtArgs>>): Prisma__records_of_studentsClient<$Result.GetResult<Prisma.$records_of_studentsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Records_of_students.
     * @param {records_of_studentsCreateManyArgs} args - Arguments to create many Records_of_students.
     * @example
     * // Create many Records_of_students
     * const records_of_students = await prisma.records_of_students.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends records_of_studentsCreateManyArgs>(args?: SelectSubset<T, records_of_studentsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Records_of_students and returns the data saved in the database.
     * @param {records_of_studentsCreateManyAndReturnArgs} args - Arguments to create many Records_of_students.
     * @example
     * // Create many Records_of_students
     * const records_of_students = await prisma.records_of_students.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Records_of_students and only return the `id`
     * const records_of_studentsWithIdOnly = await prisma.records_of_students.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends records_of_studentsCreateManyAndReturnArgs>(args?: SelectSubset<T, records_of_studentsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$records_of_studentsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Records_of_students.
     * @param {records_of_studentsDeleteArgs} args - Arguments to delete one Records_of_students.
     * @example
     * // Delete one Records_of_students
     * const Records_of_students = await prisma.records_of_students.delete({
     *   where: {
     *     // ... filter to delete one Records_of_students
     *   }
     * })
     * 
     */
    delete<T extends records_of_studentsDeleteArgs>(args: SelectSubset<T, records_of_studentsDeleteArgs<ExtArgs>>): Prisma__records_of_studentsClient<$Result.GetResult<Prisma.$records_of_studentsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Records_of_students.
     * @param {records_of_studentsUpdateArgs} args - Arguments to update one Records_of_students.
     * @example
     * // Update one Records_of_students
     * const records_of_students = await prisma.records_of_students.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends records_of_studentsUpdateArgs>(args: SelectSubset<T, records_of_studentsUpdateArgs<ExtArgs>>): Prisma__records_of_studentsClient<$Result.GetResult<Prisma.$records_of_studentsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Records_of_students.
     * @param {records_of_studentsDeleteManyArgs} args - Arguments to filter Records_of_students to delete.
     * @example
     * // Delete a few Records_of_students
     * const { count } = await prisma.records_of_students.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends records_of_studentsDeleteManyArgs>(args?: SelectSubset<T, records_of_studentsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Records_of_students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {records_of_studentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Records_of_students
     * const records_of_students = await prisma.records_of_students.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends records_of_studentsUpdateManyArgs>(args: SelectSubset<T, records_of_studentsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Records_of_students and returns the data updated in the database.
     * @param {records_of_studentsUpdateManyAndReturnArgs} args - Arguments to update many Records_of_students.
     * @example
     * // Update many Records_of_students
     * const records_of_students = await prisma.records_of_students.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Records_of_students and only return the `id`
     * const records_of_studentsWithIdOnly = await prisma.records_of_students.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends records_of_studentsUpdateManyAndReturnArgs>(args: SelectSubset<T, records_of_studentsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$records_of_studentsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Records_of_students.
     * @param {records_of_studentsUpsertArgs} args - Arguments to update or create a Records_of_students.
     * @example
     * // Update or create a Records_of_students
     * const records_of_students = await prisma.records_of_students.upsert({
     *   create: {
     *     // ... data to create a Records_of_students
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Records_of_students we want to update
     *   }
     * })
     */
    upsert<T extends records_of_studentsUpsertArgs>(args: SelectSubset<T, records_of_studentsUpsertArgs<ExtArgs>>): Prisma__records_of_studentsClient<$Result.GetResult<Prisma.$records_of_studentsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Records_of_students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {records_of_studentsCountArgs} args - Arguments to filter Records_of_students to count.
     * @example
     * // Count the number of Records_of_students
     * const count = await prisma.records_of_students.count({
     *   where: {
     *     // ... the filter for the Records_of_students we want to count
     *   }
     * })
    **/
    count<T extends records_of_studentsCountArgs>(
      args?: Subset<T, records_of_studentsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Records_of_studentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Records_of_students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Records_of_studentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Records_of_studentsAggregateArgs>(args: Subset<T, Records_of_studentsAggregateArgs>): Prisma.PrismaPromise<GetRecords_of_studentsAggregateType<T>>

    /**
     * Group by Records_of_students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {records_of_studentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends records_of_studentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: records_of_studentsGroupByArgs['orderBy'] }
        : { orderBy?: records_of_studentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, records_of_studentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecords_of_studentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the records_of_students model
   */
  readonly fields: records_of_studentsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for records_of_students.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__records_of_studentsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    students<T extends studentsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, studentsDefaultArgs<ExtArgs>>): Prisma__studentsClient<$Result.GetResult<Prisma.$studentsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the records_of_students model
   */
  interface records_of_studentsFieldRefs {
    readonly id: FieldRef<"records_of_students", 'Int'>
    readonly students_id: FieldRef<"records_of_students", 'Int'>
    readonly description: FieldRef<"records_of_students", 'String'>
    readonly title: FieldRef<"records_of_students", 'String'>
    readonly date: FieldRef<"records_of_students", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * records_of_students findUnique
   */
  export type records_of_studentsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the records_of_students
     */
    select?: records_of_studentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the records_of_students
     */
    omit?: records_of_studentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: records_of_studentsInclude<ExtArgs> | null
    /**
     * Filter, which records_of_students to fetch.
     */
    where: records_of_studentsWhereUniqueInput
  }

  /**
   * records_of_students findUniqueOrThrow
   */
  export type records_of_studentsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the records_of_students
     */
    select?: records_of_studentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the records_of_students
     */
    omit?: records_of_studentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: records_of_studentsInclude<ExtArgs> | null
    /**
     * Filter, which records_of_students to fetch.
     */
    where: records_of_studentsWhereUniqueInput
  }

  /**
   * records_of_students findFirst
   */
  export type records_of_studentsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the records_of_students
     */
    select?: records_of_studentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the records_of_students
     */
    omit?: records_of_studentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: records_of_studentsInclude<ExtArgs> | null
    /**
     * Filter, which records_of_students to fetch.
     */
    where?: records_of_studentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of records_of_students to fetch.
     */
    orderBy?: records_of_studentsOrderByWithRelationInput | records_of_studentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for records_of_students.
     */
    cursor?: records_of_studentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` records_of_students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` records_of_students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of records_of_students.
     */
    distinct?: Records_of_studentsScalarFieldEnum | Records_of_studentsScalarFieldEnum[]
  }

  /**
   * records_of_students findFirstOrThrow
   */
  export type records_of_studentsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the records_of_students
     */
    select?: records_of_studentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the records_of_students
     */
    omit?: records_of_studentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: records_of_studentsInclude<ExtArgs> | null
    /**
     * Filter, which records_of_students to fetch.
     */
    where?: records_of_studentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of records_of_students to fetch.
     */
    orderBy?: records_of_studentsOrderByWithRelationInput | records_of_studentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for records_of_students.
     */
    cursor?: records_of_studentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` records_of_students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` records_of_students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of records_of_students.
     */
    distinct?: Records_of_studentsScalarFieldEnum | Records_of_studentsScalarFieldEnum[]
  }

  /**
   * records_of_students findMany
   */
  export type records_of_studentsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the records_of_students
     */
    select?: records_of_studentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the records_of_students
     */
    omit?: records_of_studentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: records_of_studentsInclude<ExtArgs> | null
    /**
     * Filter, which records_of_students to fetch.
     */
    where?: records_of_studentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of records_of_students to fetch.
     */
    orderBy?: records_of_studentsOrderByWithRelationInput | records_of_studentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing records_of_students.
     */
    cursor?: records_of_studentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` records_of_students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` records_of_students.
     */
    skip?: number
    distinct?: Records_of_studentsScalarFieldEnum | Records_of_studentsScalarFieldEnum[]
  }

  /**
   * records_of_students create
   */
  export type records_of_studentsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the records_of_students
     */
    select?: records_of_studentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the records_of_students
     */
    omit?: records_of_studentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: records_of_studentsInclude<ExtArgs> | null
    /**
     * The data needed to create a records_of_students.
     */
    data: XOR<records_of_studentsCreateInput, records_of_studentsUncheckedCreateInput>
  }

  /**
   * records_of_students createMany
   */
  export type records_of_studentsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many records_of_students.
     */
    data: records_of_studentsCreateManyInput | records_of_studentsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * records_of_students createManyAndReturn
   */
  export type records_of_studentsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the records_of_students
     */
    select?: records_of_studentsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the records_of_students
     */
    omit?: records_of_studentsOmit<ExtArgs> | null
    /**
     * The data used to create many records_of_students.
     */
    data: records_of_studentsCreateManyInput | records_of_studentsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: records_of_studentsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * records_of_students update
   */
  export type records_of_studentsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the records_of_students
     */
    select?: records_of_studentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the records_of_students
     */
    omit?: records_of_studentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: records_of_studentsInclude<ExtArgs> | null
    /**
     * The data needed to update a records_of_students.
     */
    data: XOR<records_of_studentsUpdateInput, records_of_studentsUncheckedUpdateInput>
    /**
     * Choose, which records_of_students to update.
     */
    where: records_of_studentsWhereUniqueInput
  }

  /**
   * records_of_students updateMany
   */
  export type records_of_studentsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update records_of_students.
     */
    data: XOR<records_of_studentsUpdateManyMutationInput, records_of_studentsUncheckedUpdateManyInput>
    /**
     * Filter which records_of_students to update
     */
    where?: records_of_studentsWhereInput
    /**
     * Limit how many records_of_students to update.
     */
    limit?: number
  }

  /**
   * records_of_students updateManyAndReturn
   */
  export type records_of_studentsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the records_of_students
     */
    select?: records_of_studentsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the records_of_students
     */
    omit?: records_of_studentsOmit<ExtArgs> | null
    /**
     * The data used to update records_of_students.
     */
    data: XOR<records_of_studentsUpdateManyMutationInput, records_of_studentsUncheckedUpdateManyInput>
    /**
     * Filter which records_of_students to update
     */
    where?: records_of_studentsWhereInput
    /**
     * Limit how many records_of_students to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: records_of_studentsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * records_of_students upsert
   */
  export type records_of_studentsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the records_of_students
     */
    select?: records_of_studentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the records_of_students
     */
    omit?: records_of_studentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: records_of_studentsInclude<ExtArgs> | null
    /**
     * The filter to search for the records_of_students to update in case it exists.
     */
    where: records_of_studentsWhereUniqueInput
    /**
     * In case the records_of_students found by the `where` argument doesn't exist, create a new records_of_students with this data.
     */
    create: XOR<records_of_studentsCreateInput, records_of_studentsUncheckedCreateInput>
    /**
     * In case the records_of_students was found with the provided `where` argument, update it with this data.
     */
    update: XOR<records_of_studentsUpdateInput, records_of_studentsUncheckedUpdateInput>
  }

  /**
   * records_of_students delete
   */
  export type records_of_studentsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the records_of_students
     */
    select?: records_of_studentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the records_of_students
     */
    omit?: records_of_studentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: records_of_studentsInclude<ExtArgs> | null
    /**
     * Filter which records_of_students to delete.
     */
    where: records_of_studentsWhereUniqueInput
  }

  /**
   * records_of_students deleteMany
   */
  export type records_of_studentsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which records_of_students to delete
     */
    where?: records_of_studentsWhereInput
    /**
     * Limit how many records_of_students to delete.
     */
    limit?: number
  }

  /**
   * records_of_students without action
   */
  export type records_of_studentsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the records_of_students
     */
    select?: records_of_studentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the records_of_students
     */
    omit?: records_of_studentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: records_of_studentsInclude<ExtArgs> | null
  }


  /**
   * Model registrations
   */

  export type AggregateRegistrations = {
    _count: RegistrationsCountAggregateOutputType | null
    _avg: RegistrationsAvgAggregateOutputType | null
    _sum: RegistrationsSumAggregateOutputType | null
    _min: RegistrationsMinAggregateOutputType | null
    _max: RegistrationsMaxAggregateOutputType | null
  }

  export type RegistrationsAvgAggregateOutputType = {
    id: number | null
    students_id: number | null
    courses_id: number | null
    monthly_fee_amount: number | null
    created_by: number | null
  }

  export type RegistrationsSumAggregateOutputType = {
    id: number | null
    students_id: number | null
    courses_id: number | null
    monthly_fee_amount: number | null
    created_by: number | null
  }

  export type RegistrationsMinAggregateOutputType = {
    id: number | null
    students_id: number | null
    courses_id: number | null
    start_date: Date | null
    end_date: Date | null
    monthly_fee_amount: number | null
    created_by: number | null
    created_at: Date | null
    locked: boolean | null
    completed: boolean | null
  }

  export type RegistrationsMaxAggregateOutputType = {
    id: number | null
    students_id: number | null
    courses_id: number | null
    start_date: Date | null
    end_date: Date | null
    monthly_fee_amount: number | null
    created_by: number | null
    created_at: Date | null
    locked: boolean | null
    completed: boolean | null
  }

  export type RegistrationsCountAggregateOutputType = {
    id: number
    students_id: number
    courses_id: number
    start_date: number
    end_date: number
    monthly_fee_amount: number
    created_by: number
    created_at: number
    locked: number
    completed: number
    _all: number
  }


  export type RegistrationsAvgAggregateInputType = {
    id?: true
    students_id?: true
    courses_id?: true
    monthly_fee_amount?: true
    created_by?: true
  }

  export type RegistrationsSumAggregateInputType = {
    id?: true
    students_id?: true
    courses_id?: true
    monthly_fee_amount?: true
    created_by?: true
  }

  export type RegistrationsMinAggregateInputType = {
    id?: true
    students_id?: true
    courses_id?: true
    start_date?: true
    end_date?: true
    monthly_fee_amount?: true
    created_by?: true
    created_at?: true
    locked?: true
    completed?: true
  }

  export type RegistrationsMaxAggregateInputType = {
    id?: true
    students_id?: true
    courses_id?: true
    start_date?: true
    end_date?: true
    monthly_fee_amount?: true
    created_by?: true
    created_at?: true
    locked?: true
    completed?: true
  }

  export type RegistrationsCountAggregateInputType = {
    id?: true
    students_id?: true
    courses_id?: true
    start_date?: true
    end_date?: true
    monthly_fee_amount?: true
    created_by?: true
    created_at?: true
    locked?: true
    completed?: true
    _all?: true
  }

  export type RegistrationsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which registrations to aggregate.
     */
    where?: registrationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of registrations to fetch.
     */
    orderBy?: registrationsOrderByWithRelationInput | registrationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: registrationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` registrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` registrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned registrations
    **/
    _count?: true | RegistrationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RegistrationsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RegistrationsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RegistrationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RegistrationsMaxAggregateInputType
  }

  export type GetRegistrationsAggregateType<T extends RegistrationsAggregateArgs> = {
        [P in keyof T & keyof AggregateRegistrations]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRegistrations[P]>
      : GetScalarType<T[P], AggregateRegistrations[P]>
  }




  export type registrationsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: registrationsWhereInput
    orderBy?: registrationsOrderByWithAggregationInput | registrationsOrderByWithAggregationInput[]
    by: RegistrationsScalarFieldEnum[] | RegistrationsScalarFieldEnum
    having?: registrationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RegistrationsCountAggregateInputType | true
    _avg?: RegistrationsAvgAggregateInputType
    _sum?: RegistrationsSumAggregateInputType
    _min?: RegistrationsMinAggregateInputType
    _max?: RegistrationsMaxAggregateInputType
  }

  export type RegistrationsGroupByOutputType = {
    id: number
    students_id: number
    courses_id: number
    start_date: Date
    end_date: Date
    monthly_fee_amount: number | null
    created_by: number | null
    created_at: Date | null
    locked: boolean | null
    completed: boolean | null
    _count: RegistrationsCountAggregateOutputType | null
    _avg: RegistrationsAvgAggregateOutputType | null
    _sum: RegistrationsSumAggregateOutputType | null
    _min: RegistrationsMinAggregateOutputType | null
    _max: RegistrationsMaxAggregateOutputType | null
  }

  type GetRegistrationsGroupByPayload<T extends registrationsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RegistrationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RegistrationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RegistrationsGroupByOutputType[P]>
            : GetScalarType<T[P], RegistrationsGroupByOutputType[P]>
        }
      >
    >


  export type registrationsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    students_id?: boolean
    courses_id?: boolean
    start_date?: boolean
    end_date?: boolean
    monthly_fee_amount?: boolean
    created_by?: boolean
    created_at?: boolean
    locked?: boolean
    completed?: boolean
    monthly_fee?: boolean | registrations$monthly_feeArgs<ExtArgs>
    courses?: boolean | coursesDefaultArgs<ExtArgs>
    students?: boolean | studentsDefaultArgs<ExtArgs>
    students_has_classrooms?: boolean | registrations$students_has_classroomsArgs<ExtArgs>
    tasks?: boolean | registrations$tasksArgs<ExtArgs>
    _count?: boolean | RegistrationsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["registrations"]>

  export type registrationsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    students_id?: boolean
    courses_id?: boolean
    start_date?: boolean
    end_date?: boolean
    monthly_fee_amount?: boolean
    created_by?: boolean
    created_at?: boolean
    locked?: boolean
    completed?: boolean
    courses?: boolean | coursesDefaultArgs<ExtArgs>
    students?: boolean | studentsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["registrations"]>

  export type registrationsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    students_id?: boolean
    courses_id?: boolean
    start_date?: boolean
    end_date?: boolean
    monthly_fee_amount?: boolean
    created_by?: boolean
    created_at?: boolean
    locked?: boolean
    completed?: boolean
    courses?: boolean | coursesDefaultArgs<ExtArgs>
    students?: boolean | studentsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["registrations"]>

  export type registrationsSelectScalar = {
    id?: boolean
    students_id?: boolean
    courses_id?: boolean
    start_date?: boolean
    end_date?: boolean
    monthly_fee_amount?: boolean
    created_by?: boolean
    created_at?: boolean
    locked?: boolean
    completed?: boolean
  }

  export type registrationsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "students_id" | "courses_id" | "start_date" | "end_date" | "monthly_fee_amount" | "created_by" | "created_at" | "locked" | "completed", ExtArgs["result"]["registrations"]>
  export type registrationsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    monthly_fee?: boolean | registrations$monthly_feeArgs<ExtArgs>
    courses?: boolean | coursesDefaultArgs<ExtArgs>
    students?: boolean | studentsDefaultArgs<ExtArgs>
    students_has_classrooms?: boolean | registrations$students_has_classroomsArgs<ExtArgs>
    tasks?: boolean | registrations$tasksArgs<ExtArgs>
    _count?: boolean | RegistrationsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type registrationsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    courses?: boolean | coursesDefaultArgs<ExtArgs>
    students?: boolean | studentsDefaultArgs<ExtArgs>
  }
  export type registrationsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    courses?: boolean | coursesDefaultArgs<ExtArgs>
    students?: boolean | studentsDefaultArgs<ExtArgs>
  }

  export type $registrationsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "registrations"
    objects: {
      monthly_fee: Prisma.$monthly_feePayload<ExtArgs>[]
      courses: Prisma.$coursesPayload<ExtArgs>
      students: Prisma.$studentsPayload<ExtArgs>
      students_has_classrooms: Prisma.$students_has_classroomsPayload<ExtArgs> | null
      tasks: Prisma.$tasksPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      students_id: number
      courses_id: number
      start_date: Date
      end_date: Date
      monthly_fee_amount: number | null
      created_by: number | null
      created_at: Date | null
      locked: boolean | null
      completed: boolean | null
    }, ExtArgs["result"]["registrations"]>
    composites: {}
  }

  type registrationsGetPayload<S extends boolean | null | undefined | registrationsDefaultArgs> = $Result.GetResult<Prisma.$registrationsPayload, S>

  type registrationsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<registrationsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RegistrationsCountAggregateInputType | true
    }

  export interface registrationsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['registrations'], meta: { name: 'registrations' } }
    /**
     * Find zero or one Registrations that matches the filter.
     * @param {registrationsFindUniqueArgs} args - Arguments to find a Registrations
     * @example
     * // Get one Registrations
     * const registrations = await prisma.registrations.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends registrationsFindUniqueArgs>(args: SelectSubset<T, registrationsFindUniqueArgs<ExtArgs>>): Prisma__registrationsClient<$Result.GetResult<Prisma.$registrationsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Registrations that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {registrationsFindUniqueOrThrowArgs} args - Arguments to find a Registrations
     * @example
     * // Get one Registrations
     * const registrations = await prisma.registrations.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends registrationsFindUniqueOrThrowArgs>(args: SelectSubset<T, registrationsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__registrationsClient<$Result.GetResult<Prisma.$registrationsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Registrations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {registrationsFindFirstArgs} args - Arguments to find a Registrations
     * @example
     * // Get one Registrations
     * const registrations = await prisma.registrations.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends registrationsFindFirstArgs>(args?: SelectSubset<T, registrationsFindFirstArgs<ExtArgs>>): Prisma__registrationsClient<$Result.GetResult<Prisma.$registrationsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Registrations that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {registrationsFindFirstOrThrowArgs} args - Arguments to find a Registrations
     * @example
     * // Get one Registrations
     * const registrations = await prisma.registrations.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends registrationsFindFirstOrThrowArgs>(args?: SelectSubset<T, registrationsFindFirstOrThrowArgs<ExtArgs>>): Prisma__registrationsClient<$Result.GetResult<Prisma.$registrationsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Registrations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {registrationsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Registrations
     * const registrations = await prisma.registrations.findMany()
     * 
     * // Get first 10 Registrations
     * const registrations = await prisma.registrations.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const registrationsWithIdOnly = await prisma.registrations.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends registrationsFindManyArgs>(args?: SelectSubset<T, registrationsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$registrationsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Registrations.
     * @param {registrationsCreateArgs} args - Arguments to create a Registrations.
     * @example
     * // Create one Registrations
     * const Registrations = await prisma.registrations.create({
     *   data: {
     *     // ... data to create a Registrations
     *   }
     * })
     * 
     */
    create<T extends registrationsCreateArgs>(args: SelectSubset<T, registrationsCreateArgs<ExtArgs>>): Prisma__registrationsClient<$Result.GetResult<Prisma.$registrationsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Registrations.
     * @param {registrationsCreateManyArgs} args - Arguments to create many Registrations.
     * @example
     * // Create many Registrations
     * const registrations = await prisma.registrations.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends registrationsCreateManyArgs>(args?: SelectSubset<T, registrationsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Registrations and returns the data saved in the database.
     * @param {registrationsCreateManyAndReturnArgs} args - Arguments to create many Registrations.
     * @example
     * // Create many Registrations
     * const registrations = await prisma.registrations.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Registrations and only return the `id`
     * const registrationsWithIdOnly = await prisma.registrations.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends registrationsCreateManyAndReturnArgs>(args?: SelectSubset<T, registrationsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$registrationsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Registrations.
     * @param {registrationsDeleteArgs} args - Arguments to delete one Registrations.
     * @example
     * // Delete one Registrations
     * const Registrations = await prisma.registrations.delete({
     *   where: {
     *     // ... filter to delete one Registrations
     *   }
     * })
     * 
     */
    delete<T extends registrationsDeleteArgs>(args: SelectSubset<T, registrationsDeleteArgs<ExtArgs>>): Prisma__registrationsClient<$Result.GetResult<Prisma.$registrationsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Registrations.
     * @param {registrationsUpdateArgs} args - Arguments to update one Registrations.
     * @example
     * // Update one Registrations
     * const registrations = await prisma.registrations.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends registrationsUpdateArgs>(args: SelectSubset<T, registrationsUpdateArgs<ExtArgs>>): Prisma__registrationsClient<$Result.GetResult<Prisma.$registrationsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Registrations.
     * @param {registrationsDeleteManyArgs} args - Arguments to filter Registrations to delete.
     * @example
     * // Delete a few Registrations
     * const { count } = await prisma.registrations.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends registrationsDeleteManyArgs>(args?: SelectSubset<T, registrationsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Registrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {registrationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Registrations
     * const registrations = await prisma.registrations.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends registrationsUpdateManyArgs>(args: SelectSubset<T, registrationsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Registrations and returns the data updated in the database.
     * @param {registrationsUpdateManyAndReturnArgs} args - Arguments to update many Registrations.
     * @example
     * // Update many Registrations
     * const registrations = await prisma.registrations.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Registrations and only return the `id`
     * const registrationsWithIdOnly = await prisma.registrations.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends registrationsUpdateManyAndReturnArgs>(args: SelectSubset<T, registrationsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$registrationsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Registrations.
     * @param {registrationsUpsertArgs} args - Arguments to update or create a Registrations.
     * @example
     * // Update or create a Registrations
     * const registrations = await prisma.registrations.upsert({
     *   create: {
     *     // ... data to create a Registrations
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Registrations we want to update
     *   }
     * })
     */
    upsert<T extends registrationsUpsertArgs>(args: SelectSubset<T, registrationsUpsertArgs<ExtArgs>>): Prisma__registrationsClient<$Result.GetResult<Prisma.$registrationsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Registrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {registrationsCountArgs} args - Arguments to filter Registrations to count.
     * @example
     * // Count the number of Registrations
     * const count = await prisma.registrations.count({
     *   where: {
     *     // ... the filter for the Registrations we want to count
     *   }
     * })
    **/
    count<T extends registrationsCountArgs>(
      args?: Subset<T, registrationsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RegistrationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Registrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistrationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RegistrationsAggregateArgs>(args: Subset<T, RegistrationsAggregateArgs>): Prisma.PrismaPromise<GetRegistrationsAggregateType<T>>

    /**
     * Group by Registrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {registrationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends registrationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: registrationsGroupByArgs['orderBy'] }
        : { orderBy?: registrationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, registrationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRegistrationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the registrations model
   */
  readonly fields: registrationsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for registrations.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__registrationsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    monthly_fee<T extends registrations$monthly_feeArgs<ExtArgs> = {}>(args?: Subset<T, registrations$monthly_feeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$monthly_feePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    courses<T extends coursesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, coursesDefaultArgs<ExtArgs>>): Prisma__coursesClient<$Result.GetResult<Prisma.$coursesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    students<T extends studentsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, studentsDefaultArgs<ExtArgs>>): Prisma__studentsClient<$Result.GetResult<Prisma.$studentsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    students_has_classrooms<T extends registrations$students_has_classroomsArgs<ExtArgs> = {}>(args?: Subset<T, registrations$students_has_classroomsArgs<ExtArgs>>): Prisma__students_has_classroomsClient<$Result.GetResult<Prisma.$students_has_classroomsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    tasks<T extends registrations$tasksArgs<ExtArgs> = {}>(args?: Subset<T, registrations$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the registrations model
   */
  interface registrationsFieldRefs {
    readonly id: FieldRef<"registrations", 'Int'>
    readonly students_id: FieldRef<"registrations", 'Int'>
    readonly courses_id: FieldRef<"registrations", 'Int'>
    readonly start_date: FieldRef<"registrations", 'DateTime'>
    readonly end_date: FieldRef<"registrations", 'DateTime'>
    readonly monthly_fee_amount: FieldRef<"registrations", 'Float'>
    readonly created_by: FieldRef<"registrations", 'Int'>
    readonly created_at: FieldRef<"registrations", 'DateTime'>
    readonly locked: FieldRef<"registrations", 'Boolean'>
    readonly completed: FieldRef<"registrations", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * registrations findUnique
   */
  export type registrationsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registrations
     */
    select?: registrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the registrations
     */
    omit?: registrationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registrationsInclude<ExtArgs> | null
    /**
     * Filter, which registrations to fetch.
     */
    where: registrationsWhereUniqueInput
  }

  /**
   * registrations findUniqueOrThrow
   */
  export type registrationsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registrations
     */
    select?: registrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the registrations
     */
    omit?: registrationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registrationsInclude<ExtArgs> | null
    /**
     * Filter, which registrations to fetch.
     */
    where: registrationsWhereUniqueInput
  }

  /**
   * registrations findFirst
   */
  export type registrationsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registrations
     */
    select?: registrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the registrations
     */
    omit?: registrationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registrationsInclude<ExtArgs> | null
    /**
     * Filter, which registrations to fetch.
     */
    where?: registrationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of registrations to fetch.
     */
    orderBy?: registrationsOrderByWithRelationInput | registrationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for registrations.
     */
    cursor?: registrationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` registrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` registrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of registrations.
     */
    distinct?: RegistrationsScalarFieldEnum | RegistrationsScalarFieldEnum[]
  }

  /**
   * registrations findFirstOrThrow
   */
  export type registrationsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registrations
     */
    select?: registrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the registrations
     */
    omit?: registrationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registrationsInclude<ExtArgs> | null
    /**
     * Filter, which registrations to fetch.
     */
    where?: registrationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of registrations to fetch.
     */
    orderBy?: registrationsOrderByWithRelationInput | registrationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for registrations.
     */
    cursor?: registrationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` registrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` registrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of registrations.
     */
    distinct?: RegistrationsScalarFieldEnum | RegistrationsScalarFieldEnum[]
  }

  /**
   * registrations findMany
   */
  export type registrationsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registrations
     */
    select?: registrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the registrations
     */
    omit?: registrationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registrationsInclude<ExtArgs> | null
    /**
     * Filter, which registrations to fetch.
     */
    where?: registrationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of registrations to fetch.
     */
    orderBy?: registrationsOrderByWithRelationInput | registrationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing registrations.
     */
    cursor?: registrationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` registrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` registrations.
     */
    skip?: number
    distinct?: RegistrationsScalarFieldEnum | RegistrationsScalarFieldEnum[]
  }

  /**
   * registrations create
   */
  export type registrationsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registrations
     */
    select?: registrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the registrations
     */
    omit?: registrationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registrationsInclude<ExtArgs> | null
    /**
     * The data needed to create a registrations.
     */
    data: XOR<registrationsCreateInput, registrationsUncheckedCreateInput>
  }

  /**
   * registrations createMany
   */
  export type registrationsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many registrations.
     */
    data: registrationsCreateManyInput | registrationsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * registrations createManyAndReturn
   */
  export type registrationsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registrations
     */
    select?: registrationsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the registrations
     */
    omit?: registrationsOmit<ExtArgs> | null
    /**
     * The data used to create many registrations.
     */
    data: registrationsCreateManyInput | registrationsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registrationsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * registrations update
   */
  export type registrationsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registrations
     */
    select?: registrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the registrations
     */
    omit?: registrationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registrationsInclude<ExtArgs> | null
    /**
     * The data needed to update a registrations.
     */
    data: XOR<registrationsUpdateInput, registrationsUncheckedUpdateInput>
    /**
     * Choose, which registrations to update.
     */
    where: registrationsWhereUniqueInput
  }

  /**
   * registrations updateMany
   */
  export type registrationsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update registrations.
     */
    data: XOR<registrationsUpdateManyMutationInput, registrationsUncheckedUpdateManyInput>
    /**
     * Filter which registrations to update
     */
    where?: registrationsWhereInput
    /**
     * Limit how many registrations to update.
     */
    limit?: number
  }

  /**
   * registrations updateManyAndReturn
   */
  export type registrationsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registrations
     */
    select?: registrationsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the registrations
     */
    omit?: registrationsOmit<ExtArgs> | null
    /**
     * The data used to update registrations.
     */
    data: XOR<registrationsUpdateManyMutationInput, registrationsUncheckedUpdateManyInput>
    /**
     * Filter which registrations to update
     */
    where?: registrationsWhereInput
    /**
     * Limit how many registrations to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registrationsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * registrations upsert
   */
  export type registrationsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registrations
     */
    select?: registrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the registrations
     */
    omit?: registrationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registrationsInclude<ExtArgs> | null
    /**
     * The filter to search for the registrations to update in case it exists.
     */
    where: registrationsWhereUniqueInput
    /**
     * In case the registrations found by the `where` argument doesn't exist, create a new registrations with this data.
     */
    create: XOR<registrationsCreateInput, registrationsUncheckedCreateInput>
    /**
     * In case the registrations was found with the provided `where` argument, update it with this data.
     */
    update: XOR<registrationsUpdateInput, registrationsUncheckedUpdateInput>
  }

  /**
   * registrations delete
   */
  export type registrationsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registrations
     */
    select?: registrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the registrations
     */
    omit?: registrationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registrationsInclude<ExtArgs> | null
    /**
     * Filter which registrations to delete.
     */
    where: registrationsWhereUniqueInput
  }

  /**
   * registrations deleteMany
   */
  export type registrationsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which registrations to delete
     */
    where?: registrationsWhereInput
    /**
     * Limit how many registrations to delete.
     */
    limit?: number
  }

  /**
   * registrations.monthly_fee
   */
  export type registrations$monthly_feeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the monthly_fee
     */
    select?: monthly_feeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the monthly_fee
     */
    omit?: monthly_feeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: monthly_feeInclude<ExtArgs> | null
    where?: monthly_feeWhereInput
    orderBy?: monthly_feeOrderByWithRelationInput | monthly_feeOrderByWithRelationInput[]
    cursor?: monthly_feeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Monthly_feeScalarFieldEnum | Monthly_feeScalarFieldEnum[]
  }

  /**
   * registrations.students_has_classrooms
   */
  export type registrations$students_has_classroomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the students_has_classrooms
     */
    select?: students_has_classroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the students_has_classrooms
     */
    omit?: students_has_classroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: students_has_classroomsInclude<ExtArgs> | null
    where?: students_has_classroomsWhereInput
  }

  /**
   * registrations.tasks
   */
  export type registrations$tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tasks
     */
    omit?: tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    where?: tasksWhereInput
    orderBy?: tasksOrderByWithRelationInput | tasksOrderByWithRelationInput[]
    cursor?: tasksWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TasksScalarFieldEnum | TasksScalarFieldEnum[]
  }

  /**
   * registrations without action
   */
  export type registrationsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registrations
     */
    select?: registrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the registrations
     */
    omit?: registrationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registrationsInclude<ExtArgs> | null
  }


  /**
   * Model role
   */

  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleAvgAggregateOutputType = {
    id: number | null
  }

  export type RoleSumAggregateOutputType = {
    id: number | null
  }

  export type RoleMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type RoleMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type RoleCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type RoleAvgAggregateInputType = {
    id?: true
  }

  export type RoleSumAggregateInputType = {
    id?: true
  }

  export type RoleMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type RoleMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type RoleCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type RoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which role to aggregate.
     */
    where?: roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     */
    orderBy?: roleOrderByWithRelationInput | roleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type roleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: roleWhereInput
    orderBy?: roleOrderByWithAggregationInput | roleOrderByWithAggregationInput[]
    by: RoleScalarFieldEnum[] | RoleScalarFieldEnum
    having?: roleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _avg?: RoleAvgAggregateInputType
    _sum?: RoleSumAggregateInputType
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }

  export type RoleGroupByOutputType = {
    id: number
    name: string
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends roleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type roleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    professionals?: boolean | role$professionalsArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["role"]>

  export type roleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["role"]>

  export type roleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["role"]>

  export type roleSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type roleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["role"]>
  export type roleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    professionals?: boolean | role$professionalsArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type roleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type roleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $rolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "role"
    objects: {
      professionals: Prisma.$professionalsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["role"]>
    composites: {}
  }

  type roleGetPayload<S extends boolean | null | undefined | roleDefaultArgs> = $Result.GetResult<Prisma.$rolePayload, S>

  type roleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<roleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoleCountAggregateInputType | true
    }

  export interface roleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['role'], meta: { name: 'role' } }
    /**
     * Find zero or one Role that matches the filter.
     * @param {roleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends roleFindUniqueArgs>(args: SelectSubset<T, roleFindUniqueArgs<ExtArgs>>): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Role that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {roleFindUniqueOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends roleFindUniqueOrThrowArgs>(args: SelectSubset<T, roleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends roleFindFirstArgs>(args?: SelectSubset<T, roleFindFirstArgs<ExtArgs>>): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Role that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roleFindFirstOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends roleFindFirstOrThrowArgs>(args?: SelectSubset<T, roleFindFirstOrThrowArgs<ExtArgs>>): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roleWithIdOnly = await prisma.role.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends roleFindManyArgs>(args?: SelectSubset<T, roleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Role.
     * @param {roleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
     */
    create<T extends roleCreateArgs>(args: SelectSubset<T, roleCreateArgs<ExtArgs>>): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Roles.
     * @param {roleCreateManyArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends roleCreateManyArgs>(args?: SelectSubset<T, roleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Roles and returns the data saved in the database.
     * @param {roleCreateManyAndReturnArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Roles and only return the `id`
     * const roleWithIdOnly = await prisma.role.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends roleCreateManyAndReturnArgs>(args?: SelectSubset<T, roleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Role.
     * @param {roleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
     */
    delete<T extends roleDeleteArgs>(args: SelectSubset<T, roleDeleteArgs<ExtArgs>>): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Role.
     * @param {roleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends roleUpdateArgs>(args: SelectSubset<T, roleUpdateArgs<ExtArgs>>): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Roles.
     * @param {roleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends roleDeleteManyArgs>(args?: SelectSubset<T, roleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends roleUpdateManyArgs>(args: SelectSubset<T, roleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles and returns the data updated in the database.
     * @param {roleUpdateManyAndReturnArgs} args - Arguments to update many Roles.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Roles and only return the `id`
     * const roleWithIdOnly = await prisma.role.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends roleUpdateManyAndReturnArgs>(args: SelectSubset<T, roleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Role.
     * @param {roleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
     */
    upsert<T extends roleUpsertArgs>(args: SelectSubset<T, roleUpsertArgs<ExtArgs>>): Prisma__roleClient<$Result.GetResult<Prisma.$rolePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends roleCountArgs>(
      args?: Subset<T, roleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): Prisma.PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {roleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends roleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: roleGroupByArgs['orderBy'] }
        : { orderBy?: roleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, roleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the role model
   */
  readonly fields: roleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__roleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    professionals<T extends role$professionalsArgs<ExtArgs> = {}>(args?: Subset<T, role$professionalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$professionalsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the role model
   */
  interface roleFieldRefs {
    readonly id: FieldRef<"role", 'Int'>
    readonly name: FieldRef<"role", 'String'>
  }
    

  // Custom InputTypes
  /**
   * role findUnique
   */
  export type roleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the role
     */
    omit?: roleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * Filter, which role to fetch.
     */
    where: roleWhereUniqueInput
  }

  /**
   * role findUniqueOrThrow
   */
  export type roleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the role
     */
    omit?: roleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * Filter, which role to fetch.
     */
    where: roleWhereUniqueInput
  }

  /**
   * role findFirst
   */
  export type roleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the role
     */
    omit?: roleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * Filter, which role to fetch.
     */
    where?: roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     */
    orderBy?: roleOrderByWithRelationInput | roleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for roles.
     */
    cursor?: roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * role findFirstOrThrow
   */
  export type roleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the role
     */
    omit?: roleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * Filter, which role to fetch.
     */
    where?: roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     */
    orderBy?: roleOrderByWithRelationInput | roleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for roles.
     */
    cursor?: roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * role findMany
   */
  export type roleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the role
     */
    omit?: roleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * Filter, which roles to fetch.
     */
    where?: roleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of roles to fetch.
     */
    orderBy?: roleOrderByWithRelationInput | roleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing roles.
     */
    cursor?: roleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` roles.
     */
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * role create
   */
  export type roleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the role
     */
    omit?: roleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * The data needed to create a role.
     */
    data: XOR<roleCreateInput, roleUncheckedCreateInput>
  }

  /**
   * role createMany
   */
  export type roleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many roles.
     */
    data: roleCreateManyInput | roleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * role createManyAndReturn
   */
  export type roleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the role
     */
    omit?: roleOmit<ExtArgs> | null
    /**
     * The data used to create many roles.
     */
    data: roleCreateManyInput | roleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * role update
   */
  export type roleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the role
     */
    omit?: roleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * The data needed to update a role.
     */
    data: XOR<roleUpdateInput, roleUncheckedUpdateInput>
    /**
     * Choose, which role to update.
     */
    where: roleWhereUniqueInput
  }

  /**
   * role updateMany
   */
  export type roleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update roles.
     */
    data: XOR<roleUpdateManyMutationInput, roleUncheckedUpdateManyInput>
    /**
     * Filter which roles to update
     */
    where?: roleWhereInput
    /**
     * Limit how many roles to update.
     */
    limit?: number
  }

  /**
   * role updateManyAndReturn
   */
  export type roleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the role
     */
    omit?: roleOmit<ExtArgs> | null
    /**
     * The data used to update roles.
     */
    data: XOR<roleUpdateManyMutationInput, roleUncheckedUpdateManyInput>
    /**
     * Filter which roles to update
     */
    where?: roleWhereInput
    /**
     * Limit how many roles to update.
     */
    limit?: number
  }

  /**
   * role upsert
   */
  export type roleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the role
     */
    omit?: roleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * The filter to search for the role to update in case it exists.
     */
    where: roleWhereUniqueInput
    /**
     * In case the role found by the `where` argument doesn't exist, create a new role with this data.
     */
    create: XOR<roleCreateInput, roleUncheckedCreateInput>
    /**
     * In case the role was found with the provided `where` argument, update it with this data.
     */
    update: XOR<roleUpdateInput, roleUncheckedUpdateInput>
  }

  /**
   * role delete
   */
  export type roleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the role
     */
    omit?: roleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roleInclude<ExtArgs> | null
    /**
     * Filter which role to delete.
     */
    where: roleWhereUniqueInput
  }

  /**
   * role deleteMany
   */
  export type roleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which roles to delete
     */
    where?: roleWhereInput
    /**
     * Limit how many roles to delete.
     */
    limit?: number
  }

  /**
   * role.professionals
   */
  export type role$professionalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the professionals
     */
    select?: professionalsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the professionals
     */
    omit?: professionalsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: professionalsInclude<ExtArgs> | null
    where?: professionalsWhereInput
    orderBy?: professionalsOrderByWithRelationInput | professionalsOrderByWithRelationInput[]
    cursor?: professionalsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfessionalsScalarFieldEnum | ProfessionalsScalarFieldEnum[]
  }

  /**
   * role without action
   */
  export type roleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the role
     */
    select?: roleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the role
     */
    omit?: roleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: roleInclude<ExtArgs> | null
  }


  /**
   * Model students
   */

  export type AggregateStudents = {
    _count: StudentsCountAggregateOutputType | null
    _avg: StudentsAvgAggregateOutputType | null
    _sum: StudentsSumAggregateOutputType | null
    _min: StudentsMinAggregateOutputType | null
    _max: StudentsMaxAggregateOutputType | null
  }

  export type StudentsAvgAggregateOutputType = {
    id: number | null
    adresses_id: number | null
    created_by: number | null
    updated_by: number | null
  }

  export type StudentsSumAggregateOutputType = {
    id: number | null
    adresses_id: number | null
    created_by: number | null
    updated_by: number | null
  }

  export type StudentsMinAggregateOutputType = {
    id: number | null
    adresses_id: number | null
    email: string | null
    name: string | null
    first_name: string | null
    last_name: string | null
    cpf: string | null
    phone: string | null
    gender: string | null
    date_of_birth: Date | null
    password: string | null
    user: string | null
    created_at: Date | null
    created_by: number | null
    avatar_url: string | null
    updated_at: Date | null
    updated_by: number | null
    active: boolean | null
  }

  export type StudentsMaxAggregateOutputType = {
    id: number | null
    adresses_id: number | null
    email: string | null
    name: string | null
    first_name: string | null
    last_name: string | null
    cpf: string | null
    phone: string | null
    gender: string | null
    date_of_birth: Date | null
    password: string | null
    user: string | null
    created_at: Date | null
    created_by: number | null
    avatar_url: string | null
    updated_at: Date | null
    updated_by: number | null
    active: boolean | null
  }

  export type StudentsCountAggregateOutputType = {
    id: number
    adresses_id: number
    email: number
    name: number
    first_name: number
    last_name: number
    cpf: number
    phone: number
    gender: number
    date_of_birth: number
    password: number
    user: number
    created_at: number
    created_by: number
    avatar_url: number
    updated_at: number
    updated_by: number
    active: number
    _all: number
  }


  export type StudentsAvgAggregateInputType = {
    id?: true
    adresses_id?: true
    created_by?: true
    updated_by?: true
  }

  export type StudentsSumAggregateInputType = {
    id?: true
    adresses_id?: true
    created_by?: true
    updated_by?: true
  }

  export type StudentsMinAggregateInputType = {
    id?: true
    adresses_id?: true
    email?: true
    name?: true
    first_name?: true
    last_name?: true
    cpf?: true
    phone?: true
    gender?: true
    date_of_birth?: true
    password?: true
    user?: true
    created_at?: true
    created_by?: true
    avatar_url?: true
    updated_at?: true
    updated_by?: true
    active?: true
  }

  export type StudentsMaxAggregateInputType = {
    id?: true
    adresses_id?: true
    email?: true
    name?: true
    first_name?: true
    last_name?: true
    cpf?: true
    phone?: true
    gender?: true
    date_of_birth?: true
    password?: true
    user?: true
    created_at?: true
    created_by?: true
    avatar_url?: true
    updated_at?: true
    updated_by?: true
    active?: true
  }

  export type StudentsCountAggregateInputType = {
    id?: true
    adresses_id?: true
    email?: true
    name?: true
    first_name?: true
    last_name?: true
    cpf?: true
    phone?: true
    gender?: true
    date_of_birth?: true
    password?: true
    user?: true
    created_at?: true
    created_by?: true
    avatar_url?: true
    updated_at?: true
    updated_by?: true
    active?: true
    _all?: true
  }

  export type StudentsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which students to aggregate.
     */
    where?: studentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of students to fetch.
     */
    orderBy?: studentsOrderByWithRelationInput | studentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: studentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned students
    **/
    _count?: true | StudentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentsMaxAggregateInputType
  }

  export type GetStudentsAggregateType<T extends StudentsAggregateArgs> = {
        [P in keyof T & keyof AggregateStudents]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudents[P]>
      : GetScalarType<T[P], AggregateStudents[P]>
  }




  export type studentsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: studentsWhereInput
    orderBy?: studentsOrderByWithAggregationInput | studentsOrderByWithAggregationInput[]
    by: StudentsScalarFieldEnum[] | StudentsScalarFieldEnum
    having?: studentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentsCountAggregateInputType | true
    _avg?: StudentsAvgAggregateInputType
    _sum?: StudentsSumAggregateInputType
    _min?: StudentsMinAggregateInputType
    _max?: StudentsMaxAggregateInputType
  }

  export type StudentsGroupByOutputType = {
    id: number
    adresses_id: number
    email: string
    name: string | null
    first_name: string
    last_name: string
    cpf: string
    phone: string
    gender: string
    date_of_birth: Date
    password: string
    user: string
    created_at: Date | null
    created_by: number | null
    avatar_url: string | null
    updated_at: Date | null
    updated_by: number | null
    active: boolean
    _count: StudentsCountAggregateOutputType | null
    _avg: StudentsAvgAggregateOutputType | null
    _sum: StudentsSumAggregateOutputType | null
    _min: StudentsMinAggregateOutputType | null
    _max: StudentsMaxAggregateOutputType | null
  }

  type GetStudentsGroupByPayload<T extends studentsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentsGroupByOutputType[P]>
            : GetScalarType<T[P], StudentsGroupByOutputType[P]>
        }
      >
    >


  export type studentsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    adresses_id?: boolean
    email?: boolean
    name?: boolean
    first_name?: boolean
    last_name?: boolean
    cpf?: boolean
    phone?: boolean
    gender?: boolean
    date_of_birth?: boolean
    password?: boolean
    user?: boolean
    created_at?: boolean
    created_by?: boolean
    avatar_url?: boolean
    updated_at?: boolean
    updated_by?: boolean
    active?: boolean
    records_of_students?: boolean | students$records_of_studentsArgs<ExtArgs>
    registrations?: boolean | students$registrationsArgs<ExtArgs>
    adresses?: boolean | adressesDefaultArgs<ExtArgs>
    _count?: boolean | StudentsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["students"]>

  export type studentsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    adresses_id?: boolean
    email?: boolean
    name?: boolean
    first_name?: boolean
    last_name?: boolean
    cpf?: boolean
    phone?: boolean
    gender?: boolean
    date_of_birth?: boolean
    password?: boolean
    user?: boolean
    created_at?: boolean
    created_by?: boolean
    avatar_url?: boolean
    updated_at?: boolean
    updated_by?: boolean
    active?: boolean
    adresses?: boolean | adressesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["students"]>

  export type studentsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    adresses_id?: boolean
    email?: boolean
    name?: boolean
    first_name?: boolean
    last_name?: boolean
    cpf?: boolean
    phone?: boolean
    gender?: boolean
    date_of_birth?: boolean
    password?: boolean
    user?: boolean
    created_at?: boolean
    created_by?: boolean
    avatar_url?: boolean
    updated_at?: boolean
    updated_by?: boolean
    active?: boolean
    adresses?: boolean | adressesDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["students"]>

  export type studentsSelectScalar = {
    id?: boolean
    adresses_id?: boolean
    email?: boolean
    name?: boolean
    first_name?: boolean
    last_name?: boolean
    cpf?: boolean
    phone?: boolean
    gender?: boolean
    date_of_birth?: boolean
    password?: boolean
    user?: boolean
    created_at?: boolean
    created_by?: boolean
    avatar_url?: boolean
    updated_at?: boolean
    updated_by?: boolean
    active?: boolean
  }

  export type studentsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "adresses_id" | "email" | "name" | "first_name" | "last_name" | "cpf" | "phone" | "gender" | "date_of_birth" | "password" | "user" | "created_at" | "created_by" | "avatar_url" | "updated_at" | "updated_by" | "active", ExtArgs["result"]["students"]>
  export type studentsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    records_of_students?: boolean | students$records_of_studentsArgs<ExtArgs>
    registrations?: boolean | students$registrationsArgs<ExtArgs>
    adresses?: boolean | adressesDefaultArgs<ExtArgs>
    _count?: boolean | StudentsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type studentsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    adresses?: boolean | adressesDefaultArgs<ExtArgs>
  }
  export type studentsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    adresses?: boolean | adressesDefaultArgs<ExtArgs>
  }

  export type $studentsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "students"
    objects: {
      records_of_students: Prisma.$records_of_studentsPayload<ExtArgs>[]
      registrations: Prisma.$registrationsPayload<ExtArgs>[]
      adresses: Prisma.$adressesPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      adresses_id: number
      email: string
      name: string | null
      first_name: string
      last_name: string
      cpf: string
      phone: string
      gender: string
      date_of_birth: Date
      password: string
      user: string
      created_at: Date | null
      created_by: number | null
      avatar_url: string | null
      updated_at: Date | null
      updated_by: number | null
      active: boolean
    }, ExtArgs["result"]["students"]>
    composites: {}
  }

  type studentsGetPayload<S extends boolean | null | undefined | studentsDefaultArgs> = $Result.GetResult<Prisma.$studentsPayload, S>

  type studentsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<studentsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudentsCountAggregateInputType | true
    }

  export interface studentsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['students'], meta: { name: 'students' } }
    /**
     * Find zero or one Students that matches the filter.
     * @param {studentsFindUniqueArgs} args - Arguments to find a Students
     * @example
     * // Get one Students
     * const students = await prisma.students.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends studentsFindUniqueArgs>(args: SelectSubset<T, studentsFindUniqueArgs<ExtArgs>>): Prisma__studentsClient<$Result.GetResult<Prisma.$studentsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Students that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {studentsFindUniqueOrThrowArgs} args - Arguments to find a Students
     * @example
     * // Get one Students
     * const students = await prisma.students.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends studentsFindUniqueOrThrowArgs>(args: SelectSubset<T, studentsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__studentsClient<$Result.GetResult<Prisma.$studentsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentsFindFirstArgs} args - Arguments to find a Students
     * @example
     * // Get one Students
     * const students = await prisma.students.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends studentsFindFirstArgs>(args?: SelectSubset<T, studentsFindFirstArgs<ExtArgs>>): Prisma__studentsClient<$Result.GetResult<Prisma.$studentsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Students that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentsFindFirstOrThrowArgs} args - Arguments to find a Students
     * @example
     * // Get one Students
     * const students = await prisma.students.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends studentsFindFirstOrThrowArgs>(args?: SelectSubset<T, studentsFindFirstOrThrowArgs<ExtArgs>>): Prisma__studentsClient<$Result.GetResult<Prisma.$studentsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Students
     * const students = await prisma.students.findMany()
     * 
     * // Get first 10 Students
     * const students = await prisma.students.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentsWithIdOnly = await prisma.students.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends studentsFindManyArgs>(args?: SelectSubset<T, studentsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$studentsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Students.
     * @param {studentsCreateArgs} args - Arguments to create a Students.
     * @example
     * // Create one Students
     * const Students = await prisma.students.create({
     *   data: {
     *     // ... data to create a Students
     *   }
     * })
     * 
     */
    create<T extends studentsCreateArgs>(args: SelectSubset<T, studentsCreateArgs<ExtArgs>>): Prisma__studentsClient<$Result.GetResult<Prisma.$studentsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Students.
     * @param {studentsCreateManyArgs} args - Arguments to create many Students.
     * @example
     * // Create many Students
     * const students = await prisma.students.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends studentsCreateManyArgs>(args?: SelectSubset<T, studentsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Students and returns the data saved in the database.
     * @param {studentsCreateManyAndReturnArgs} args - Arguments to create many Students.
     * @example
     * // Create many Students
     * const students = await prisma.students.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Students and only return the `id`
     * const studentsWithIdOnly = await prisma.students.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends studentsCreateManyAndReturnArgs>(args?: SelectSubset<T, studentsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$studentsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Students.
     * @param {studentsDeleteArgs} args - Arguments to delete one Students.
     * @example
     * // Delete one Students
     * const Students = await prisma.students.delete({
     *   where: {
     *     // ... filter to delete one Students
     *   }
     * })
     * 
     */
    delete<T extends studentsDeleteArgs>(args: SelectSubset<T, studentsDeleteArgs<ExtArgs>>): Prisma__studentsClient<$Result.GetResult<Prisma.$studentsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Students.
     * @param {studentsUpdateArgs} args - Arguments to update one Students.
     * @example
     * // Update one Students
     * const students = await prisma.students.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends studentsUpdateArgs>(args: SelectSubset<T, studentsUpdateArgs<ExtArgs>>): Prisma__studentsClient<$Result.GetResult<Prisma.$studentsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Students.
     * @param {studentsDeleteManyArgs} args - Arguments to filter Students to delete.
     * @example
     * // Delete a few Students
     * const { count } = await prisma.students.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends studentsDeleteManyArgs>(args?: SelectSubset<T, studentsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Students
     * const students = await prisma.students.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends studentsUpdateManyArgs>(args: SelectSubset<T, studentsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students and returns the data updated in the database.
     * @param {studentsUpdateManyAndReturnArgs} args - Arguments to update many Students.
     * @example
     * // Update many Students
     * const students = await prisma.students.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Students and only return the `id`
     * const studentsWithIdOnly = await prisma.students.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends studentsUpdateManyAndReturnArgs>(args: SelectSubset<T, studentsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$studentsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Students.
     * @param {studentsUpsertArgs} args - Arguments to update or create a Students.
     * @example
     * // Update or create a Students
     * const students = await prisma.students.upsert({
     *   create: {
     *     // ... data to create a Students
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Students we want to update
     *   }
     * })
     */
    upsert<T extends studentsUpsertArgs>(args: SelectSubset<T, studentsUpsertArgs<ExtArgs>>): Prisma__studentsClient<$Result.GetResult<Prisma.$studentsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentsCountArgs} args - Arguments to filter Students to count.
     * @example
     * // Count the number of Students
     * const count = await prisma.students.count({
     *   where: {
     *     // ... the filter for the Students we want to count
     *   }
     * })
    **/
    count<T extends studentsCountArgs>(
      args?: Subset<T, studentsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentsAggregateArgs>(args: Subset<T, StudentsAggregateArgs>): Prisma.PrismaPromise<GetStudentsAggregateType<T>>

    /**
     * Group by Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {studentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends studentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: studentsGroupByArgs['orderBy'] }
        : { orderBy?: studentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, studentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the students model
   */
  readonly fields: studentsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for students.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__studentsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    records_of_students<T extends students$records_of_studentsArgs<ExtArgs> = {}>(args?: Subset<T, students$records_of_studentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$records_of_studentsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    registrations<T extends students$registrationsArgs<ExtArgs> = {}>(args?: Subset<T, students$registrationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$registrationsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    adresses<T extends adressesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, adressesDefaultArgs<ExtArgs>>): Prisma__adressesClient<$Result.GetResult<Prisma.$adressesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the students model
   */
  interface studentsFieldRefs {
    readonly id: FieldRef<"students", 'Int'>
    readonly adresses_id: FieldRef<"students", 'Int'>
    readonly email: FieldRef<"students", 'String'>
    readonly name: FieldRef<"students", 'String'>
    readonly first_name: FieldRef<"students", 'String'>
    readonly last_name: FieldRef<"students", 'String'>
    readonly cpf: FieldRef<"students", 'String'>
    readonly phone: FieldRef<"students", 'String'>
    readonly gender: FieldRef<"students", 'String'>
    readonly date_of_birth: FieldRef<"students", 'DateTime'>
    readonly password: FieldRef<"students", 'String'>
    readonly user: FieldRef<"students", 'String'>
    readonly created_at: FieldRef<"students", 'DateTime'>
    readonly created_by: FieldRef<"students", 'Int'>
    readonly avatar_url: FieldRef<"students", 'String'>
    readonly updated_at: FieldRef<"students", 'DateTime'>
    readonly updated_by: FieldRef<"students", 'Int'>
    readonly active: FieldRef<"students", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * students findUnique
   */
  export type studentsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the students
     */
    select?: studentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the students
     */
    omit?: studentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studentsInclude<ExtArgs> | null
    /**
     * Filter, which students to fetch.
     */
    where: studentsWhereUniqueInput
  }

  /**
   * students findUniqueOrThrow
   */
  export type studentsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the students
     */
    select?: studentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the students
     */
    omit?: studentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studentsInclude<ExtArgs> | null
    /**
     * Filter, which students to fetch.
     */
    where: studentsWhereUniqueInput
  }

  /**
   * students findFirst
   */
  export type studentsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the students
     */
    select?: studentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the students
     */
    omit?: studentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studentsInclude<ExtArgs> | null
    /**
     * Filter, which students to fetch.
     */
    where?: studentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of students to fetch.
     */
    orderBy?: studentsOrderByWithRelationInput | studentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for students.
     */
    cursor?: studentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of students.
     */
    distinct?: StudentsScalarFieldEnum | StudentsScalarFieldEnum[]
  }

  /**
   * students findFirstOrThrow
   */
  export type studentsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the students
     */
    select?: studentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the students
     */
    omit?: studentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studentsInclude<ExtArgs> | null
    /**
     * Filter, which students to fetch.
     */
    where?: studentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of students to fetch.
     */
    orderBy?: studentsOrderByWithRelationInput | studentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for students.
     */
    cursor?: studentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of students.
     */
    distinct?: StudentsScalarFieldEnum | StudentsScalarFieldEnum[]
  }

  /**
   * students findMany
   */
  export type studentsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the students
     */
    select?: studentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the students
     */
    omit?: studentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studentsInclude<ExtArgs> | null
    /**
     * Filter, which students to fetch.
     */
    where?: studentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of students to fetch.
     */
    orderBy?: studentsOrderByWithRelationInput | studentsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing students.
     */
    cursor?: studentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` students.
     */
    skip?: number
    distinct?: StudentsScalarFieldEnum | StudentsScalarFieldEnum[]
  }

  /**
   * students create
   */
  export type studentsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the students
     */
    select?: studentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the students
     */
    omit?: studentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studentsInclude<ExtArgs> | null
    /**
     * The data needed to create a students.
     */
    data: XOR<studentsCreateInput, studentsUncheckedCreateInput>
  }

  /**
   * students createMany
   */
  export type studentsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many students.
     */
    data: studentsCreateManyInput | studentsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * students createManyAndReturn
   */
  export type studentsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the students
     */
    select?: studentsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the students
     */
    omit?: studentsOmit<ExtArgs> | null
    /**
     * The data used to create many students.
     */
    data: studentsCreateManyInput | studentsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studentsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * students update
   */
  export type studentsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the students
     */
    select?: studentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the students
     */
    omit?: studentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studentsInclude<ExtArgs> | null
    /**
     * The data needed to update a students.
     */
    data: XOR<studentsUpdateInput, studentsUncheckedUpdateInput>
    /**
     * Choose, which students to update.
     */
    where: studentsWhereUniqueInput
  }

  /**
   * students updateMany
   */
  export type studentsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update students.
     */
    data: XOR<studentsUpdateManyMutationInput, studentsUncheckedUpdateManyInput>
    /**
     * Filter which students to update
     */
    where?: studentsWhereInput
    /**
     * Limit how many students to update.
     */
    limit?: number
  }

  /**
   * students updateManyAndReturn
   */
  export type studentsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the students
     */
    select?: studentsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the students
     */
    omit?: studentsOmit<ExtArgs> | null
    /**
     * The data used to update students.
     */
    data: XOR<studentsUpdateManyMutationInput, studentsUncheckedUpdateManyInput>
    /**
     * Filter which students to update
     */
    where?: studentsWhereInput
    /**
     * Limit how many students to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studentsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * students upsert
   */
  export type studentsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the students
     */
    select?: studentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the students
     */
    omit?: studentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studentsInclude<ExtArgs> | null
    /**
     * The filter to search for the students to update in case it exists.
     */
    where: studentsWhereUniqueInput
    /**
     * In case the students found by the `where` argument doesn't exist, create a new students with this data.
     */
    create: XOR<studentsCreateInput, studentsUncheckedCreateInput>
    /**
     * In case the students was found with the provided `where` argument, update it with this data.
     */
    update: XOR<studentsUpdateInput, studentsUncheckedUpdateInput>
  }

  /**
   * students delete
   */
  export type studentsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the students
     */
    select?: studentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the students
     */
    omit?: studentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studentsInclude<ExtArgs> | null
    /**
     * Filter which students to delete.
     */
    where: studentsWhereUniqueInput
  }

  /**
   * students deleteMany
   */
  export type studentsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which students to delete
     */
    where?: studentsWhereInput
    /**
     * Limit how many students to delete.
     */
    limit?: number
  }

  /**
   * students.records_of_students
   */
  export type students$records_of_studentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the records_of_students
     */
    select?: records_of_studentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the records_of_students
     */
    omit?: records_of_studentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: records_of_studentsInclude<ExtArgs> | null
    where?: records_of_studentsWhereInput
    orderBy?: records_of_studentsOrderByWithRelationInput | records_of_studentsOrderByWithRelationInput[]
    cursor?: records_of_studentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Records_of_studentsScalarFieldEnum | Records_of_studentsScalarFieldEnum[]
  }

  /**
   * students.registrations
   */
  export type students$registrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registrations
     */
    select?: registrationsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the registrations
     */
    omit?: registrationsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registrationsInclude<ExtArgs> | null
    where?: registrationsWhereInput
    orderBy?: registrationsOrderByWithRelationInput | registrationsOrderByWithRelationInput[]
    cursor?: registrationsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RegistrationsScalarFieldEnum | RegistrationsScalarFieldEnum[]
  }

  /**
   * students without action
   */
  export type studentsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the students
     */
    select?: studentsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the students
     */
    omit?: studentsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: studentsInclude<ExtArgs> | null
  }


  /**
   * Model students_has_classrooms
   */

  export type AggregateStudents_has_classrooms = {
    _count: Students_has_classroomsCountAggregateOutputType | null
    _avg: Students_has_classroomsAvgAggregateOutputType | null
    _sum: Students_has_classroomsSumAggregateOutputType | null
    _min: Students_has_classroomsMinAggregateOutputType | null
    _max: Students_has_classroomsMaxAggregateOutputType | null
  }

  export type Students_has_classroomsAvgAggregateOutputType = {
    id: number | null
    registrations_id: number | null
    classrooms_id: number | null
  }

  export type Students_has_classroomsSumAggregateOutputType = {
    id: number | null
    registrations_id: number | null
    classrooms_id: number | null
  }

  export type Students_has_classroomsMinAggregateOutputType = {
    id: number | null
    registrations_id: number | null
    classrooms_id: number | null
  }

  export type Students_has_classroomsMaxAggregateOutputType = {
    id: number | null
    registrations_id: number | null
    classrooms_id: number | null
  }

  export type Students_has_classroomsCountAggregateOutputType = {
    id: number
    registrations_id: number
    classrooms_id: number
    _all: number
  }


  export type Students_has_classroomsAvgAggregateInputType = {
    id?: true
    registrations_id?: true
    classrooms_id?: true
  }

  export type Students_has_classroomsSumAggregateInputType = {
    id?: true
    registrations_id?: true
    classrooms_id?: true
  }

  export type Students_has_classroomsMinAggregateInputType = {
    id?: true
    registrations_id?: true
    classrooms_id?: true
  }

  export type Students_has_classroomsMaxAggregateInputType = {
    id?: true
    registrations_id?: true
    classrooms_id?: true
  }

  export type Students_has_classroomsCountAggregateInputType = {
    id?: true
    registrations_id?: true
    classrooms_id?: true
    _all?: true
  }

  export type Students_has_classroomsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which students_has_classrooms to aggregate.
     */
    where?: students_has_classroomsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of students_has_classrooms to fetch.
     */
    orderBy?: students_has_classroomsOrderByWithRelationInput | students_has_classroomsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: students_has_classroomsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` students_has_classrooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` students_has_classrooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned students_has_classrooms
    **/
    _count?: true | Students_has_classroomsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Students_has_classroomsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Students_has_classroomsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Students_has_classroomsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Students_has_classroomsMaxAggregateInputType
  }

  export type GetStudents_has_classroomsAggregateType<T extends Students_has_classroomsAggregateArgs> = {
        [P in keyof T & keyof AggregateStudents_has_classrooms]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudents_has_classrooms[P]>
      : GetScalarType<T[P], AggregateStudents_has_classrooms[P]>
  }




  export type students_has_classroomsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: students_has_classroomsWhereInput
    orderBy?: students_has_classroomsOrderByWithAggregationInput | students_has_classroomsOrderByWithAggregationInput[]
    by: Students_has_classroomsScalarFieldEnum[] | Students_has_classroomsScalarFieldEnum
    having?: students_has_classroomsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Students_has_classroomsCountAggregateInputType | true
    _avg?: Students_has_classroomsAvgAggregateInputType
    _sum?: Students_has_classroomsSumAggregateInputType
    _min?: Students_has_classroomsMinAggregateInputType
    _max?: Students_has_classroomsMaxAggregateInputType
  }

  export type Students_has_classroomsGroupByOutputType = {
    id: number
    registrations_id: number
    classrooms_id: number
    _count: Students_has_classroomsCountAggregateOutputType | null
    _avg: Students_has_classroomsAvgAggregateOutputType | null
    _sum: Students_has_classroomsSumAggregateOutputType | null
    _min: Students_has_classroomsMinAggregateOutputType | null
    _max: Students_has_classroomsMaxAggregateOutputType | null
  }

  type GetStudents_has_classroomsGroupByPayload<T extends students_has_classroomsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Students_has_classroomsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Students_has_classroomsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Students_has_classroomsGroupByOutputType[P]>
            : GetScalarType<T[P], Students_has_classroomsGroupByOutputType[P]>
        }
      >
    >


  export type students_has_classroomsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    registrations_id?: boolean
    classrooms_id?: boolean
    classrooms?: boolean | classroomsDefaultArgs<ExtArgs>
    registrations?: boolean | registrationsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["students_has_classrooms"]>

  export type students_has_classroomsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    registrations_id?: boolean
    classrooms_id?: boolean
    classrooms?: boolean | classroomsDefaultArgs<ExtArgs>
    registrations?: boolean | registrationsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["students_has_classrooms"]>

  export type students_has_classroomsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    registrations_id?: boolean
    classrooms_id?: boolean
    classrooms?: boolean | classroomsDefaultArgs<ExtArgs>
    registrations?: boolean | registrationsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["students_has_classrooms"]>

  export type students_has_classroomsSelectScalar = {
    id?: boolean
    registrations_id?: boolean
    classrooms_id?: boolean
  }

  export type students_has_classroomsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "registrations_id" | "classrooms_id", ExtArgs["result"]["students_has_classrooms"]>
  export type students_has_classroomsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    classrooms?: boolean | classroomsDefaultArgs<ExtArgs>
    registrations?: boolean | registrationsDefaultArgs<ExtArgs>
  }
  export type students_has_classroomsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    classrooms?: boolean | classroomsDefaultArgs<ExtArgs>
    registrations?: boolean | registrationsDefaultArgs<ExtArgs>
  }
  export type students_has_classroomsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    classrooms?: boolean | classroomsDefaultArgs<ExtArgs>
    registrations?: boolean | registrationsDefaultArgs<ExtArgs>
  }

  export type $students_has_classroomsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "students_has_classrooms"
    objects: {
      classrooms: Prisma.$classroomsPayload<ExtArgs>
      registrations: Prisma.$registrationsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      registrations_id: number
      classrooms_id: number
    }, ExtArgs["result"]["students_has_classrooms"]>
    composites: {}
  }

  type students_has_classroomsGetPayload<S extends boolean | null | undefined | students_has_classroomsDefaultArgs> = $Result.GetResult<Prisma.$students_has_classroomsPayload, S>

  type students_has_classroomsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<students_has_classroomsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Students_has_classroomsCountAggregateInputType | true
    }

  export interface students_has_classroomsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['students_has_classrooms'], meta: { name: 'students_has_classrooms' } }
    /**
     * Find zero or one Students_has_classrooms that matches the filter.
     * @param {students_has_classroomsFindUniqueArgs} args - Arguments to find a Students_has_classrooms
     * @example
     * // Get one Students_has_classrooms
     * const students_has_classrooms = await prisma.students_has_classrooms.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends students_has_classroomsFindUniqueArgs>(args: SelectSubset<T, students_has_classroomsFindUniqueArgs<ExtArgs>>): Prisma__students_has_classroomsClient<$Result.GetResult<Prisma.$students_has_classroomsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Students_has_classrooms that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {students_has_classroomsFindUniqueOrThrowArgs} args - Arguments to find a Students_has_classrooms
     * @example
     * // Get one Students_has_classrooms
     * const students_has_classrooms = await prisma.students_has_classrooms.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends students_has_classroomsFindUniqueOrThrowArgs>(args: SelectSubset<T, students_has_classroomsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__students_has_classroomsClient<$Result.GetResult<Prisma.$students_has_classroomsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Students_has_classrooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {students_has_classroomsFindFirstArgs} args - Arguments to find a Students_has_classrooms
     * @example
     * // Get one Students_has_classrooms
     * const students_has_classrooms = await prisma.students_has_classrooms.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends students_has_classroomsFindFirstArgs>(args?: SelectSubset<T, students_has_classroomsFindFirstArgs<ExtArgs>>): Prisma__students_has_classroomsClient<$Result.GetResult<Prisma.$students_has_classroomsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Students_has_classrooms that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {students_has_classroomsFindFirstOrThrowArgs} args - Arguments to find a Students_has_classrooms
     * @example
     * // Get one Students_has_classrooms
     * const students_has_classrooms = await prisma.students_has_classrooms.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends students_has_classroomsFindFirstOrThrowArgs>(args?: SelectSubset<T, students_has_classroomsFindFirstOrThrowArgs<ExtArgs>>): Prisma__students_has_classroomsClient<$Result.GetResult<Prisma.$students_has_classroomsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Students_has_classrooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {students_has_classroomsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Students_has_classrooms
     * const students_has_classrooms = await prisma.students_has_classrooms.findMany()
     * 
     * // Get first 10 Students_has_classrooms
     * const students_has_classrooms = await prisma.students_has_classrooms.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const students_has_classroomsWithIdOnly = await prisma.students_has_classrooms.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends students_has_classroomsFindManyArgs>(args?: SelectSubset<T, students_has_classroomsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$students_has_classroomsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Students_has_classrooms.
     * @param {students_has_classroomsCreateArgs} args - Arguments to create a Students_has_classrooms.
     * @example
     * // Create one Students_has_classrooms
     * const Students_has_classrooms = await prisma.students_has_classrooms.create({
     *   data: {
     *     // ... data to create a Students_has_classrooms
     *   }
     * })
     * 
     */
    create<T extends students_has_classroomsCreateArgs>(args: SelectSubset<T, students_has_classroomsCreateArgs<ExtArgs>>): Prisma__students_has_classroomsClient<$Result.GetResult<Prisma.$students_has_classroomsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Students_has_classrooms.
     * @param {students_has_classroomsCreateManyArgs} args - Arguments to create many Students_has_classrooms.
     * @example
     * // Create many Students_has_classrooms
     * const students_has_classrooms = await prisma.students_has_classrooms.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends students_has_classroomsCreateManyArgs>(args?: SelectSubset<T, students_has_classroomsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Students_has_classrooms and returns the data saved in the database.
     * @param {students_has_classroomsCreateManyAndReturnArgs} args - Arguments to create many Students_has_classrooms.
     * @example
     * // Create many Students_has_classrooms
     * const students_has_classrooms = await prisma.students_has_classrooms.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Students_has_classrooms and only return the `id`
     * const students_has_classroomsWithIdOnly = await prisma.students_has_classrooms.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends students_has_classroomsCreateManyAndReturnArgs>(args?: SelectSubset<T, students_has_classroomsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$students_has_classroomsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Students_has_classrooms.
     * @param {students_has_classroomsDeleteArgs} args - Arguments to delete one Students_has_classrooms.
     * @example
     * // Delete one Students_has_classrooms
     * const Students_has_classrooms = await prisma.students_has_classrooms.delete({
     *   where: {
     *     // ... filter to delete one Students_has_classrooms
     *   }
     * })
     * 
     */
    delete<T extends students_has_classroomsDeleteArgs>(args: SelectSubset<T, students_has_classroomsDeleteArgs<ExtArgs>>): Prisma__students_has_classroomsClient<$Result.GetResult<Prisma.$students_has_classroomsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Students_has_classrooms.
     * @param {students_has_classroomsUpdateArgs} args - Arguments to update one Students_has_classrooms.
     * @example
     * // Update one Students_has_classrooms
     * const students_has_classrooms = await prisma.students_has_classrooms.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends students_has_classroomsUpdateArgs>(args: SelectSubset<T, students_has_classroomsUpdateArgs<ExtArgs>>): Prisma__students_has_classroomsClient<$Result.GetResult<Prisma.$students_has_classroomsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Students_has_classrooms.
     * @param {students_has_classroomsDeleteManyArgs} args - Arguments to filter Students_has_classrooms to delete.
     * @example
     * // Delete a few Students_has_classrooms
     * const { count } = await prisma.students_has_classrooms.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends students_has_classroomsDeleteManyArgs>(args?: SelectSubset<T, students_has_classroomsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students_has_classrooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {students_has_classroomsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Students_has_classrooms
     * const students_has_classrooms = await prisma.students_has_classrooms.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends students_has_classroomsUpdateManyArgs>(args: SelectSubset<T, students_has_classroomsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students_has_classrooms and returns the data updated in the database.
     * @param {students_has_classroomsUpdateManyAndReturnArgs} args - Arguments to update many Students_has_classrooms.
     * @example
     * // Update many Students_has_classrooms
     * const students_has_classrooms = await prisma.students_has_classrooms.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Students_has_classrooms and only return the `id`
     * const students_has_classroomsWithIdOnly = await prisma.students_has_classrooms.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends students_has_classroomsUpdateManyAndReturnArgs>(args: SelectSubset<T, students_has_classroomsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$students_has_classroomsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Students_has_classrooms.
     * @param {students_has_classroomsUpsertArgs} args - Arguments to update or create a Students_has_classrooms.
     * @example
     * // Update or create a Students_has_classrooms
     * const students_has_classrooms = await prisma.students_has_classrooms.upsert({
     *   create: {
     *     // ... data to create a Students_has_classrooms
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Students_has_classrooms we want to update
     *   }
     * })
     */
    upsert<T extends students_has_classroomsUpsertArgs>(args: SelectSubset<T, students_has_classroomsUpsertArgs<ExtArgs>>): Prisma__students_has_classroomsClient<$Result.GetResult<Prisma.$students_has_classroomsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Students_has_classrooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {students_has_classroomsCountArgs} args - Arguments to filter Students_has_classrooms to count.
     * @example
     * // Count the number of Students_has_classrooms
     * const count = await prisma.students_has_classrooms.count({
     *   where: {
     *     // ... the filter for the Students_has_classrooms we want to count
     *   }
     * })
    **/
    count<T extends students_has_classroomsCountArgs>(
      args?: Subset<T, students_has_classroomsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Students_has_classroomsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Students_has_classrooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Students_has_classroomsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Students_has_classroomsAggregateArgs>(args: Subset<T, Students_has_classroomsAggregateArgs>): Prisma.PrismaPromise<GetStudents_has_classroomsAggregateType<T>>

    /**
     * Group by Students_has_classrooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {students_has_classroomsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends students_has_classroomsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: students_has_classroomsGroupByArgs['orderBy'] }
        : { orderBy?: students_has_classroomsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, students_has_classroomsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudents_has_classroomsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the students_has_classrooms model
   */
  readonly fields: students_has_classroomsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for students_has_classrooms.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__students_has_classroomsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    classrooms<T extends classroomsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, classroomsDefaultArgs<ExtArgs>>): Prisma__classroomsClient<$Result.GetResult<Prisma.$classroomsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    registrations<T extends registrationsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, registrationsDefaultArgs<ExtArgs>>): Prisma__registrationsClient<$Result.GetResult<Prisma.$registrationsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the students_has_classrooms model
   */
  interface students_has_classroomsFieldRefs {
    readonly id: FieldRef<"students_has_classrooms", 'Int'>
    readonly registrations_id: FieldRef<"students_has_classrooms", 'Int'>
    readonly classrooms_id: FieldRef<"students_has_classrooms", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * students_has_classrooms findUnique
   */
  export type students_has_classroomsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the students_has_classrooms
     */
    select?: students_has_classroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the students_has_classrooms
     */
    omit?: students_has_classroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: students_has_classroomsInclude<ExtArgs> | null
    /**
     * Filter, which students_has_classrooms to fetch.
     */
    where: students_has_classroomsWhereUniqueInput
  }

  /**
   * students_has_classrooms findUniqueOrThrow
   */
  export type students_has_classroomsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the students_has_classrooms
     */
    select?: students_has_classroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the students_has_classrooms
     */
    omit?: students_has_classroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: students_has_classroomsInclude<ExtArgs> | null
    /**
     * Filter, which students_has_classrooms to fetch.
     */
    where: students_has_classroomsWhereUniqueInput
  }

  /**
   * students_has_classrooms findFirst
   */
  export type students_has_classroomsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the students_has_classrooms
     */
    select?: students_has_classroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the students_has_classrooms
     */
    omit?: students_has_classroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: students_has_classroomsInclude<ExtArgs> | null
    /**
     * Filter, which students_has_classrooms to fetch.
     */
    where?: students_has_classroomsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of students_has_classrooms to fetch.
     */
    orderBy?: students_has_classroomsOrderByWithRelationInput | students_has_classroomsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for students_has_classrooms.
     */
    cursor?: students_has_classroomsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` students_has_classrooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` students_has_classrooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of students_has_classrooms.
     */
    distinct?: Students_has_classroomsScalarFieldEnum | Students_has_classroomsScalarFieldEnum[]
  }

  /**
   * students_has_classrooms findFirstOrThrow
   */
  export type students_has_classroomsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the students_has_classrooms
     */
    select?: students_has_classroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the students_has_classrooms
     */
    omit?: students_has_classroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: students_has_classroomsInclude<ExtArgs> | null
    /**
     * Filter, which students_has_classrooms to fetch.
     */
    where?: students_has_classroomsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of students_has_classrooms to fetch.
     */
    orderBy?: students_has_classroomsOrderByWithRelationInput | students_has_classroomsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for students_has_classrooms.
     */
    cursor?: students_has_classroomsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` students_has_classrooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` students_has_classrooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of students_has_classrooms.
     */
    distinct?: Students_has_classroomsScalarFieldEnum | Students_has_classroomsScalarFieldEnum[]
  }

  /**
   * students_has_classrooms findMany
   */
  export type students_has_classroomsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the students_has_classrooms
     */
    select?: students_has_classroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the students_has_classrooms
     */
    omit?: students_has_classroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: students_has_classroomsInclude<ExtArgs> | null
    /**
     * Filter, which students_has_classrooms to fetch.
     */
    where?: students_has_classroomsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of students_has_classrooms to fetch.
     */
    orderBy?: students_has_classroomsOrderByWithRelationInput | students_has_classroomsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing students_has_classrooms.
     */
    cursor?: students_has_classroomsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` students_has_classrooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` students_has_classrooms.
     */
    skip?: number
    distinct?: Students_has_classroomsScalarFieldEnum | Students_has_classroomsScalarFieldEnum[]
  }

  /**
   * students_has_classrooms create
   */
  export type students_has_classroomsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the students_has_classrooms
     */
    select?: students_has_classroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the students_has_classrooms
     */
    omit?: students_has_classroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: students_has_classroomsInclude<ExtArgs> | null
    /**
     * The data needed to create a students_has_classrooms.
     */
    data: XOR<students_has_classroomsCreateInput, students_has_classroomsUncheckedCreateInput>
  }

  /**
   * students_has_classrooms createMany
   */
  export type students_has_classroomsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many students_has_classrooms.
     */
    data: students_has_classroomsCreateManyInput | students_has_classroomsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * students_has_classrooms createManyAndReturn
   */
  export type students_has_classroomsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the students_has_classrooms
     */
    select?: students_has_classroomsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the students_has_classrooms
     */
    omit?: students_has_classroomsOmit<ExtArgs> | null
    /**
     * The data used to create many students_has_classrooms.
     */
    data: students_has_classroomsCreateManyInput | students_has_classroomsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: students_has_classroomsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * students_has_classrooms update
   */
  export type students_has_classroomsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the students_has_classrooms
     */
    select?: students_has_classroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the students_has_classrooms
     */
    omit?: students_has_classroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: students_has_classroomsInclude<ExtArgs> | null
    /**
     * The data needed to update a students_has_classrooms.
     */
    data: XOR<students_has_classroomsUpdateInput, students_has_classroomsUncheckedUpdateInput>
    /**
     * Choose, which students_has_classrooms to update.
     */
    where: students_has_classroomsWhereUniqueInput
  }

  /**
   * students_has_classrooms updateMany
   */
  export type students_has_classroomsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update students_has_classrooms.
     */
    data: XOR<students_has_classroomsUpdateManyMutationInput, students_has_classroomsUncheckedUpdateManyInput>
    /**
     * Filter which students_has_classrooms to update
     */
    where?: students_has_classroomsWhereInput
    /**
     * Limit how many students_has_classrooms to update.
     */
    limit?: number
  }

  /**
   * students_has_classrooms updateManyAndReturn
   */
  export type students_has_classroomsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the students_has_classrooms
     */
    select?: students_has_classroomsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the students_has_classrooms
     */
    omit?: students_has_classroomsOmit<ExtArgs> | null
    /**
     * The data used to update students_has_classrooms.
     */
    data: XOR<students_has_classroomsUpdateManyMutationInput, students_has_classroomsUncheckedUpdateManyInput>
    /**
     * Filter which students_has_classrooms to update
     */
    where?: students_has_classroomsWhereInput
    /**
     * Limit how many students_has_classrooms to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: students_has_classroomsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * students_has_classrooms upsert
   */
  export type students_has_classroomsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the students_has_classrooms
     */
    select?: students_has_classroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the students_has_classrooms
     */
    omit?: students_has_classroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: students_has_classroomsInclude<ExtArgs> | null
    /**
     * The filter to search for the students_has_classrooms to update in case it exists.
     */
    where: students_has_classroomsWhereUniqueInput
    /**
     * In case the students_has_classrooms found by the `where` argument doesn't exist, create a new students_has_classrooms with this data.
     */
    create: XOR<students_has_classroomsCreateInput, students_has_classroomsUncheckedCreateInput>
    /**
     * In case the students_has_classrooms was found with the provided `where` argument, update it with this data.
     */
    update: XOR<students_has_classroomsUpdateInput, students_has_classroomsUncheckedUpdateInput>
  }

  /**
   * students_has_classrooms delete
   */
  export type students_has_classroomsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the students_has_classrooms
     */
    select?: students_has_classroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the students_has_classrooms
     */
    omit?: students_has_classroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: students_has_classroomsInclude<ExtArgs> | null
    /**
     * Filter which students_has_classrooms to delete.
     */
    where: students_has_classroomsWhereUniqueInput
  }

  /**
   * students_has_classrooms deleteMany
   */
  export type students_has_classroomsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which students_has_classrooms to delete
     */
    where?: students_has_classroomsWhereInput
    /**
     * Limit how many students_has_classrooms to delete.
     */
    limit?: number
  }

  /**
   * students_has_classrooms without action
   */
  export type students_has_classroomsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the students_has_classrooms
     */
    select?: students_has_classroomsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the students_has_classrooms
     */
    omit?: students_has_classroomsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: students_has_classroomsInclude<ExtArgs> | null
  }


  /**
   * Model tasks
   */

  export type AggregateTasks = {
    _count: TasksCountAggregateOutputType | null
    _avg: TasksAvgAggregateOutputType | null
    _sum: TasksSumAggregateOutputType | null
    _min: TasksMinAggregateOutputType | null
    _max: TasksMaxAggregateOutputType | null
  }

  export type TasksAvgAggregateOutputType = {
    scores_id: number | null
    registrations_id: number | null
    lessons_id: number | null
    score_obtained: number | null
    total_score: number | null
  }

  export type TasksSumAggregateOutputType = {
    scores_id: number | null
    registrations_id: number | null
    lessons_id: number | null
    score_obtained: number | null
    total_score: number | null
  }

  export type TasksMinAggregateOutputType = {
    scores_id: number | null
    registrations_id: number | null
    lessons_id: number | null
    date: Date | null
    response: string | null
    score_obtained: number | null
    question: string | null
    total_score: number | null
  }

  export type TasksMaxAggregateOutputType = {
    scores_id: number | null
    registrations_id: number | null
    lessons_id: number | null
    date: Date | null
    response: string | null
    score_obtained: number | null
    question: string | null
    total_score: number | null
  }

  export type TasksCountAggregateOutputType = {
    scores_id: number
    registrations_id: number
    lessons_id: number
    date: number
    response: number
    score_obtained: number
    question: number
    total_score: number
    _all: number
  }


  export type TasksAvgAggregateInputType = {
    scores_id?: true
    registrations_id?: true
    lessons_id?: true
    score_obtained?: true
    total_score?: true
  }

  export type TasksSumAggregateInputType = {
    scores_id?: true
    registrations_id?: true
    lessons_id?: true
    score_obtained?: true
    total_score?: true
  }

  export type TasksMinAggregateInputType = {
    scores_id?: true
    registrations_id?: true
    lessons_id?: true
    date?: true
    response?: true
    score_obtained?: true
    question?: true
    total_score?: true
  }

  export type TasksMaxAggregateInputType = {
    scores_id?: true
    registrations_id?: true
    lessons_id?: true
    date?: true
    response?: true
    score_obtained?: true
    question?: true
    total_score?: true
  }

  export type TasksCountAggregateInputType = {
    scores_id?: true
    registrations_id?: true
    lessons_id?: true
    date?: true
    response?: true
    score_obtained?: true
    question?: true
    total_score?: true
    _all?: true
  }

  export type TasksAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tasks to aggregate.
     */
    where?: tasksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tasks to fetch.
     */
    orderBy?: tasksOrderByWithRelationInput | tasksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tasksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned tasks
    **/
    _count?: true | TasksCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TasksAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TasksSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TasksMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TasksMaxAggregateInputType
  }

  export type GetTasksAggregateType<T extends TasksAggregateArgs> = {
        [P in keyof T & keyof AggregateTasks]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTasks[P]>
      : GetScalarType<T[P], AggregateTasks[P]>
  }




  export type tasksGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tasksWhereInput
    orderBy?: tasksOrderByWithAggregationInput | tasksOrderByWithAggregationInput[]
    by: TasksScalarFieldEnum[] | TasksScalarFieldEnum
    having?: tasksScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TasksCountAggregateInputType | true
    _avg?: TasksAvgAggregateInputType
    _sum?: TasksSumAggregateInputType
    _min?: TasksMinAggregateInputType
    _max?: TasksMaxAggregateInputType
  }

  export type TasksGroupByOutputType = {
    scores_id: number
    registrations_id: number
    lessons_id: number
    date: Date
    response: string | null
    score_obtained: number | null
    question: string | null
    total_score: number | null
    _count: TasksCountAggregateOutputType | null
    _avg: TasksAvgAggregateOutputType | null
    _sum: TasksSumAggregateOutputType | null
    _min: TasksMinAggregateOutputType | null
    _max: TasksMaxAggregateOutputType | null
  }

  type GetTasksGroupByPayload<T extends tasksGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TasksGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TasksGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TasksGroupByOutputType[P]>
            : GetScalarType<T[P], TasksGroupByOutputType[P]>
        }
      >
    >


  export type tasksSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    scores_id?: boolean
    registrations_id?: boolean
    lessons_id?: boolean
    date?: boolean
    response?: boolean
    score_obtained?: boolean
    question?: boolean
    total_score?: boolean
    lessons?: boolean | lessonsDefaultArgs<ExtArgs>
    registrations?: boolean | registrationsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tasks"]>

  export type tasksSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    scores_id?: boolean
    registrations_id?: boolean
    lessons_id?: boolean
    date?: boolean
    response?: boolean
    score_obtained?: boolean
    question?: boolean
    total_score?: boolean
    lessons?: boolean | lessonsDefaultArgs<ExtArgs>
    registrations?: boolean | registrationsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tasks"]>

  export type tasksSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    scores_id?: boolean
    registrations_id?: boolean
    lessons_id?: boolean
    date?: boolean
    response?: boolean
    score_obtained?: boolean
    question?: boolean
    total_score?: boolean
    lessons?: boolean | lessonsDefaultArgs<ExtArgs>
    registrations?: boolean | registrationsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tasks"]>

  export type tasksSelectScalar = {
    scores_id?: boolean
    registrations_id?: boolean
    lessons_id?: boolean
    date?: boolean
    response?: boolean
    score_obtained?: boolean
    question?: boolean
    total_score?: boolean
  }

  export type tasksOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"scores_id" | "registrations_id" | "lessons_id" | "date" | "response" | "score_obtained" | "question" | "total_score", ExtArgs["result"]["tasks"]>
  export type tasksInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lessons?: boolean | lessonsDefaultArgs<ExtArgs>
    registrations?: boolean | registrationsDefaultArgs<ExtArgs>
  }
  export type tasksIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lessons?: boolean | lessonsDefaultArgs<ExtArgs>
    registrations?: boolean | registrationsDefaultArgs<ExtArgs>
  }
  export type tasksIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lessons?: boolean | lessonsDefaultArgs<ExtArgs>
    registrations?: boolean | registrationsDefaultArgs<ExtArgs>
  }

  export type $tasksPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "tasks"
    objects: {
      lessons: Prisma.$lessonsPayload<ExtArgs>
      registrations: Prisma.$registrationsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      scores_id: number
      registrations_id: number
      lessons_id: number
      date: Date
      response: string | null
      score_obtained: number | null
      question: string | null
      total_score: number | null
    }, ExtArgs["result"]["tasks"]>
    composites: {}
  }

  type tasksGetPayload<S extends boolean | null | undefined | tasksDefaultArgs> = $Result.GetResult<Prisma.$tasksPayload, S>

  type tasksCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<tasksFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TasksCountAggregateInputType | true
    }

  export interface tasksDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['tasks'], meta: { name: 'tasks' } }
    /**
     * Find zero or one Tasks that matches the filter.
     * @param {tasksFindUniqueArgs} args - Arguments to find a Tasks
     * @example
     * // Get one Tasks
     * const tasks = await prisma.tasks.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends tasksFindUniqueArgs>(args: SelectSubset<T, tasksFindUniqueArgs<ExtArgs>>): Prisma__tasksClient<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Tasks that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {tasksFindUniqueOrThrowArgs} args - Arguments to find a Tasks
     * @example
     * // Get one Tasks
     * const tasks = await prisma.tasks.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends tasksFindUniqueOrThrowArgs>(args: SelectSubset<T, tasksFindUniqueOrThrowArgs<ExtArgs>>): Prisma__tasksClient<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tasksFindFirstArgs} args - Arguments to find a Tasks
     * @example
     * // Get one Tasks
     * const tasks = await prisma.tasks.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends tasksFindFirstArgs>(args?: SelectSubset<T, tasksFindFirstArgs<ExtArgs>>): Prisma__tasksClient<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Tasks that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tasksFindFirstOrThrowArgs} args - Arguments to find a Tasks
     * @example
     * // Get one Tasks
     * const tasks = await prisma.tasks.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends tasksFindFirstOrThrowArgs>(args?: SelectSubset<T, tasksFindFirstOrThrowArgs<ExtArgs>>): Prisma__tasksClient<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tasksFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tasks
     * const tasks = await prisma.tasks.findMany()
     * 
     * // Get first 10 Tasks
     * const tasks = await prisma.tasks.findMany({ take: 10 })
     * 
     * // Only select the `scores_id`
     * const tasksWithScores_idOnly = await prisma.tasks.findMany({ select: { scores_id: true } })
     * 
     */
    findMany<T extends tasksFindManyArgs>(args?: SelectSubset<T, tasksFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Tasks.
     * @param {tasksCreateArgs} args - Arguments to create a Tasks.
     * @example
     * // Create one Tasks
     * const Tasks = await prisma.tasks.create({
     *   data: {
     *     // ... data to create a Tasks
     *   }
     * })
     * 
     */
    create<T extends tasksCreateArgs>(args: SelectSubset<T, tasksCreateArgs<ExtArgs>>): Prisma__tasksClient<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Tasks.
     * @param {tasksCreateManyArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const tasks = await prisma.tasks.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends tasksCreateManyArgs>(args?: SelectSubset<T, tasksCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tasks and returns the data saved in the database.
     * @param {tasksCreateManyAndReturnArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const tasks = await prisma.tasks.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tasks and only return the `scores_id`
     * const tasksWithScores_idOnly = await prisma.tasks.createManyAndReturn({
     *   select: { scores_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends tasksCreateManyAndReturnArgs>(args?: SelectSubset<T, tasksCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Tasks.
     * @param {tasksDeleteArgs} args - Arguments to delete one Tasks.
     * @example
     * // Delete one Tasks
     * const Tasks = await prisma.tasks.delete({
     *   where: {
     *     // ... filter to delete one Tasks
     *   }
     * })
     * 
     */
    delete<T extends tasksDeleteArgs>(args: SelectSubset<T, tasksDeleteArgs<ExtArgs>>): Prisma__tasksClient<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Tasks.
     * @param {tasksUpdateArgs} args - Arguments to update one Tasks.
     * @example
     * // Update one Tasks
     * const tasks = await prisma.tasks.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends tasksUpdateArgs>(args: SelectSubset<T, tasksUpdateArgs<ExtArgs>>): Prisma__tasksClient<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Tasks.
     * @param {tasksDeleteManyArgs} args - Arguments to filter Tasks to delete.
     * @example
     * // Delete a few Tasks
     * const { count } = await prisma.tasks.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends tasksDeleteManyArgs>(args?: SelectSubset<T, tasksDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tasksUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tasks
     * const tasks = await prisma.tasks.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends tasksUpdateManyArgs>(args: SelectSubset<T, tasksUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks and returns the data updated in the database.
     * @param {tasksUpdateManyAndReturnArgs} args - Arguments to update many Tasks.
     * @example
     * // Update many Tasks
     * const tasks = await prisma.tasks.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Tasks and only return the `scores_id`
     * const tasksWithScores_idOnly = await prisma.tasks.updateManyAndReturn({
     *   select: { scores_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends tasksUpdateManyAndReturnArgs>(args: SelectSubset<T, tasksUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Tasks.
     * @param {tasksUpsertArgs} args - Arguments to update or create a Tasks.
     * @example
     * // Update or create a Tasks
     * const tasks = await prisma.tasks.upsert({
     *   create: {
     *     // ... data to create a Tasks
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tasks we want to update
     *   }
     * })
     */
    upsert<T extends tasksUpsertArgs>(args: SelectSubset<T, tasksUpsertArgs<ExtArgs>>): Prisma__tasksClient<$Result.GetResult<Prisma.$tasksPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tasksCountArgs} args - Arguments to filter Tasks to count.
     * @example
     * // Count the number of Tasks
     * const count = await prisma.tasks.count({
     *   where: {
     *     // ... the filter for the Tasks we want to count
     *   }
     * })
    **/
    count<T extends tasksCountArgs>(
      args?: Subset<T, tasksCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TasksCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TasksAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TasksAggregateArgs>(args: Subset<T, TasksAggregateArgs>): Prisma.PrismaPromise<GetTasksAggregateType<T>>

    /**
     * Group by Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tasksGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends tasksGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: tasksGroupByArgs['orderBy'] }
        : { orderBy?: tasksGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, tasksGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTasksGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the tasks model
   */
  readonly fields: tasksFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for tasks.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__tasksClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lessons<T extends lessonsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, lessonsDefaultArgs<ExtArgs>>): Prisma__lessonsClient<$Result.GetResult<Prisma.$lessonsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    registrations<T extends registrationsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, registrationsDefaultArgs<ExtArgs>>): Prisma__registrationsClient<$Result.GetResult<Prisma.$registrationsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the tasks model
   */
  interface tasksFieldRefs {
    readonly scores_id: FieldRef<"tasks", 'Int'>
    readonly registrations_id: FieldRef<"tasks", 'Int'>
    readonly lessons_id: FieldRef<"tasks", 'Int'>
    readonly date: FieldRef<"tasks", 'DateTime'>
    readonly response: FieldRef<"tasks", 'String'>
    readonly score_obtained: FieldRef<"tasks", 'Float'>
    readonly question: FieldRef<"tasks", 'String'>
    readonly total_score: FieldRef<"tasks", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * tasks findUnique
   */
  export type tasksFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tasks
     */
    omit?: tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    /**
     * Filter, which tasks to fetch.
     */
    where: tasksWhereUniqueInput
  }

  /**
   * tasks findUniqueOrThrow
   */
  export type tasksFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tasks
     */
    omit?: tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    /**
     * Filter, which tasks to fetch.
     */
    where: tasksWhereUniqueInput
  }

  /**
   * tasks findFirst
   */
  export type tasksFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tasks
     */
    omit?: tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    /**
     * Filter, which tasks to fetch.
     */
    where?: tasksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tasks to fetch.
     */
    orderBy?: tasksOrderByWithRelationInput | tasksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tasks.
     */
    cursor?: tasksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tasks.
     */
    distinct?: TasksScalarFieldEnum | TasksScalarFieldEnum[]
  }

  /**
   * tasks findFirstOrThrow
   */
  export type tasksFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tasks
     */
    omit?: tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    /**
     * Filter, which tasks to fetch.
     */
    where?: tasksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tasks to fetch.
     */
    orderBy?: tasksOrderByWithRelationInput | tasksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for tasks.
     */
    cursor?: tasksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of tasks.
     */
    distinct?: TasksScalarFieldEnum | TasksScalarFieldEnum[]
  }

  /**
   * tasks findMany
   */
  export type tasksFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tasks
     */
    omit?: tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    /**
     * Filter, which tasks to fetch.
     */
    where?: tasksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of tasks to fetch.
     */
    orderBy?: tasksOrderByWithRelationInput | tasksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing tasks.
     */
    cursor?: tasksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` tasks.
     */
    skip?: number
    distinct?: TasksScalarFieldEnum | TasksScalarFieldEnum[]
  }

  /**
   * tasks create
   */
  export type tasksCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tasks
     */
    omit?: tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    /**
     * The data needed to create a tasks.
     */
    data: XOR<tasksCreateInput, tasksUncheckedCreateInput>
  }

  /**
   * tasks createMany
   */
  export type tasksCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many tasks.
     */
    data: tasksCreateManyInput | tasksCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * tasks createManyAndReturn
   */
  export type tasksCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the tasks
     */
    omit?: tasksOmit<ExtArgs> | null
    /**
     * The data used to create many tasks.
     */
    data: tasksCreateManyInput | tasksCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * tasks update
   */
  export type tasksUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tasks
     */
    omit?: tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    /**
     * The data needed to update a tasks.
     */
    data: XOR<tasksUpdateInput, tasksUncheckedUpdateInput>
    /**
     * Choose, which tasks to update.
     */
    where: tasksWhereUniqueInput
  }

  /**
   * tasks updateMany
   */
  export type tasksUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update tasks.
     */
    data: XOR<tasksUpdateManyMutationInput, tasksUncheckedUpdateManyInput>
    /**
     * Filter which tasks to update
     */
    where?: tasksWhereInput
    /**
     * Limit how many tasks to update.
     */
    limit?: number
  }

  /**
   * tasks updateManyAndReturn
   */
  export type tasksUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the tasks
     */
    omit?: tasksOmit<ExtArgs> | null
    /**
     * The data used to update tasks.
     */
    data: XOR<tasksUpdateManyMutationInput, tasksUncheckedUpdateManyInput>
    /**
     * Filter which tasks to update
     */
    where?: tasksWhereInput
    /**
     * Limit how many tasks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * tasks upsert
   */
  export type tasksUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tasks
     */
    omit?: tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    /**
     * The filter to search for the tasks to update in case it exists.
     */
    where: tasksWhereUniqueInput
    /**
     * In case the tasks found by the `where` argument doesn't exist, create a new tasks with this data.
     */
    create: XOR<tasksCreateInput, tasksUncheckedCreateInput>
    /**
     * In case the tasks was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tasksUpdateInput, tasksUncheckedUpdateInput>
  }

  /**
   * tasks delete
   */
  export type tasksDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tasks
     */
    omit?: tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
    /**
     * Filter which tasks to delete.
     */
    where: tasksWhereUniqueInput
  }

  /**
   * tasks deleteMany
   */
  export type tasksDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which tasks to delete
     */
    where?: tasksWhereInput
    /**
     * Limit how many tasks to delete.
     */
    limit?: number
  }

  /**
   * tasks without action
   */
  export type tasksDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the tasks
     */
    select?: tasksSelect<ExtArgs> | null
    /**
     * Omit specific fields from the tasks
     */
    omit?: tasksOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: tasksInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AdressesScalarFieldEnum: {
    id: 'id',
    street: 'street',
    zip_code: 'zip_code',
    district: 'district',
    complement: 'complement',
    city: 'city',
    state: 'state',
    number: 'number',
    active: 'active'
  };

  export type AdressesScalarFieldEnum = (typeof AdressesScalarFieldEnum)[keyof typeof AdressesScalarFieldEnum]


  export const AuthScalarFieldEnum: {
    token: 'token',
    type: 'type',
    expires_at: 'expires_at',
    refresh_token: 'refresh_token'
  };

  export type AuthScalarFieldEnum = (typeof AuthScalarFieldEnum)[keyof typeof AuthScalarFieldEnum]


  export const Boleto_apiScalarFieldEnum: {
    id: 'id',
    developer_application_key: 'developer_application_key',
    client_id: 'client_id',
    client_secret: 'client_secret'
  };

  export type Boleto_apiScalarFieldEnum = (typeof Boleto_apiScalarFieldEnum)[keyof typeof Boleto_apiScalarFieldEnum]


  export const BooksScalarFieldEnum: {
    id: 'id',
    courses_id: 'courses_id',
    name: 'name',
    position: 'position'
  };

  export type BooksScalarFieldEnum = (typeof BooksScalarFieldEnum)[keyof typeof BooksScalarFieldEnum]


  export const ClassesScalarFieldEnum: {
    id: 'id',
    theme: 'theme',
    start_date: 'start_date',
    end_date: 'end_date',
    professionals_id: 'professionals_id',
    classrooms_id: 'classrooms_id',
    presence_list_id: 'presence_list_id'
  };

  export type ClassesScalarFieldEnum = (typeof ClassesScalarFieldEnum)[keyof typeof ClassesScalarFieldEnum]


  export const ClassroomsScalarFieldEnum: {
    id: 'id',
    date: 'date',
    hour: 'hour',
    books_id: 'books_id',
    created_at: 'created_at'
  };

  export type ClassroomsScalarFieldEnum = (typeof ClassroomsScalarFieldEnum)[keyof typeof ClassroomsScalarFieldEnum]


  export const ConfigsScalarFieldEnum: {
    id: 'id',
    registrations_time: 'registrations_time'
  };

  export type ConfigsScalarFieldEnum = (typeof ConfigsScalarFieldEnum)[keyof typeof ConfigsScalarFieldEnum]


  export const CoursesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    price: 'price',
    created_at: 'created_at'
  };

  export type CoursesScalarFieldEnum = (typeof CoursesScalarFieldEnum)[keyof typeof CoursesScalarFieldEnum]


  export const LessonsScalarFieldEnum: {
    id: 'id',
    books_id: 'books_id',
    name: 'name',
    url: 'url',
    position: 'position'
  };

  export type LessonsScalarFieldEnum = (typeof LessonsScalarFieldEnum)[keyof typeof LessonsScalarFieldEnum]


  export const Monthly_feeScalarFieldEnum: {
    id: 'id',
    registrations_id: 'registrations_id',
    due_date: 'due_date',
    amount_to_be_paid: 'amount_to_be_paid',
    amount_paid: 'amount_paid',
    date_of_paid: 'date_of_paid',
    payment_method: 'payment_method',
    paid: 'paid'
  };

  export type Monthly_feeScalarFieldEnum = (typeof Monthly_feeScalarFieldEnum)[keyof typeof Monthly_feeScalarFieldEnum]


  export const PermissionsScalarFieldEnum: {
    id: 'id',
    create_classes: 'create_classes',
    update_classes: 'update_classes',
    delete_classes: 'delete_classes',
    update_students: 'update_students',
    delete_students: 'delete_students',
    create_students: 'create_students',
    update_professionals: 'update_professionals',
    create_professionals: 'create_professionals',
    delete_professionals: 'delete_professionals',
    create_registrations: 'create_registrations',
    update_registrations: 'update_registrations',
    delete_registrations: 'delete_registrations',
    dashboard: 'dashboard',
    create_courses: 'create_courses',
    update_courses: 'update_courses',
    delete_courses: 'delete_courses',
    create_classrooms: 'create_classrooms',
    update_classrooms: 'update_classrooms',
    delete_classrooms: 'delete_classrooms'
  };

  export type PermissionsScalarFieldEnum = (typeof PermissionsScalarFieldEnum)[keyof typeof PermissionsScalarFieldEnum]


  export const Presence_listScalarFieldEnum: {
    id: 'id',
    date: 'date',
    is_present: 'is_present',
    time_arrived: 'time_arrived'
  };

  export type Presence_listScalarFieldEnum = (typeof Presence_listScalarFieldEnum)[keyof typeof Presence_listScalarFieldEnum]


  export const ProfessionalsScalarFieldEnum: {
    id: 'id',
    role_id: 'role_id',
    adresses_id: 'adresses_id',
    cpf: 'cpf',
    name: 'name',
    first_name: 'first_name',
    last_name: 'last_name',
    phone: 'phone',
    email: 'email',
    gender: 'gender',
    date_of_birth: 'date_of_birth',
    active: 'active',
    admin: 'admin',
    avatar_url: 'avatar_url',
    password: 'password',
    user: 'user',
    hour_value: 'hour_value',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type ProfessionalsScalarFieldEnum = (typeof ProfessionalsScalarFieldEnum)[keyof typeof ProfessionalsScalarFieldEnum]


  export const Records_of_studentsScalarFieldEnum: {
    id: 'id',
    students_id: 'students_id',
    description: 'description',
    title: 'title',
    date: 'date'
  };

  export type Records_of_studentsScalarFieldEnum = (typeof Records_of_studentsScalarFieldEnum)[keyof typeof Records_of_studentsScalarFieldEnum]


  export const RegistrationsScalarFieldEnum: {
    id: 'id',
    students_id: 'students_id',
    courses_id: 'courses_id',
    start_date: 'start_date',
    end_date: 'end_date',
    monthly_fee_amount: 'monthly_fee_amount',
    created_by: 'created_by',
    created_at: 'created_at',
    locked: 'locked',
    completed: 'completed'
  };

  export type RegistrationsScalarFieldEnum = (typeof RegistrationsScalarFieldEnum)[keyof typeof RegistrationsScalarFieldEnum]


  export const RoleScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const StudentsScalarFieldEnum: {
    id: 'id',
    adresses_id: 'adresses_id',
    email: 'email',
    name: 'name',
    first_name: 'first_name',
    last_name: 'last_name',
    cpf: 'cpf',
    phone: 'phone',
    gender: 'gender',
    date_of_birth: 'date_of_birth',
    password: 'password',
    user: 'user',
    created_at: 'created_at',
    created_by: 'created_by',
    avatar_url: 'avatar_url',
    updated_at: 'updated_at',
    updated_by: 'updated_by',
    active: 'active'
  };

  export type StudentsScalarFieldEnum = (typeof StudentsScalarFieldEnum)[keyof typeof StudentsScalarFieldEnum]


  export const Students_has_classroomsScalarFieldEnum: {
    id: 'id',
    registrations_id: 'registrations_id',
    classrooms_id: 'classrooms_id'
  };

  export type Students_has_classroomsScalarFieldEnum = (typeof Students_has_classroomsScalarFieldEnum)[keyof typeof Students_has_classroomsScalarFieldEnum]


  export const TasksScalarFieldEnum: {
    scores_id: 'scores_id',
    registrations_id: 'registrations_id',
    lessons_id: 'lessons_id',
    date: 'date',
    response: 'response',
    score_obtained: 'score_obtained',
    question: 'question',
    total_score: 'total_score'
  };

  export type TasksScalarFieldEnum = (typeof TasksScalarFieldEnum)[keyof typeof TasksScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type adressesWhereInput = {
    AND?: adressesWhereInput | adressesWhereInput[]
    OR?: adressesWhereInput[]
    NOT?: adressesWhereInput | adressesWhereInput[]
    id?: IntFilter<"adresses"> | number
    street?: StringNullableFilter<"adresses"> | string | null
    zip_code?: StringNullableFilter<"adresses"> | string | null
    district?: StringNullableFilter<"adresses"> | string | null
    complement?: StringNullableFilter<"adresses"> | string | null
    city?: StringNullableFilter<"adresses"> | string | null
    state?: StringNullableFilter<"adresses"> | string | null
    number?: StringNullableFilter<"adresses"> | string | null
    active?: BoolFilter<"adresses"> | boolean
    professionals?: ProfessionalsListRelationFilter
    students?: StudentsListRelationFilter
  }

  export type adressesOrderByWithRelationInput = {
    id?: SortOrder
    street?: SortOrderInput | SortOrder
    zip_code?: SortOrderInput | SortOrder
    district?: SortOrderInput | SortOrder
    complement?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    number?: SortOrderInput | SortOrder
    active?: SortOrder
    professionals?: professionalsOrderByRelationAggregateInput
    students?: studentsOrderByRelationAggregateInput
  }

  export type adressesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: adressesWhereInput | adressesWhereInput[]
    OR?: adressesWhereInput[]
    NOT?: adressesWhereInput | adressesWhereInput[]
    street?: StringNullableFilter<"adresses"> | string | null
    zip_code?: StringNullableFilter<"adresses"> | string | null
    district?: StringNullableFilter<"adresses"> | string | null
    complement?: StringNullableFilter<"adresses"> | string | null
    city?: StringNullableFilter<"adresses"> | string | null
    state?: StringNullableFilter<"adresses"> | string | null
    number?: StringNullableFilter<"adresses"> | string | null
    active?: BoolFilter<"adresses"> | boolean
    professionals?: ProfessionalsListRelationFilter
    students?: StudentsListRelationFilter
  }, "id">

  export type adressesOrderByWithAggregationInput = {
    id?: SortOrder
    street?: SortOrderInput | SortOrder
    zip_code?: SortOrderInput | SortOrder
    district?: SortOrderInput | SortOrder
    complement?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    number?: SortOrderInput | SortOrder
    active?: SortOrder
    _count?: adressesCountOrderByAggregateInput
    _avg?: adressesAvgOrderByAggregateInput
    _max?: adressesMaxOrderByAggregateInput
    _min?: adressesMinOrderByAggregateInput
    _sum?: adressesSumOrderByAggregateInput
  }

  export type adressesScalarWhereWithAggregatesInput = {
    AND?: adressesScalarWhereWithAggregatesInput | adressesScalarWhereWithAggregatesInput[]
    OR?: adressesScalarWhereWithAggregatesInput[]
    NOT?: adressesScalarWhereWithAggregatesInput | adressesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"adresses"> | number
    street?: StringNullableWithAggregatesFilter<"adresses"> | string | null
    zip_code?: StringNullableWithAggregatesFilter<"adresses"> | string | null
    district?: StringNullableWithAggregatesFilter<"adresses"> | string | null
    complement?: StringNullableWithAggregatesFilter<"adresses"> | string | null
    city?: StringNullableWithAggregatesFilter<"adresses"> | string | null
    state?: StringNullableWithAggregatesFilter<"adresses"> | string | null
    number?: StringNullableWithAggregatesFilter<"adresses"> | string | null
    active?: BoolWithAggregatesFilter<"adresses"> | boolean
  }

  export type authWhereInput = {
    AND?: authWhereInput | authWhereInput[]
    OR?: authWhereInput[]
    NOT?: authWhereInput | authWhereInput[]
    token?: StringFilter<"auth"> | string
    type?: StringFilter<"auth"> | string
    expires_at?: DateTimeFilter<"auth"> | Date | string
    refresh_token?: StringFilter<"auth"> | string
  }

  export type authOrderByWithRelationInput = {
    token?: SortOrder
    type?: SortOrder
    expires_at?: SortOrder
    refresh_token?: SortOrder
  }

  export type authWhereUniqueInput = Prisma.AtLeast<{
    token?: string
    AND?: authWhereInput | authWhereInput[]
    OR?: authWhereInput[]
    NOT?: authWhereInput | authWhereInput[]
    type?: StringFilter<"auth"> | string
    expires_at?: DateTimeFilter<"auth"> | Date | string
    refresh_token?: StringFilter<"auth"> | string
  }, "token" | "token">

  export type authOrderByWithAggregationInput = {
    token?: SortOrder
    type?: SortOrder
    expires_at?: SortOrder
    refresh_token?: SortOrder
    _count?: authCountOrderByAggregateInput
    _max?: authMaxOrderByAggregateInput
    _min?: authMinOrderByAggregateInput
  }

  export type authScalarWhereWithAggregatesInput = {
    AND?: authScalarWhereWithAggregatesInput | authScalarWhereWithAggregatesInput[]
    OR?: authScalarWhereWithAggregatesInput[]
    NOT?: authScalarWhereWithAggregatesInput | authScalarWhereWithAggregatesInput[]
    token?: StringWithAggregatesFilter<"auth"> | string
    type?: StringWithAggregatesFilter<"auth"> | string
    expires_at?: DateTimeWithAggregatesFilter<"auth"> | Date | string
    refresh_token?: StringWithAggregatesFilter<"auth"> | string
  }

  export type boleto_apiWhereInput = {
    AND?: boleto_apiWhereInput | boleto_apiWhereInput[]
    OR?: boleto_apiWhereInput[]
    NOT?: boleto_apiWhereInput | boleto_apiWhereInput[]
    id?: IntFilter<"boleto_api"> | number
    developer_application_key?: StringFilter<"boleto_api"> | string
    client_id?: StringFilter<"boleto_api"> | string
    client_secret?: StringFilter<"boleto_api"> | string
  }

  export type boleto_apiOrderByWithRelationInput = {
    id?: SortOrder
    developer_application_key?: SortOrder
    client_id?: SortOrder
    client_secret?: SortOrder
  }

  export type boleto_apiWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: boleto_apiWhereInput | boleto_apiWhereInput[]
    OR?: boleto_apiWhereInput[]
    NOT?: boleto_apiWhereInput | boleto_apiWhereInput[]
    developer_application_key?: StringFilter<"boleto_api"> | string
    client_id?: StringFilter<"boleto_api"> | string
    client_secret?: StringFilter<"boleto_api"> | string
  }, "id">

  export type boleto_apiOrderByWithAggregationInput = {
    id?: SortOrder
    developer_application_key?: SortOrder
    client_id?: SortOrder
    client_secret?: SortOrder
    _count?: boleto_apiCountOrderByAggregateInput
    _avg?: boleto_apiAvgOrderByAggregateInput
    _max?: boleto_apiMaxOrderByAggregateInput
    _min?: boleto_apiMinOrderByAggregateInput
    _sum?: boleto_apiSumOrderByAggregateInput
  }

  export type boleto_apiScalarWhereWithAggregatesInput = {
    AND?: boleto_apiScalarWhereWithAggregatesInput | boleto_apiScalarWhereWithAggregatesInput[]
    OR?: boleto_apiScalarWhereWithAggregatesInput[]
    NOT?: boleto_apiScalarWhereWithAggregatesInput | boleto_apiScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"boleto_api"> | number
    developer_application_key?: StringWithAggregatesFilter<"boleto_api"> | string
    client_id?: StringWithAggregatesFilter<"boleto_api"> | string
    client_secret?: StringWithAggregatesFilter<"boleto_api"> | string
  }

  export type booksWhereInput = {
    AND?: booksWhereInput | booksWhereInput[]
    OR?: booksWhereInput[]
    NOT?: booksWhereInput | booksWhereInput[]
    id?: IntFilter<"books"> | number
    courses_id?: IntFilter<"books"> | number
    name?: StringFilter<"books"> | string
    position?: IntFilter<"books"> | number
    courses?: XOR<CoursesScalarRelationFilter, coursesWhereInput>
    classrooms?: ClassroomsListRelationFilter
    lessons?: LessonsListRelationFilter
  }

  export type booksOrderByWithRelationInput = {
    id?: SortOrder
    courses_id?: SortOrder
    name?: SortOrder
    position?: SortOrder
    courses?: coursesOrderByWithRelationInput
    classrooms?: classroomsOrderByRelationAggregateInput
    lessons?: lessonsOrderByRelationAggregateInput
  }

  export type booksWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: booksWhereInput | booksWhereInput[]
    OR?: booksWhereInput[]
    NOT?: booksWhereInput | booksWhereInput[]
    courses_id?: IntFilter<"books"> | number
    name?: StringFilter<"books"> | string
    position?: IntFilter<"books"> | number
    courses?: XOR<CoursesScalarRelationFilter, coursesWhereInput>
    classrooms?: ClassroomsListRelationFilter
    lessons?: LessonsListRelationFilter
  }, "id">

  export type booksOrderByWithAggregationInput = {
    id?: SortOrder
    courses_id?: SortOrder
    name?: SortOrder
    position?: SortOrder
    _count?: booksCountOrderByAggregateInput
    _avg?: booksAvgOrderByAggregateInput
    _max?: booksMaxOrderByAggregateInput
    _min?: booksMinOrderByAggregateInput
    _sum?: booksSumOrderByAggregateInput
  }

  export type booksScalarWhereWithAggregatesInput = {
    AND?: booksScalarWhereWithAggregatesInput | booksScalarWhereWithAggregatesInput[]
    OR?: booksScalarWhereWithAggregatesInput[]
    NOT?: booksScalarWhereWithAggregatesInput | booksScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"books"> | number
    courses_id?: IntWithAggregatesFilter<"books"> | number
    name?: StringWithAggregatesFilter<"books"> | string
    position?: IntWithAggregatesFilter<"books"> | number
  }

  export type classesWhereInput = {
    AND?: classesWhereInput | classesWhereInput[]
    OR?: classesWhereInput[]
    NOT?: classesWhereInput | classesWhereInput[]
    id?: IntFilter<"classes"> | number
    theme?: StringFilter<"classes"> | string
    start_date?: DateTimeFilter<"classes"> | Date | string
    end_date?: DateTimeFilter<"classes"> | Date | string
    professionals_id?: IntFilter<"classes"> | number
    classrooms_id?: IntFilter<"classes"> | number
    presence_list_id?: IntFilter<"classes"> | number
    classrooms?: XOR<ClassroomsScalarRelationFilter, classroomsWhereInput>
    presence_list?: XOR<Presence_listScalarRelationFilter, presence_listWhereInput>
    professionals?: XOR<ProfessionalsScalarRelationFilter, professionalsWhereInput>
  }

  export type classesOrderByWithRelationInput = {
    id?: SortOrder
    theme?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    professionals_id?: SortOrder
    classrooms_id?: SortOrder
    presence_list_id?: SortOrder
    classrooms?: classroomsOrderByWithRelationInput
    presence_list?: presence_listOrderByWithRelationInput
    professionals?: professionalsOrderByWithRelationInput
  }

  export type classesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: classesWhereInput | classesWhereInput[]
    OR?: classesWhereInput[]
    NOT?: classesWhereInput | classesWhereInput[]
    theme?: StringFilter<"classes"> | string
    start_date?: DateTimeFilter<"classes"> | Date | string
    end_date?: DateTimeFilter<"classes"> | Date | string
    professionals_id?: IntFilter<"classes"> | number
    classrooms_id?: IntFilter<"classes"> | number
    presence_list_id?: IntFilter<"classes"> | number
    classrooms?: XOR<ClassroomsScalarRelationFilter, classroomsWhereInput>
    presence_list?: XOR<Presence_listScalarRelationFilter, presence_listWhereInput>
    professionals?: XOR<ProfessionalsScalarRelationFilter, professionalsWhereInput>
  }, "id">

  export type classesOrderByWithAggregationInput = {
    id?: SortOrder
    theme?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    professionals_id?: SortOrder
    classrooms_id?: SortOrder
    presence_list_id?: SortOrder
    _count?: classesCountOrderByAggregateInput
    _avg?: classesAvgOrderByAggregateInput
    _max?: classesMaxOrderByAggregateInput
    _min?: classesMinOrderByAggregateInput
    _sum?: classesSumOrderByAggregateInput
  }

  export type classesScalarWhereWithAggregatesInput = {
    AND?: classesScalarWhereWithAggregatesInput | classesScalarWhereWithAggregatesInput[]
    OR?: classesScalarWhereWithAggregatesInput[]
    NOT?: classesScalarWhereWithAggregatesInput | classesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"classes"> | number
    theme?: StringWithAggregatesFilter<"classes"> | string
    start_date?: DateTimeWithAggregatesFilter<"classes"> | Date | string
    end_date?: DateTimeWithAggregatesFilter<"classes"> | Date | string
    professionals_id?: IntWithAggregatesFilter<"classes"> | number
    classrooms_id?: IntWithAggregatesFilter<"classes"> | number
    presence_list_id?: IntWithAggregatesFilter<"classes"> | number
  }

  export type classroomsWhereInput = {
    AND?: classroomsWhereInput | classroomsWhereInput[]
    OR?: classroomsWhereInput[]
    NOT?: classroomsWhereInput | classroomsWhereInput[]
    id?: IntFilter<"classrooms"> | number
    date?: StringFilter<"classrooms"> | string
    hour?: StringFilter<"classrooms"> | string
    books_id?: IntFilter<"classrooms"> | number
    created_at?: DateTimeFilter<"classrooms"> | Date | string
    classes?: ClassesListRelationFilter
    books?: XOR<BooksScalarRelationFilter, booksWhereInput>
    students_has_classrooms?: Students_has_classroomsListRelationFilter
  }

  export type classroomsOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    hour?: SortOrder
    books_id?: SortOrder
    created_at?: SortOrder
    classes?: classesOrderByRelationAggregateInput
    books?: booksOrderByWithRelationInput
    students_has_classrooms?: students_has_classroomsOrderByRelationAggregateInput
  }

  export type classroomsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: classroomsWhereInput | classroomsWhereInput[]
    OR?: classroomsWhereInput[]
    NOT?: classroomsWhereInput | classroomsWhereInput[]
    date?: StringFilter<"classrooms"> | string
    hour?: StringFilter<"classrooms"> | string
    books_id?: IntFilter<"classrooms"> | number
    created_at?: DateTimeFilter<"classrooms"> | Date | string
    classes?: ClassesListRelationFilter
    books?: XOR<BooksScalarRelationFilter, booksWhereInput>
    students_has_classrooms?: Students_has_classroomsListRelationFilter
  }, "id">

  export type classroomsOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    hour?: SortOrder
    books_id?: SortOrder
    created_at?: SortOrder
    _count?: classroomsCountOrderByAggregateInput
    _avg?: classroomsAvgOrderByAggregateInput
    _max?: classroomsMaxOrderByAggregateInput
    _min?: classroomsMinOrderByAggregateInput
    _sum?: classroomsSumOrderByAggregateInput
  }

  export type classroomsScalarWhereWithAggregatesInput = {
    AND?: classroomsScalarWhereWithAggregatesInput | classroomsScalarWhereWithAggregatesInput[]
    OR?: classroomsScalarWhereWithAggregatesInput[]
    NOT?: classroomsScalarWhereWithAggregatesInput | classroomsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"classrooms"> | number
    date?: StringWithAggregatesFilter<"classrooms"> | string
    hour?: StringWithAggregatesFilter<"classrooms"> | string
    books_id?: IntWithAggregatesFilter<"classrooms"> | number
    created_at?: DateTimeWithAggregatesFilter<"classrooms"> | Date | string
  }

  export type configsWhereInput = {
    AND?: configsWhereInput | configsWhereInput[]
    OR?: configsWhereInput[]
    NOT?: configsWhereInput | configsWhereInput[]
    id?: IntFilter<"configs"> | number
    registrations_time?: IntNullableFilter<"configs"> | number | null
  }

  export type configsOrderByWithRelationInput = {
    id?: SortOrder
    registrations_time?: SortOrderInput | SortOrder
  }

  export type configsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: configsWhereInput | configsWhereInput[]
    OR?: configsWhereInput[]
    NOT?: configsWhereInput | configsWhereInput[]
    registrations_time?: IntNullableFilter<"configs"> | number | null
  }, "id">

  export type configsOrderByWithAggregationInput = {
    id?: SortOrder
    registrations_time?: SortOrderInput | SortOrder
    _count?: configsCountOrderByAggregateInput
    _avg?: configsAvgOrderByAggregateInput
    _max?: configsMaxOrderByAggregateInput
    _min?: configsMinOrderByAggregateInput
    _sum?: configsSumOrderByAggregateInput
  }

  export type configsScalarWhereWithAggregatesInput = {
    AND?: configsScalarWhereWithAggregatesInput | configsScalarWhereWithAggregatesInput[]
    OR?: configsScalarWhereWithAggregatesInput[]
    NOT?: configsScalarWhereWithAggregatesInput | configsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"configs"> | number
    registrations_time?: IntNullableWithAggregatesFilter<"configs"> | number | null
  }

  export type coursesWhereInput = {
    AND?: coursesWhereInput | coursesWhereInput[]
    OR?: coursesWhereInput[]
    NOT?: coursesWhereInput | coursesWhereInput[]
    id?: IntFilter<"courses"> | number
    name?: StringFilter<"courses"> | string
    price?: FloatFilter<"courses"> | number
    created_at?: DateTimeFilter<"courses"> | Date | string
    books?: BooksListRelationFilter
    registrations?: RegistrationsListRelationFilter
  }

  export type coursesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    created_at?: SortOrder
    books?: booksOrderByRelationAggregateInput
    registrations?: registrationsOrderByRelationAggregateInput
  }

  export type coursesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: coursesWhereInput | coursesWhereInput[]
    OR?: coursesWhereInput[]
    NOT?: coursesWhereInput | coursesWhereInput[]
    name?: StringFilter<"courses"> | string
    price?: FloatFilter<"courses"> | number
    created_at?: DateTimeFilter<"courses"> | Date | string
    books?: BooksListRelationFilter
    registrations?: RegistrationsListRelationFilter
  }, "id">

  export type coursesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    created_at?: SortOrder
    _count?: coursesCountOrderByAggregateInput
    _avg?: coursesAvgOrderByAggregateInput
    _max?: coursesMaxOrderByAggregateInput
    _min?: coursesMinOrderByAggregateInput
    _sum?: coursesSumOrderByAggregateInput
  }

  export type coursesScalarWhereWithAggregatesInput = {
    AND?: coursesScalarWhereWithAggregatesInput | coursesScalarWhereWithAggregatesInput[]
    OR?: coursesScalarWhereWithAggregatesInput[]
    NOT?: coursesScalarWhereWithAggregatesInput | coursesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"courses"> | number
    name?: StringWithAggregatesFilter<"courses"> | string
    price?: FloatWithAggregatesFilter<"courses"> | number
    created_at?: DateTimeWithAggregatesFilter<"courses"> | Date | string
  }

  export type lessonsWhereInput = {
    AND?: lessonsWhereInput | lessonsWhereInput[]
    OR?: lessonsWhereInput[]
    NOT?: lessonsWhereInput | lessonsWhereInput[]
    id?: IntFilter<"lessons"> | number
    books_id?: IntFilter<"lessons"> | number
    name?: StringNullableFilter<"lessons"> | string | null
    url?: StringNullableFilter<"lessons"> | string | null
    position?: IntNullableFilter<"lessons"> | number | null
    books?: XOR<BooksScalarRelationFilter, booksWhereInput>
    tasks?: TasksListRelationFilter
  }

  export type lessonsOrderByWithRelationInput = {
    id?: SortOrder
    books_id?: SortOrder
    name?: SortOrderInput | SortOrder
    url?: SortOrderInput | SortOrder
    position?: SortOrderInput | SortOrder
    books?: booksOrderByWithRelationInput
    tasks?: tasksOrderByRelationAggregateInput
  }

  export type lessonsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: lessonsWhereInput | lessonsWhereInput[]
    OR?: lessonsWhereInput[]
    NOT?: lessonsWhereInput | lessonsWhereInput[]
    books_id?: IntFilter<"lessons"> | number
    name?: StringNullableFilter<"lessons"> | string | null
    url?: StringNullableFilter<"lessons"> | string | null
    position?: IntNullableFilter<"lessons"> | number | null
    books?: XOR<BooksScalarRelationFilter, booksWhereInput>
    tasks?: TasksListRelationFilter
  }, "id">

  export type lessonsOrderByWithAggregationInput = {
    id?: SortOrder
    books_id?: SortOrder
    name?: SortOrderInput | SortOrder
    url?: SortOrderInput | SortOrder
    position?: SortOrderInput | SortOrder
    _count?: lessonsCountOrderByAggregateInput
    _avg?: lessonsAvgOrderByAggregateInput
    _max?: lessonsMaxOrderByAggregateInput
    _min?: lessonsMinOrderByAggregateInput
    _sum?: lessonsSumOrderByAggregateInput
  }

  export type lessonsScalarWhereWithAggregatesInput = {
    AND?: lessonsScalarWhereWithAggregatesInput | lessonsScalarWhereWithAggregatesInput[]
    OR?: lessonsScalarWhereWithAggregatesInput[]
    NOT?: lessonsScalarWhereWithAggregatesInput | lessonsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"lessons"> | number
    books_id?: IntWithAggregatesFilter<"lessons"> | number
    name?: StringNullableWithAggregatesFilter<"lessons"> | string | null
    url?: StringNullableWithAggregatesFilter<"lessons"> | string | null
    position?: IntNullableWithAggregatesFilter<"lessons"> | number | null
  }

  export type monthly_feeWhereInput = {
    AND?: monthly_feeWhereInput | monthly_feeWhereInput[]
    OR?: monthly_feeWhereInput[]
    NOT?: monthly_feeWhereInput | monthly_feeWhereInput[]
    id?: IntFilter<"monthly_fee"> | number
    registrations_id?: IntFilter<"monthly_fee"> | number
    due_date?: DateTimeNullableFilter<"monthly_fee"> | Date | string | null
    amount_to_be_paid?: FloatNullableFilter<"monthly_fee"> | number | null
    amount_paid?: FloatNullableFilter<"monthly_fee"> | number | null
    date_of_paid?: DateTimeNullableFilter<"monthly_fee"> | Date | string | null
    payment_method?: StringNullableFilter<"monthly_fee"> | string | null
    paid?: BoolNullableFilter<"monthly_fee"> | boolean | null
    registrations?: XOR<RegistrationsScalarRelationFilter, registrationsWhereInput>
  }

  export type monthly_feeOrderByWithRelationInput = {
    id?: SortOrder
    registrations_id?: SortOrder
    due_date?: SortOrderInput | SortOrder
    amount_to_be_paid?: SortOrderInput | SortOrder
    amount_paid?: SortOrderInput | SortOrder
    date_of_paid?: SortOrderInput | SortOrder
    payment_method?: SortOrderInput | SortOrder
    paid?: SortOrderInput | SortOrder
    registrations?: registrationsOrderByWithRelationInput
  }

  export type monthly_feeWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: monthly_feeWhereInput | monthly_feeWhereInput[]
    OR?: monthly_feeWhereInput[]
    NOT?: monthly_feeWhereInput | monthly_feeWhereInput[]
    registrations_id?: IntFilter<"monthly_fee"> | number
    due_date?: DateTimeNullableFilter<"monthly_fee"> | Date | string | null
    amount_to_be_paid?: FloatNullableFilter<"monthly_fee"> | number | null
    amount_paid?: FloatNullableFilter<"monthly_fee"> | number | null
    date_of_paid?: DateTimeNullableFilter<"monthly_fee"> | Date | string | null
    payment_method?: StringNullableFilter<"monthly_fee"> | string | null
    paid?: BoolNullableFilter<"monthly_fee"> | boolean | null
    registrations?: XOR<RegistrationsScalarRelationFilter, registrationsWhereInput>
  }, "id">

  export type monthly_feeOrderByWithAggregationInput = {
    id?: SortOrder
    registrations_id?: SortOrder
    due_date?: SortOrderInput | SortOrder
    amount_to_be_paid?: SortOrderInput | SortOrder
    amount_paid?: SortOrderInput | SortOrder
    date_of_paid?: SortOrderInput | SortOrder
    payment_method?: SortOrderInput | SortOrder
    paid?: SortOrderInput | SortOrder
    _count?: monthly_feeCountOrderByAggregateInput
    _avg?: monthly_feeAvgOrderByAggregateInput
    _max?: monthly_feeMaxOrderByAggregateInput
    _min?: monthly_feeMinOrderByAggregateInput
    _sum?: monthly_feeSumOrderByAggregateInput
  }

  export type monthly_feeScalarWhereWithAggregatesInput = {
    AND?: monthly_feeScalarWhereWithAggregatesInput | monthly_feeScalarWhereWithAggregatesInput[]
    OR?: monthly_feeScalarWhereWithAggregatesInput[]
    NOT?: monthly_feeScalarWhereWithAggregatesInput | monthly_feeScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"monthly_fee"> | number
    registrations_id?: IntWithAggregatesFilter<"monthly_fee"> | number
    due_date?: DateTimeNullableWithAggregatesFilter<"monthly_fee"> | Date | string | null
    amount_to_be_paid?: FloatNullableWithAggregatesFilter<"monthly_fee"> | number | null
    amount_paid?: FloatNullableWithAggregatesFilter<"monthly_fee"> | number | null
    date_of_paid?: DateTimeNullableWithAggregatesFilter<"monthly_fee"> | Date | string | null
    payment_method?: StringNullableWithAggregatesFilter<"monthly_fee"> | string | null
    paid?: BoolNullableWithAggregatesFilter<"monthly_fee"> | boolean | null
  }

  export type permissionsWhereInput = {
    AND?: permissionsWhereInput | permissionsWhereInput[]
    OR?: permissionsWhereInput[]
    NOT?: permissionsWhereInput | permissionsWhereInput[]
    id?: IntFilter<"permissions"> | number
    create_classes?: BoolNullableFilter<"permissions"> | boolean | null
    update_classes?: BoolNullableFilter<"permissions"> | boolean | null
    delete_classes?: BoolNullableFilter<"permissions"> | boolean | null
    update_students?: BoolNullableFilter<"permissions"> | boolean | null
    delete_students?: BoolNullableFilter<"permissions"> | boolean | null
    create_students?: BoolNullableFilter<"permissions"> | boolean | null
    update_professionals?: BoolNullableFilter<"permissions"> | boolean | null
    create_professionals?: BoolNullableFilter<"permissions"> | boolean | null
    delete_professionals?: BoolNullableFilter<"permissions"> | boolean | null
    create_registrations?: BoolNullableFilter<"permissions"> | boolean | null
    update_registrations?: BoolNullableFilter<"permissions"> | boolean | null
    delete_registrations?: BoolNullableFilter<"permissions"> | boolean | null
    dashboard?: BoolNullableFilter<"permissions"> | boolean | null
    create_courses?: BoolNullableFilter<"permissions"> | boolean | null
    update_courses?: BoolNullableFilter<"permissions"> | boolean | null
    delete_courses?: BoolNullableFilter<"permissions"> | boolean | null
    create_classrooms?: BoolNullableFilter<"permissions"> | boolean | null
    update_classrooms?: BoolNullableFilter<"permissions"> | boolean | null
    delete_classrooms?: BoolNullableFilter<"permissions"> | boolean | null
  }

  export type permissionsOrderByWithRelationInput = {
    id?: SortOrder
    create_classes?: SortOrderInput | SortOrder
    update_classes?: SortOrderInput | SortOrder
    delete_classes?: SortOrderInput | SortOrder
    update_students?: SortOrderInput | SortOrder
    delete_students?: SortOrderInput | SortOrder
    create_students?: SortOrderInput | SortOrder
    update_professionals?: SortOrderInput | SortOrder
    create_professionals?: SortOrderInput | SortOrder
    delete_professionals?: SortOrderInput | SortOrder
    create_registrations?: SortOrderInput | SortOrder
    update_registrations?: SortOrderInput | SortOrder
    delete_registrations?: SortOrderInput | SortOrder
    dashboard?: SortOrderInput | SortOrder
    create_courses?: SortOrderInput | SortOrder
    update_courses?: SortOrderInput | SortOrder
    delete_courses?: SortOrderInput | SortOrder
    create_classrooms?: SortOrderInput | SortOrder
    update_classrooms?: SortOrderInput | SortOrder
    delete_classrooms?: SortOrderInput | SortOrder
  }

  export type permissionsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: permissionsWhereInput | permissionsWhereInput[]
    OR?: permissionsWhereInput[]
    NOT?: permissionsWhereInput | permissionsWhereInput[]
    create_classes?: BoolNullableFilter<"permissions"> | boolean | null
    update_classes?: BoolNullableFilter<"permissions"> | boolean | null
    delete_classes?: BoolNullableFilter<"permissions"> | boolean | null
    update_students?: BoolNullableFilter<"permissions"> | boolean | null
    delete_students?: BoolNullableFilter<"permissions"> | boolean | null
    create_students?: BoolNullableFilter<"permissions"> | boolean | null
    update_professionals?: BoolNullableFilter<"permissions"> | boolean | null
    create_professionals?: BoolNullableFilter<"permissions"> | boolean | null
    delete_professionals?: BoolNullableFilter<"permissions"> | boolean | null
    create_registrations?: BoolNullableFilter<"permissions"> | boolean | null
    update_registrations?: BoolNullableFilter<"permissions"> | boolean | null
    delete_registrations?: BoolNullableFilter<"permissions"> | boolean | null
    dashboard?: BoolNullableFilter<"permissions"> | boolean | null
    create_courses?: BoolNullableFilter<"permissions"> | boolean | null
    update_courses?: BoolNullableFilter<"permissions"> | boolean | null
    delete_courses?: BoolNullableFilter<"permissions"> | boolean | null
    create_classrooms?: BoolNullableFilter<"permissions"> | boolean | null
    update_classrooms?: BoolNullableFilter<"permissions"> | boolean | null
    delete_classrooms?: BoolNullableFilter<"permissions"> | boolean | null
  }, "id">

  export type permissionsOrderByWithAggregationInput = {
    id?: SortOrder
    create_classes?: SortOrderInput | SortOrder
    update_classes?: SortOrderInput | SortOrder
    delete_classes?: SortOrderInput | SortOrder
    update_students?: SortOrderInput | SortOrder
    delete_students?: SortOrderInput | SortOrder
    create_students?: SortOrderInput | SortOrder
    update_professionals?: SortOrderInput | SortOrder
    create_professionals?: SortOrderInput | SortOrder
    delete_professionals?: SortOrderInput | SortOrder
    create_registrations?: SortOrderInput | SortOrder
    update_registrations?: SortOrderInput | SortOrder
    delete_registrations?: SortOrderInput | SortOrder
    dashboard?: SortOrderInput | SortOrder
    create_courses?: SortOrderInput | SortOrder
    update_courses?: SortOrderInput | SortOrder
    delete_courses?: SortOrderInput | SortOrder
    create_classrooms?: SortOrderInput | SortOrder
    update_classrooms?: SortOrderInput | SortOrder
    delete_classrooms?: SortOrderInput | SortOrder
    _count?: permissionsCountOrderByAggregateInput
    _avg?: permissionsAvgOrderByAggregateInput
    _max?: permissionsMaxOrderByAggregateInput
    _min?: permissionsMinOrderByAggregateInput
    _sum?: permissionsSumOrderByAggregateInput
  }

  export type permissionsScalarWhereWithAggregatesInput = {
    AND?: permissionsScalarWhereWithAggregatesInput | permissionsScalarWhereWithAggregatesInput[]
    OR?: permissionsScalarWhereWithAggregatesInput[]
    NOT?: permissionsScalarWhereWithAggregatesInput | permissionsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"permissions"> | number
    create_classes?: BoolNullableWithAggregatesFilter<"permissions"> | boolean | null
    update_classes?: BoolNullableWithAggregatesFilter<"permissions"> | boolean | null
    delete_classes?: BoolNullableWithAggregatesFilter<"permissions"> | boolean | null
    update_students?: BoolNullableWithAggregatesFilter<"permissions"> | boolean | null
    delete_students?: BoolNullableWithAggregatesFilter<"permissions"> | boolean | null
    create_students?: BoolNullableWithAggregatesFilter<"permissions"> | boolean | null
    update_professionals?: BoolNullableWithAggregatesFilter<"permissions"> | boolean | null
    create_professionals?: BoolNullableWithAggregatesFilter<"permissions"> | boolean | null
    delete_professionals?: BoolNullableWithAggregatesFilter<"permissions"> | boolean | null
    create_registrations?: BoolNullableWithAggregatesFilter<"permissions"> | boolean | null
    update_registrations?: BoolNullableWithAggregatesFilter<"permissions"> | boolean | null
    delete_registrations?: BoolNullableWithAggregatesFilter<"permissions"> | boolean | null
    dashboard?: BoolNullableWithAggregatesFilter<"permissions"> | boolean | null
    create_courses?: BoolNullableWithAggregatesFilter<"permissions"> | boolean | null
    update_courses?: BoolNullableWithAggregatesFilter<"permissions"> | boolean | null
    delete_courses?: BoolNullableWithAggregatesFilter<"permissions"> | boolean | null
    create_classrooms?: BoolNullableWithAggregatesFilter<"permissions"> | boolean | null
    update_classrooms?: BoolNullableWithAggregatesFilter<"permissions"> | boolean | null
    delete_classrooms?: BoolNullableWithAggregatesFilter<"permissions"> | boolean | null
  }

  export type presence_listWhereInput = {
    AND?: presence_listWhereInput | presence_listWhereInput[]
    OR?: presence_listWhereInput[]
    NOT?: presence_listWhereInput | presence_listWhereInput[]
    id?: IntFilter<"presence_list"> | number
    date?: DateTimeNullableFilter<"presence_list"> | Date | string | null
    is_present?: BoolNullableFilter<"presence_list"> | boolean | null
    time_arrived?: DateTimeNullableFilter<"presence_list"> | Date | string | null
    classes?: ClassesListRelationFilter
  }

  export type presence_listOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrderInput | SortOrder
    is_present?: SortOrderInput | SortOrder
    time_arrived?: SortOrderInput | SortOrder
    classes?: classesOrderByRelationAggregateInput
  }

  export type presence_listWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: presence_listWhereInput | presence_listWhereInput[]
    OR?: presence_listWhereInput[]
    NOT?: presence_listWhereInput | presence_listWhereInput[]
    date?: DateTimeNullableFilter<"presence_list"> | Date | string | null
    is_present?: BoolNullableFilter<"presence_list"> | boolean | null
    time_arrived?: DateTimeNullableFilter<"presence_list"> | Date | string | null
    classes?: ClassesListRelationFilter
  }, "id">

  export type presence_listOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrderInput | SortOrder
    is_present?: SortOrderInput | SortOrder
    time_arrived?: SortOrderInput | SortOrder
    _count?: presence_listCountOrderByAggregateInput
    _avg?: presence_listAvgOrderByAggregateInput
    _max?: presence_listMaxOrderByAggregateInput
    _min?: presence_listMinOrderByAggregateInput
    _sum?: presence_listSumOrderByAggregateInput
  }

  export type presence_listScalarWhereWithAggregatesInput = {
    AND?: presence_listScalarWhereWithAggregatesInput | presence_listScalarWhereWithAggregatesInput[]
    OR?: presence_listScalarWhereWithAggregatesInput[]
    NOT?: presence_listScalarWhereWithAggregatesInput | presence_listScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"presence_list"> | number
    date?: DateTimeNullableWithAggregatesFilter<"presence_list"> | Date | string | null
    is_present?: BoolNullableWithAggregatesFilter<"presence_list"> | boolean | null
    time_arrived?: DateTimeNullableWithAggregatesFilter<"presence_list"> | Date | string | null
  }

  export type professionalsWhereInput = {
    AND?: professionalsWhereInput | professionalsWhereInput[]
    OR?: professionalsWhereInput[]
    NOT?: professionalsWhereInput | professionalsWhereInput[]
    id?: IntFilter<"professionals"> | number
    role_id?: IntFilter<"professionals"> | number
    adresses_id?: IntFilter<"professionals"> | number
    cpf?: StringFilter<"professionals"> | string
    name?: StringNullableFilter<"professionals"> | string | null
    first_name?: StringFilter<"professionals"> | string
    last_name?: StringFilter<"professionals"> | string
    phone?: StringFilter<"professionals"> | string
    email?: StringFilter<"professionals"> | string
    gender?: StringFilter<"professionals"> | string
    date_of_birth?: DateTimeFilter<"professionals"> | Date | string
    active?: BoolFilter<"professionals"> | boolean
    admin?: BoolFilter<"professionals"> | boolean
    avatar_url?: StringNullableFilter<"professionals"> | string | null
    password?: StringFilter<"professionals"> | string
    user?: StringFilter<"professionals"> | string
    hour_value?: FloatNullableFilter<"professionals"> | number | null
    created_at?: DateTimeNullableFilter<"professionals"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"professionals"> | Date | string | null
    classes?: ClassesListRelationFilter
    adresses?: XOR<AdressesScalarRelationFilter, adressesWhereInput>
    role?: XOR<RoleScalarRelationFilter, roleWhereInput>
  }

  export type professionalsOrderByWithRelationInput = {
    id?: SortOrder
    role_id?: SortOrder
    adresses_id?: SortOrder
    cpf?: SortOrder
    name?: SortOrderInput | SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    gender?: SortOrder
    date_of_birth?: SortOrder
    active?: SortOrder
    admin?: SortOrder
    avatar_url?: SortOrderInput | SortOrder
    password?: SortOrder
    user?: SortOrder
    hour_value?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    classes?: classesOrderByRelationAggregateInput
    adresses?: adressesOrderByWithRelationInput
    role?: roleOrderByWithRelationInput
  }

  export type professionalsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    cpf?: string
    email?: string
    AND?: professionalsWhereInput | professionalsWhereInput[]
    OR?: professionalsWhereInput[]
    NOT?: professionalsWhereInput | professionalsWhereInput[]
    role_id?: IntFilter<"professionals"> | number
    adresses_id?: IntFilter<"professionals"> | number
    name?: StringNullableFilter<"professionals"> | string | null
    first_name?: StringFilter<"professionals"> | string
    last_name?: StringFilter<"professionals"> | string
    phone?: StringFilter<"professionals"> | string
    gender?: StringFilter<"professionals"> | string
    date_of_birth?: DateTimeFilter<"professionals"> | Date | string
    active?: BoolFilter<"professionals"> | boolean
    admin?: BoolFilter<"professionals"> | boolean
    avatar_url?: StringNullableFilter<"professionals"> | string | null
    password?: StringFilter<"professionals"> | string
    user?: StringFilter<"professionals"> | string
    hour_value?: FloatNullableFilter<"professionals"> | number | null
    created_at?: DateTimeNullableFilter<"professionals"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"professionals"> | Date | string | null
    classes?: ClassesListRelationFilter
    adresses?: XOR<AdressesScalarRelationFilter, adressesWhereInput>
    role?: XOR<RoleScalarRelationFilter, roleWhereInput>
  }, "id" | "cpf" | "email">

  export type professionalsOrderByWithAggregationInput = {
    id?: SortOrder
    role_id?: SortOrder
    adresses_id?: SortOrder
    cpf?: SortOrder
    name?: SortOrderInput | SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    gender?: SortOrder
    date_of_birth?: SortOrder
    active?: SortOrder
    admin?: SortOrder
    avatar_url?: SortOrderInput | SortOrder
    password?: SortOrder
    user?: SortOrder
    hour_value?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: professionalsCountOrderByAggregateInput
    _avg?: professionalsAvgOrderByAggregateInput
    _max?: professionalsMaxOrderByAggregateInput
    _min?: professionalsMinOrderByAggregateInput
    _sum?: professionalsSumOrderByAggregateInput
  }

  export type professionalsScalarWhereWithAggregatesInput = {
    AND?: professionalsScalarWhereWithAggregatesInput | professionalsScalarWhereWithAggregatesInput[]
    OR?: professionalsScalarWhereWithAggregatesInput[]
    NOT?: professionalsScalarWhereWithAggregatesInput | professionalsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"professionals"> | number
    role_id?: IntWithAggregatesFilter<"professionals"> | number
    adresses_id?: IntWithAggregatesFilter<"professionals"> | number
    cpf?: StringWithAggregatesFilter<"professionals"> | string
    name?: StringNullableWithAggregatesFilter<"professionals"> | string | null
    first_name?: StringWithAggregatesFilter<"professionals"> | string
    last_name?: StringWithAggregatesFilter<"professionals"> | string
    phone?: StringWithAggregatesFilter<"professionals"> | string
    email?: StringWithAggregatesFilter<"professionals"> | string
    gender?: StringWithAggregatesFilter<"professionals"> | string
    date_of_birth?: DateTimeWithAggregatesFilter<"professionals"> | Date | string
    active?: BoolWithAggregatesFilter<"professionals"> | boolean
    admin?: BoolWithAggregatesFilter<"professionals"> | boolean
    avatar_url?: StringNullableWithAggregatesFilter<"professionals"> | string | null
    password?: StringWithAggregatesFilter<"professionals"> | string
    user?: StringWithAggregatesFilter<"professionals"> | string
    hour_value?: FloatNullableWithAggregatesFilter<"professionals"> | number | null
    created_at?: DateTimeNullableWithAggregatesFilter<"professionals"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"professionals"> | Date | string | null
  }

  export type records_of_studentsWhereInput = {
    AND?: records_of_studentsWhereInput | records_of_studentsWhereInput[]
    OR?: records_of_studentsWhereInput[]
    NOT?: records_of_studentsWhereInput | records_of_studentsWhereInput[]
    id?: IntFilter<"records_of_students"> | number
    students_id?: IntFilter<"records_of_students"> | number
    description?: StringNullableFilter<"records_of_students"> | string | null
    title?: StringNullableFilter<"records_of_students"> | string | null
    date?: DateTimeNullableFilter<"records_of_students"> | Date | string | null
    students?: XOR<StudentsScalarRelationFilter, studentsWhereInput>
  }

  export type records_of_studentsOrderByWithRelationInput = {
    id?: SortOrder
    students_id?: SortOrder
    description?: SortOrderInput | SortOrder
    title?: SortOrderInput | SortOrder
    date?: SortOrderInput | SortOrder
    students?: studentsOrderByWithRelationInput
  }

  export type records_of_studentsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: records_of_studentsWhereInput | records_of_studentsWhereInput[]
    OR?: records_of_studentsWhereInput[]
    NOT?: records_of_studentsWhereInput | records_of_studentsWhereInput[]
    students_id?: IntFilter<"records_of_students"> | number
    description?: StringNullableFilter<"records_of_students"> | string | null
    title?: StringNullableFilter<"records_of_students"> | string | null
    date?: DateTimeNullableFilter<"records_of_students"> | Date | string | null
    students?: XOR<StudentsScalarRelationFilter, studentsWhereInput>
  }, "id">

  export type records_of_studentsOrderByWithAggregationInput = {
    id?: SortOrder
    students_id?: SortOrder
    description?: SortOrderInput | SortOrder
    title?: SortOrderInput | SortOrder
    date?: SortOrderInput | SortOrder
    _count?: records_of_studentsCountOrderByAggregateInput
    _avg?: records_of_studentsAvgOrderByAggregateInput
    _max?: records_of_studentsMaxOrderByAggregateInput
    _min?: records_of_studentsMinOrderByAggregateInput
    _sum?: records_of_studentsSumOrderByAggregateInput
  }

  export type records_of_studentsScalarWhereWithAggregatesInput = {
    AND?: records_of_studentsScalarWhereWithAggregatesInput | records_of_studentsScalarWhereWithAggregatesInput[]
    OR?: records_of_studentsScalarWhereWithAggregatesInput[]
    NOT?: records_of_studentsScalarWhereWithAggregatesInput | records_of_studentsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"records_of_students"> | number
    students_id?: IntWithAggregatesFilter<"records_of_students"> | number
    description?: StringNullableWithAggregatesFilter<"records_of_students"> | string | null
    title?: StringNullableWithAggregatesFilter<"records_of_students"> | string | null
    date?: DateTimeNullableWithAggregatesFilter<"records_of_students"> | Date | string | null
  }

  export type registrationsWhereInput = {
    AND?: registrationsWhereInput | registrationsWhereInput[]
    OR?: registrationsWhereInput[]
    NOT?: registrationsWhereInput | registrationsWhereInput[]
    id?: IntFilter<"registrations"> | number
    students_id?: IntFilter<"registrations"> | number
    courses_id?: IntFilter<"registrations"> | number
    start_date?: DateTimeFilter<"registrations"> | Date | string
    end_date?: DateTimeFilter<"registrations"> | Date | string
    monthly_fee_amount?: FloatNullableFilter<"registrations"> | number | null
    created_by?: IntNullableFilter<"registrations"> | number | null
    created_at?: DateTimeNullableFilter<"registrations"> | Date | string | null
    locked?: BoolNullableFilter<"registrations"> | boolean | null
    completed?: BoolNullableFilter<"registrations"> | boolean | null
    monthly_fee?: Monthly_feeListRelationFilter
    courses?: XOR<CoursesScalarRelationFilter, coursesWhereInput>
    students?: XOR<StudentsScalarRelationFilter, studentsWhereInput>
    students_has_classrooms?: XOR<Students_has_classroomsNullableScalarRelationFilter, students_has_classroomsWhereInput> | null
    tasks?: TasksListRelationFilter
  }

  export type registrationsOrderByWithRelationInput = {
    id?: SortOrder
    students_id?: SortOrder
    courses_id?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    monthly_fee_amount?: SortOrderInput | SortOrder
    created_by?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    locked?: SortOrderInput | SortOrder
    completed?: SortOrderInput | SortOrder
    monthly_fee?: monthly_feeOrderByRelationAggregateInput
    courses?: coursesOrderByWithRelationInput
    students?: studentsOrderByWithRelationInput
    students_has_classrooms?: students_has_classroomsOrderByWithRelationInput
    tasks?: tasksOrderByRelationAggregateInput
  }

  export type registrationsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: registrationsWhereInput | registrationsWhereInput[]
    OR?: registrationsWhereInput[]
    NOT?: registrationsWhereInput | registrationsWhereInput[]
    students_id?: IntFilter<"registrations"> | number
    courses_id?: IntFilter<"registrations"> | number
    start_date?: DateTimeFilter<"registrations"> | Date | string
    end_date?: DateTimeFilter<"registrations"> | Date | string
    monthly_fee_amount?: FloatNullableFilter<"registrations"> | number | null
    created_by?: IntNullableFilter<"registrations"> | number | null
    created_at?: DateTimeNullableFilter<"registrations"> | Date | string | null
    locked?: BoolNullableFilter<"registrations"> | boolean | null
    completed?: BoolNullableFilter<"registrations"> | boolean | null
    monthly_fee?: Monthly_feeListRelationFilter
    courses?: XOR<CoursesScalarRelationFilter, coursesWhereInput>
    students?: XOR<StudentsScalarRelationFilter, studentsWhereInput>
    students_has_classrooms?: XOR<Students_has_classroomsNullableScalarRelationFilter, students_has_classroomsWhereInput> | null
    tasks?: TasksListRelationFilter
  }, "id">

  export type registrationsOrderByWithAggregationInput = {
    id?: SortOrder
    students_id?: SortOrder
    courses_id?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    monthly_fee_amount?: SortOrderInput | SortOrder
    created_by?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    locked?: SortOrderInput | SortOrder
    completed?: SortOrderInput | SortOrder
    _count?: registrationsCountOrderByAggregateInput
    _avg?: registrationsAvgOrderByAggregateInput
    _max?: registrationsMaxOrderByAggregateInput
    _min?: registrationsMinOrderByAggregateInput
    _sum?: registrationsSumOrderByAggregateInput
  }

  export type registrationsScalarWhereWithAggregatesInput = {
    AND?: registrationsScalarWhereWithAggregatesInput | registrationsScalarWhereWithAggregatesInput[]
    OR?: registrationsScalarWhereWithAggregatesInput[]
    NOT?: registrationsScalarWhereWithAggregatesInput | registrationsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"registrations"> | number
    students_id?: IntWithAggregatesFilter<"registrations"> | number
    courses_id?: IntWithAggregatesFilter<"registrations"> | number
    start_date?: DateTimeWithAggregatesFilter<"registrations"> | Date | string
    end_date?: DateTimeWithAggregatesFilter<"registrations"> | Date | string
    monthly_fee_amount?: FloatNullableWithAggregatesFilter<"registrations"> | number | null
    created_by?: IntNullableWithAggregatesFilter<"registrations"> | number | null
    created_at?: DateTimeNullableWithAggregatesFilter<"registrations"> | Date | string | null
    locked?: BoolNullableWithAggregatesFilter<"registrations"> | boolean | null
    completed?: BoolNullableWithAggregatesFilter<"registrations"> | boolean | null
  }

  export type roleWhereInput = {
    AND?: roleWhereInput | roleWhereInput[]
    OR?: roleWhereInput[]
    NOT?: roleWhereInput | roleWhereInput[]
    id?: IntFilter<"role"> | number
    name?: StringFilter<"role"> | string
    professionals?: ProfessionalsListRelationFilter
  }

  export type roleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    professionals?: professionalsOrderByRelationAggregateInput
  }

  export type roleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: roleWhereInput | roleWhereInput[]
    OR?: roleWhereInput[]
    NOT?: roleWhereInput | roleWhereInput[]
    name?: StringFilter<"role"> | string
    professionals?: ProfessionalsListRelationFilter
  }, "id">

  export type roleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: roleCountOrderByAggregateInput
    _avg?: roleAvgOrderByAggregateInput
    _max?: roleMaxOrderByAggregateInput
    _min?: roleMinOrderByAggregateInput
    _sum?: roleSumOrderByAggregateInput
  }

  export type roleScalarWhereWithAggregatesInput = {
    AND?: roleScalarWhereWithAggregatesInput | roleScalarWhereWithAggregatesInput[]
    OR?: roleScalarWhereWithAggregatesInput[]
    NOT?: roleScalarWhereWithAggregatesInput | roleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"role"> | number
    name?: StringWithAggregatesFilter<"role"> | string
  }

  export type studentsWhereInput = {
    AND?: studentsWhereInput | studentsWhereInput[]
    OR?: studentsWhereInput[]
    NOT?: studentsWhereInput | studentsWhereInput[]
    id?: IntFilter<"students"> | number
    adresses_id?: IntFilter<"students"> | number
    email?: StringFilter<"students"> | string
    name?: StringNullableFilter<"students"> | string | null
    first_name?: StringFilter<"students"> | string
    last_name?: StringFilter<"students"> | string
    cpf?: StringFilter<"students"> | string
    phone?: StringFilter<"students"> | string
    gender?: StringFilter<"students"> | string
    date_of_birth?: DateTimeFilter<"students"> | Date | string
    password?: StringFilter<"students"> | string
    user?: StringFilter<"students"> | string
    created_at?: DateTimeNullableFilter<"students"> | Date | string | null
    created_by?: IntNullableFilter<"students"> | number | null
    avatar_url?: StringNullableFilter<"students"> | string | null
    updated_at?: DateTimeNullableFilter<"students"> | Date | string | null
    updated_by?: IntNullableFilter<"students"> | number | null
    active?: BoolFilter<"students"> | boolean
    records_of_students?: Records_of_studentsListRelationFilter
    registrations?: RegistrationsListRelationFilter
    adresses?: XOR<AdressesScalarRelationFilter, adressesWhereInput>
  }

  export type studentsOrderByWithRelationInput = {
    id?: SortOrder
    adresses_id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    cpf?: SortOrder
    phone?: SortOrder
    gender?: SortOrder
    date_of_birth?: SortOrder
    password?: SortOrder
    user?: SortOrder
    created_at?: SortOrderInput | SortOrder
    created_by?: SortOrderInput | SortOrder
    avatar_url?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    updated_by?: SortOrderInput | SortOrder
    active?: SortOrder
    records_of_students?: records_of_studentsOrderByRelationAggregateInput
    registrations?: registrationsOrderByRelationAggregateInput
    adresses?: adressesOrderByWithRelationInput
  }

  export type studentsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    user?: string
    AND?: studentsWhereInput | studentsWhereInput[]
    OR?: studentsWhereInput[]
    NOT?: studentsWhereInput | studentsWhereInput[]
    adresses_id?: IntFilter<"students"> | number
    name?: StringNullableFilter<"students"> | string | null
    first_name?: StringFilter<"students"> | string
    last_name?: StringFilter<"students"> | string
    cpf?: StringFilter<"students"> | string
    phone?: StringFilter<"students"> | string
    gender?: StringFilter<"students"> | string
    date_of_birth?: DateTimeFilter<"students"> | Date | string
    password?: StringFilter<"students"> | string
    created_at?: DateTimeNullableFilter<"students"> | Date | string | null
    created_by?: IntNullableFilter<"students"> | number | null
    avatar_url?: StringNullableFilter<"students"> | string | null
    updated_at?: DateTimeNullableFilter<"students"> | Date | string | null
    updated_by?: IntNullableFilter<"students"> | number | null
    active?: BoolFilter<"students"> | boolean
    records_of_students?: Records_of_studentsListRelationFilter
    registrations?: RegistrationsListRelationFilter
    adresses?: XOR<AdressesScalarRelationFilter, adressesWhereInput>
  }, "id" | "email" | "user">

  export type studentsOrderByWithAggregationInput = {
    id?: SortOrder
    adresses_id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    cpf?: SortOrder
    phone?: SortOrder
    gender?: SortOrder
    date_of_birth?: SortOrder
    password?: SortOrder
    user?: SortOrder
    created_at?: SortOrderInput | SortOrder
    created_by?: SortOrderInput | SortOrder
    avatar_url?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    updated_by?: SortOrderInput | SortOrder
    active?: SortOrder
    _count?: studentsCountOrderByAggregateInput
    _avg?: studentsAvgOrderByAggregateInput
    _max?: studentsMaxOrderByAggregateInput
    _min?: studentsMinOrderByAggregateInput
    _sum?: studentsSumOrderByAggregateInput
  }

  export type studentsScalarWhereWithAggregatesInput = {
    AND?: studentsScalarWhereWithAggregatesInput | studentsScalarWhereWithAggregatesInput[]
    OR?: studentsScalarWhereWithAggregatesInput[]
    NOT?: studentsScalarWhereWithAggregatesInput | studentsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"students"> | number
    adresses_id?: IntWithAggregatesFilter<"students"> | number
    email?: StringWithAggregatesFilter<"students"> | string
    name?: StringNullableWithAggregatesFilter<"students"> | string | null
    first_name?: StringWithAggregatesFilter<"students"> | string
    last_name?: StringWithAggregatesFilter<"students"> | string
    cpf?: StringWithAggregatesFilter<"students"> | string
    phone?: StringWithAggregatesFilter<"students"> | string
    gender?: StringWithAggregatesFilter<"students"> | string
    date_of_birth?: DateTimeWithAggregatesFilter<"students"> | Date | string
    password?: StringWithAggregatesFilter<"students"> | string
    user?: StringWithAggregatesFilter<"students"> | string
    created_at?: DateTimeNullableWithAggregatesFilter<"students"> | Date | string | null
    created_by?: IntNullableWithAggregatesFilter<"students"> | number | null
    avatar_url?: StringNullableWithAggregatesFilter<"students"> | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"students"> | Date | string | null
    updated_by?: IntNullableWithAggregatesFilter<"students"> | number | null
    active?: BoolWithAggregatesFilter<"students"> | boolean
  }

  export type students_has_classroomsWhereInput = {
    AND?: students_has_classroomsWhereInput | students_has_classroomsWhereInput[]
    OR?: students_has_classroomsWhereInput[]
    NOT?: students_has_classroomsWhereInput | students_has_classroomsWhereInput[]
    id?: IntFilter<"students_has_classrooms"> | number
    registrations_id?: IntFilter<"students_has_classrooms"> | number
    classrooms_id?: IntFilter<"students_has_classrooms"> | number
    classrooms?: XOR<ClassroomsScalarRelationFilter, classroomsWhereInput>
    registrations?: XOR<RegistrationsScalarRelationFilter, registrationsWhereInput>
  }

  export type students_has_classroomsOrderByWithRelationInput = {
    id?: SortOrder
    registrations_id?: SortOrder
    classrooms_id?: SortOrder
    classrooms?: classroomsOrderByWithRelationInput
    registrations?: registrationsOrderByWithRelationInput
  }

  export type students_has_classroomsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    registrations_id?: number
    AND?: students_has_classroomsWhereInput | students_has_classroomsWhereInput[]
    OR?: students_has_classroomsWhereInput[]
    NOT?: students_has_classroomsWhereInput | students_has_classroomsWhereInput[]
    classrooms_id?: IntFilter<"students_has_classrooms"> | number
    classrooms?: XOR<ClassroomsScalarRelationFilter, classroomsWhereInput>
    registrations?: XOR<RegistrationsScalarRelationFilter, registrationsWhereInput>
  }, "id" | "registrations_id">

  export type students_has_classroomsOrderByWithAggregationInput = {
    id?: SortOrder
    registrations_id?: SortOrder
    classrooms_id?: SortOrder
    _count?: students_has_classroomsCountOrderByAggregateInput
    _avg?: students_has_classroomsAvgOrderByAggregateInput
    _max?: students_has_classroomsMaxOrderByAggregateInput
    _min?: students_has_classroomsMinOrderByAggregateInput
    _sum?: students_has_classroomsSumOrderByAggregateInput
  }

  export type students_has_classroomsScalarWhereWithAggregatesInput = {
    AND?: students_has_classroomsScalarWhereWithAggregatesInput | students_has_classroomsScalarWhereWithAggregatesInput[]
    OR?: students_has_classroomsScalarWhereWithAggregatesInput[]
    NOT?: students_has_classroomsScalarWhereWithAggregatesInput | students_has_classroomsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"students_has_classrooms"> | number
    registrations_id?: IntWithAggregatesFilter<"students_has_classrooms"> | number
    classrooms_id?: IntWithAggregatesFilter<"students_has_classrooms"> | number
  }

  export type tasksWhereInput = {
    AND?: tasksWhereInput | tasksWhereInput[]
    OR?: tasksWhereInput[]
    NOT?: tasksWhereInput | tasksWhereInput[]
    scores_id?: IntFilter<"tasks"> | number
    registrations_id?: IntFilter<"tasks"> | number
    lessons_id?: IntFilter<"tasks"> | number
    date?: DateTimeFilter<"tasks"> | Date | string
    response?: StringNullableFilter<"tasks"> | string | null
    score_obtained?: FloatNullableFilter<"tasks"> | number | null
    question?: StringNullableFilter<"tasks"> | string | null
    total_score?: FloatNullableFilter<"tasks"> | number | null
    lessons?: XOR<LessonsScalarRelationFilter, lessonsWhereInput>
    registrations?: XOR<RegistrationsScalarRelationFilter, registrationsWhereInput>
  }

  export type tasksOrderByWithRelationInput = {
    scores_id?: SortOrder
    registrations_id?: SortOrder
    lessons_id?: SortOrder
    date?: SortOrder
    response?: SortOrderInput | SortOrder
    score_obtained?: SortOrderInput | SortOrder
    question?: SortOrderInput | SortOrder
    total_score?: SortOrderInput | SortOrder
    lessons?: lessonsOrderByWithRelationInput
    registrations?: registrationsOrderByWithRelationInput
  }

  export type tasksWhereUniqueInput = Prisma.AtLeast<{
    scores_id?: number
    AND?: tasksWhereInput | tasksWhereInput[]
    OR?: tasksWhereInput[]
    NOT?: tasksWhereInput | tasksWhereInput[]
    registrations_id?: IntFilter<"tasks"> | number
    lessons_id?: IntFilter<"tasks"> | number
    date?: DateTimeFilter<"tasks"> | Date | string
    response?: StringNullableFilter<"tasks"> | string | null
    score_obtained?: FloatNullableFilter<"tasks"> | number | null
    question?: StringNullableFilter<"tasks"> | string | null
    total_score?: FloatNullableFilter<"tasks"> | number | null
    lessons?: XOR<LessonsScalarRelationFilter, lessonsWhereInput>
    registrations?: XOR<RegistrationsScalarRelationFilter, registrationsWhereInput>
  }, "scores_id">

  export type tasksOrderByWithAggregationInput = {
    scores_id?: SortOrder
    registrations_id?: SortOrder
    lessons_id?: SortOrder
    date?: SortOrder
    response?: SortOrderInput | SortOrder
    score_obtained?: SortOrderInput | SortOrder
    question?: SortOrderInput | SortOrder
    total_score?: SortOrderInput | SortOrder
    _count?: tasksCountOrderByAggregateInput
    _avg?: tasksAvgOrderByAggregateInput
    _max?: tasksMaxOrderByAggregateInput
    _min?: tasksMinOrderByAggregateInput
    _sum?: tasksSumOrderByAggregateInput
  }

  export type tasksScalarWhereWithAggregatesInput = {
    AND?: tasksScalarWhereWithAggregatesInput | tasksScalarWhereWithAggregatesInput[]
    OR?: tasksScalarWhereWithAggregatesInput[]
    NOT?: tasksScalarWhereWithAggregatesInput | tasksScalarWhereWithAggregatesInput[]
    scores_id?: IntWithAggregatesFilter<"tasks"> | number
    registrations_id?: IntWithAggregatesFilter<"tasks"> | number
    lessons_id?: IntWithAggregatesFilter<"tasks"> | number
    date?: DateTimeWithAggregatesFilter<"tasks"> | Date | string
    response?: StringNullableWithAggregatesFilter<"tasks"> | string | null
    score_obtained?: FloatNullableWithAggregatesFilter<"tasks"> | number | null
    question?: StringNullableWithAggregatesFilter<"tasks"> | string | null
    total_score?: FloatNullableWithAggregatesFilter<"tasks"> | number | null
  }

  export type adressesCreateInput = {
    street?: string | null
    zip_code?: string | null
    district?: string | null
    complement?: string | null
    city?: string | null
    state?: string | null
    number?: string | null
    active?: boolean
    professionals?: professionalsCreateNestedManyWithoutAdressesInput
    students?: studentsCreateNestedManyWithoutAdressesInput
  }

  export type adressesUncheckedCreateInput = {
    id?: number
    street?: string | null
    zip_code?: string | null
    district?: string | null
    complement?: string | null
    city?: string | null
    state?: string | null
    number?: string | null
    active?: boolean
    professionals?: professionalsUncheckedCreateNestedManyWithoutAdressesInput
    students?: studentsUncheckedCreateNestedManyWithoutAdressesInput
  }

  export type adressesUpdateInput = {
    street?: NullableStringFieldUpdateOperationsInput | string | null
    zip_code?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    professionals?: professionalsUpdateManyWithoutAdressesNestedInput
    students?: studentsUpdateManyWithoutAdressesNestedInput
  }

  export type adressesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    street?: NullableStringFieldUpdateOperationsInput | string | null
    zip_code?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    professionals?: professionalsUncheckedUpdateManyWithoutAdressesNestedInput
    students?: studentsUncheckedUpdateManyWithoutAdressesNestedInput
  }

  export type adressesCreateManyInput = {
    id?: number
    street?: string | null
    zip_code?: string | null
    district?: string | null
    complement?: string | null
    city?: string | null
    state?: string | null
    number?: string | null
    active?: boolean
  }

  export type adressesUpdateManyMutationInput = {
    street?: NullableStringFieldUpdateOperationsInput | string | null
    zip_code?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type adressesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    street?: NullableStringFieldUpdateOperationsInput | string | null
    zip_code?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type authCreateInput = {
    token: string
    type?: string
    expires_at: Date | string
    refresh_token: string
  }

  export type authUncheckedCreateInput = {
    token: string
    type?: string
    expires_at: Date | string
    refresh_token: string
  }

  export type authUpdateInput = {
    token?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    refresh_token?: StringFieldUpdateOperationsInput | string
  }

  export type authUncheckedUpdateInput = {
    token?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    refresh_token?: StringFieldUpdateOperationsInput | string
  }

  export type authCreateManyInput = {
    token: string
    type?: string
    expires_at: Date | string
    refresh_token: string
  }

  export type authUpdateManyMutationInput = {
    token?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    refresh_token?: StringFieldUpdateOperationsInput | string
  }

  export type authUncheckedUpdateManyInput = {
    token?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    expires_at?: DateTimeFieldUpdateOperationsInput | Date | string
    refresh_token?: StringFieldUpdateOperationsInput | string
  }

  export type boleto_apiCreateInput = {
    developer_application_key: string
    client_id: string
    client_secret: string
  }

  export type boleto_apiUncheckedCreateInput = {
    id?: number
    developer_application_key: string
    client_id: string
    client_secret: string
  }

  export type boleto_apiUpdateInput = {
    developer_application_key?: StringFieldUpdateOperationsInput | string
    client_id?: StringFieldUpdateOperationsInput | string
    client_secret?: StringFieldUpdateOperationsInput | string
  }

  export type boleto_apiUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    developer_application_key?: StringFieldUpdateOperationsInput | string
    client_id?: StringFieldUpdateOperationsInput | string
    client_secret?: StringFieldUpdateOperationsInput | string
  }

  export type boleto_apiCreateManyInput = {
    id?: number
    developer_application_key: string
    client_id: string
    client_secret: string
  }

  export type boleto_apiUpdateManyMutationInput = {
    developer_application_key?: StringFieldUpdateOperationsInput | string
    client_id?: StringFieldUpdateOperationsInput | string
    client_secret?: StringFieldUpdateOperationsInput | string
  }

  export type boleto_apiUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    developer_application_key?: StringFieldUpdateOperationsInput | string
    client_id?: StringFieldUpdateOperationsInput | string
    client_secret?: StringFieldUpdateOperationsInput | string
  }

  export type booksCreateInput = {
    name: string
    position: number
    courses: coursesCreateNestedOneWithoutBooksInput
    classrooms?: classroomsCreateNestedManyWithoutBooksInput
    lessons?: lessonsCreateNestedManyWithoutBooksInput
  }

  export type booksUncheckedCreateInput = {
    id?: number
    courses_id: number
    name: string
    position: number
    classrooms?: classroomsUncheckedCreateNestedManyWithoutBooksInput
    lessons?: lessonsUncheckedCreateNestedManyWithoutBooksInput
  }

  export type booksUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    courses?: coursesUpdateOneRequiredWithoutBooksNestedInput
    classrooms?: classroomsUpdateManyWithoutBooksNestedInput
    lessons?: lessonsUpdateManyWithoutBooksNestedInput
  }

  export type booksUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    courses_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    classrooms?: classroomsUncheckedUpdateManyWithoutBooksNestedInput
    lessons?: lessonsUncheckedUpdateManyWithoutBooksNestedInput
  }

  export type booksCreateManyInput = {
    id?: number
    courses_id: number
    name: string
    position: number
  }

  export type booksUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
  }

  export type booksUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    courses_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
  }

  export type classesCreateInput = {
    theme: string
    start_date: Date | string
    end_date: Date | string
    classrooms: classroomsCreateNestedOneWithoutClassesInput
    presence_list: presence_listCreateNestedOneWithoutClassesInput
    professionals: professionalsCreateNestedOneWithoutClassesInput
  }

  export type classesUncheckedCreateInput = {
    id?: number
    theme: string
    start_date: Date | string
    end_date: Date | string
    professionals_id: number
    classrooms_id: number
    presence_list_id: number
  }

  export type classesUpdateInput = {
    theme?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    classrooms?: classroomsUpdateOneRequiredWithoutClassesNestedInput
    presence_list?: presence_listUpdateOneRequiredWithoutClassesNestedInput
    professionals?: professionalsUpdateOneRequiredWithoutClassesNestedInput
  }

  export type classesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    theme?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    professionals_id?: IntFieldUpdateOperationsInput | number
    classrooms_id?: IntFieldUpdateOperationsInput | number
    presence_list_id?: IntFieldUpdateOperationsInput | number
  }

  export type classesCreateManyInput = {
    id?: number
    theme: string
    start_date: Date | string
    end_date: Date | string
    professionals_id: number
    classrooms_id: number
    presence_list_id: number
  }

  export type classesUpdateManyMutationInput = {
    theme?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type classesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    theme?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    professionals_id?: IntFieldUpdateOperationsInput | number
    classrooms_id?: IntFieldUpdateOperationsInput | number
    presence_list_id?: IntFieldUpdateOperationsInput | number
  }

  export type classroomsCreateInput = {
    date: string
    hour: string
    created_at?: Date | string
    classes?: classesCreateNestedManyWithoutClassroomsInput
    books: booksCreateNestedOneWithoutClassroomsInput
    students_has_classrooms?: students_has_classroomsCreateNestedManyWithoutClassroomsInput
  }

  export type classroomsUncheckedCreateInput = {
    id?: number
    date: string
    hour: string
    books_id: number
    created_at?: Date | string
    classes?: classesUncheckedCreateNestedManyWithoutClassroomsInput
    students_has_classrooms?: students_has_classroomsUncheckedCreateNestedManyWithoutClassroomsInput
  }

  export type classroomsUpdateInput = {
    date?: StringFieldUpdateOperationsInput | string
    hour?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    classes?: classesUpdateManyWithoutClassroomsNestedInput
    books?: booksUpdateOneRequiredWithoutClassroomsNestedInput
    students_has_classrooms?: students_has_classroomsUpdateManyWithoutClassroomsNestedInput
  }

  export type classroomsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: StringFieldUpdateOperationsInput | string
    hour?: StringFieldUpdateOperationsInput | string
    books_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    classes?: classesUncheckedUpdateManyWithoutClassroomsNestedInput
    students_has_classrooms?: students_has_classroomsUncheckedUpdateManyWithoutClassroomsNestedInput
  }

  export type classroomsCreateManyInput = {
    id?: number
    date: string
    hour: string
    books_id: number
    created_at?: Date | string
  }

  export type classroomsUpdateManyMutationInput = {
    date?: StringFieldUpdateOperationsInput | string
    hour?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type classroomsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: StringFieldUpdateOperationsInput | string
    hour?: StringFieldUpdateOperationsInput | string
    books_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type configsCreateInput = {
    registrations_time?: number | null
  }

  export type configsUncheckedCreateInput = {
    id?: number
    registrations_time?: number | null
  }

  export type configsUpdateInput = {
    registrations_time?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type configsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    registrations_time?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type configsCreateManyInput = {
    id?: number
    registrations_time?: number | null
  }

  export type configsUpdateManyMutationInput = {
    registrations_time?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type configsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    registrations_time?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type coursesCreateInput = {
    name: string
    price: number
    created_at?: Date | string
    books?: booksCreateNestedManyWithoutCoursesInput
    registrations?: registrationsCreateNestedManyWithoutCoursesInput
  }

  export type coursesUncheckedCreateInput = {
    id?: number
    name: string
    price: number
    created_at?: Date | string
    books?: booksUncheckedCreateNestedManyWithoutCoursesInput
    registrations?: registrationsUncheckedCreateNestedManyWithoutCoursesInput
  }

  export type coursesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    books?: booksUpdateManyWithoutCoursesNestedInput
    registrations?: registrationsUpdateManyWithoutCoursesNestedInput
  }

  export type coursesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    books?: booksUncheckedUpdateManyWithoutCoursesNestedInput
    registrations?: registrationsUncheckedUpdateManyWithoutCoursesNestedInput
  }

  export type coursesCreateManyInput = {
    id?: number
    name: string
    price: number
    created_at?: Date | string
  }

  export type coursesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type coursesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type lessonsCreateInput = {
    name?: string | null
    url?: string | null
    position?: number | null
    books: booksCreateNestedOneWithoutLessonsInput
    tasks?: tasksCreateNestedManyWithoutLessonsInput
  }

  export type lessonsUncheckedCreateInput = {
    id?: number
    books_id: number
    name?: string | null
    url?: string | null
    position?: number | null
    tasks?: tasksUncheckedCreateNestedManyWithoutLessonsInput
  }

  export type lessonsUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableIntFieldUpdateOperationsInput | number | null
    books?: booksUpdateOneRequiredWithoutLessonsNestedInput
    tasks?: tasksUpdateManyWithoutLessonsNestedInput
  }

  export type lessonsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    books_id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableIntFieldUpdateOperationsInput | number | null
    tasks?: tasksUncheckedUpdateManyWithoutLessonsNestedInput
  }

  export type lessonsCreateManyInput = {
    id?: number
    books_id: number
    name?: string | null
    url?: string | null
    position?: number | null
  }

  export type lessonsUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type lessonsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    books_id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type monthly_feeCreateInput = {
    due_date?: Date | string | null
    amount_to_be_paid?: number | null
    amount_paid?: number | null
    date_of_paid?: Date | string | null
    payment_method?: string | null
    paid?: boolean | null
    registrations: registrationsCreateNestedOneWithoutMonthly_feeInput
  }

  export type monthly_feeUncheckedCreateInput = {
    id?: number
    registrations_id: number
    due_date?: Date | string | null
    amount_to_be_paid?: number | null
    amount_paid?: number | null
    date_of_paid?: Date | string | null
    payment_method?: string | null
    paid?: boolean | null
  }

  export type monthly_feeUpdateInput = {
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount_to_be_paid?: NullableFloatFieldUpdateOperationsInput | number | null
    amount_paid?: NullableFloatFieldUpdateOperationsInput | number | null
    date_of_paid?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_method?: NullableStringFieldUpdateOperationsInput | string | null
    paid?: NullableBoolFieldUpdateOperationsInput | boolean | null
    registrations?: registrationsUpdateOneRequiredWithoutMonthly_feeNestedInput
  }

  export type monthly_feeUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    registrations_id?: IntFieldUpdateOperationsInput | number
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount_to_be_paid?: NullableFloatFieldUpdateOperationsInput | number | null
    amount_paid?: NullableFloatFieldUpdateOperationsInput | number | null
    date_of_paid?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_method?: NullableStringFieldUpdateOperationsInput | string | null
    paid?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type monthly_feeCreateManyInput = {
    id?: number
    registrations_id: number
    due_date?: Date | string | null
    amount_to_be_paid?: number | null
    amount_paid?: number | null
    date_of_paid?: Date | string | null
    payment_method?: string | null
    paid?: boolean | null
  }

  export type monthly_feeUpdateManyMutationInput = {
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount_to_be_paid?: NullableFloatFieldUpdateOperationsInput | number | null
    amount_paid?: NullableFloatFieldUpdateOperationsInput | number | null
    date_of_paid?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_method?: NullableStringFieldUpdateOperationsInput | string | null
    paid?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type monthly_feeUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    registrations_id?: IntFieldUpdateOperationsInput | number
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount_to_be_paid?: NullableFloatFieldUpdateOperationsInput | number | null
    amount_paid?: NullableFloatFieldUpdateOperationsInput | number | null
    date_of_paid?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_method?: NullableStringFieldUpdateOperationsInput | string | null
    paid?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type permissionsCreateInput = {
    create_classes?: boolean | null
    update_classes?: boolean | null
    delete_classes?: boolean | null
    update_students?: boolean | null
    delete_students?: boolean | null
    create_students?: boolean | null
    update_professionals?: boolean | null
    create_professionals?: boolean | null
    delete_professionals?: boolean | null
    create_registrations?: boolean | null
    update_registrations?: boolean | null
    delete_registrations?: boolean | null
    dashboard?: boolean | null
    create_courses?: boolean | null
    update_courses?: boolean | null
    delete_courses?: boolean | null
    create_classrooms?: boolean | null
    update_classrooms?: boolean | null
    delete_classrooms?: boolean | null
  }

  export type permissionsUncheckedCreateInput = {
    id?: number
    create_classes?: boolean | null
    update_classes?: boolean | null
    delete_classes?: boolean | null
    update_students?: boolean | null
    delete_students?: boolean | null
    create_students?: boolean | null
    update_professionals?: boolean | null
    create_professionals?: boolean | null
    delete_professionals?: boolean | null
    create_registrations?: boolean | null
    update_registrations?: boolean | null
    delete_registrations?: boolean | null
    dashboard?: boolean | null
    create_courses?: boolean | null
    update_courses?: boolean | null
    delete_courses?: boolean | null
    create_classrooms?: boolean | null
    update_classrooms?: boolean | null
    delete_classrooms?: boolean | null
  }

  export type permissionsUpdateInput = {
    create_classes?: NullableBoolFieldUpdateOperationsInput | boolean | null
    update_classes?: NullableBoolFieldUpdateOperationsInput | boolean | null
    delete_classes?: NullableBoolFieldUpdateOperationsInput | boolean | null
    update_students?: NullableBoolFieldUpdateOperationsInput | boolean | null
    delete_students?: NullableBoolFieldUpdateOperationsInput | boolean | null
    create_students?: NullableBoolFieldUpdateOperationsInput | boolean | null
    update_professionals?: NullableBoolFieldUpdateOperationsInput | boolean | null
    create_professionals?: NullableBoolFieldUpdateOperationsInput | boolean | null
    delete_professionals?: NullableBoolFieldUpdateOperationsInput | boolean | null
    create_registrations?: NullableBoolFieldUpdateOperationsInput | boolean | null
    update_registrations?: NullableBoolFieldUpdateOperationsInput | boolean | null
    delete_registrations?: NullableBoolFieldUpdateOperationsInput | boolean | null
    dashboard?: NullableBoolFieldUpdateOperationsInput | boolean | null
    create_courses?: NullableBoolFieldUpdateOperationsInput | boolean | null
    update_courses?: NullableBoolFieldUpdateOperationsInput | boolean | null
    delete_courses?: NullableBoolFieldUpdateOperationsInput | boolean | null
    create_classrooms?: NullableBoolFieldUpdateOperationsInput | boolean | null
    update_classrooms?: NullableBoolFieldUpdateOperationsInput | boolean | null
    delete_classrooms?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type permissionsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    create_classes?: NullableBoolFieldUpdateOperationsInput | boolean | null
    update_classes?: NullableBoolFieldUpdateOperationsInput | boolean | null
    delete_classes?: NullableBoolFieldUpdateOperationsInput | boolean | null
    update_students?: NullableBoolFieldUpdateOperationsInput | boolean | null
    delete_students?: NullableBoolFieldUpdateOperationsInput | boolean | null
    create_students?: NullableBoolFieldUpdateOperationsInput | boolean | null
    update_professionals?: NullableBoolFieldUpdateOperationsInput | boolean | null
    create_professionals?: NullableBoolFieldUpdateOperationsInput | boolean | null
    delete_professionals?: NullableBoolFieldUpdateOperationsInput | boolean | null
    create_registrations?: NullableBoolFieldUpdateOperationsInput | boolean | null
    update_registrations?: NullableBoolFieldUpdateOperationsInput | boolean | null
    delete_registrations?: NullableBoolFieldUpdateOperationsInput | boolean | null
    dashboard?: NullableBoolFieldUpdateOperationsInput | boolean | null
    create_courses?: NullableBoolFieldUpdateOperationsInput | boolean | null
    update_courses?: NullableBoolFieldUpdateOperationsInput | boolean | null
    delete_courses?: NullableBoolFieldUpdateOperationsInput | boolean | null
    create_classrooms?: NullableBoolFieldUpdateOperationsInput | boolean | null
    update_classrooms?: NullableBoolFieldUpdateOperationsInput | boolean | null
    delete_classrooms?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type permissionsCreateManyInput = {
    id?: number
    create_classes?: boolean | null
    update_classes?: boolean | null
    delete_classes?: boolean | null
    update_students?: boolean | null
    delete_students?: boolean | null
    create_students?: boolean | null
    update_professionals?: boolean | null
    create_professionals?: boolean | null
    delete_professionals?: boolean | null
    create_registrations?: boolean | null
    update_registrations?: boolean | null
    delete_registrations?: boolean | null
    dashboard?: boolean | null
    create_courses?: boolean | null
    update_courses?: boolean | null
    delete_courses?: boolean | null
    create_classrooms?: boolean | null
    update_classrooms?: boolean | null
    delete_classrooms?: boolean | null
  }

  export type permissionsUpdateManyMutationInput = {
    create_classes?: NullableBoolFieldUpdateOperationsInput | boolean | null
    update_classes?: NullableBoolFieldUpdateOperationsInput | boolean | null
    delete_classes?: NullableBoolFieldUpdateOperationsInput | boolean | null
    update_students?: NullableBoolFieldUpdateOperationsInput | boolean | null
    delete_students?: NullableBoolFieldUpdateOperationsInput | boolean | null
    create_students?: NullableBoolFieldUpdateOperationsInput | boolean | null
    update_professionals?: NullableBoolFieldUpdateOperationsInput | boolean | null
    create_professionals?: NullableBoolFieldUpdateOperationsInput | boolean | null
    delete_professionals?: NullableBoolFieldUpdateOperationsInput | boolean | null
    create_registrations?: NullableBoolFieldUpdateOperationsInput | boolean | null
    update_registrations?: NullableBoolFieldUpdateOperationsInput | boolean | null
    delete_registrations?: NullableBoolFieldUpdateOperationsInput | boolean | null
    dashboard?: NullableBoolFieldUpdateOperationsInput | boolean | null
    create_courses?: NullableBoolFieldUpdateOperationsInput | boolean | null
    update_courses?: NullableBoolFieldUpdateOperationsInput | boolean | null
    delete_courses?: NullableBoolFieldUpdateOperationsInput | boolean | null
    create_classrooms?: NullableBoolFieldUpdateOperationsInput | boolean | null
    update_classrooms?: NullableBoolFieldUpdateOperationsInput | boolean | null
    delete_classrooms?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type permissionsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    create_classes?: NullableBoolFieldUpdateOperationsInput | boolean | null
    update_classes?: NullableBoolFieldUpdateOperationsInput | boolean | null
    delete_classes?: NullableBoolFieldUpdateOperationsInput | boolean | null
    update_students?: NullableBoolFieldUpdateOperationsInput | boolean | null
    delete_students?: NullableBoolFieldUpdateOperationsInput | boolean | null
    create_students?: NullableBoolFieldUpdateOperationsInput | boolean | null
    update_professionals?: NullableBoolFieldUpdateOperationsInput | boolean | null
    create_professionals?: NullableBoolFieldUpdateOperationsInput | boolean | null
    delete_professionals?: NullableBoolFieldUpdateOperationsInput | boolean | null
    create_registrations?: NullableBoolFieldUpdateOperationsInput | boolean | null
    update_registrations?: NullableBoolFieldUpdateOperationsInput | boolean | null
    delete_registrations?: NullableBoolFieldUpdateOperationsInput | boolean | null
    dashboard?: NullableBoolFieldUpdateOperationsInput | boolean | null
    create_courses?: NullableBoolFieldUpdateOperationsInput | boolean | null
    update_courses?: NullableBoolFieldUpdateOperationsInput | boolean | null
    delete_courses?: NullableBoolFieldUpdateOperationsInput | boolean | null
    create_classrooms?: NullableBoolFieldUpdateOperationsInput | boolean | null
    update_classrooms?: NullableBoolFieldUpdateOperationsInput | boolean | null
    delete_classrooms?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type presence_listCreateInput = {
    date?: Date | string | null
    is_present?: boolean | null
    time_arrived?: Date | string | null
    classes?: classesCreateNestedManyWithoutPresence_listInput
  }

  export type presence_listUncheckedCreateInput = {
    id?: number
    date?: Date | string | null
    is_present?: boolean | null
    time_arrived?: Date | string | null
    classes?: classesUncheckedCreateNestedManyWithoutPresence_listInput
  }

  export type presence_listUpdateInput = {
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_present?: NullableBoolFieldUpdateOperationsInput | boolean | null
    time_arrived?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    classes?: classesUpdateManyWithoutPresence_listNestedInput
  }

  export type presence_listUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_present?: NullableBoolFieldUpdateOperationsInput | boolean | null
    time_arrived?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    classes?: classesUncheckedUpdateManyWithoutPresence_listNestedInput
  }

  export type presence_listCreateManyInput = {
    id?: number
    date?: Date | string | null
    is_present?: boolean | null
    time_arrived?: Date | string | null
  }

  export type presence_listUpdateManyMutationInput = {
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_present?: NullableBoolFieldUpdateOperationsInput | boolean | null
    time_arrived?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type presence_listUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_present?: NullableBoolFieldUpdateOperationsInput | boolean | null
    time_arrived?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type professionalsCreateInput = {
    cpf: string
    name?: string | null
    first_name: string
    last_name: string
    phone: string
    email: string
    gender: string
    date_of_birth: Date | string
    active?: boolean
    admin?: boolean
    avatar_url?: string | null
    password: string
    user: string
    hour_value?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    classes?: classesCreateNestedManyWithoutProfessionalsInput
    adresses: adressesCreateNestedOneWithoutProfessionalsInput
    role: roleCreateNestedOneWithoutProfessionalsInput
  }

  export type professionalsUncheckedCreateInput = {
    id?: number
    role_id: number
    adresses_id: number
    cpf: string
    name?: string | null
    first_name: string
    last_name: string
    phone: string
    email: string
    gender: string
    date_of_birth: Date | string
    active?: boolean
    admin?: boolean
    avatar_url?: string | null
    password: string
    user: string
    hour_value?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    classes?: classesUncheckedCreateNestedManyWithoutProfessionalsInput
  }

  export type professionalsUpdateInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
    admin?: BoolFieldUpdateOperationsInput | boolean
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    user?: StringFieldUpdateOperationsInput | string
    hour_value?: NullableFloatFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    classes?: classesUpdateManyWithoutProfessionalsNestedInput
    adresses?: adressesUpdateOneRequiredWithoutProfessionalsNestedInput
    role?: roleUpdateOneRequiredWithoutProfessionalsNestedInput
  }

  export type professionalsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    role_id?: IntFieldUpdateOperationsInput | number
    adresses_id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
    admin?: BoolFieldUpdateOperationsInput | boolean
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    user?: StringFieldUpdateOperationsInput | string
    hour_value?: NullableFloatFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    classes?: classesUncheckedUpdateManyWithoutProfessionalsNestedInput
  }

  export type professionalsCreateManyInput = {
    id?: number
    role_id: number
    adresses_id: number
    cpf: string
    name?: string | null
    first_name: string
    last_name: string
    phone: string
    email: string
    gender: string
    date_of_birth: Date | string
    active?: boolean
    admin?: boolean
    avatar_url?: string | null
    password: string
    user: string
    hour_value?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type professionalsUpdateManyMutationInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
    admin?: BoolFieldUpdateOperationsInput | boolean
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    user?: StringFieldUpdateOperationsInput | string
    hour_value?: NullableFloatFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type professionalsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    role_id?: IntFieldUpdateOperationsInput | number
    adresses_id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
    admin?: BoolFieldUpdateOperationsInput | boolean
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    user?: StringFieldUpdateOperationsInput | string
    hour_value?: NullableFloatFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type records_of_studentsCreateInput = {
    description?: string | null
    title?: string | null
    date?: Date | string | null
    students: studentsCreateNestedOneWithoutRecords_of_studentsInput
  }

  export type records_of_studentsUncheckedCreateInput = {
    id?: number
    students_id: number
    description?: string | null
    title?: string | null
    date?: Date | string | null
  }

  export type records_of_studentsUpdateInput = {
    description?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    students?: studentsUpdateOneRequiredWithoutRecords_of_studentsNestedInput
  }

  export type records_of_studentsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    students_id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type records_of_studentsCreateManyInput = {
    id?: number
    students_id: number
    description?: string | null
    title?: string | null
    date?: Date | string | null
  }

  export type records_of_studentsUpdateManyMutationInput = {
    description?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type records_of_studentsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    students_id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type registrationsCreateInput = {
    start_date?: Date | string
    end_date: Date | string
    monthly_fee_amount?: number | null
    created_by?: number | null
    created_at?: Date | string | null
    locked?: boolean | null
    completed?: boolean | null
    monthly_fee?: monthly_feeCreateNestedManyWithoutRegistrationsInput
    courses: coursesCreateNestedOneWithoutRegistrationsInput
    students: studentsCreateNestedOneWithoutRegistrationsInput
    students_has_classrooms?: students_has_classroomsCreateNestedOneWithoutRegistrationsInput
    tasks?: tasksCreateNestedManyWithoutRegistrationsInput
  }

  export type registrationsUncheckedCreateInput = {
    id?: number
    students_id: number
    courses_id: number
    start_date?: Date | string
    end_date: Date | string
    monthly_fee_amount?: number | null
    created_by?: number | null
    created_at?: Date | string | null
    locked?: boolean | null
    completed?: boolean | null
    monthly_fee?: monthly_feeUncheckedCreateNestedManyWithoutRegistrationsInput
    students_has_classrooms?: students_has_classroomsUncheckedCreateNestedOneWithoutRegistrationsInput
    tasks?: tasksUncheckedCreateNestedManyWithoutRegistrationsInput
  }

  export type registrationsUpdateInput = {
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthly_fee_amount?: NullableFloatFieldUpdateOperationsInput | number | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    locked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    completed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    monthly_fee?: monthly_feeUpdateManyWithoutRegistrationsNestedInput
    courses?: coursesUpdateOneRequiredWithoutRegistrationsNestedInput
    students?: studentsUpdateOneRequiredWithoutRegistrationsNestedInput
    students_has_classrooms?: students_has_classroomsUpdateOneWithoutRegistrationsNestedInput
    tasks?: tasksUpdateManyWithoutRegistrationsNestedInput
  }

  export type registrationsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    students_id?: IntFieldUpdateOperationsInput | number
    courses_id?: IntFieldUpdateOperationsInput | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthly_fee_amount?: NullableFloatFieldUpdateOperationsInput | number | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    locked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    completed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    monthly_fee?: monthly_feeUncheckedUpdateManyWithoutRegistrationsNestedInput
    students_has_classrooms?: students_has_classroomsUncheckedUpdateOneWithoutRegistrationsNestedInput
    tasks?: tasksUncheckedUpdateManyWithoutRegistrationsNestedInput
  }

  export type registrationsCreateManyInput = {
    id?: number
    students_id: number
    courses_id: number
    start_date?: Date | string
    end_date: Date | string
    monthly_fee_amount?: number | null
    created_by?: number | null
    created_at?: Date | string | null
    locked?: boolean | null
    completed?: boolean | null
  }

  export type registrationsUpdateManyMutationInput = {
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthly_fee_amount?: NullableFloatFieldUpdateOperationsInput | number | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    locked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    completed?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type registrationsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    students_id?: IntFieldUpdateOperationsInput | number
    courses_id?: IntFieldUpdateOperationsInput | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthly_fee_amount?: NullableFloatFieldUpdateOperationsInput | number | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    locked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    completed?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type roleCreateInput = {
    id: number
    name: string
    professionals?: professionalsCreateNestedManyWithoutRoleInput
  }

  export type roleUncheckedCreateInput = {
    id: number
    name: string
    professionals?: professionalsUncheckedCreateNestedManyWithoutRoleInput
  }

  export type roleUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    professionals?: professionalsUpdateManyWithoutRoleNestedInput
  }

  export type roleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    professionals?: professionalsUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type roleCreateManyInput = {
    id: number
    name: string
  }

  export type roleUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type roleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type studentsCreateInput = {
    email: string
    name?: string | null
    first_name: string
    last_name: string
    cpf: string
    phone: string
    gender: string
    date_of_birth: Date | string
    password: string
    user: string
    created_at?: Date | string | null
    created_by?: number | null
    avatar_url?: string | null
    updated_at?: Date | string | null
    updated_by?: number | null
    active?: boolean
    records_of_students?: records_of_studentsCreateNestedManyWithoutStudentsInput
    registrations?: registrationsCreateNestedManyWithoutStudentsInput
    adresses: adressesCreateNestedOneWithoutStudentsInput
  }

  export type studentsUncheckedCreateInput = {
    id?: number
    adresses_id: number
    email: string
    name?: string | null
    first_name: string
    last_name: string
    cpf: string
    phone: string
    gender: string
    date_of_birth: Date | string
    password: string
    user: string
    created_at?: Date | string | null
    created_by?: number | null
    avatar_url?: string | null
    updated_at?: Date | string | null
    updated_by?: number | null
    active?: boolean
    records_of_students?: records_of_studentsUncheckedCreateNestedManyWithoutStudentsInput
    registrations?: registrationsUncheckedCreateNestedManyWithoutStudentsInput
  }

  export type studentsUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    user?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    active?: BoolFieldUpdateOperationsInput | boolean
    records_of_students?: records_of_studentsUpdateManyWithoutStudentsNestedInput
    registrations?: registrationsUpdateManyWithoutStudentsNestedInput
    adresses?: adressesUpdateOneRequiredWithoutStudentsNestedInput
  }

  export type studentsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    adresses_id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    user?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    active?: BoolFieldUpdateOperationsInput | boolean
    records_of_students?: records_of_studentsUncheckedUpdateManyWithoutStudentsNestedInput
    registrations?: registrationsUncheckedUpdateManyWithoutStudentsNestedInput
  }

  export type studentsCreateManyInput = {
    id?: number
    adresses_id: number
    email: string
    name?: string | null
    first_name: string
    last_name: string
    cpf: string
    phone: string
    gender: string
    date_of_birth: Date | string
    password: string
    user: string
    created_at?: Date | string | null
    created_by?: number | null
    avatar_url?: string | null
    updated_at?: Date | string | null
    updated_by?: number | null
    active?: boolean
  }

  export type studentsUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    user?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type studentsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    adresses_id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    user?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type students_has_classroomsCreateInput = {
    classrooms: classroomsCreateNestedOneWithoutStudents_has_classroomsInput
    registrations: registrationsCreateNestedOneWithoutStudents_has_classroomsInput
  }

  export type students_has_classroomsUncheckedCreateInput = {
    id?: number
    registrations_id: number
    classrooms_id: number
  }

  export type students_has_classroomsUpdateInput = {
    classrooms?: classroomsUpdateOneRequiredWithoutStudents_has_classroomsNestedInput
    registrations?: registrationsUpdateOneRequiredWithoutStudents_has_classroomsNestedInput
  }

  export type students_has_classroomsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    registrations_id?: IntFieldUpdateOperationsInput | number
    classrooms_id?: IntFieldUpdateOperationsInput | number
  }

  export type students_has_classroomsCreateManyInput = {
    id?: number
    registrations_id: number
    classrooms_id: number
  }

  export type students_has_classroomsUpdateManyMutationInput = {

  }

  export type students_has_classroomsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    registrations_id?: IntFieldUpdateOperationsInput | number
    classrooms_id?: IntFieldUpdateOperationsInput | number
  }

  export type tasksCreateInput = {
    scores_id: number
    date?: Date | string
    response?: string | null
    score_obtained?: number | null
    question?: string | null
    total_score?: number | null
    lessons: lessonsCreateNestedOneWithoutTasksInput
    registrations: registrationsCreateNestedOneWithoutTasksInput
  }

  export type tasksUncheckedCreateInput = {
    scores_id: number
    registrations_id: number
    lessons_id: number
    date?: Date | string
    response?: string | null
    score_obtained?: number | null
    question?: string | null
    total_score?: number | null
  }

  export type tasksUpdateInput = {
    scores_id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    response?: NullableStringFieldUpdateOperationsInput | string | null
    score_obtained?: NullableFloatFieldUpdateOperationsInput | number | null
    question?: NullableStringFieldUpdateOperationsInput | string | null
    total_score?: NullableFloatFieldUpdateOperationsInput | number | null
    lessons?: lessonsUpdateOneRequiredWithoutTasksNestedInput
    registrations?: registrationsUpdateOneRequiredWithoutTasksNestedInput
  }

  export type tasksUncheckedUpdateInput = {
    scores_id?: IntFieldUpdateOperationsInput | number
    registrations_id?: IntFieldUpdateOperationsInput | number
    lessons_id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    response?: NullableStringFieldUpdateOperationsInput | string | null
    score_obtained?: NullableFloatFieldUpdateOperationsInput | number | null
    question?: NullableStringFieldUpdateOperationsInput | string | null
    total_score?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type tasksCreateManyInput = {
    scores_id: number
    registrations_id: number
    lessons_id: number
    date?: Date | string
    response?: string | null
    score_obtained?: number | null
    question?: string | null
    total_score?: number | null
  }

  export type tasksUpdateManyMutationInput = {
    scores_id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    response?: NullableStringFieldUpdateOperationsInput | string | null
    score_obtained?: NullableFloatFieldUpdateOperationsInput | number | null
    question?: NullableStringFieldUpdateOperationsInput | string | null
    total_score?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type tasksUncheckedUpdateManyInput = {
    scores_id?: IntFieldUpdateOperationsInput | number
    registrations_id?: IntFieldUpdateOperationsInput | number
    lessons_id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    response?: NullableStringFieldUpdateOperationsInput | string | null
    score_obtained?: NullableFloatFieldUpdateOperationsInput | number | null
    question?: NullableStringFieldUpdateOperationsInput | string | null
    total_score?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type ProfessionalsListRelationFilter = {
    every?: professionalsWhereInput
    some?: professionalsWhereInput
    none?: professionalsWhereInput
  }

  export type StudentsListRelationFilter = {
    every?: studentsWhereInput
    some?: studentsWhereInput
    none?: studentsWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type professionalsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type studentsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type adressesCountOrderByAggregateInput = {
    id?: SortOrder
    street?: SortOrder
    zip_code?: SortOrder
    district?: SortOrder
    complement?: SortOrder
    city?: SortOrder
    state?: SortOrder
    number?: SortOrder
    active?: SortOrder
  }

  export type adressesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type adressesMaxOrderByAggregateInput = {
    id?: SortOrder
    street?: SortOrder
    zip_code?: SortOrder
    district?: SortOrder
    complement?: SortOrder
    city?: SortOrder
    state?: SortOrder
    number?: SortOrder
    active?: SortOrder
  }

  export type adressesMinOrderByAggregateInput = {
    id?: SortOrder
    street?: SortOrder
    zip_code?: SortOrder
    district?: SortOrder
    complement?: SortOrder
    city?: SortOrder
    state?: SortOrder
    number?: SortOrder
    active?: SortOrder
  }

  export type adressesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type authCountOrderByAggregateInput = {
    token?: SortOrder
    type?: SortOrder
    expires_at?: SortOrder
    refresh_token?: SortOrder
  }

  export type authMaxOrderByAggregateInput = {
    token?: SortOrder
    type?: SortOrder
    expires_at?: SortOrder
    refresh_token?: SortOrder
  }

  export type authMinOrderByAggregateInput = {
    token?: SortOrder
    type?: SortOrder
    expires_at?: SortOrder
    refresh_token?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type boleto_apiCountOrderByAggregateInput = {
    id?: SortOrder
    developer_application_key?: SortOrder
    client_id?: SortOrder
    client_secret?: SortOrder
  }

  export type boleto_apiAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type boleto_apiMaxOrderByAggregateInput = {
    id?: SortOrder
    developer_application_key?: SortOrder
    client_id?: SortOrder
    client_secret?: SortOrder
  }

  export type boleto_apiMinOrderByAggregateInput = {
    id?: SortOrder
    developer_application_key?: SortOrder
    client_id?: SortOrder
    client_secret?: SortOrder
  }

  export type boleto_apiSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CoursesScalarRelationFilter = {
    is?: coursesWhereInput
    isNot?: coursesWhereInput
  }

  export type ClassroomsListRelationFilter = {
    every?: classroomsWhereInput
    some?: classroomsWhereInput
    none?: classroomsWhereInput
  }

  export type LessonsListRelationFilter = {
    every?: lessonsWhereInput
    some?: lessonsWhereInput
    none?: lessonsWhereInput
  }

  export type classroomsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type lessonsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type booksCountOrderByAggregateInput = {
    id?: SortOrder
    courses_id?: SortOrder
    name?: SortOrder
    position?: SortOrder
  }

  export type booksAvgOrderByAggregateInput = {
    id?: SortOrder
    courses_id?: SortOrder
    position?: SortOrder
  }

  export type booksMaxOrderByAggregateInput = {
    id?: SortOrder
    courses_id?: SortOrder
    name?: SortOrder
    position?: SortOrder
  }

  export type booksMinOrderByAggregateInput = {
    id?: SortOrder
    courses_id?: SortOrder
    name?: SortOrder
    position?: SortOrder
  }

  export type booksSumOrderByAggregateInput = {
    id?: SortOrder
    courses_id?: SortOrder
    position?: SortOrder
  }

  export type ClassroomsScalarRelationFilter = {
    is?: classroomsWhereInput
    isNot?: classroomsWhereInput
  }

  export type Presence_listScalarRelationFilter = {
    is?: presence_listWhereInput
    isNot?: presence_listWhereInput
  }

  export type ProfessionalsScalarRelationFilter = {
    is?: professionalsWhereInput
    isNot?: professionalsWhereInput
  }

  export type classesCountOrderByAggregateInput = {
    id?: SortOrder
    theme?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    professionals_id?: SortOrder
    classrooms_id?: SortOrder
    presence_list_id?: SortOrder
  }

  export type classesAvgOrderByAggregateInput = {
    id?: SortOrder
    professionals_id?: SortOrder
    classrooms_id?: SortOrder
    presence_list_id?: SortOrder
  }

  export type classesMaxOrderByAggregateInput = {
    id?: SortOrder
    theme?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    professionals_id?: SortOrder
    classrooms_id?: SortOrder
    presence_list_id?: SortOrder
  }

  export type classesMinOrderByAggregateInput = {
    id?: SortOrder
    theme?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    professionals_id?: SortOrder
    classrooms_id?: SortOrder
    presence_list_id?: SortOrder
  }

  export type classesSumOrderByAggregateInput = {
    id?: SortOrder
    professionals_id?: SortOrder
    classrooms_id?: SortOrder
    presence_list_id?: SortOrder
  }

  export type ClassesListRelationFilter = {
    every?: classesWhereInput
    some?: classesWhereInput
    none?: classesWhereInput
  }

  export type BooksScalarRelationFilter = {
    is?: booksWhereInput
    isNot?: booksWhereInput
  }

  export type Students_has_classroomsListRelationFilter = {
    every?: students_has_classroomsWhereInput
    some?: students_has_classroomsWhereInput
    none?: students_has_classroomsWhereInput
  }

  export type classesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type students_has_classroomsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type classroomsCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    hour?: SortOrder
    books_id?: SortOrder
    created_at?: SortOrder
  }

  export type classroomsAvgOrderByAggregateInput = {
    id?: SortOrder
    books_id?: SortOrder
  }

  export type classroomsMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    hour?: SortOrder
    books_id?: SortOrder
    created_at?: SortOrder
  }

  export type classroomsMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    hour?: SortOrder
    books_id?: SortOrder
    created_at?: SortOrder
  }

  export type classroomsSumOrderByAggregateInput = {
    id?: SortOrder
    books_id?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type configsCountOrderByAggregateInput = {
    id?: SortOrder
    registrations_time?: SortOrder
  }

  export type configsAvgOrderByAggregateInput = {
    id?: SortOrder
    registrations_time?: SortOrder
  }

  export type configsMaxOrderByAggregateInput = {
    id?: SortOrder
    registrations_time?: SortOrder
  }

  export type configsMinOrderByAggregateInput = {
    id?: SortOrder
    registrations_time?: SortOrder
  }

  export type configsSumOrderByAggregateInput = {
    id?: SortOrder
    registrations_time?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type BooksListRelationFilter = {
    every?: booksWhereInput
    some?: booksWhereInput
    none?: booksWhereInput
  }

  export type RegistrationsListRelationFilter = {
    every?: registrationsWhereInput
    some?: registrationsWhereInput
    none?: registrationsWhereInput
  }

  export type booksOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type registrationsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type coursesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    created_at?: SortOrder
  }

  export type coursesAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
  }

  export type coursesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    created_at?: SortOrder
  }

  export type coursesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    created_at?: SortOrder
  }

  export type coursesSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type TasksListRelationFilter = {
    every?: tasksWhereInput
    some?: tasksWhereInput
    none?: tasksWhereInput
  }

  export type tasksOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type lessonsCountOrderByAggregateInput = {
    id?: SortOrder
    books_id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    position?: SortOrder
  }

  export type lessonsAvgOrderByAggregateInput = {
    id?: SortOrder
    books_id?: SortOrder
    position?: SortOrder
  }

  export type lessonsMaxOrderByAggregateInput = {
    id?: SortOrder
    books_id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    position?: SortOrder
  }

  export type lessonsMinOrderByAggregateInput = {
    id?: SortOrder
    books_id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    position?: SortOrder
  }

  export type lessonsSumOrderByAggregateInput = {
    id?: SortOrder
    books_id?: SortOrder
    position?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type RegistrationsScalarRelationFilter = {
    is?: registrationsWhereInput
    isNot?: registrationsWhereInput
  }

  export type monthly_feeCountOrderByAggregateInput = {
    id?: SortOrder
    registrations_id?: SortOrder
    due_date?: SortOrder
    amount_to_be_paid?: SortOrder
    amount_paid?: SortOrder
    date_of_paid?: SortOrder
    payment_method?: SortOrder
    paid?: SortOrder
  }

  export type monthly_feeAvgOrderByAggregateInput = {
    id?: SortOrder
    registrations_id?: SortOrder
    amount_to_be_paid?: SortOrder
    amount_paid?: SortOrder
  }

  export type monthly_feeMaxOrderByAggregateInput = {
    id?: SortOrder
    registrations_id?: SortOrder
    due_date?: SortOrder
    amount_to_be_paid?: SortOrder
    amount_paid?: SortOrder
    date_of_paid?: SortOrder
    payment_method?: SortOrder
    paid?: SortOrder
  }

  export type monthly_feeMinOrderByAggregateInput = {
    id?: SortOrder
    registrations_id?: SortOrder
    due_date?: SortOrder
    amount_to_be_paid?: SortOrder
    amount_paid?: SortOrder
    date_of_paid?: SortOrder
    payment_method?: SortOrder
    paid?: SortOrder
  }

  export type monthly_feeSumOrderByAggregateInput = {
    id?: SortOrder
    registrations_id?: SortOrder
    amount_to_be_paid?: SortOrder
    amount_paid?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type permissionsCountOrderByAggregateInput = {
    id?: SortOrder
    create_classes?: SortOrder
    update_classes?: SortOrder
    delete_classes?: SortOrder
    update_students?: SortOrder
    delete_students?: SortOrder
    create_students?: SortOrder
    update_professionals?: SortOrder
    create_professionals?: SortOrder
    delete_professionals?: SortOrder
    create_registrations?: SortOrder
    update_registrations?: SortOrder
    delete_registrations?: SortOrder
    dashboard?: SortOrder
    create_courses?: SortOrder
    update_courses?: SortOrder
    delete_courses?: SortOrder
    create_classrooms?: SortOrder
    update_classrooms?: SortOrder
    delete_classrooms?: SortOrder
  }

  export type permissionsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type permissionsMaxOrderByAggregateInput = {
    id?: SortOrder
    create_classes?: SortOrder
    update_classes?: SortOrder
    delete_classes?: SortOrder
    update_students?: SortOrder
    delete_students?: SortOrder
    create_students?: SortOrder
    update_professionals?: SortOrder
    create_professionals?: SortOrder
    delete_professionals?: SortOrder
    create_registrations?: SortOrder
    update_registrations?: SortOrder
    delete_registrations?: SortOrder
    dashboard?: SortOrder
    create_courses?: SortOrder
    update_courses?: SortOrder
    delete_courses?: SortOrder
    create_classrooms?: SortOrder
    update_classrooms?: SortOrder
    delete_classrooms?: SortOrder
  }

  export type permissionsMinOrderByAggregateInput = {
    id?: SortOrder
    create_classes?: SortOrder
    update_classes?: SortOrder
    delete_classes?: SortOrder
    update_students?: SortOrder
    delete_students?: SortOrder
    create_students?: SortOrder
    update_professionals?: SortOrder
    create_professionals?: SortOrder
    delete_professionals?: SortOrder
    create_registrations?: SortOrder
    update_registrations?: SortOrder
    delete_registrations?: SortOrder
    dashboard?: SortOrder
    create_courses?: SortOrder
    update_courses?: SortOrder
    delete_courses?: SortOrder
    create_classrooms?: SortOrder
    update_classrooms?: SortOrder
    delete_classrooms?: SortOrder
  }

  export type permissionsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type presence_listCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    is_present?: SortOrder
    time_arrived?: SortOrder
  }

  export type presence_listAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type presence_listMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    is_present?: SortOrder
    time_arrived?: SortOrder
  }

  export type presence_listMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    is_present?: SortOrder
    time_arrived?: SortOrder
  }

  export type presence_listSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AdressesScalarRelationFilter = {
    is?: adressesWhereInput
    isNot?: adressesWhereInput
  }

  export type RoleScalarRelationFilter = {
    is?: roleWhereInput
    isNot?: roleWhereInput
  }

  export type professionalsCountOrderByAggregateInput = {
    id?: SortOrder
    role_id?: SortOrder
    adresses_id?: SortOrder
    cpf?: SortOrder
    name?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    gender?: SortOrder
    date_of_birth?: SortOrder
    active?: SortOrder
    admin?: SortOrder
    avatar_url?: SortOrder
    password?: SortOrder
    user?: SortOrder
    hour_value?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type professionalsAvgOrderByAggregateInput = {
    id?: SortOrder
    role_id?: SortOrder
    adresses_id?: SortOrder
    hour_value?: SortOrder
  }

  export type professionalsMaxOrderByAggregateInput = {
    id?: SortOrder
    role_id?: SortOrder
    adresses_id?: SortOrder
    cpf?: SortOrder
    name?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    gender?: SortOrder
    date_of_birth?: SortOrder
    active?: SortOrder
    admin?: SortOrder
    avatar_url?: SortOrder
    password?: SortOrder
    user?: SortOrder
    hour_value?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type professionalsMinOrderByAggregateInput = {
    id?: SortOrder
    role_id?: SortOrder
    adresses_id?: SortOrder
    cpf?: SortOrder
    name?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    phone?: SortOrder
    email?: SortOrder
    gender?: SortOrder
    date_of_birth?: SortOrder
    active?: SortOrder
    admin?: SortOrder
    avatar_url?: SortOrder
    password?: SortOrder
    user?: SortOrder
    hour_value?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type professionalsSumOrderByAggregateInput = {
    id?: SortOrder
    role_id?: SortOrder
    adresses_id?: SortOrder
    hour_value?: SortOrder
  }

  export type StudentsScalarRelationFilter = {
    is?: studentsWhereInput
    isNot?: studentsWhereInput
  }

  export type records_of_studentsCountOrderByAggregateInput = {
    id?: SortOrder
    students_id?: SortOrder
    description?: SortOrder
    title?: SortOrder
    date?: SortOrder
  }

  export type records_of_studentsAvgOrderByAggregateInput = {
    id?: SortOrder
    students_id?: SortOrder
  }

  export type records_of_studentsMaxOrderByAggregateInput = {
    id?: SortOrder
    students_id?: SortOrder
    description?: SortOrder
    title?: SortOrder
    date?: SortOrder
  }

  export type records_of_studentsMinOrderByAggregateInput = {
    id?: SortOrder
    students_id?: SortOrder
    description?: SortOrder
    title?: SortOrder
    date?: SortOrder
  }

  export type records_of_studentsSumOrderByAggregateInput = {
    id?: SortOrder
    students_id?: SortOrder
  }

  export type Monthly_feeListRelationFilter = {
    every?: monthly_feeWhereInput
    some?: monthly_feeWhereInput
    none?: monthly_feeWhereInput
  }

  export type Students_has_classroomsNullableScalarRelationFilter = {
    is?: students_has_classroomsWhereInput | null
    isNot?: students_has_classroomsWhereInput | null
  }

  export type monthly_feeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type registrationsCountOrderByAggregateInput = {
    id?: SortOrder
    students_id?: SortOrder
    courses_id?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    monthly_fee_amount?: SortOrder
    created_by?: SortOrder
    created_at?: SortOrder
    locked?: SortOrder
    completed?: SortOrder
  }

  export type registrationsAvgOrderByAggregateInput = {
    id?: SortOrder
    students_id?: SortOrder
    courses_id?: SortOrder
    monthly_fee_amount?: SortOrder
    created_by?: SortOrder
  }

  export type registrationsMaxOrderByAggregateInput = {
    id?: SortOrder
    students_id?: SortOrder
    courses_id?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    monthly_fee_amount?: SortOrder
    created_by?: SortOrder
    created_at?: SortOrder
    locked?: SortOrder
    completed?: SortOrder
  }

  export type registrationsMinOrderByAggregateInput = {
    id?: SortOrder
    students_id?: SortOrder
    courses_id?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    monthly_fee_amount?: SortOrder
    created_by?: SortOrder
    created_at?: SortOrder
    locked?: SortOrder
    completed?: SortOrder
  }

  export type registrationsSumOrderByAggregateInput = {
    id?: SortOrder
    students_id?: SortOrder
    courses_id?: SortOrder
    monthly_fee_amount?: SortOrder
    created_by?: SortOrder
  }

  export type roleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type roleAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type roleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type roleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type roleSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type Records_of_studentsListRelationFilter = {
    every?: records_of_studentsWhereInput
    some?: records_of_studentsWhereInput
    none?: records_of_studentsWhereInput
  }

  export type records_of_studentsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type studentsCountOrderByAggregateInput = {
    id?: SortOrder
    adresses_id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    cpf?: SortOrder
    phone?: SortOrder
    gender?: SortOrder
    date_of_birth?: SortOrder
    password?: SortOrder
    user?: SortOrder
    created_at?: SortOrder
    created_by?: SortOrder
    avatar_url?: SortOrder
    updated_at?: SortOrder
    updated_by?: SortOrder
    active?: SortOrder
  }

  export type studentsAvgOrderByAggregateInput = {
    id?: SortOrder
    adresses_id?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
  }

  export type studentsMaxOrderByAggregateInput = {
    id?: SortOrder
    adresses_id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    cpf?: SortOrder
    phone?: SortOrder
    gender?: SortOrder
    date_of_birth?: SortOrder
    password?: SortOrder
    user?: SortOrder
    created_at?: SortOrder
    created_by?: SortOrder
    avatar_url?: SortOrder
    updated_at?: SortOrder
    updated_by?: SortOrder
    active?: SortOrder
  }

  export type studentsMinOrderByAggregateInput = {
    id?: SortOrder
    adresses_id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    cpf?: SortOrder
    phone?: SortOrder
    gender?: SortOrder
    date_of_birth?: SortOrder
    password?: SortOrder
    user?: SortOrder
    created_at?: SortOrder
    created_by?: SortOrder
    avatar_url?: SortOrder
    updated_at?: SortOrder
    updated_by?: SortOrder
    active?: SortOrder
  }

  export type studentsSumOrderByAggregateInput = {
    id?: SortOrder
    adresses_id?: SortOrder
    created_by?: SortOrder
    updated_by?: SortOrder
  }

  export type students_has_classroomsCountOrderByAggregateInput = {
    id?: SortOrder
    registrations_id?: SortOrder
    classrooms_id?: SortOrder
  }

  export type students_has_classroomsAvgOrderByAggregateInput = {
    id?: SortOrder
    registrations_id?: SortOrder
    classrooms_id?: SortOrder
  }

  export type students_has_classroomsMaxOrderByAggregateInput = {
    id?: SortOrder
    registrations_id?: SortOrder
    classrooms_id?: SortOrder
  }

  export type students_has_classroomsMinOrderByAggregateInput = {
    id?: SortOrder
    registrations_id?: SortOrder
    classrooms_id?: SortOrder
  }

  export type students_has_classroomsSumOrderByAggregateInput = {
    id?: SortOrder
    registrations_id?: SortOrder
    classrooms_id?: SortOrder
  }

  export type LessonsScalarRelationFilter = {
    is?: lessonsWhereInput
    isNot?: lessonsWhereInput
  }

  export type tasksCountOrderByAggregateInput = {
    scores_id?: SortOrder
    registrations_id?: SortOrder
    lessons_id?: SortOrder
    date?: SortOrder
    response?: SortOrder
    score_obtained?: SortOrder
    question?: SortOrder
    total_score?: SortOrder
  }

  export type tasksAvgOrderByAggregateInput = {
    scores_id?: SortOrder
    registrations_id?: SortOrder
    lessons_id?: SortOrder
    score_obtained?: SortOrder
    total_score?: SortOrder
  }

  export type tasksMaxOrderByAggregateInput = {
    scores_id?: SortOrder
    registrations_id?: SortOrder
    lessons_id?: SortOrder
    date?: SortOrder
    response?: SortOrder
    score_obtained?: SortOrder
    question?: SortOrder
    total_score?: SortOrder
  }

  export type tasksMinOrderByAggregateInput = {
    scores_id?: SortOrder
    registrations_id?: SortOrder
    lessons_id?: SortOrder
    date?: SortOrder
    response?: SortOrder
    score_obtained?: SortOrder
    question?: SortOrder
    total_score?: SortOrder
  }

  export type tasksSumOrderByAggregateInput = {
    scores_id?: SortOrder
    registrations_id?: SortOrder
    lessons_id?: SortOrder
    score_obtained?: SortOrder
    total_score?: SortOrder
  }

  export type professionalsCreateNestedManyWithoutAdressesInput = {
    create?: XOR<professionalsCreateWithoutAdressesInput, professionalsUncheckedCreateWithoutAdressesInput> | professionalsCreateWithoutAdressesInput[] | professionalsUncheckedCreateWithoutAdressesInput[]
    connectOrCreate?: professionalsCreateOrConnectWithoutAdressesInput | professionalsCreateOrConnectWithoutAdressesInput[]
    createMany?: professionalsCreateManyAdressesInputEnvelope
    connect?: professionalsWhereUniqueInput | professionalsWhereUniqueInput[]
  }

  export type studentsCreateNestedManyWithoutAdressesInput = {
    create?: XOR<studentsCreateWithoutAdressesInput, studentsUncheckedCreateWithoutAdressesInput> | studentsCreateWithoutAdressesInput[] | studentsUncheckedCreateWithoutAdressesInput[]
    connectOrCreate?: studentsCreateOrConnectWithoutAdressesInput | studentsCreateOrConnectWithoutAdressesInput[]
    createMany?: studentsCreateManyAdressesInputEnvelope
    connect?: studentsWhereUniqueInput | studentsWhereUniqueInput[]
  }

  export type professionalsUncheckedCreateNestedManyWithoutAdressesInput = {
    create?: XOR<professionalsCreateWithoutAdressesInput, professionalsUncheckedCreateWithoutAdressesInput> | professionalsCreateWithoutAdressesInput[] | professionalsUncheckedCreateWithoutAdressesInput[]
    connectOrCreate?: professionalsCreateOrConnectWithoutAdressesInput | professionalsCreateOrConnectWithoutAdressesInput[]
    createMany?: professionalsCreateManyAdressesInputEnvelope
    connect?: professionalsWhereUniqueInput | professionalsWhereUniqueInput[]
  }

  export type studentsUncheckedCreateNestedManyWithoutAdressesInput = {
    create?: XOR<studentsCreateWithoutAdressesInput, studentsUncheckedCreateWithoutAdressesInput> | studentsCreateWithoutAdressesInput[] | studentsUncheckedCreateWithoutAdressesInput[]
    connectOrCreate?: studentsCreateOrConnectWithoutAdressesInput | studentsCreateOrConnectWithoutAdressesInput[]
    createMany?: studentsCreateManyAdressesInputEnvelope
    connect?: studentsWhereUniqueInput | studentsWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type professionalsUpdateManyWithoutAdressesNestedInput = {
    create?: XOR<professionalsCreateWithoutAdressesInput, professionalsUncheckedCreateWithoutAdressesInput> | professionalsCreateWithoutAdressesInput[] | professionalsUncheckedCreateWithoutAdressesInput[]
    connectOrCreate?: professionalsCreateOrConnectWithoutAdressesInput | professionalsCreateOrConnectWithoutAdressesInput[]
    upsert?: professionalsUpsertWithWhereUniqueWithoutAdressesInput | professionalsUpsertWithWhereUniqueWithoutAdressesInput[]
    createMany?: professionalsCreateManyAdressesInputEnvelope
    set?: professionalsWhereUniqueInput | professionalsWhereUniqueInput[]
    disconnect?: professionalsWhereUniqueInput | professionalsWhereUniqueInput[]
    delete?: professionalsWhereUniqueInput | professionalsWhereUniqueInput[]
    connect?: professionalsWhereUniqueInput | professionalsWhereUniqueInput[]
    update?: professionalsUpdateWithWhereUniqueWithoutAdressesInput | professionalsUpdateWithWhereUniqueWithoutAdressesInput[]
    updateMany?: professionalsUpdateManyWithWhereWithoutAdressesInput | professionalsUpdateManyWithWhereWithoutAdressesInput[]
    deleteMany?: professionalsScalarWhereInput | professionalsScalarWhereInput[]
  }

  export type studentsUpdateManyWithoutAdressesNestedInput = {
    create?: XOR<studentsCreateWithoutAdressesInput, studentsUncheckedCreateWithoutAdressesInput> | studentsCreateWithoutAdressesInput[] | studentsUncheckedCreateWithoutAdressesInput[]
    connectOrCreate?: studentsCreateOrConnectWithoutAdressesInput | studentsCreateOrConnectWithoutAdressesInput[]
    upsert?: studentsUpsertWithWhereUniqueWithoutAdressesInput | studentsUpsertWithWhereUniqueWithoutAdressesInput[]
    createMany?: studentsCreateManyAdressesInputEnvelope
    set?: studentsWhereUniqueInput | studentsWhereUniqueInput[]
    disconnect?: studentsWhereUniqueInput | studentsWhereUniqueInput[]
    delete?: studentsWhereUniqueInput | studentsWhereUniqueInput[]
    connect?: studentsWhereUniqueInput | studentsWhereUniqueInput[]
    update?: studentsUpdateWithWhereUniqueWithoutAdressesInput | studentsUpdateWithWhereUniqueWithoutAdressesInput[]
    updateMany?: studentsUpdateManyWithWhereWithoutAdressesInput | studentsUpdateManyWithWhereWithoutAdressesInput[]
    deleteMany?: studentsScalarWhereInput | studentsScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type professionalsUncheckedUpdateManyWithoutAdressesNestedInput = {
    create?: XOR<professionalsCreateWithoutAdressesInput, professionalsUncheckedCreateWithoutAdressesInput> | professionalsCreateWithoutAdressesInput[] | professionalsUncheckedCreateWithoutAdressesInput[]
    connectOrCreate?: professionalsCreateOrConnectWithoutAdressesInput | professionalsCreateOrConnectWithoutAdressesInput[]
    upsert?: professionalsUpsertWithWhereUniqueWithoutAdressesInput | professionalsUpsertWithWhereUniqueWithoutAdressesInput[]
    createMany?: professionalsCreateManyAdressesInputEnvelope
    set?: professionalsWhereUniqueInput | professionalsWhereUniqueInput[]
    disconnect?: professionalsWhereUniqueInput | professionalsWhereUniqueInput[]
    delete?: professionalsWhereUniqueInput | professionalsWhereUniqueInput[]
    connect?: professionalsWhereUniqueInput | professionalsWhereUniqueInput[]
    update?: professionalsUpdateWithWhereUniqueWithoutAdressesInput | professionalsUpdateWithWhereUniqueWithoutAdressesInput[]
    updateMany?: professionalsUpdateManyWithWhereWithoutAdressesInput | professionalsUpdateManyWithWhereWithoutAdressesInput[]
    deleteMany?: professionalsScalarWhereInput | professionalsScalarWhereInput[]
  }

  export type studentsUncheckedUpdateManyWithoutAdressesNestedInput = {
    create?: XOR<studentsCreateWithoutAdressesInput, studentsUncheckedCreateWithoutAdressesInput> | studentsCreateWithoutAdressesInput[] | studentsUncheckedCreateWithoutAdressesInput[]
    connectOrCreate?: studentsCreateOrConnectWithoutAdressesInput | studentsCreateOrConnectWithoutAdressesInput[]
    upsert?: studentsUpsertWithWhereUniqueWithoutAdressesInput | studentsUpsertWithWhereUniqueWithoutAdressesInput[]
    createMany?: studentsCreateManyAdressesInputEnvelope
    set?: studentsWhereUniqueInput | studentsWhereUniqueInput[]
    disconnect?: studentsWhereUniqueInput | studentsWhereUniqueInput[]
    delete?: studentsWhereUniqueInput | studentsWhereUniqueInput[]
    connect?: studentsWhereUniqueInput | studentsWhereUniqueInput[]
    update?: studentsUpdateWithWhereUniqueWithoutAdressesInput | studentsUpdateWithWhereUniqueWithoutAdressesInput[]
    updateMany?: studentsUpdateManyWithWhereWithoutAdressesInput | studentsUpdateManyWithWhereWithoutAdressesInput[]
    deleteMany?: studentsScalarWhereInput | studentsScalarWhereInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type coursesCreateNestedOneWithoutBooksInput = {
    create?: XOR<coursesCreateWithoutBooksInput, coursesUncheckedCreateWithoutBooksInput>
    connectOrCreate?: coursesCreateOrConnectWithoutBooksInput
    connect?: coursesWhereUniqueInput
  }

  export type classroomsCreateNestedManyWithoutBooksInput = {
    create?: XOR<classroomsCreateWithoutBooksInput, classroomsUncheckedCreateWithoutBooksInput> | classroomsCreateWithoutBooksInput[] | classroomsUncheckedCreateWithoutBooksInput[]
    connectOrCreate?: classroomsCreateOrConnectWithoutBooksInput | classroomsCreateOrConnectWithoutBooksInput[]
    createMany?: classroomsCreateManyBooksInputEnvelope
    connect?: classroomsWhereUniqueInput | classroomsWhereUniqueInput[]
  }

  export type lessonsCreateNestedManyWithoutBooksInput = {
    create?: XOR<lessonsCreateWithoutBooksInput, lessonsUncheckedCreateWithoutBooksInput> | lessonsCreateWithoutBooksInput[] | lessonsUncheckedCreateWithoutBooksInput[]
    connectOrCreate?: lessonsCreateOrConnectWithoutBooksInput | lessonsCreateOrConnectWithoutBooksInput[]
    createMany?: lessonsCreateManyBooksInputEnvelope
    connect?: lessonsWhereUniqueInput | lessonsWhereUniqueInput[]
  }

  export type classroomsUncheckedCreateNestedManyWithoutBooksInput = {
    create?: XOR<classroomsCreateWithoutBooksInput, classroomsUncheckedCreateWithoutBooksInput> | classroomsCreateWithoutBooksInput[] | classroomsUncheckedCreateWithoutBooksInput[]
    connectOrCreate?: classroomsCreateOrConnectWithoutBooksInput | classroomsCreateOrConnectWithoutBooksInput[]
    createMany?: classroomsCreateManyBooksInputEnvelope
    connect?: classroomsWhereUniqueInput | classroomsWhereUniqueInput[]
  }

  export type lessonsUncheckedCreateNestedManyWithoutBooksInput = {
    create?: XOR<lessonsCreateWithoutBooksInput, lessonsUncheckedCreateWithoutBooksInput> | lessonsCreateWithoutBooksInput[] | lessonsUncheckedCreateWithoutBooksInput[]
    connectOrCreate?: lessonsCreateOrConnectWithoutBooksInput | lessonsCreateOrConnectWithoutBooksInput[]
    createMany?: lessonsCreateManyBooksInputEnvelope
    connect?: lessonsWhereUniqueInput | lessonsWhereUniqueInput[]
  }

  export type coursesUpdateOneRequiredWithoutBooksNestedInput = {
    create?: XOR<coursesCreateWithoutBooksInput, coursesUncheckedCreateWithoutBooksInput>
    connectOrCreate?: coursesCreateOrConnectWithoutBooksInput
    upsert?: coursesUpsertWithoutBooksInput
    connect?: coursesWhereUniqueInput
    update?: XOR<XOR<coursesUpdateToOneWithWhereWithoutBooksInput, coursesUpdateWithoutBooksInput>, coursesUncheckedUpdateWithoutBooksInput>
  }

  export type classroomsUpdateManyWithoutBooksNestedInput = {
    create?: XOR<classroomsCreateWithoutBooksInput, classroomsUncheckedCreateWithoutBooksInput> | classroomsCreateWithoutBooksInput[] | classroomsUncheckedCreateWithoutBooksInput[]
    connectOrCreate?: classroomsCreateOrConnectWithoutBooksInput | classroomsCreateOrConnectWithoutBooksInput[]
    upsert?: classroomsUpsertWithWhereUniqueWithoutBooksInput | classroomsUpsertWithWhereUniqueWithoutBooksInput[]
    createMany?: classroomsCreateManyBooksInputEnvelope
    set?: classroomsWhereUniqueInput | classroomsWhereUniqueInput[]
    disconnect?: classroomsWhereUniqueInput | classroomsWhereUniqueInput[]
    delete?: classroomsWhereUniqueInput | classroomsWhereUniqueInput[]
    connect?: classroomsWhereUniqueInput | classroomsWhereUniqueInput[]
    update?: classroomsUpdateWithWhereUniqueWithoutBooksInput | classroomsUpdateWithWhereUniqueWithoutBooksInput[]
    updateMany?: classroomsUpdateManyWithWhereWithoutBooksInput | classroomsUpdateManyWithWhereWithoutBooksInput[]
    deleteMany?: classroomsScalarWhereInput | classroomsScalarWhereInput[]
  }

  export type lessonsUpdateManyWithoutBooksNestedInput = {
    create?: XOR<lessonsCreateWithoutBooksInput, lessonsUncheckedCreateWithoutBooksInput> | lessonsCreateWithoutBooksInput[] | lessonsUncheckedCreateWithoutBooksInput[]
    connectOrCreate?: lessonsCreateOrConnectWithoutBooksInput | lessonsCreateOrConnectWithoutBooksInput[]
    upsert?: lessonsUpsertWithWhereUniqueWithoutBooksInput | lessonsUpsertWithWhereUniqueWithoutBooksInput[]
    createMany?: lessonsCreateManyBooksInputEnvelope
    set?: lessonsWhereUniqueInput | lessonsWhereUniqueInput[]
    disconnect?: lessonsWhereUniqueInput | lessonsWhereUniqueInput[]
    delete?: lessonsWhereUniqueInput | lessonsWhereUniqueInput[]
    connect?: lessonsWhereUniqueInput | lessonsWhereUniqueInput[]
    update?: lessonsUpdateWithWhereUniqueWithoutBooksInput | lessonsUpdateWithWhereUniqueWithoutBooksInput[]
    updateMany?: lessonsUpdateManyWithWhereWithoutBooksInput | lessonsUpdateManyWithWhereWithoutBooksInput[]
    deleteMany?: lessonsScalarWhereInput | lessonsScalarWhereInput[]
  }

  export type classroomsUncheckedUpdateManyWithoutBooksNestedInput = {
    create?: XOR<classroomsCreateWithoutBooksInput, classroomsUncheckedCreateWithoutBooksInput> | classroomsCreateWithoutBooksInput[] | classroomsUncheckedCreateWithoutBooksInput[]
    connectOrCreate?: classroomsCreateOrConnectWithoutBooksInput | classroomsCreateOrConnectWithoutBooksInput[]
    upsert?: classroomsUpsertWithWhereUniqueWithoutBooksInput | classroomsUpsertWithWhereUniqueWithoutBooksInput[]
    createMany?: classroomsCreateManyBooksInputEnvelope
    set?: classroomsWhereUniqueInput | classroomsWhereUniqueInput[]
    disconnect?: classroomsWhereUniqueInput | classroomsWhereUniqueInput[]
    delete?: classroomsWhereUniqueInput | classroomsWhereUniqueInput[]
    connect?: classroomsWhereUniqueInput | classroomsWhereUniqueInput[]
    update?: classroomsUpdateWithWhereUniqueWithoutBooksInput | classroomsUpdateWithWhereUniqueWithoutBooksInput[]
    updateMany?: classroomsUpdateManyWithWhereWithoutBooksInput | classroomsUpdateManyWithWhereWithoutBooksInput[]
    deleteMany?: classroomsScalarWhereInput | classroomsScalarWhereInput[]
  }

  export type lessonsUncheckedUpdateManyWithoutBooksNestedInput = {
    create?: XOR<lessonsCreateWithoutBooksInput, lessonsUncheckedCreateWithoutBooksInput> | lessonsCreateWithoutBooksInput[] | lessonsUncheckedCreateWithoutBooksInput[]
    connectOrCreate?: lessonsCreateOrConnectWithoutBooksInput | lessonsCreateOrConnectWithoutBooksInput[]
    upsert?: lessonsUpsertWithWhereUniqueWithoutBooksInput | lessonsUpsertWithWhereUniqueWithoutBooksInput[]
    createMany?: lessonsCreateManyBooksInputEnvelope
    set?: lessonsWhereUniqueInput | lessonsWhereUniqueInput[]
    disconnect?: lessonsWhereUniqueInput | lessonsWhereUniqueInput[]
    delete?: lessonsWhereUniqueInput | lessonsWhereUniqueInput[]
    connect?: lessonsWhereUniqueInput | lessonsWhereUniqueInput[]
    update?: lessonsUpdateWithWhereUniqueWithoutBooksInput | lessonsUpdateWithWhereUniqueWithoutBooksInput[]
    updateMany?: lessonsUpdateManyWithWhereWithoutBooksInput | lessonsUpdateManyWithWhereWithoutBooksInput[]
    deleteMany?: lessonsScalarWhereInput | lessonsScalarWhereInput[]
  }

  export type classroomsCreateNestedOneWithoutClassesInput = {
    create?: XOR<classroomsCreateWithoutClassesInput, classroomsUncheckedCreateWithoutClassesInput>
    connectOrCreate?: classroomsCreateOrConnectWithoutClassesInput
    connect?: classroomsWhereUniqueInput
  }

  export type presence_listCreateNestedOneWithoutClassesInput = {
    create?: XOR<presence_listCreateWithoutClassesInput, presence_listUncheckedCreateWithoutClassesInput>
    connectOrCreate?: presence_listCreateOrConnectWithoutClassesInput
    connect?: presence_listWhereUniqueInput
  }

  export type professionalsCreateNestedOneWithoutClassesInput = {
    create?: XOR<professionalsCreateWithoutClassesInput, professionalsUncheckedCreateWithoutClassesInput>
    connectOrCreate?: professionalsCreateOrConnectWithoutClassesInput
    connect?: professionalsWhereUniqueInput
  }

  export type classroomsUpdateOneRequiredWithoutClassesNestedInput = {
    create?: XOR<classroomsCreateWithoutClassesInput, classroomsUncheckedCreateWithoutClassesInput>
    connectOrCreate?: classroomsCreateOrConnectWithoutClassesInput
    upsert?: classroomsUpsertWithoutClassesInput
    connect?: classroomsWhereUniqueInput
    update?: XOR<XOR<classroomsUpdateToOneWithWhereWithoutClassesInput, classroomsUpdateWithoutClassesInput>, classroomsUncheckedUpdateWithoutClassesInput>
  }

  export type presence_listUpdateOneRequiredWithoutClassesNestedInput = {
    create?: XOR<presence_listCreateWithoutClassesInput, presence_listUncheckedCreateWithoutClassesInput>
    connectOrCreate?: presence_listCreateOrConnectWithoutClassesInput
    upsert?: presence_listUpsertWithoutClassesInput
    connect?: presence_listWhereUniqueInput
    update?: XOR<XOR<presence_listUpdateToOneWithWhereWithoutClassesInput, presence_listUpdateWithoutClassesInput>, presence_listUncheckedUpdateWithoutClassesInput>
  }

  export type professionalsUpdateOneRequiredWithoutClassesNestedInput = {
    create?: XOR<professionalsCreateWithoutClassesInput, professionalsUncheckedCreateWithoutClassesInput>
    connectOrCreate?: professionalsCreateOrConnectWithoutClassesInput
    upsert?: professionalsUpsertWithoutClassesInput
    connect?: professionalsWhereUniqueInput
    update?: XOR<XOR<professionalsUpdateToOneWithWhereWithoutClassesInput, professionalsUpdateWithoutClassesInput>, professionalsUncheckedUpdateWithoutClassesInput>
  }

  export type classesCreateNestedManyWithoutClassroomsInput = {
    create?: XOR<classesCreateWithoutClassroomsInput, classesUncheckedCreateWithoutClassroomsInput> | classesCreateWithoutClassroomsInput[] | classesUncheckedCreateWithoutClassroomsInput[]
    connectOrCreate?: classesCreateOrConnectWithoutClassroomsInput | classesCreateOrConnectWithoutClassroomsInput[]
    createMany?: classesCreateManyClassroomsInputEnvelope
    connect?: classesWhereUniqueInput | classesWhereUniqueInput[]
  }

  export type booksCreateNestedOneWithoutClassroomsInput = {
    create?: XOR<booksCreateWithoutClassroomsInput, booksUncheckedCreateWithoutClassroomsInput>
    connectOrCreate?: booksCreateOrConnectWithoutClassroomsInput
    connect?: booksWhereUniqueInput
  }

  export type students_has_classroomsCreateNestedManyWithoutClassroomsInput = {
    create?: XOR<students_has_classroomsCreateWithoutClassroomsInput, students_has_classroomsUncheckedCreateWithoutClassroomsInput> | students_has_classroomsCreateWithoutClassroomsInput[] | students_has_classroomsUncheckedCreateWithoutClassroomsInput[]
    connectOrCreate?: students_has_classroomsCreateOrConnectWithoutClassroomsInput | students_has_classroomsCreateOrConnectWithoutClassroomsInput[]
    createMany?: students_has_classroomsCreateManyClassroomsInputEnvelope
    connect?: students_has_classroomsWhereUniqueInput | students_has_classroomsWhereUniqueInput[]
  }

  export type classesUncheckedCreateNestedManyWithoutClassroomsInput = {
    create?: XOR<classesCreateWithoutClassroomsInput, classesUncheckedCreateWithoutClassroomsInput> | classesCreateWithoutClassroomsInput[] | classesUncheckedCreateWithoutClassroomsInput[]
    connectOrCreate?: classesCreateOrConnectWithoutClassroomsInput | classesCreateOrConnectWithoutClassroomsInput[]
    createMany?: classesCreateManyClassroomsInputEnvelope
    connect?: classesWhereUniqueInput | classesWhereUniqueInput[]
  }

  export type students_has_classroomsUncheckedCreateNestedManyWithoutClassroomsInput = {
    create?: XOR<students_has_classroomsCreateWithoutClassroomsInput, students_has_classroomsUncheckedCreateWithoutClassroomsInput> | students_has_classroomsCreateWithoutClassroomsInput[] | students_has_classroomsUncheckedCreateWithoutClassroomsInput[]
    connectOrCreate?: students_has_classroomsCreateOrConnectWithoutClassroomsInput | students_has_classroomsCreateOrConnectWithoutClassroomsInput[]
    createMany?: students_has_classroomsCreateManyClassroomsInputEnvelope
    connect?: students_has_classroomsWhereUniqueInput | students_has_classroomsWhereUniqueInput[]
  }

  export type classesUpdateManyWithoutClassroomsNestedInput = {
    create?: XOR<classesCreateWithoutClassroomsInput, classesUncheckedCreateWithoutClassroomsInput> | classesCreateWithoutClassroomsInput[] | classesUncheckedCreateWithoutClassroomsInput[]
    connectOrCreate?: classesCreateOrConnectWithoutClassroomsInput | classesCreateOrConnectWithoutClassroomsInput[]
    upsert?: classesUpsertWithWhereUniqueWithoutClassroomsInput | classesUpsertWithWhereUniqueWithoutClassroomsInput[]
    createMany?: classesCreateManyClassroomsInputEnvelope
    set?: classesWhereUniqueInput | classesWhereUniqueInput[]
    disconnect?: classesWhereUniqueInput | classesWhereUniqueInput[]
    delete?: classesWhereUniqueInput | classesWhereUniqueInput[]
    connect?: classesWhereUniqueInput | classesWhereUniqueInput[]
    update?: classesUpdateWithWhereUniqueWithoutClassroomsInput | classesUpdateWithWhereUniqueWithoutClassroomsInput[]
    updateMany?: classesUpdateManyWithWhereWithoutClassroomsInput | classesUpdateManyWithWhereWithoutClassroomsInput[]
    deleteMany?: classesScalarWhereInput | classesScalarWhereInput[]
  }

  export type booksUpdateOneRequiredWithoutClassroomsNestedInput = {
    create?: XOR<booksCreateWithoutClassroomsInput, booksUncheckedCreateWithoutClassroomsInput>
    connectOrCreate?: booksCreateOrConnectWithoutClassroomsInput
    upsert?: booksUpsertWithoutClassroomsInput
    connect?: booksWhereUniqueInput
    update?: XOR<XOR<booksUpdateToOneWithWhereWithoutClassroomsInput, booksUpdateWithoutClassroomsInput>, booksUncheckedUpdateWithoutClassroomsInput>
  }

  export type students_has_classroomsUpdateManyWithoutClassroomsNestedInput = {
    create?: XOR<students_has_classroomsCreateWithoutClassroomsInput, students_has_classroomsUncheckedCreateWithoutClassroomsInput> | students_has_classroomsCreateWithoutClassroomsInput[] | students_has_classroomsUncheckedCreateWithoutClassroomsInput[]
    connectOrCreate?: students_has_classroomsCreateOrConnectWithoutClassroomsInput | students_has_classroomsCreateOrConnectWithoutClassroomsInput[]
    upsert?: students_has_classroomsUpsertWithWhereUniqueWithoutClassroomsInput | students_has_classroomsUpsertWithWhereUniqueWithoutClassroomsInput[]
    createMany?: students_has_classroomsCreateManyClassroomsInputEnvelope
    set?: students_has_classroomsWhereUniqueInput | students_has_classroomsWhereUniqueInput[]
    disconnect?: students_has_classroomsWhereUniqueInput | students_has_classroomsWhereUniqueInput[]
    delete?: students_has_classroomsWhereUniqueInput | students_has_classroomsWhereUniqueInput[]
    connect?: students_has_classroomsWhereUniqueInput | students_has_classroomsWhereUniqueInput[]
    update?: students_has_classroomsUpdateWithWhereUniqueWithoutClassroomsInput | students_has_classroomsUpdateWithWhereUniqueWithoutClassroomsInput[]
    updateMany?: students_has_classroomsUpdateManyWithWhereWithoutClassroomsInput | students_has_classroomsUpdateManyWithWhereWithoutClassroomsInput[]
    deleteMany?: students_has_classroomsScalarWhereInput | students_has_classroomsScalarWhereInput[]
  }

  export type classesUncheckedUpdateManyWithoutClassroomsNestedInput = {
    create?: XOR<classesCreateWithoutClassroomsInput, classesUncheckedCreateWithoutClassroomsInput> | classesCreateWithoutClassroomsInput[] | classesUncheckedCreateWithoutClassroomsInput[]
    connectOrCreate?: classesCreateOrConnectWithoutClassroomsInput | classesCreateOrConnectWithoutClassroomsInput[]
    upsert?: classesUpsertWithWhereUniqueWithoutClassroomsInput | classesUpsertWithWhereUniqueWithoutClassroomsInput[]
    createMany?: classesCreateManyClassroomsInputEnvelope
    set?: classesWhereUniqueInput | classesWhereUniqueInput[]
    disconnect?: classesWhereUniqueInput | classesWhereUniqueInput[]
    delete?: classesWhereUniqueInput | classesWhereUniqueInput[]
    connect?: classesWhereUniqueInput | classesWhereUniqueInput[]
    update?: classesUpdateWithWhereUniqueWithoutClassroomsInput | classesUpdateWithWhereUniqueWithoutClassroomsInput[]
    updateMany?: classesUpdateManyWithWhereWithoutClassroomsInput | classesUpdateManyWithWhereWithoutClassroomsInput[]
    deleteMany?: classesScalarWhereInput | classesScalarWhereInput[]
  }

  export type students_has_classroomsUncheckedUpdateManyWithoutClassroomsNestedInput = {
    create?: XOR<students_has_classroomsCreateWithoutClassroomsInput, students_has_classroomsUncheckedCreateWithoutClassroomsInput> | students_has_classroomsCreateWithoutClassroomsInput[] | students_has_classroomsUncheckedCreateWithoutClassroomsInput[]
    connectOrCreate?: students_has_classroomsCreateOrConnectWithoutClassroomsInput | students_has_classroomsCreateOrConnectWithoutClassroomsInput[]
    upsert?: students_has_classroomsUpsertWithWhereUniqueWithoutClassroomsInput | students_has_classroomsUpsertWithWhereUniqueWithoutClassroomsInput[]
    createMany?: students_has_classroomsCreateManyClassroomsInputEnvelope
    set?: students_has_classroomsWhereUniqueInput | students_has_classroomsWhereUniqueInput[]
    disconnect?: students_has_classroomsWhereUniqueInput | students_has_classroomsWhereUniqueInput[]
    delete?: students_has_classroomsWhereUniqueInput | students_has_classroomsWhereUniqueInput[]
    connect?: students_has_classroomsWhereUniqueInput | students_has_classroomsWhereUniqueInput[]
    update?: students_has_classroomsUpdateWithWhereUniqueWithoutClassroomsInput | students_has_classroomsUpdateWithWhereUniqueWithoutClassroomsInput[]
    updateMany?: students_has_classroomsUpdateManyWithWhereWithoutClassroomsInput | students_has_classroomsUpdateManyWithWhereWithoutClassroomsInput[]
    deleteMany?: students_has_classroomsScalarWhereInput | students_has_classroomsScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type booksCreateNestedManyWithoutCoursesInput = {
    create?: XOR<booksCreateWithoutCoursesInput, booksUncheckedCreateWithoutCoursesInput> | booksCreateWithoutCoursesInput[] | booksUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: booksCreateOrConnectWithoutCoursesInput | booksCreateOrConnectWithoutCoursesInput[]
    createMany?: booksCreateManyCoursesInputEnvelope
    connect?: booksWhereUniqueInput | booksWhereUniqueInput[]
  }

  export type registrationsCreateNestedManyWithoutCoursesInput = {
    create?: XOR<registrationsCreateWithoutCoursesInput, registrationsUncheckedCreateWithoutCoursesInput> | registrationsCreateWithoutCoursesInput[] | registrationsUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: registrationsCreateOrConnectWithoutCoursesInput | registrationsCreateOrConnectWithoutCoursesInput[]
    createMany?: registrationsCreateManyCoursesInputEnvelope
    connect?: registrationsWhereUniqueInput | registrationsWhereUniqueInput[]
  }

  export type booksUncheckedCreateNestedManyWithoutCoursesInput = {
    create?: XOR<booksCreateWithoutCoursesInput, booksUncheckedCreateWithoutCoursesInput> | booksCreateWithoutCoursesInput[] | booksUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: booksCreateOrConnectWithoutCoursesInput | booksCreateOrConnectWithoutCoursesInput[]
    createMany?: booksCreateManyCoursesInputEnvelope
    connect?: booksWhereUniqueInput | booksWhereUniqueInput[]
  }

  export type registrationsUncheckedCreateNestedManyWithoutCoursesInput = {
    create?: XOR<registrationsCreateWithoutCoursesInput, registrationsUncheckedCreateWithoutCoursesInput> | registrationsCreateWithoutCoursesInput[] | registrationsUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: registrationsCreateOrConnectWithoutCoursesInput | registrationsCreateOrConnectWithoutCoursesInput[]
    createMany?: registrationsCreateManyCoursesInputEnvelope
    connect?: registrationsWhereUniqueInput | registrationsWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type booksUpdateManyWithoutCoursesNestedInput = {
    create?: XOR<booksCreateWithoutCoursesInput, booksUncheckedCreateWithoutCoursesInput> | booksCreateWithoutCoursesInput[] | booksUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: booksCreateOrConnectWithoutCoursesInput | booksCreateOrConnectWithoutCoursesInput[]
    upsert?: booksUpsertWithWhereUniqueWithoutCoursesInput | booksUpsertWithWhereUniqueWithoutCoursesInput[]
    createMany?: booksCreateManyCoursesInputEnvelope
    set?: booksWhereUniqueInput | booksWhereUniqueInput[]
    disconnect?: booksWhereUniqueInput | booksWhereUniqueInput[]
    delete?: booksWhereUniqueInput | booksWhereUniqueInput[]
    connect?: booksWhereUniqueInput | booksWhereUniqueInput[]
    update?: booksUpdateWithWhereUniqueWithoutCoursesInput | booksUpdateWithWhereUniqueWithoutCoursesInput[]
    updateMany?: booksUpdateManyWithWhereWithoutCoursesInput | booksUpdateManyWithWhereWithoutCoursesInput[]
    deleteMany?: booksScalarWhereInput | booksScalarWhereInput[]
  }

  export type registrationsUpdateManyWithoutCoursesNestedInput = {
    create?: XOR<registrationsCreateWithoutCoursesInput, registrationsUncheckedCreateWithoutCoursesInput> | registrationsCreateWithoutCoursesInput[] | registrationsUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: registrationsCreateOrConnectWithoutCoursesInput | registrationsCreateOrConnectWithoutCoursesInput[]
    upsert?: registrationsUpsertWithWhereUniqueWithoutCoursesInput | registrationsUpsertWithWhereUniqueWithoutCoursesInput[]
    createMany?: registrationsCreateManyCoursesInputEnvelope
    set?: registrationsWhereUniqueInput | registrationsWhereUniqueInput[]
    disconnect?: registrationsWhereUniqueInput | registrationsWhereUniqueInput[]
    delete?: registrationsWhereUniqueInput | registrationsWhereUniqueInput[]
    connect?: registrationsWhereUniqueInput | registrationsWhereUniqueInput[]
    update?: registrationsUpdateWithWhereUniqueWithoutCoursesInput | registrationsUpdateWithWhereUniqueWithoutCoursesInput[]
    updateMany?: registrationsUpdateManyWithWhereWithoutCoursesInput | registrationsUpdateManyWithWhereWithoutCoursesInput[]
    deleteMany?: registrationsScalarWhereInput | registrationsScalarWhereInput[]
  }

  export type booksUncheckedUpdateManyWithoutCoursesNestedInput = {
    create?: XOR<booksCreateWithoutCoursesInput, booksUncheckedCreateWithoutCoursesInput> | booksCreateWithoutCoursesInput[] | booksUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: booksCreateOrConnectWithoutCoursesInput | booksCreateOrConnectWithoutCoursesInput[]
    upsert?: booksUpsertWithWhereUniqueWithoutCoursesInput | booksUpsertWithWhereUniqueWithoutCoursesInput[]
    createMany?: booksCreateManyCoursesInputEnvelope
    set?: booksWhereUniqueInput | booksWhereUniqueInput[]
    disconnect?: booksWhereUniqueInput | booksWhereUniqueInput[]
    delete?: booksWhereUniqueInput | booksWhereUniqueInput[]
    connect?: booksWhereUniqueInput | booksWhereUniqueInput[]
    update?: booksUpdateWithWhereUniqueWithoutCoursesInput | booksUpdateWithWhereUniqueWithoutCoursesInput[]
    updateMany?: booksUpdateManyWithWhereWithoutCoursesInput | booksUpdateManyWithWhereWithoutCoursesInput[]
    deleteMany?: booksScalarWhereInput | booksScalarWhereInput[]
  }

  export type registrationsUncheckedUpdateManyWithoutCoursesNestedInput = {
    create?: XOR<registrationsCreateWithoutCoursesInput, registrationsUncheckedCreateWithoutCoursesInput> | registrationsCreateWithoutCoursesInput[] | registrationsUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: registrationsCreateOrConnectWithoutCoursesInput | registrationsCreateOrConnectWithoutCoursesInput[]
    upsert?: registrationsUpsertWithWhereUniqueWithoutCoursesInput | registrationsUpsertWithWhereUniqueWithoutCoursesInput[]
    createMany?: registrationsCreateManyCoursesInputEnvelope
    set?: registrationsWhereUniqueInput | registrationsWhereUniqueInput[]
    disconnect?: registrationsWhereUniqueInput | registrationsWhereUniqueInput[]
    delete?: registrationsWhereUniqueInput | registrationsWhereUniqueInput[]
    connect?: registrationsWhereUniqueInput | registrationsWhereUniqueInput[]
    update?: registrationsUpdateWithWhereUniqueWithoutCoursesInput | registrationsUpdateWithWhereUniqueWithoutCoursesInput[]
    updateMany?: registrationsUpdateManyWithWhereWithoutCoursesInput | registrationsUpdateManyWithWhereWithoutCoursesInput[]
    deleteMany?: registrationsScalarWhereInput | registrationsScalarWhereInput[]
  }

  export type booksCreateNestedOneWithoutLessonsInput = {
    create?: XOR<booksCreateWithoutLessonsInput, booksUncheckedCreateWithoutLessonsInput>
    connectOrCreate?: booksCreateOrConnectWithoutLessonsInput
    connect?: booksWhereUniqueInput
  }

  export type tasksCreateNestedManyWithoutLessonsInput = {
    create?: XOR<tasksCreateWithoutLessonsInput, tasksUncheckedCreateWithoutLessonsInput> | tasksCreateWithoutLessonsInput[] | tasksUncheckedCreateWithoutLessonsInput[]
    connectOrCreate?: tasksCreateOrConnectWithoutLessonsInput | tasksCreateOrConnectWithoutLessonsInput[]
    createMany?: tasksCreateManyLessonsInputEnvelope
    connect?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
  }

  export type tasksUncheckedCreateNestedManyWithoutLessonsInput = {
    create?: XOR<tasksCreateWithoutLessonsInput, tasksUncheckedCreateWithoutLessonsInput> | tasksCreateWithoutLessonsInput[] | tasksUncheckedCreateWithoutLessonsInput[]
    connectOrCreate?: tasksCreateOrConnectWithoutLessonsInput | tasksCreateOrConnectWithoutLessonsInput[]
    createMany?: tasksCreateManyLessonsInputEnvelope
    connect?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
  }

  export type booksUpdateOneRequiredWithoutLessonsNestedInput = {
    create?: XOR<booksCreateWithoutLessonsInput, booksUncheckedCreateWithoutLessonsInput>
    connectOrCreate?: booksCreateOrConnectWithoutLessonsInput
    upsert?: booksUpsertWithoutLessonsInput
    connect?: booksWhereUniqueInput
    update?: XOR<XOR<booksUpdateToOneWithWhereWithoutLessonsInput, booksUpdateWithoutLessonsInput>, booksUncheckedUpdateWithoutLessonsInput>
  }

  export type tasksUpdateManyWithoutLessonsNestedInput = {
    create?: XOR<tasksCreateWithoutLessonsInput, tasksUncheckedCreateWithoutLessonsInput> | tasksCreateWithoutLessonsInput[] | tasksUncheckedCreateWithoutLessonsInput[]
    connectOrCreate?: tasksCreateOrConnectWithoutLessonsInput | tasksCreateOrConnectWithoutLessonsInput[]
    upsert?: tasksUpsertWithWhereUniqueWithoutLessonsInput | tasksUpsertWithWhereUniqueWithoutLessonsInput[]
    createMany?: tasksCreateManyLessonsInputEnvelope
    set?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    disconnect?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    delete?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    connect?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    update?: tasksUpdateWithWhereUniqueWithoutLessonsInput | tasksUpdateWithWhereUniqueWithoutLessonsInput[]
    updateMany?: tasksUpdateManyWithWhereWithoutLessonsInput | tasksUpdateManyWithWhereWithoutLessonsInput[]
    deleteMany?: tasksScalarWhereInput | tasksScalarWhereInput[]
  }

  export type tasksUncheckedUpdateManyWithoutLessonsNestedInput = {
    create?: XOR<tasksCreateWithoutLessonsInput, tasksUncheckedCreateWithoutLessonsInput> | tasksCreateWithoutLessonsInput[] | tasksUncheckedCreateWithoutLessonsInput[]
    connectOrCreate?: tasksCreateOrConnectWithoutLessonsInput | tasksCreateOrConnectWithoutLessonsInput[]
    upsert?: tasksUpsertWithWhereUniqueWithoutLessonsInput | tasksUpsertWithWhereUniqueWithoutLessonsInput[]
    createMany?: tasksCreateManyLessonsInputEnvelope
    set?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    disconnect?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    delete?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    connect?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    update?: tasksUpdateWithWhereUniqueWithoutLessonsInput | tasksUpdateWithWhereUniqueWithoutLessonsInput[]
    updateMany?: tasksUpdateManyWithWhereWithoutLessonsInput | tasksUpdateManyWithWhereWithoutLessonsInput[]
    deleteMany?: tasksScalarWhereInput | tasksScalarWhereInput[]
  }

  export type registrationsCreateNestedOneWithoutMonthly_feeInput = {
    create?: XOR<registrationsCreateWithoutMonthly_feeInput, registrationsUncheckedCreateWithoutMonthly_feeInput>
    connectOrCreate?: registrationsCreateOrConnectWithoutMonthly_feeInput
    connect?: registrationsWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type registrationsUpdateOneRequiredWithoutMonthly_feeNestedInput = {
    create?: XOR<registrationsCreateWithoutMonthly_feeInput, registrationsUncheckedCreateWithoutMonthly_feeInput>
    connectOrCreate?: registrationsCreateOrConnectWithoutMonthly_feeInput
    upsert?: registrationsUpsertWithoutMonthly_feeInput
    connect?: registrationsWhereUniqueInput
    update?: XOR<XOR<registrationsUpdateToOneWithWhereWithoutMonthly_feeInput, registrationsUpdateWithoutMonthly_feeInput>, registrationsUncheckedUpdateWithoutMonthly_feeInput>
  }

  export type classesCreateNestedManyWithoutPresence_listInput = {
    create?: XOR<classesCreateWithoutPresence_listInput, classesUncheckedCreateWithoutPresence_listInput> | classesCreateWithoutPresence_listInput[] | classesUncheckedCreateWithoutPresence_listInput[]
    connectOrCreate?: classesCreateOrConnectWithoutPresence_listInput | classesCreateOrConnectWithoutPresence_listInput[]
    createMany?: classesCreateManyPresence_listInputEnvelope
    connect?: classesWhereUniqueInput | classesWhereUniqueInput[]
  }

  export type classesUncheckedCreateNestedManyWithoutPresence_listInput = {
    create?: XOR<classesCreateWithoutPresence_listInput, classesUncheckedCreateWithoutPresence_listInput> | classesCreateWithoutPresence_listInput[] | classesUncheckedCreateWithoutPresence_listInput[]
    connectOrCreate?: classesCreateOrConnectWithoutPresence_listInput | classesCreateOrConnectWithoutPresence_listInput[]
    createMany?: classesCreateManyPresence_listInputEnvelope
    connect?: classesWhereUniqueInput | classesWhereUniqueInput[]
  }

  export type classesUpdateManyWithoutPresence_listNestedInput = {
    create?: XOR<classesCreateWithoutPresence_listInput, classesUncheckedCreateWithoutPresence_listInput> | classesCreateWithoutPresence_listInput[] | classesUncheckedCreateWithoutPresence_listInput[]
    connectOrCreate?: classesCreateOrConnectWithoutPresence_listInput | classesCreateOrConnectWithoutPresence_listInput[]
    upsert?: classesUpsertWithWhereUniqueWithoutPresence_listInput | classesUpsertWithWhereUniqueWithoutPresence_listInput[]
    createMany?: classesCreateManyPresence_listInputEnvelope
    set?: classesWhereUniqueInput | classesWhereUniqueInput[]
    disconnect?: classesWhereUniqueInput | classesWhereUniqueInput[]
    delete?: classesWhereUniqueInput | classesWhereUniqueInput[]
    connect?: classesWhereUniqueInput | classesWhereUniqueInput[]
    update?: classesUpdateWithWhereUniqueWithoutPresence_listInput | classesUpdateWithWhereUniqueWithoutPresence_listInput[]
    updateMany?: classesUpdateManyWithWhereWithoutPresence_listInput | classesUpdateManyWithWhereWithoutPresence_listInput[]
    deleteMany?: classesScalarWhereInput | classesScalarWhereInput[]
  }

  export type classesUncheckedUpdateManyWithoutPresence_listNestedInput = {
    create?: XOR<classesCreateWithoutPresence_listInput, classesUncheckedCreateWithoutPresence_listInput> | classesCreateWithoutPresence_listInput[] | classesUncheckedCreateWithoutPresence_listInput[]
    connectOrCreate?: classesCreateOrConnectWithoutPresence_listInput | classesCreateOrConnectWithoutPresence_listInput[]
    upsert?: classesUpsertWithWhereUniqueWithoutPresence_listInput | classesUpsertWithWhereUniqueWithoutPresence_listInput[]
    createMany?: classesCreateManyPresence_listInputEnvelope
    set?: classesWhereUniqueInput | classesWhereUniqueInput[]
    disconnect?: classesWhereUniqueInput | classesWhereUniqueInput[]
    delete?: classesWhereUniqueInput | classesWhereUniqueInput[]
    connect?: classesWhereUniqueInput | classesWhereUniqueInput[]
    update?: classesUpdateWithWhereUniqueWithoutPresence_listInput | classesUpdateWithWhereUniqueWithoutPresence_listInput[]
    updateMany?: classesUpdateManyWithWhereWithoutPresence_listInput | classesUpdateManyWithWhereWithoutPresence_listInput[]
    deleteMany?: classesScalarWhereInput | classesScalarWhereInput[]
  }

  export type classesCreateNestedManyWithoutProfessionalsInput = {
    create?: XOR<classesCreateWithoutProfessionalsInput, classesUncheckedCreateWithoutProfessionalsInput> | classesCreateWithoutProfessionalsInput[] | classesUncheckedCreateWithoutProfessionalsInput[]
    connectOrCreate?: classesCreateOrConnectWithoutProfessionalsInput | classesCreateOrConnectWithoutProfessionalsInput[]
    createMany?: classesCreateManyProfessionalsInputEnvelope
    connect?: classesWhereUniqueInput | classesWhereUniqueInput[]
  }

  export type adressesCreateNestedOneWithoutProfessionalsInput = {
    create?: XOR<adressesCreateWithoutProfessionalsInput, adressesUncheckedCreateWithoutProfessionalsInput>
    connectOrCreate?: adressesCreateOrConnectWithoutProfessionalsInput
    connect?: adressesWhereUniqueInput
  }

  export type roleCreateNestedOneWithoutProfessionalsInput = {
    create?: XOR<roleCreateWithoutProfessionalsInput, roleUncheckedCreateWithoutProfessionalsInput>
    connectOrCreate?: roleCreateOrConnectWithoutProfessionalsInput
    connect?: roleWhereUniqueInput
  }

  export type classesUncheckedCreateNestedManyWithoutProfessionalsInput = {
    create?: XOR<classesCreateWithoutProfessionalsInput, classesUncheckedCreateWithoutProfessionalsInput> | classesCreateWithoutProfessionalsInput[] | classesUncheckedCreateWithoutProfessionalsInput[]
    connectOrCreate?: classesCreateOrConnectWithoutProfessionalsInput | classesCreateOrConnectWithoutProfessionalsInput[]
    createMany?: classesCreateManyProfessionalsInputEnvelope
    connect?: classesWhereUniqueInput | classesWhereUniqueInput[]
  }

  export type classesUpdateManyWithoutProfessionalsNestedInput = {
    create?: XOR<classesCreateWithoutProfessionalsInput, classesUncheckedCreateWithoutProfessionalsInput> | classesCreateWithoutProfessionalsInput[] | classesUncheckedCreateWithoutProfessionalsInput[]
    connectOrCreate?: classesCreateOrConnectWithoutProfessionalsInput | classesCreateOrConnectWithoutProfessionalsInput[]
    upsert?: classesUpsertWithWhereUniqueWithoutProfessionalsInput | classesUpsertWithWhereUniqueWithoutProfessionalsInput[]
    createMany?: classesCreateManyProfessionalsInputEnvelope
    set?: classesWhereUniqueInput | classesWhereUniqueInput[]
    disconnect?: classesWhereUniqueInput | classesWhereUniqueInput[]
    delete?: classesWhereUniqueInput | classesWhereUniqueInput[]
    connect?: classesWhereUniqueInput | classesWhereUniqueInput[]
    update?: classesUpdateWithWhereUniqueWithoutProfessionalsInput | classesUpdateWithWhereUniqueWithoutProfessionalsInput[]
    updateMany?: classesUpdateManyWithWhereWithoutProfessionalsInput | classesUpdateManyWithWhereWithoutProfessionalsInput[]
    deleteMany?: classesScalarWhereInput | classesScalarWhereInput[]
  }

  export type adressesUpdateOneRequiredWithoutProfessionalsNestedInput = {
    create?: XOR<adressesCreateWithoutProfessionalsInput, adressesUncheckedCreateWithoutProfessionalsInput>
    connectOrCreate?: adressesCreateOrConnectWithoutProfessionalsInput
    upsert?: adressesUpsertWithoutProfessionalsInput
    connect?: adressesWhereUniqueInput
    update?: XOR<XOR<adressesUpdateToOneWithWhereWithoutProfessionalsInput, adressesUpdateWithoutProfessionalsInput>, adressesUncheckedUpdateWithoutProfessionalsInput>
  }

  export type roleUpdateOneRequiredWithoutProfessionalsNestedInput = {
    create?: XOR<roleCreateWithoutProfessionalsInput, roleUncheckedCreateWithoutProfessionalsInput>
    connectOrCreate?: roleCreateOrConnectWithoutProfessionalsInput
    upsert?: roleUpsertWithoutProfessionalsInput
    connect?: roleWhereUniqueInput
    update?: XOR<XOR<roleUpdateToOneWithWhereWithoutProfessionalsInput, roleUpdateWithoutProfessionalsInput>, roleUncheckedUpdateWithoutProfessionalsInput>
  }

  export type classesUncheckedUpdateManyWithoutProfessionalsNestedInput = {
    create?: XOR<classesCreateWithoutProfessionalsInput, classesUncheckedCreateWithoutProfessionalsInput> | classesCreateWithoutProfessionalsInput[] | classesUncheckedCreateWithoutProfessionalsInput[]
    connectOrCreate?: classesCreateOrConnectWithoutProfessionalsInput | classesCreateOrConnectWithoutProfessionalsInput[]
    upsert?: classesUpsertWithWhereUniqueWithoutProfessionalsInput | classesUpsertWithWhereUniqueWithoutProfessionalsInput[]
    createMany?: classesCreateManyProfessionalsInputEnvelope
    set?: classesWhereUniqueInput | classesWhereUniqueInput[]
    disconnect?: classesWhereUniqueInput | classesWhereUniqueInput[]
    delete?: classesWhereUniqueInput | classesWhereUniqueInput[]
    connect?: classesWhereUniqueInput | classesWhereUniqueInput[]
    update?: classesUpdateWithWhereUniqueWithoutProfessionalsInput | classesUpdateWithWhereUniqueWithoutProfessionalsInput[]
    updateMany?: classesUpdateManyWithWhereWithoutProfessionalsInput | classesUpdateManyWithWhereWithoutProfessionalsInput[]
    deleteMany?: classesScalarWhereInput | classesScalarWhereInput[]
  }

  export type studentsCreateNestedOneWithoutRecords_of_studentsInput = {
    create?: XOR<studentsCreateWithoutRecords_of_studentsInput, studentsUncheckedCreateWithoutRecords_of_studentsInput>
    connectOrCreate?: studentsCreateOrConnectWithoutRecords_of_studentsInput
    connect?: studentsWhereUniqueInput
  }

  export type studentsUpdateOneRequiredWithoutRecords_of_studentsNestedInput = {
    create?: XOR<studentsCreateWithoutRecords_of_studentsInput, studentsUncheckedCreateWithoutRecords_of_studentsInput>
    connectOrCreate?: studentsCreateOrConnectWithoutRecords_of_studentsInput
    upsert?: studentsUpsertWithoutRecords_of_studentsInput
    connect?: studentsWhereUniqueInput
    update?: XOR<XOR<studentsUpdateToOneWithWhereWithoutRecords_of_studentsInput, studentsUpdateWithoutRecords_of_studentsInput>, studentsUncheckedUpdateWithoutRecords_of_studentsInput>
  }

  export type monthly_feeCreateNestedManyWithoutRegistrationsInput = {
    create?: XOR<monthly_feeCreateWithoutRegistrationsInput, monthly_feeUncheckedCreateWithoutRegistrationsInput> | monthly_feeCreateWithoutRegistrationsInput[] | monthly_feeUncheckedCreateWithoutRegistrationsInput[]
    connectOrCreate?: monthly_feeCreateOrConnectWithoutRegistrationsInput | monthly_feeCreateOrConnectWithoutRegistrationsInput[]
    createMany?: monthly_feeCreateManyRegistrationsInputEnvelope
    connect?: monthly_feeWhereUniqueInput | monthly_feeWhereUniqueInput[]
  }

  export type coursesCreateNestedOneWithoutRegistrationsInput = {
    create?: XOR<coursesCreateWithoutRegistrationsInput, coursesUncheckedCreateWithoutRegistrationsInput>
    connectOrCreate?: coursesCreateOrConnectWithoutRegistrationsInput
    connect?: coursesWhereUniqueInput
  }

  export type studentsCreateNestedOneWithoutRegistrationsInput = {
    create?: XOR<studentsCreateWithoutRegistrationsInput, studentsUncheckedCreateWithoutRegistrationsInput>
    connectOrCreate?: studentsCreateOrConnectWithoutRegistrationsInput
    connect?: studentsWhereUniqueInput
  }

  export type students_has_classroomsCreateNestedOneWithoutRegistrationsInput = {
    create?: XOR<students_has_classroomsCreateWithoutRegistrationsInput, students_has_classroomsUncheckedCreateWithoutRegistrationsInput>
    connectOrCreate?: students_has_classroomsCreateOrConnectWithoutRegistrationsInput
    connect?: students_has_classroomsWhereUniqueInput
  }

  export type tasksCreateNestedManyWithoutRegistrationsInput = {
    create?: XOR<tasksCreateWithoutRegistrationsInput, tasksUncheckedCreateWithoutRegistrationsInput> | tasksCreateWithoutRegistrationsInput[] | tasksUncheckedCreateWithoutRegistrationsInput[]
    connectOrCreate?: tasksCreateOrConnectWithoutRegistrationsInput | tasksCreateOrConnectWithoutRegistrationsInput[]
    createMany?: tasksCreateManyRegistrationsInputEnvelope
    connect?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
  }

  export type monthly_feeUncheckedCreateNestedManyWithoutRegistrationsInput = {
    create?: XOR<monthly_feeCreateWithoutRegistrationsInput, monthly_feeUncheckedCreateWithoutRegistrationsInput> | monthly_feeCreateWithoutRegistrationsInput[] | monthly_feeUncheckedCreateWithoutRegistrationsInput[]
    connectOrCreate?: monthly_feeCreateOrConnectWithoutRegistrationsInput | monthly_feeCreateOrConnectWithoutRegistrationsInput[]
    createMany?: monthly_feeCreateManyRegistrationsInputEnvelope
    connect?: monthly_feeWhereUniqueInput | monthly_feeWhereUniqueInput[]
  }

  export type students_has_classroomsUncheckedCreateNestedOneWithoutRegistrationsInput = {
    create?: XOR<students_has_classroomsCreateWithoutRegistrationsInput, students_has_classroomsUncheckedCreateWithoutRegistrationsInput>
    connectOrCreate?: students_has_classroomsCreateOrConnectWithoutRegistrationsInput
    connect?: students_has_classroomsWhereUniqueInput
  }

  export type tasksUncheckedCreateNestedManyWithoutRegistrationsInput = {
    create?: XOR<tasksCreateWithoutRegistrationsInput, tasksUncheckedCreateWithoutRegistrationsInput> | tasksCreateWithoutRegistrationsInput[] | tasksUncheckedCreateWithoutRegistrationsInput[]
    connectOrCreate?: tasksCreateOrConnectWithoutRegistrationsInput | tasksCreateOrConnectWithoutRegistrationsInput[]
    createMany?: tasksCreateManyRegistrationsInputEnvelope
    connect?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
  }

  export type monthly_feeUpdateManyWithoutRegistrationsNestedInput = {
    create?: XOR<monthly_feeCreateWithoutRegistrationsInput, monthly_feeUncheckedCreateWithoutRegistrationsInput> | monthly_feeCreateWithoutRegistrationsInput[] | monthly_feeUncheckedCreateWithoutRegistrationsInput[]
    connectOrCreate?: monthly_feeCreateOrConnectWithoutRegistrationsInput | monthly_feeCreateOrConnectWithoutRegistrationsInput[]
    upsert?: monthly_feeUpsertWithWhereUniqueWithoutRegistrationsInput | monthly_feeUpsertWithWhereUniqueWithoutRegistrationsInput[]
    createMany?: monthly_feeCreateManyRegistrationsInputEnvelope
    set?: monthly_feeWhereUniqueInput | monthly_feeWhereUniqueInput[]
    disconnect?: monthly_feeWhereUniqueInput | monthly_feeWhereUniqueInput[]
    delete?: monthly_feeWhereUniqueInput | monthly_feeWhereUniqueInput[]
    connect?: monthly_feeWhereUniqueInput | monthly_feeWhereUniqueInput[]
    update?: monthly_feeUpdateWithWhereUniqueWithoutRegistrationsInput | monthly_feeUpdateWithWhereUniqueWithoutRegistrationsInput[]
    updateMany?: monthly_feeUpdateManyWithWhereWithoutRegistrationsInput | monthly_feeUpdateManyWithWhereWithoutRegistrationsInput[]
    deleteMany?: monthly_feeScalarWhereInput | monthly_feeScalarWhereInput[]
  }

  export type coursesUpdateOneRequiredWithoutRegistrationsNestedInput = {
    create?: XOR<coursesCreateWithoutRegistrationsInput, coursesUncheckedCreateWithoutRegistrationsInput>
    connectOrCreate?: coursesCreateOrConnectWithoutRegistrationsInput
    upsert?: coursesUpsertWithoutRegistrationsInput
    connect?: coursesWhereUniqueInput
    update?: XOR<XOR<coursesUpdateToOneWithWhereWithoutRegistrationsInput, coursesUpdateWithoutRegistrationsInput>, coursesUncheckedUpdateWithoutRegistrationsInput>
  }

  export type studentsUpdateOneRequiredWithoutRegistrationsNestedInput = {
    create?: XOR<studentsCreateWithoutRegistrationsInput, studentsUncheckedCreateWithoutRegistrationsInput>
    connectOrCreate?: studentsCreateOrConnectWithoutRegistrationsInput
    upsert?: studentsUpsertWithoutRegistrationsInput
    connect?: studentsWhereUniqueInput
    update?: XOR<XOR<studentsUpdateToOneWithWhereWithoutRegistrationsInput, studentsUpdateWithoutRegistrationsInput>, studentsUncheckedUpdateWithoutRegistrationsInput>
  }

  export type students_has_classroomsUpdateOneWithoutRegistrationsNestedInput = {
    create?: XOR<students_has_classroomsCreateWithoutRegistrationsInput, students_has_classroomsUncheckedCreateWithoutRegistrationsInput>
    connectOrCreate?: students_has_classroomsCreateOrConnectWithoutRegistrationsInput
    upsert?: students_has_classroomsUpsertWithoutRegistrationsInput
    disconnect?: students_has_classroomsWhereInput | boolean
    delete?: students_has_classroomsWhereInput | boolean
    connect?: students_has_classroomsWhereUniqueInput
    update?: XOR<XOR<students_has_classroomsUpdateToOneWithWhereWithoutRegistrationsInput, students_has_classroomsUpdateWithoutRegistrationsInput>, students_has_classroomsUncheckedUpdateWithoutRegistrationsInput>
  }

  export type tasksUpdateManyWithoutRegistrationsNestedInput = {
    create?: XOR<tasksCreateWithoutRegistrationsInput, tasksUncheckedCreateWithoutRegistrationsInput> | tasksCreateWithoutRegistrationsInput[] | tasksUncheckedCreateWithoutRegistrationsInput[]
    connectOrCreate?: tasksCreateOrConnectWithoutRegistrationsInput | tasksCreateOrConnectWithoutRegistrationsInput[]
    upsert?: tasksUpsertWithWhereUniqueWithoutRegistrationsInput | tasksUpsertWithWhereUniqueWithoutRegistrationsInput[]
    createMany?: tasksCreateManyRegistrationsInputEnvelope
    set?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    disconnect?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    delete?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    connect?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    update?: tasksUpdateWithWhereUniqueWithoutRegistrationsInput | tasksUpdateWithWhereUniqueWithoutRegistrationsInput[]
    updateMany?: tasksUpdateManyWithWhereWithoutRegistrationsInput | tasksUpdateManyWithWhereWithoutRegistrationsInput[]
    deleteMany?: tasksScalarWhereInput | tasksScalarWhereInput[]
  }

  export type monthly_feeUncheckedUpdateManyWithoutRegistrationsNestedInput = {
    create?: XOR<monthly_feeCreateWithoutRegistrationsInput, monthly_feeUncheckedCreateWithoutRegistrationsInput> | monthly_feeCreateWithoutRegistrationsInput[] | monthly_feeUncheckedCreateWithoutRegistrationsInput[]
    connectOrCreate?: monthly_feeCreateOrConnectWithoutRegistrationsInput | monthly_feeCreateOrConnectWithoutRegistrationsInput[]
    upsert?: monthly_feeUpsertWithWhereUniqueWithoutRegistrationsInput | monthly_feeUpsertWithWhereUniqueWithoutRegistrationsInput[]
    createMany?: monthly_feeCreateManyRegistrationsInputEnvelope
    set?: monthly_feeWhereUniqueInput | monthly_feeWhereUniqueInput[]
    disconnect?: monthly_feeWhereUniqueInput | monthly_feeWhereUniqueInput[]
    delete?: monthly_feeWhereUniqueInput | monthly_feeWhereUniqueInput[]
    connect?: monthly_feeWhereUniqueInput | monthly_feeWhereUniqueInput[]
    update?: monthly_feeUpdateWithWhereUniqueWithoutRegistrationsInput | monthly_feeUpdateWithWhereUniqueWithoutRegistrationsInput[]
    updateMany?: monthly_feeUpdateManyWithWhereWithoutRegistrationsInput | monthly_feeUpdateManyWithWhereWithoutRegistrationsInput[]
    deleteMany?: monthly_feeScalarWhereInput | monthly_feeScalarWhereInput[]
  }

  export type students_has_classroomsUncheckedUpdateOneWithoutRegistrationsNestedInput = {
    create?: XOR<students_has_classroomsCreateWithoutRegistrationsInput, students_has_classroomsUncheckedCreateWithoutRegistrationsInput>
    connectOrCreate?: students_has_classroomsCreateOrConnectWithoutRegistrationsInput
    upsert?: students_has_classroomsUpsertWithoutRegistrationsInput
    disconnect?: students_has_classroomsWhereInput | boolean
    delete?: students_has_classroomsWhereInput | boolean
    connect?: students_has_classroomsWhereUniqueInput
    update?: XOR<XOR<students_has_classroomsUpdateToOneWithWhereWithoutRegistrationsInput, students_has_classroomsUpdateWithoutRegistrationsInput>, students_has_classroomsUncheckedUpdateWithoutRegistrationsInput>
  }

  export type tasksUncheckedUpdateManyWithoutRegistrationsNestedInput = {
    create?: XOR<tasksCreateWithoutRegistrationsInput, tasksUncheckedCreateWithoutRegistrationsInput> | tasksCreateWithoutRegistrationsInput[] | tasksUncheckedCreateWithoutRegistrationsInput[]
    connectOrCreate?: tasksCreateOrConnectWithoutRegistrationsInput | tasksCreateOrConnectWithoutRegistrationsInput[]
    upsert?: tasksUpsertWithWhereUniqueWithoutRegistrationsInput | tasksUpsertWithWhereUniqueWithoutRegistrationsInput[]
    createMany?: tasksCreateManyRegistrationsInputEnvelope
    set?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    disconnect?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    delete?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    connect?: tasksWhereUniqueInput | tasksWhereUniqueInput[]
    update?: tasksUpdateWithWhereUniqueWithoutRegistrationsInput | tasksUpdateWithWhereUniqueWithoutRegistrationsInput[]
    updateMany?: tasksUpdateManyWithWhereWithoutRegistrationsInput | tasksUpdateManyWithWhereWithoutRegistrationsInput[]
    deleteMany?: tasksScalarWhereInput | tasksScalarWhereInput[]
  }

  export type professionalsCreateNestedManyWithoutRoleInput = {
    create?: XOR<professionalsCreateWithoutRoleInput, professionalsUncheckedCreateWithoutRoleInput> | professionalsCreateWithoutRoleInput[] | professionalsUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: professionalsCreateOrConnectWithoutRoleInput | professionalsCreateOrConnectWithoutRoleInput[]
    createMany?: professionalsCreateManyRoleInputEnvelope
    connect?: professionalsWhereUniqueInput | professionalsWhereUniqueInput[]
  }

  export type professionalsUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<professionalsCreateWithoutRoleInput, professionalsUncheckedCreateWithoutRoleInput> | professionalsCreateWithoutRoleInput[] | professionalsUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: professionalsCreateOrConnectWithoutRoleInput | professionalsCreateOrConnectWithoutRoleInput[]
    createMany?: professionalsCreateManyRoleInputEnvelope
    connect?: professionalsWhereUniqueInput | professionalsWhereUniqueInput[]
  }

  export type professionalsUpdateManyWithoutRoleNestedInput = {
    create?: XOR<professionalsCreateWithoutRoleInput, professionalsUncheckedCreateWithoutRoleInput> | professionalsCreateWithoutRoleInput[] | professionalsUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: professionalsCreateOrConnectWithoutRoleInput | professionalsCreateOrConnectWithoutRoleInput[]
    upsert?: professionalsUpsertWithWhereUniqueWithoutRoleInput | professionalsUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: professionalsCreateManyRoleInputEnvelope
    set?: professionalsWhereUniqueInput | professionalsWhereUniqueInput[]
    disconnect?: professionalsWhereUniqueInput | professionalsWhereUniqueInput[]
    delete?: professionalsWhereUniqueInput | professionalsWhereUniqueInput[]
    connect?: professionalsWhereUniqueInput | professionalsWhereUniqueInput[]
    update?: professionalsUpdateWithWhereUniqueWithoutRoleInput | professionalsUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: professionalsUpdateManyWithWhereWithoutRoleInput | professionalsUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: professionalsScalarWhereInput | professionalsScalarWhereInput[]
  }

  export type professionalsUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<professionalsCreateWithoutRoleInput, professionalsUncheckedCreateWithoutRoleInput> | professionalsCreateWithoutRoleInput[] | professionalsUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: professionalsCreateOrConnectWithoutRoleInput | professionalsCreateOrConnectWithoutRoleInput[]
    upsert?: professionalsUpsertWithWhereUniqueWithoutRoleInput | professionalsUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: professionalsCreateManyRoleInputEnvelope
    set?: professionalsWhereUniqueInput | professionalsWhereUniqueInput[]
    disconnect?: professionalsWhereUniqueInput | professionalsWhereUniqueInput[]
    delete?: professionalsWhereUniqueInput | professionalsWhereUniqueInput[]
    connect?: professionalsWhereUniqueInput | professionalsWhereUniqueInput[]
    update?: professionalsUpdateWithWhereUniqueWithoutRoleInput | professionalsUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: professionalsUpdateManyWithWhereWithoutRoleInput | professionalsUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: professionalsScalarWhereInput | professionalsScalarWhereInput[]
  }

  export type records_of_studentsCreateNestedManyWithoutStudentsInput = {
    create?: XOR<records_of_studentsCreateWithoutStudentsInput, records_of_studentsUncheckedCreateWithoutStudentsInput> | records_of_studentsCreateWithoutStudentsInput[] | records_of_studentsUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: records_of_studentsCreateOrConnectWithoutStudentsInput | records_of_studentsCreateOrConnectWithoutStudentsInput[]
    createMany?: records_of_studentsCreateManyStudentsInputEnvelope
    connect?: records_of_studentsWhereUniqueInput | records_of_studentsWhereUniqueInput[]
  }

  export type registrationsCreateNestedManyWithoutStudentsInput = {
    create?: XOR<registrationsCreateWithoutStudentsInput, registrationsUncheckedCreateWithoutStudentsInput> | registrationsCreateWithoutStudentsInput[] | registrationsUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: registrationsCreateOrConnectWithoutStudentsInput | registrationsCreateOrConnectWithoutStudentsInput[]
    createMany?: registrationsCreateManyStudentsInputEnvelope
    connect?: registrationsWhereUniqueInput | registrationsWhereUniqueInput[]
  }

  export type adressesCreateNestedOneWithoutStudentsInput = {
    create?: XOR<adressesCreateWithoutStudentsInput, adressesUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: adressesCreateOrConnectWithoutStudentsInput
    connect?: adressesWhereUniqueInput
  }

  export type records_of_studentsUncheckedCreateNestedManyWithoutStudentsInput = {
    create?: XOR<records_of_studentsCreateWithoutStudentsInput, records_of_studentsUncheckedCreateWithoutStudentsInput> | records_of_studentsCreateWithoutStudentsInput[] | records_of_studentsUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: records_of_studentsCreateOrConnectWithoutStudentsInput | records_of_studentsCreateOrConnectWithoutStudentsInput[]
    createMany?: records_of_studentsCreateManyStudentsInputEnvelope
    connect?: records_of_studentsWhereUniqueInput | records_of_studentsWhereUniqueInput[]
  }

  export type registrationsUncheckedCreateNestedManyWithoutStudentsInput = {
    create?: XOR<registrationsCreateWithoutStudentsInput, registrationsUncheckedCreateWithoutStudentsInput> | registrationsCreateWithoutStudentsInput[] | registrationsUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: registrationsCreateOrConnectWithoutStudentsInput | registrationsCreateOrConnectWithoutStudentsInput[]
    createMany?: registrationsCreateManyStudentsInputEnvelope
    connect?: registrationsWhereUniqueInput | registrationsWhereUniqueInput[]
  }

  export type records_of_studentsUpdateManyWithoutStudentsNestedInput = {
    create?: XOR<records_of_studentsCreateWithoutStudentsInput, records_of_studentsUncheckedCreateWithoutStudentsInput> | records_of_studentsCreateWithoutStudentsInput[] | records_of_studentsUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: records_of_studentsCreateOrConnectWithoutStudentsInput | records_of_studentsCreateOrConnectWithoutStudentsInput[]
    upsert?: records_of_studentsUpsertWithWhereUniqueWithoutStudentsInput | records_of_studentsUpsertWithWhereUniqueWithoutStudentsInput[]
    createMany?: records_of_studentsCreateManyStudentsInputEnvelope
    set?: records_of_studentsWhereUniqueInput | records_of_studentsWhereUniqueInput[]
    disconnect?: records_of_studentsWhereUniqueInput | records_of_studentsWhereUniqueInput[]
    delete?: records_of_studentsWhereUniqueInput | records_of_studentsWhereUniqueInput[]
    connect?: records_of_studentsWhereUniqueInput | records_of_studentsWhereUniqueInput[]
    update?: records_of_studentsUpdateWithWhereUniqueWithoutStudentsInput | records_of_studentsUpdateWithWhereUniqueWithoutStudentsInput[]
    updateMany?: records_of_studentsUpdateManyWithWhereWithoutStudentsInput | records_of_studentsUpdateManyWithWhereWithoutStudentsInput[]
    deleteMany?: records_of_studentsScalarWhereInput | records_of_studentsScalarWhereInput[]
  }

  export type registrationsUpdateManyWithoutStudentsNestedInput = {
    create?: XOR<registrationsCreateWithoutStudentsInput, registrationsUncheckedCreateWithoutStudentsInput> | registrationsCreateWithoutStudentsInput[] | registrationsUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: registrationsCreateOrConnectWithoutStudentsInput | registrationsCreateOrConnectWithoutStudentsInput[]
    upsert?: registrationsUpsertWithWhereUniqueWithoutStudentsInput | registrationsUpsertWithWhereUniqueWithoutStudentsInput[]
    createMany?: registrationsCreateManyStudentsInputEnvelope
    set?: registrationsWhereUniqueInput | registrationsWhereUniqueInput[]
    disconnect?: registrationsWhereUniqueInput | registrationsWhereUniqueInput[]
    delete?: registrationsWhereUniqueInput | registrationsWhereUniqueInput[]
    connect?: registrationsWhereUniqueInput | registrationsWhereUniqueInput[]
    update?: registrationsUpdateWithWhereUniqueWithoutStudentsInput | registrationsUpdateWithWhereUniqueWithoutStudentsInput[]
    updateMany?: registrationsUpdateManyWithWhereWithoutStudentsInput | registrationsUpdateManyWithWhereWithoutStudentsInput[]
    deleteMany?: registrationsScalarWhereInput | registrationsScalarWhereInput[]
  }

  export type adressesUpdateOneRequiredWithoutStudentsNestedInput = {
    create?: XOR<adressesCreateWithoutStudentsInput, adressesUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: adressesCreateOrConnectWithoutStudentsInput
    upsert?: adressesUpsertWithoutStudentsInput
    connect?: adressesWhereUniqueInput
    update?: XOR<XOR<adressesUpdateToOneWithWhereWithoutStudentsInput, adressesUpdateWithoutStudentsInput>, adressesUncheckedUpdateWithoutStudentsInput>
  }

  export type records_of_studentsUncheckedUpdateManyWithoutStudentsNestedInput = {
    create?: XOR<records_of_studentsCreateWithoutStudentsInput, records_of_studentsUncheckedCreateWithoutStudentsInput> | records_of_studentsCreateWithoutStudentsInput[] | records_of_studentsUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: records_of_studentsCreateOrConnectWithoutStudentsInput | records_of_studentsCreateOrConnectWithoutStudentsInput[]
    upsert?: records_of_studentsUpsertWithWhereUniqueWithoutStudentsInput | records_of_studentsUpsertWithWhereUniqueWithoutStudentsInput[]
    createMany?: records_of_studentsCreateManyStudentsInputEnvelope
    set?: records_of_studentsWhereUniqueInput | records_of_studentsWhereUniqueInput[]
    disconnect?: records_of_studentsWhereUniqueInput | records_of_studentsWhereUniqueInput[]
    delete?: records_of_studentsWhereUniqueInput | records_of_studentsWhereUniqueInput[]
    connect?: records_of_studentsWhereUniqueInput | records_of_studentsWhereUniqueInput[]
    update?: records_of_studentsUpdateWithWhereUniqueWithoutStudentsInput | records_of_studentsUpdateWithWhereUniqueWithoutStudentsInput[]
    updateMany?: records_of_studentsUpdateManyWithWhereWithoutStudentsInput | records_of_studentsUpdateManyWithWhereWithoutStudentsInput[]
    deleteMany?: records_of_studentsScalarWhereInput | records_of_studentsScalarWhereInput[]
  }

  export type registrationsUncheckedUpdateManyWithoutStudentsNestedInput = {
    create?: XOR<registrationsCreateWithoutStudentsInput, registrationsUncheckedCreateWithoutStudentsInput> | registrationsCreateWithoutStudentsInput[] | registrationsUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: registrationsCreateOrConnectWithoutStudentsInput | registrationsCreateOrConnectWithoutStudentsInput[]
    upsert?: registrationsUpsertWithWhereUniqueWithoutStudentsInput | registrationsUpsertWithWhereUniqueWithoutStudentsInput[]
    createMany?: registrationsCreateManyStudentsInputEnvelope
    set?: registrationsWhereUniqueInput | registrationsWhereUniqueInput[]
    disconnect?: registrationsWhereUniqueInput | registrationsWhereUniqueInput[]
    delete?: registrationsWhereUniqueInput | registrationsWhereUniqueInput[]
    connect?: registrationsWhereUniqueInput | registrationsWhereUniqueInput[]
    update?: registrationsUpdateWithWhereUniqueWithoutStudentsInput | registrationsUpdateWithWhereUniqueWithoutStudentsInput[]
    updateMany?: registrationsUpdateManyWithWhereWithoutStudentsInput | registrationsUpdateManyWithWhereWithoutStudentsInput[]
    deleteMany?: registrationsScalarWhereInput | registrationsScalarWhereInput[]
  }

  export type classroomsCreateNestedOneWithoutStudents_has_classroomsInput = {
    create?: XOR<classroomsCreateWithoutStudents_has_classroomsInput, classroomsUncheckedCreateWithoutStudents_has_classroomsInput>
    connectOrCreate?: classroomsCreateOrConnectWithoutStudents_has_classroomsInput
    connect?: classroomsWhereUniqueInput
  }

  export type registrationsCreateNestedOneWithoutStudents_has_classroomsInput = {
    create?: XOR<registrationsCreateWithoutStudents_has_classroomsInput, registrationsUncheckedCreateWithoutStudents_has_classroomsInput>
    connectOrCreate?: registrationsCreateOrConnectWithoutStudents_has_classroomsInput
    connect?: registrationsWhereUniqueInput
  }

  export type classroomsUpdateOneRequiredWithoutStudents_has_classroomsNestedInput = {
    create?: XOR<classroomsCreateWithoutStudents_has_classroomsInput, classroomsUncheckedCreateWithoutStudents_has_classroomsInput>
    connectOrCreate?: classroomsCreateOrConnectWithoutStudents_has_classroomsInput
    upsert?: classroomsUpsertWithoutStudents_has_classroomsInput
    connect?: classroomsWhereUniqueInput
    update?: XOR<XOR<classroomsUpdateToOneWithWhereWithoutStudents_has_classroomsInput, classroomsUpdateWithoutStudents_has_classroomsInput>, classroomsUncheckedUpdateWithoutStudents_has_classroomsInput>
  }

  export type registrationsUpdateOneRequiredWithoutStudents_has_classroomsNestedInput = {
    create?: XOR<registrationsCreateWithoutStudents_has_classroomsInput, registrationsUncheckedCreateWithoutStudents_has_classroomsInput>
    connectOrCreate?: registrationsCreateOrConnectWithoutStudents_has_classroomsInput
    upsert?: registrationsUpsertWithoutStudents_has_classroomsInput
    connect?: registrationsWhereUniqueInput
    update?: XOR<XOR<registrationsUpdateToOneWithWhereWithoutStudents_has_classroomsInput, registrationsUpdateWithoutStudents_has_classroomsInput>, registrationsUncheckedUpdateWithoutStudents_has_classroomsInput>
  }

  export type lessonsCreateNestedOneWithoutTasksInput = {
    create?: XOR<lessonsCreateWithoutTasksInput, lessonsUncheckedCreateWithoutTasksInput>
    connectOrCreate?: lessonsCreateOrConnectWithoutTasksInput
    connect?: lessonsWhereUniqueInput
  }

  export type registrationsCreateNestedOneWithoutTasksInput = {
    create?: XOR<registrationsCreateWithoutTasksInput, registrationsUncheckedCreateWithoutTasksInput>
    connectOrCreate?: registrationsCreateOrConnectWithoutTasksInput
    connect?: registrationsWhereUniqueInput
  }

  export type lessonsUpdateOneRequiredWithoutTasksNestedInput = {
    create?: XOR<lessonsCreateWithoutTasksInput, lessonsUncheckedCreateWithoutTasksInput>
    connectOrCreate?: lessonsCreateOrConnectWithoutTasksInput
    upsert?: lessonsUpsertWithoutTasksInput
    connect?: lessonsWhereUniqueInput
    update?: XOR<XOR<lessonsUpdateToOneWithWhereWithoutTasksInput, lessonsUpdateWithoutTasksInput>, lessonsUncheckedUpdateWithoutTasksInput>
  }

  export type registrationsUpdateOneRequiredWithoutTasksNestedInput = {
    create?: XOR<registrationsCreateWithoutTasksInput, registrationsUncheckedCreateWithoutTasksInput>
    connectOrCreate?: registrationsCreateOrConnectWithoutTasksInput
    upsert?: registrationsUpsertWithoutTasksInput
    connect?: registrationsWhereUniqueInput
    update?: XOR<XOR<registrationsUpdateToOneWithWhereWithoutTasksInput, registrationsUpdateWithoutTasksInput>, registrationsUncheckedUpdateWithoutTasksInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type professionalsCreateWithoutAdressesInput = {
    cpf: string
    name?: string | null
    first_name: string
    last_name: string
    phone: string
    email: string
    gender: string
    date_of_birth: Date | string
    active?: boolean
    admin?: boolean
    avatar_url?: string | null
    password: string
    user: string
    hour_value?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    classes?: classesCreateNestedManyWithoutProfessionalsInput
    role: roleCreateNestedOneWithoutProfessionalsInput
  }

  export type professionalsUncheckedCreateWithoutAdressesInput = {
    id?: number
    role_id: number
    cpf: string
    name?: string | null
    first_name: string
    last_name: string
    phone: string
    email: string
    gender: string
    date_of_birth: Date | string
    active?: boolean
    admin?: boolean
    avatar_url?: string | null
    password: string
    user: string
    hour_value?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    classes?: classesUncheckedCreateNestedManyWithoutProfessionalsInput
  }

  export type professionalsCreateOrConnectWithoutAdressesInput = {
    where: professionalsWhereUniqueInput
    create: XOR<professionalsCreateWithoutAdressesInput, professionalsUncheckedCreateWithoutAdressesInput>
  }

  export type professionalsCreateManyAdressesInputEnvelope = {
    data: professionalsCreateManyAdressesInput | professionalsCreateManyAdressesInput[]
    skipDuplicates?: boolean
  }

  export type studentsCreateWithoutAdressesInput = {
    email: string
    name?: string | null
    first_name: string
    last_name: string
    cpf: string
    phone: string
    gender: string
    date_of_birth: Date | string
    password: string
    user: string
    created_at?: Date | string | null
    created_by?: number | null
    avatar_url?: string | null
    updated_at?: Date | string | null
    updated_by?: number | null
    active?: boolean
    records_of_students?: records_of_studentsCreateNestedManyWithoutStudentsInput
    registrations?: registrationsCreateNestedManyWithoutStudentsInput
  }

  export type studentsUncheckedCreateWithoutAdressesInput = {
    id?: number
    email: string
    name?: string | null
    first_name: string
    last_name: string
    cpf: string
    phone: string
    gender: string
    date_of_birth: Date | string
    password: string
    user: string
    created_at?: Date | string | null
    created_by?: number | null
    avatar_url?: string | null
    updated_at?: Date | string | null
    updated_by?: number | null
    active?: boolean
    records_of_students?: records_of_studentsUncheckedCreateNestedManyWithoutStudentsInput
    registrations?: registrationsUncheckedCreateNestedManyWithoutStudentsInput
  }

  export type studentsCreateOrConnectWithoutAdressesInput = {
    where: studentsWhereUniqueInput
    create: XOR<studentsCreateWithoutAdressesInput, studentsUncheckedCreateWithoutAdressesInput>
  }

  export type studentsCreateManyAdressesInputEnvelope = {
    data: studentsCreateManyAdressesInput | studentsCreateManyAdressesInput[]
    skipDuplicates?: boolean
  }

  export type professionalsUpsertWithWhereUniqueWithoutAdressesInput = {
    where: professionalsWhereUniqueInput
    update: XOR<professionalsUpdateWithoutAdressesInput, professionalsUncheckedUpdateWithoutAdressesInput>
    create: XOR<professionalsCreateWithoutAdressesInput, professionalsUncheckedCreateWithoutAdressesInput>
  }

  export type professionalsUpdateWithWhereUniqueWithoutAdressesInput = {
    where: professionalsWhereUniqueInput
    data: XOR<professionalsUpdateWithoutAdressesInput, professionalsUncheckedUpdateWithoutAdressesInput>
  }

  export type professionalsUpdateManyWithWhereWithoutAdressesInput = {
    where: professionalsScalarWhereInput
    data: XOR<professionalsUpdateManyMutationInput, professionalsUncheckedUpdateManyWithoutAdressesInput>
  }

  export type professionalsScalarWhereInput = {
    AND?: professionalsScalarWhereInput | professionalsScalarWhereInput[]
    OR?: professionalsScalarWhereInput[]
    NOT?: professionalsScalarWhereInput | professionalsScalarWhereInput[]
    id?: IntFilter<"professionals"> | number
    role_id?: IntFilter<"professionals"> | number
    adresses_id?: IntFilter<"professionals"> | number
    cpf?: StringFilter<"professionals"> | string
    name?: StringNullableFilter<"professionals"> | string | null
    first_name?: StringFilter<"professionals"> | string
    last_name?: StringFilter<"professionals"> | string
    phone?: StringFilter<"professionals"> | string
    email?: StringFilter<"professionals"> | string
    gender?: StringFilter<"professionals"> | string
    date_of_birth?: DateTimeFilter<"professionals"> | Date | string
    active?: BoolFilter<"professionals"> | boolean
    admin?: BoolFilter<"professionals"> | boolean
    avatar_url?: StringNullableFilter<"professionals"> | string | null
    password?: StringFilter<"professionals"> | string
    user?: StringFilter<"professionals"> | string
    hour_value?: FloatNullableFilter<"professionals"> | number | null
    created_at?: DateTimeNullableFilter<"professionals"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"professionals"> | Date | string | null
  }

  export type studentsUpsertWithWhereUniqueWithoutAdressesInput = {
    where: studentsWhereUniqueInput
    update: XOR<studentsUpdateWithoutAdressesInput, studentsUncheckedUpdateWithoutAdressesInput>
    create: XOR<studentsCreateWithoutAdressesInput, studentsUncheckedCreateWithoutAdressesInput>
  }

  export type studentsUpdateWithWhereUniqueWithoutAdressesInput = {
    where: studentsWhereUniqueInput
    data: XOR<studentsUpdateWithoutAdressesInput, studentsUncheckedUpdateWithoutAdressesInput>
  }

  export type studentsUpdateManyWithWhereWithoutAdressesInput = {
    where: studentsScalarWhereInput
    data: XOR<studentsUpdateManyMutationInput, studentsUncheckedUpdateManyWithoutAdressesInput>
  }

  export type studentsScalarWhereInput = {
    AND?: studentsScalarWhereInput | studentsScalarWhereInput[]
    OR?: studentsScalarWhereInput[]
    NOT?: studentsScalarWhereInput | studentsScalarWhereInput[]
    id?: IntFilter<"students"> | number
    adresses_id?: IntFilter<"students"> | number
    email?: StringFilter<"students"> | string
    name?: StringNullableFilter<"students"> | string | null
    first_name?: StringFilter<"students"> | string
    last_name?: StringFilter<"students"> | string
    cpf?: StringFilter<"students"> | string
    phone?: StringFilter<"students"> | string
    gender?: StringFilter<"students"> | string
    date_of_birth?: DateTimeFilter<"students"> | Date | string
    password?: StringFilter<"students"> | string
    user?: StringFilter<"students"> | string
    created_at?: DateTimeNullableFilter<"students"> | Date | string | null
    created_by?: IntNullableFilter<"students"> | number | null
    avatar_url?: StringNullableFilter<"students"> | string | null
    updated_at?: DateTimeNullableFilter<"students"> | Date | string | null
    updated_by?: IntNullableFilter<"students"> | number | null
    active?: BoolFilter<"students"> | boolean
  }

  export type coursesCreateWithoutBooksInput = {
    name: string
    price: number
    created_at?: Date | string
    registrations?: registrationsCreateNestedManyWithoutCoursesInput
  }

  export type coursesUncheckedCreateWithoutBooksInput = {
    id?: number
    name: string
    price: number
    created_at?: Date | string
    registrations?: registrationsUncheckedCreateNestedManyWithoutCoursesInput
  }

  export type coursesCreateOrConnectWithoutBooksInput = {
    where: coursesWhereUniqueInput
    create: XOR<coursesCreateWithoutBooksInput, coursesUncheckedCreateWithoutBooksInput>
  }

  export type classroomsCreateWithoutBooksInput = {
    date: string
    hour: string
    created_at?: Date | string
    classes?: classesCreateNestedManyWithoutClassroomsInput
    students_has_classrooms?: students_has_classroomsCreateNestedManyWithoutClassroomsInput
  }

  export type classroomsUncheckedCreateWithoutBooksInput = {
    id?: number
    date: string
    hour: string
    created_at?: Date | string
    classes?: classesUncheckedCreateNestedManyWithoutClassroomsInput
    students_has_classrooms?: students_has_classroomsUncheckedCreateNestedManyWithoutClassroomsInput
  }

  export type classroomsCreateOrConnectWithoutBooksInput = {
    where: classroomsWhereUniqueInput
    create: XOR<classroomsCreateWithoutBooksInput, classroomsUncheckedCreateWithoutBooksInput>
  }

  export type classroomsCreateManyBooksInputEnvelope = {
    data: classroomsCreateManyBooksInput | classroomsCreateManyBooksInput[]
    skipDuplicates?: boolean
  }

  export type lessonsCreateWithoutBooksInput = {
    name?: string | null
    url?: string | null
    position?: number | null
    tasks?: tasksCreateNestedManyWithoutLessonsInput
  }

  export type lessonsUncheckedCreateWithoutBooksInput = {
    id?: number
    name?: string | null
    url?: string | null
    position?: number | null
    tasks?: tasksUncheckedCreateNestedManyWithoutLessonsInput
  }

  export type lessonsCreateOrConnectWithoutBooksInput = {
    where: lessonsWhereUniqueInput
    create: XOR<lessonsCreateWithoutBooksInput, lessonsUncheckedCreateWithoutBooksInput>
  }

  export type lessonsCreateManyBooksInputEnvelope = {
    data: lessonsCreateManyBooksInput | lessonsCreateManyBooksInput[]
    skipDuplicates?: boolean
  }

  export type coursesUpsertWithoutBooksInput = {
    update: XOR<coursesUpdateWithoutBooksInput, coursesUncheckedUpdateWithoutBooksInput>
    create: XOR<coursesCreateWithoutBooksInput, coursesUncheckedCreateWithoutBooksInput>
    where?: coursesWhereInput
  }

  export type coursesUpdateToOneWithWhereWithoutBooksInput = {
    where?: coursesWhereInput
    data: XOR<coursesUpdateWithoutBooksInput, coursesUncheckedUpdateWithoutBooksInput>
  }

  export type coursesUpdateWithoutBooksInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    registrations?: registrationsUpdateManyWithoutCoursesNestedInput
  }

  export type coursesUncheckedUpdateWithoutBooksInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    registrations?: registrationsUncheckedUpdateManyWithoutCoursesNestedInput
  }

  export type classroomsUpsertWithWhereUniqueWithoutBooksInput = {
    where: classroomsWhereUniqueInput
    update: XOR<classroomsUpdateWithoutBooksInput, classroomsUncheckedUpdateWithoutBooksInput>
    create: XOR<classroomsCreateWithoutBooksInput, classroomsUncheckedCreateWithoutBooksInput>
  }

  export type classroomsUpdateWithWhereUniqueWithoutBooksInput = {
    where: classroomsWhereUniqueInput
    data: XOR<classroomsUpdateWithoutBooksInput, classroomsUncheckedUpdateWithoutBooksInput>
  }

  export type classroomsUpdateManyWithWhereWithoutBooksInput = {
    where: classroomsScalarWhereInput
    data: XOR<classroomsUpdateManyMutationInput, classroomsUncheckedUpdateManyWithoutBooksInput>
  }

  export type classroomsScalarWhereInput = {
    AND?: classroomsScalarWhereInput | classroomsScalarWhereInput[]
    OR?: classroomsScalarWhereInput[]
    NOT?: classroomsScalarWhereInput | classroomsScalarWhereInput[]
    id?: IntFilter<"classrooms"> | number
    date?: StringFilter<"classrooms"> | string
    hour?: StringFilter<"classrooms"> | string
    books_id?: IntFilter<"classrooms"> | number
    created_at?: DateTimeFilter<"classrooms"> | Date | string
  }

  export type lessonsUpsertWithWhereUniqueWithoutBooksInput = {
    where: lessonsWhereUniqueInput
    update: XOR<lessonsUpdateWithoutBooksInput, lessonsUncheckedUpdateWithoutBooksInput>
    create: XOR<lessonsCreateWithoutBooksInput, lessonsUncheckedCreateWithoutBooksInput>
  }

  export type lessonsUpdateWithWhereUniqueWithoutBooksInput = {
    where: lessonsWhereUniqueInput
    data: XOR<lessonsUpdateWithoutBooksInput, lessonsUncheckedUpdateWithoutBooksInput>
  }

  export type lessonsUpdateManyWithWhereWithoutBooksInput = {
    where: lessonsScalarWhereInput
    data: XOR<lessonsUpdateManyMutationInput, lessonsUncheckedUpdateManyWithoutBooksInput>
  }

  export type lessonsScalarWhereInput = {
    AND?: lessonsScalarWhereInput | lessonsScalarWhereInput[]
    OR?: lessonsScalarWhereInput[]
    NOT?: lessonsScalarWhereInput | lessonsScalarWhereInput[]
    id?: IntFilter<"lessons"> | number
    books_id?: IntFilter<"lessons"> | number
    name?: StringNullableFilter<"lessons"> | string | null
    url?: StringNullableFilter<"lessons"> | string | null
    position?: IntNullableFilter<"lessons"> | number | null
  }

  export type classroomsCreateWithoutClassesInput = {
    date: string
    hour: string
    created_at?: Date | string
    books: booksCreateNestedOneWithoutClassroomsInput
    students_has_classrooms?: students_has_classroomsCreateNestedManyWithoutClassroomsInput
  }

  export type classroomsUncheckedCreateWithoutClassesInput = {
    id?: number
    date: string
    hour: string
    books_id: number
    created_at?: Date | string
    students_has_classrooms?: students_has_classroomsUncheckedCreateNestedManyWithoutClassroomsInput
  }

  export type classroomsCreateOrConnectWithoutClassesInput = {
    where: classroomsWhereUniqueInput
    create: XOR<classroomsCreateWithoutClassesInput, classroomsUncheckedCreateWithoutClassesInput>
  }

  export type presence_listCreateWithoutClassesInput = {
    date?: Date | string | null
    is_present?: boolean | null
    time_arrived?: Date | string | null
  }

  export type presence_listUncheckedCreateWithoutClassesInput = {
    id?: number
    date?: Date | string | null
    is_present?: boolean | null
    time_arrived?: Date | string | null
  }

  export type presence_listCreateOrConnectWithoutClassesInput = {
    where: presence_listWhereUniqueInput
    create: XOR<presence_listCreateWithoutClassesInput, presence_listUncheckedCreateWithoutClassesInput>
  }

  export type professionalsCreateWithoutClassesInput = {
    cpf: string
    name?: string | null
    first_name: string
    last_name: string
    phone: string
    email: string
    gender: string
    date_of_birth: Date | string
    active?: boolean
    admin?: boolean
    avatar_url?: string | null
    password: string
    user: string
    hour_value?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    adresses: adressesCreateNestedOneWithoutProfessionalsInput
    role: roleCreateNestedOneWithoutProfessionalsInput
  }

  export type professionalsUncheckedCreateWithoutClassesInput = {
    id?: number
    role_id: number
    adresses_id: number
    cpf: string
    name?: string | null
    first_name: string
    last_name: string
    phone: string
    email: string
    gender: string
    date_of_birth: Date | string
    active?: boolean
    admin?: boolean
    avatar_url?: string | null
    password: string
    user: string
    hour_value?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type professionalsCreateOrConnectWithoutClassesInput = {
    where: professionalsWhereUniqueInput
    create: XOR<professionalsCreateWithoutClassesInput, professionalsUncheckedCreateWithoutClassesInput>
  }

  export type classroomsUpsertWithoutClassesInput = {
    update: XOR<classroomsUpdateWithoutClassesInput, classroomsUncheckedUpdateWithoutClassesInput>
    create: XOR<classroomsCreateWithoutClassesInput, classroomsUncheckedCreateWithoutClassesInput>
    where?: classroomsWhereInput
  }

  export type classroomsUpdateToOneWithWhereWithoutClassesInput = {
    where?: classroomsWhereInput
    data: XOR<classroomsUpdateWithoutClassesInput, classroomsUncheckedUpdateWithoutClassesInput>
  }

  export type classroomsUpdateWithoutClassesInput = {
    date?: StringFieldUpdateOperationsInput | string
    hour?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    books?: booksUpdateOneRequiredWithoutClassroomsNestedInput
    students_has_classrooms?: students_has_classroomsUpdateManyWithoutClassroomsNestedInput
  }

  export type classroomsUncheckedUpdateWithoutClassesInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: StringFieldUpdateOperationsInput | string
    hour?: StringFieldUpdateOperationsInput | string
    books_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    students_has_classrooms?: students_has_classroomsUncheckedUpdateManyWithoutClassroomsNestedInput
  }

  export type presence_listUpsertWithoutClassesInput = {
    update: XOR<presence_listUpdateWithoutClassesInput, presence_listUncheckedUpdateWithoutClassesInput>
    create: XOR<presence_listCreateWithoutClassesInput, presence_listUncheckedCreateWithoutClassesInput>
    where?: presence_listWhereInput
  }

  export type presence_listUpdateToOneWithWhereWithoutClassesInput = {
    where?: presence_listWhereInput
    data: XOR<presence_listUpdateWithoutClassesInput, presence_listUncheckedUpdateWithoutClassesInput>
  }

  export type presence_listUpdateWithoutClassesInput = {
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_present?: NullableBoolFieldUpdateOperationsInput | boolean | null
    time_arrived?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type presence_listUncheckedUpdateWithoutClassesInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is_present?: NullableBoolFieldUpdateOperationsInput | boolean | null
    time_arrived?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type professionalsUpsertWithoutClassesInput = {
    update: XOR<professionalsUpdateWithoutClassesInput, professionalsUncheckedUpdateWithoutClassesInput>
    create: XOR<professionalsCreateWithoutClassesInput, professionalsUncheckedCreateWithoutClassesInput>
    where?: professionalsWhereInput
  }

  export type professionalsUpdateToOneWithWhereWithoutClassesInput = {
    where?: professionalsWhereInput
    data: XOR<professionalsUpdateWithoutClassesInput, professionalsUncheckedUpdateWithoutClassesInput>
  }

  export type professionalsUpdateWithoutClassesInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
    admin?: BoolFieldUpdateOperationsInput | boolean
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    user?: StringFieldUpdateOperationsInput | string
    hour_value?: NullableFloatFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    adresses?: adressesUpdateOneRequiredWithoutProfessionalsNestedInput
    role?: roleUpdateOneRequiredWithoutProfessionalsNestedInput
  }

  export type professionalsUncheckedUpdateWithoutClassesInput = {
    id?: IntFieldUpdateOperationsInput | number
    role_id?: IntFieldUpdateOperationsInput | number
    adresses_id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
    admin?: BoolFieldUpdateOperationsInput | boolean
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    user?: StringFieldUpdateOperationsInput | string
    hour_value?: NullableFloatFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type classesCreateWithoutClassroomsInput = {
    theme: string
    start_date: Date | string
    end_date: Date | string
    presence_list: presence_listCreateNestedOneWithoutClassesInput
    professionals: professionalsCreateNestedOneWithoutClassesInput
  }

  export type classesUncheckedCreateWithoutClassroomsInput = {
    id?: number
    theme: string
    start_date: Date | string
    end_date: Date | string
    professionals_id: number
    presence_list_id: number
  }

  export type classesCreateOrConnectWithoutClassroomsInput = {
    where: classesWhereUniqueInput
    create: XOR<classesCreateWithoutClassroomsInput, classesUncheckedCreateWithoutClassroomsInput>
  }

  export type classesCreateManyClassroomsInputEnvelope = {
    data: classesCreateManyClassroomsInput | classesCreateManyClassroomsInput[]
    skipDuplicates?: boolean
  }

  export type booksCreateWithoutClassroomsInput = {
    name: string
    position: number
    courses: coursesCreateNestedOneWithoutBooksInput
    lessons?: lessonsCreateNestedManyWithoutBooksInput
  }

  export type booksUncheckedCreateWithoutClassroomsInput = {
    id?: number
    courses_id: number
    name: string
    position: number
    lessons?: lessonsUncheckedCreateNestedManyWithoutBooksInput
  }

  export type booksCreateOrConnectWithoutClassroomsInput = {
    where: booksWhereUniqueInput
    create: XOR<booksCreateWithoutClassroomsInput, booksUncheckedCreateWithoutClassroomsInput>
  }

  export type students_has_classroomsCreateWithoutClassroomsInput = {
    registrations: registrationsCreateNestedOneWithoutStudents_has_classroomsInput
  }

  export type students_has_classroomsUncheckedCreateWithoutClassroomsInput = {
    id?: number
    registrations_id: number
  }

  export type students_has_classroomsCreateOrConnectWithoutClassroomsInput = {
    where: students_has_classroomsWhereUniqueInput
    create: XOR<students_has_classroomsCreateWithoutClassroomsInput, students_has_classroomsUncheckedCreateWithoutClassroomsInput>
  }

  export type students_has_classroomsCreateManyClassroomsInputEnvelope = {
    data: students_has_classroomsCreateManyClassroomsInput | students_has_classroomsCreateManyClassroomsInput[]
    skipDuplicates?: boolean
  }

  export type classesUpsertWithWhereUniqueWithoutClassroomsInput = {
    where: classesWhereUniqueInput
    update: XOR<classesUpdateWithoutClassroomsInput, classesUncheckedUpdateWithoutClassroomsInput>
    create: XOR<classesCreateWithoutClassroomsInput, classesUncheckedCreateWithoutClassroomsInput>
  }

  export type classesUpdateWithWhereUniqueWithoutClassroomsInput = {
    where: classesWhereUniqueInput
    data: XOR<classesUpdateWithoutClassroomsInput, classesUncheckedUpdateWithoutClassroomsInput>
  }

  export type classesUpdateManyWithWhereWithoutClassroomsInput = {
    where: classesScalarWhereInput
    data: XOR<classesUpdateManyMutationInput, classesUncheckedUpdateManyWithoutClassroomsInput>
  }

  export type classesScalarWhereInput = {
    AND?: classesScalarWhereInput | classesScalarWhereInput[]
    OR?: classesScalarWhereInput[]
    NOT?: classesScalarWhereInput | classesScalarWhereInput[]
    id?: IntFilter<"classes"> | number
    theme?: StringFilter<"classes"> | string
    start_date?: DateTimeFilter<"classes"> | Date | string
    end_date?: DateTimeFilter<"classes"> | Date | string
    professionals_id?: IntFilter<"classes"> | number
    classrooms_id?: IntFilter<"classes"> | number
    presence_list_id?: IntFilter<"classes"> | number
  }

  export type booksUpsertWithoutClassroomsInput = {
    update: XOR<booksUpdateWithoutClassroomsInput, booksUncheckedUpdateWithoutClassroomsInput>
    create: XOR<booksCreateWithoutClassroomsInput, booksUncheckedCreateWithoutClassroomsInput>
    where?: booksWhereInput
  }

  export type booksUpdateToOneWithWhereWithoutClassroomsInput = {
    where?: booksWhereInput
    data: XOR<booksUpdateWithoutClassroomsInput, booksUncheckedUpdateWithoutClassroomsInput>
  }

  export type booksUpdateWithoutClassroomsInput = {
    name?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    courses?: coursesUpdateOneRequiredWithoutBooksNestedInput
    lessons?: lessonsUpdateManyWithoutBooksNestedInput
  }

  export type booksUncheckedUpdateWithoutClassroomsInput = {
    id?: IntFieldUpdateOperationsInput | number
    courses_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    lessons?: lessonsUncheckedUpdateManyWithoutBooksNestedInput
  }

  export type students_has_classroomsUpsertWithWhereUniqueWithoutClassroomsInput = {
    where: students_has_classroomsWhereUniqueInput
    update: XOR<students_has_classroomsUpdateWithoutClassroomsInput, students_has_classroomsUncheckedUpdateWithoutClassroomsInput>
    create: XOR<students_has_classroomsCreateWithoutClassroomsInput, students_has_classroomsUncheckedCreateWithoutClassroomsInput>
  }

  export type students_has_classroomsUpdateWithWhereUniqueWithoutClassroomsInput = {
    where: students_has_classroomsWhereUniqueInput
    data: XOR<students_has_classroomsUpdateWithoutClassroomsInput, students_has_classroomsUncheckedUpdateWithoutClassroomsInput>
  }

  export type students_has_classroomsUpdateManyWithWhereWithoutClassroomsInput = {
    where: students_has_classroomsScalarWhereInput
    data: XOR<students_has_classroomsUpdateManyMutationInput, students_has_classroomsUncheckedUpdateManyWithoutClassroomsInput>
  }

  export type students_has_classroomsScalarWhereInput = {
    AND?: students_has_classroomsScalarWhereInput | students_has_classroomsScalarWhereInput[]
    OR?: students_has_classroomsScalarWhereInput[]
    NOT?: students_has_classroomsScalarWhereInput | students_has_classroomsScalarWhereInput[]
    id?: IntFilter<"students_has_classrooms"> | number
    registrations_id?: IntFilter<"students_has_classrooms"> | number
    classrooms_id?: IntFilter<"students_has_classrooms"> | number
  }

  export type booksCreateWithoutCoursesInput = {
    name: string
    position: number
    classrooms?: classroomsCreateNestedManyWithoutBooksInput
    lessons?: lessonsCreateNestedManyWithoutBooksInput
  }

  export type booksUncheckedCreateWithoutCoursesInput = {
    id?: number
    name: string
    position: number
    classrooms?: classroomsUncheckedCreateNestedManyWithoutBooksInput
    lessons?: lessonsUncheckedCreateNestedManyWithoutBooksInput
  }

  export type booksCreateOrConnectWithoutCoursesInput = {
    where: booksWhereUniqueInput
    create: XOR<booksCreateWithoutCoursesInput, booksUncheckedCreateWithoutCoursesInput>
  }

  export type booksCreateManyCoursesInputEnvelope = {
    data: booksCreateManyCoursesInput | booksCreateManyCoursesInput[]
    skipDuplicates?: boolean
  }

  export type registrationsCreateWithoutCoursesInput = {
    start_date?: Date | string
    end_date: Date | string
    monthly_fee_amount?: number | null
    created_by?: number | null
    created_at?: Date | string | null
    locked?: boolean | null
    completed?: boolean | null
    monthly_fee?: monthly_feeCreateNestedManyWithoutRegistrationsInput
    students: studentsCreateNestedOneWithoutRegistrationsInput
    students_has_classrooms?: students_has_classroomsCreateNestedOneWithoutRegistrationsInput
    tasks?: tasksCreateNestedManyWithoutRegistrationsInput
  }

  export type registrationsUncheckedCreateWithoutCoursesInput = {
    id?: number
    students_id: number
    start_date?: Date | string
    end_date: Date | string
    monthly_fee_amount?: number | null
    created_by?: number | null
    created_at?: Date | string | null
    locked?: boolean | null
    completed?: boolean | null
    monthly_fee?: monthly_feeUncheckedCreateNestedManyWithoutRegistrationsInput
    students_has_classrooms?: students_has_classroomsUncheckedCreateNestedOneWithoutRegistrationsInput
    tasks?: tasksUncheckedCreateNestedManyWithoutRegistrationsInput
  }

  export type registrationsCreateOrConnectWithoutCoursesInput = {
    where: registrationsWhereUniqueInput
    create: XOR<registrationsCreateWithoutCoursesInput, registrationsUncheckedCreateWithoutCoursesInput>
  }

  export type registrationsCreateManyCoursesInputEnvelope = {
    data: registrationsCreateManyCoursesInput | registrationsCreateManyCoursesInput[]
    skipDuplicates?: boolean
  }

  export type booksUpsertWithWhereUniqueWithoutCoursesInput = {
    where: booksWhereUniqueInput
    update: XOR<booksUpdateWithoutCoursesInput, booksUncheckedUpdateWithoutCoursesInput>
    create: XOR<booksCreateWithoutCoursesInput, booksUncheckedCreateWithoutCoursesInput>
  }

  export type booksUpdateWithWhereUniqueWithoutCoursesInput = {
    where: booksWhereUniqueInput
    data: XOR<booksUpdateWithoutCoursesInput, booksUncheckedUpdateWithoutCoursesInput>
  }

  export type booksUpdateManyWithWhereWithoutCoursesInput = {
    where: booksScalarWhereInput
    data: XOR<booksUpdateManyMutationInput, booksUncheckedUpdateManyWithoutCoursesInput>
  }

  export type booksScalarWhereInput = {
    AND?: booksScalarWhereInput | booksScalarWhereInput[]
    OR?: booksScalarWhereInput[]
    NOT?: booksScalarWhereInput | booksScalarWhereInput[]
    id?: IntFilter<"books"> | number
    courses_id?: IntFilter<"books"> | number
    name?: StringFilter<"books"> | string
    position?: IntFilter<"books"> | number
  }

  export type registrationsUpsertWithWhereUniqueWithoutCoursesInput = {
    where: registrationsWhereUniqueInput
    update: XOR<registrationsUpdateWithoutCoursesInput, registrationsUncheckedUpdateWithoutCoursesInput>
    create: XOR<registrationsCreateWithoutCoursesInput, registrationsUncheckedCreateWithoutCoursesInput>
  }

  export type registrationsUpdateWithWhereUniqueWithoutCoursesInput = {
    where: registrationsWhereUniqueInput
    data: XOR<registrationsUpdateWithoutCoursesInput, registrationsUncheckedUpdateWithoutCoursesInput>
  }

  export type registrationsUpdateManyWithWhereWithoutCoursesInput = {
    where: registrationsScalarWhereInput
    data: XOR<registrationsUpdateManyMutationInput, registrationsUncheckedUpdateManyWithoutCoursesInput>
  }

  export type registrationsScalarWhereInput = {
    AND?: registrationsScalarWhereInput | registrationsScalarWhereInput[]
    OR?: registrationsScalarWhereInput[]
    NOT?: registrationsScalarWhereInput | registrationsScalarWhereInput[]
    id?: IntFilter<"registrations"> | number
    students_id?: IntFilter<"registrations"> | number
    courses_id?: IntFilter<"registrations"> | number
    start_date?: DateTimeFilter<"registrations"> | Date | string
    end_date?: DateTimeFilter<"registrations"> | Date | string
    monthly_fee_amount?: FloatNullableFilter<"registrations"> | number | null
    created_by?: IntNullableFilter<"registrations"> | number | null
    created_at?: DateTimeNullableFilter<"registrations"> | Date | string | null
    locked?: BoolNullableFilter<"registrations"> | boolean | null
    completed?: BoolNullableFilter<"registrations"> | boolean | null
  }

  export type booksCreateWithoutLessonsInput = {
    name: string
    position: number
    courses: coursesCreateNestedOneWithoutBooksInput
    classrooms?: classroomsCreateNestedManyWithoutBooksInput
  }

  export type booksUncheckedCreateWithoutLessonsInput = {
    id?: number
    courses_id: number
    name: string
    position: number
    classrooms?: classroomsUncheckedCreateNestedManyWithoutBooksInput
  }

  export type booksCreateOrConnectWithoutLessonsInput = {
    where: booksWhereUniqueInput
    create: XOR<booksCreateWithoutLessonsInput, booksUncheckedCreateWithoutLessonsInput>
  }

  export type tasksCreateWithoutLessonsInput = {
    scores_id: number
    date?: Date | string
    response?: string | null
    score_obtained?: number | null
    question?: string | null
    total_score?: number | null
    registrations: registrationsCreateNestedOneWithoutTasksInput
  }

  export type tasksUncheckedCreateWithoutLessonsInput = {
    scores_id: number
    registrations_id: number
    date?: Date | string
    response?: string | null
    score_obtained?: number | null
    question?: string | null
    total_score?: number | null
  }

  export type tasksCreateOrConnectWithoutLessonsInput = {
    where: tasksWhereUniqueInput
    create: XOR<tasksCreateWithoutLessonsInput, tasksUncheckedCreateWithoutLessonsInput>
  }

  export type tasksCreateManyLessonsInputEnvelope = {
    data: tasksCreateManyLessonsInput | tasksCreateManyLessonsInput[]
    skipDuplicates?: boolean
  }

  export type booksUpsertWithoutLessonsInput = {
    update: XOR<booksUpdateWithoutLessonsInput, booksUncheckedUpdateWithoutLessonsInput>
    create: XOR<booksCreateWithoutLessonsInput, booksUncheckedCreateWithoutLessonsInput>
    where?: booksWhereInput
  }

  export type booksUpdateToOneWithWhereWithoutLessonsInput = {
    where?: booksWhereInput
    data: XOR<booksUpdateWithoutLessonsInput, booksUncheckedUpdateWithoutLessonsInput>
  }

  export type booksUpdateWithoutLessonsInput = {
    name?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    courses?: coursesUpdateOneRequiredWithoutBooksNestedInput
    classrooms?: classroomsUpdateManyWithoutBooksNestedInput
  }

  export type booksUncheckedUpdateWithoutLessonsInput = {
    id?: IntFieldUpdateOperationsInput | number
    courses_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    classrooms?: classroomsUncheckedUpdateManyWithoutBooksNestedInput
  }

  export type tasksUpsertWithWhereUniqueWithoutLessonsInput = {
    where: tasksWhereUniqueInput
    update: XOR<tasksUpdateWithoutLessonsInput, tasksUncheckedUpdateWithoutLessonsInput>
    create: XOR<tasksCreateWithoutLessonsInput, tasksUncheckedCreateWithoutLessonsInput>
  }

  export type tasksUpdateWithWhereUniqueWithoutLessonsInput = {
    where: tasksWhereUniqueInput
    data: XOR<tasksUpdateWithoutLessonsInput, tasksUncheckedUpdateWithoutLessonsInput>
  }

  export type tasksUpdateManyWithWhereWithoutLessonsInput = {
    where: tasksScalarWhereInput
    data: XOR<tasksUpdateManyMutationInput, tasksUncheckedUpdateManyWithoutLessonsInput>
  }

  export type tasksScalarWhereInput = {
    AND?: tasksScalarWhereInput | tasksScalarWhereInput[]
    OR?: tasksScalarWhereInput[]
    NOT?: tasksScalarWhereInput | tasksScalarWhereInput[]
    scores_id?: IntFilter<"tasks"> | number
    registrations_id?: IntFilter<"tasks"> | number
    lessons_id?: IntFilter<"tasks"> | number
    date?: DateTimeFilter<"tasks"> | Date | string
    response?: StringNullableFilter<"tasks"> | string | null
    score_obtained?: FloatNullableFilter<"tasks"> | number | null
    question?: StringNullableFilter<"tasks"> | string | null
    total_score?: FloatNullableFilter<"tasks"> | number | null
  }

  export type registrationsCreateWithoutMonthly_feeInput = {
    start_date?: Date | string
    end_date: Date | string
    monthly_fee_amount?: number | null
    created_by?: number | null
    created_at?: Date | string | null
    locked?: boolean | null
    completed?: boolean | null
    courses: coursesCreateNestedOneWithoutRegistrationsInput
    students: studentsCreateNestedOneWithoutRegistrationsInput
    students_has_classrooms?: students_has_classroomsCreateNestedOneWithoutRegistrationsInput
    tasks?: tasksCreateNestedManyWithoutRegistrationsInput
  }

  export type registrationsUncheckedCreateWithoutMonthly_feeInput = {
    id?: number
    students_id: number
    courses_id: number
    start_date?: Date | string
    end_date: Date | string
    monthly_fee_amount?: number | null
    created_by?: number | null
    created_at?: Date | string | null
    locked?: boolean | null
    completed?: boolean | null
    students_has_classrooms?: students_has_classroomsUncheckedCreateNestedOneWithoutRegistrationsInput
    tasks?: tasksUncheckedCreateNestedManyWithoutRegistrationsInput
  }

  export type registrationsCreateOrConnectWithoutMonthly_feeInput = {
    where: registrationsWhereUniqueInput
    create: XOR<registrationsCreateWithoutMonthly_feeInput, registrationsUncheckedCreateWithoutMonthly_feeInput>
  }

  export type registrationsUpsertWithoutMonthly_feeInput = {
    update: XOR<registrationsUpdateWithoutMonthly_feeInput, registrationsUncheckedUpdateWithoutMonthly_feeInput>
    create: XOR<registrationsCreateWithoutMonthly_feeInput, registrationsUncheckedCreateWithoutMonthly_feeInput>
    where?: registrationsWhereInput
  }

  export type registrationsUpdateToOneWithWhereWithoutMonthly_feeInput = {
    where?: registrationsWhereInput
    data: XOR<registrationsUpdateWithoutMonthly_feeInput, registrationsUncheckedUpdateWithoutMonthly_feeInput>
  }

  export type registrationsUpdateWithoutMonthly_feeInput = {
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthly_fee_amount?: NullableFloatFieldUpdateOperationsInput | number | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    locked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    completed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    courses?: coursesUpdateOneRequiredWithoutRegistrationsNestedInput
    students?: studentsUpdateOneRequiredWithoutRegistrationsNestedInput
    students_has_classrooms?: students_has_classroomsUpdateOneWithoutRegistrationsNestedInput
    tasks?: tasksUpdateManyWithoutRegistrationsNestedInput
  }

  export type registrationsUncheckedUpdateWithoutMonthly_feeInput = {
    id?: IntFieldUpdateOperationsInput | number
    students_id?: IntFieldUpdateOperationsInput | number
    courses_id?: IntFieldUpdateOperationsInput | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthly_fee_amount?: NullableFloatFieldUpdateOperationsInput | number | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    locked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    completed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    students_has_classrooms?: students_has_classroomsUncheckedUpdateOneWithoutRegistrationsNestedInput
    tasks?: tasksUncheckedUpdateManyWithoutRegistrationsNestedInput
  }

  export type classesCreateWithoutPresence_listInput = {
    theme: string
    start_date: Date | string
    end_date: Date | string
    classrooms: classroomsCreateNestedOneWithoutClassesInput
    professionals: professionalsCreateNestedOneWithoutClassesInput
  }

  export type classesUncheckedCreateWithoutPresence_listInput = {
    id?: number
    theme: string
    start_date: Date | string
    end_date: Date | string
    professionals_id: number
    classrooms_id: number
  }

  export type classesCreateOrConnectWithoutPresence_listInput = {
    where: classesWhereUniqueInput
    create: XOR<classesCreateWithoutPresence_listInput, classesUncheckedCreateWithoutPresence_listInput>
  }

  export type classesCreateManyPresence_listInputEnvelope = {
    data: classesCreateManyPresence_listInput | classesCreateManyPresence_listInput[]
    skipDuplicates?: boolean
  }

  export type classesUpsertWithWhereUniqueWithoutPresence_listInput = {
    where: classesWhereUniqueInput
    update: XOR<classesUpdateWithoutPresence_listInput, classesUncheckedUpdateWithoutPresence_listInput>
    create: XOR<classesCreateWithoutPresence_listInput, classesUncheckedCreateWithoutPresence_listInput>
  }

  export type classesUpdateWithWhereUniqueWithoutPresence_listInput = {
    where: classesWhereUniqueInput
    data: XOR<classesUpdateWithoutPresence_listInput, classesUncheckedUpdateWithoutPresence_listInput>
  }

  export type classesUpdateManyWithWhereWithoutPresence_listInput = {
    where: classesScalarWhereInput
    data: XOR<classesUpdateManyMutationInput, classesUncheckedUpdateManyWithoutPresence_listInput>
  }

  export type classesCreateWithoutProfessionalsInput = {
    theme: string
    start_date: Date | string
    end_date: Date | string
    classrooms: classroomsCreateNestedOneWithoutClassesInput
    presence_list: presence_listCreateNestedOneWithoutClassesInput
  }

  export type classesUncheckedCreateWithoutProfessionalsInput = {
    id?: number
    theme: string
    start_date: Date | string
    end_date: Date | string
    classrooms_id: number
    presence_list_id: number
  }

  export type classesCreateOrConnectWithoutProfessionalsInput = {
    where: classesWhereUniqueInput
    create: XOR<classesCreateWithoutProfessionalsInput, classesUncheckedCreateWithoutProfessionalsInput>
  }

  export type classesCreateManyProfessionalsInputEnvelope = {
    data: classesCreateManyProfessionalsInput | classesCreateManyProfessionalsInput[]
    skipDuplicates?: boolean
  }

  export type adressesCreateWithoutProfessionalsInput = {
    street?: string | null
    zip_code?: string | null
    district?: string | null
    complement?: string | null
    city?: string | null
    state?: string | null
    number?: string | null
    active?: boolean
    students?: studentsCreateNestedManyWithoutAdressesInput
  }

  export type adressesUncheckedCreateWithoutProfessionalsInput = {
    id?: number
    street?: string | null
    zip_code?: string | null
    district?: string | null
    complement?: string | null
    city?: string | null
    state?: string | null
    number?: string | null
    active?: boolean
    students?: studentsUncheckedCreateNestedManyWithoutAdressesInput
  }

  export type adressesCreateOrConnectWithoutProfessionalsInput = {
    where: adressesWhereUniqueInput
    create: XOR<adressesCreateWithoutProfessionalsInput, adressesUncheckedCreateWithoutProfessionalsInput>
  }

  export type roleCreateWithoutProfessionalsInput = {
    id: number
    name: string
  }

  export type roleUncheckedCreateWithoutProfessionalsInput = {
    id: number
    name: string
  }

  export type roleCreateOrConnectWithoutProfessionalsInput = {
    where: roleWhereUniqueInput
    create: XOR<roleCreateWithoutProfessionalsInput, roleUncheckedCreateWithoutProfessionalsInput>
  }

  export type classesUpsertWithWhereUniqueWithoutProfessionalsInput = {
    where: classesWhereUniqueInput
    update: XOR<classesUpdateWithoutProfessionalsInput, classesUncheckedUpdateWithoutProfessionalsInput>
    create: XOR<classesCreateWithoutProfessionalsInput, classesUncheckedCreateWithoutProfessionalsInput>
  }

  export type classesUpdateWithWhereUniqueWithoutProfessionalsInput = {
    where: classesWhereUniqueInput
    data: XOR<classesUpdateWithoutProfessionalsInput, classesUncheckedUpdateWithoutProfessionalsInput>
  }

  export type classesUpdateManyWithWhereWithoutProfessionalsInput = {
    where: classesScalarWhereInput
    data: XOR<classesUpdateManyMutationInput, classesUncheckedUpdateManyWithoutProfessionalsInput>
  }

  export type adressesUpsertWithoutProfessionalsInput = {
    update: XOR<adressesUpdateWithoutProfessionalsInput, adressesUncheckedUpdateWithoutProfessionalsInput>
    create: XOR<adressesCreateWithoutProfessionalsInput, adressesUncheckedCreateWithoutProfessionalsInput>
    where?: adressesWhereInput
  }

  export type adressesUpdateToOneWithWhereWithoutProfessionalsInput = {
    where?: adressesWhereInput
    data: XOR<adressesUpdateWithoutProfessionalsInput, adressesUncheckedUpdateWithoutProfessionalsInput>
  }

  export type adressesUpdateWithoutProfessionalsInput = {
    street?: NullableStringFieldUpdateOperationsInput | string | null
    zip_code?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    students?: studentsUpdateManyWithoutAdressesNestedInput
  }

  export type adressesUncheckedUpdateWithoutProfessionalsInput = {
    id?: IntFieldUpdateOperationsInput | number
    street?: NullableStringFieldUpdateOperationsInput | string | null
    zip_code?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    students?: studentsUncheckedUpdateManyWithoutAdressesNestedInput
  }

  export type roleUpsertWithoutProfessionalsInput = {
    update: XOR<roleUpdateWithoutProfessionalsInput, roleUncheckedUpdateWithoutProfessionalsInput>
    create: XOR<roleCreateWithoutProfessionalsInput, roleUncheckedCreateWithoutProfessionalsInput>
    where?: roleWhereInput
  }

  export type roleUpdateToOneWithWhereWithoutProfessionalsInput = {
    where?: roleWhereInput
    data: XOR<roleUpdateWithoutProfessionalsInput, roleUncheckedUpdateWithoutProfessionalsInput>
  }

  export type roleUpdateWithoutProfessionalsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type roleUncheckedUpdateWithoutProfessionalsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type studentsCreateWithoutRecords_of_studentsInput = {
    email: string
    name?: string | null
    first_name: string
    last_name: string
    cpf: string
    phone: string
    gender: string
    date_of_birth: Date | string
    password: string
    user: string
    created_at?: Date | string | null
    created_by?: number | null
    avatar_url?: string | null
    updated_at?: Date | string | null
    updated_by?: number | null
    active?: boolean
    registrations?: registrationsCreateNestedManyWithoutStudentsInput
    adresses: adressesCreateNestedOneWithoutStudentsInput
  }

  export type studentsUncheckedCreateWithoutRecords_of_studentsInput = {
    id?: number
    adresses_id: number
    email: string
    name?: string | null
    first_name: string
    last_name: string
    cpf: string
    phone: string
    gender: string
    date_of_birth: Date | string
    password: string
    user: string
    created_at?: Date | string | null
    created_by?: number | null
    avatar_url?: string | null
    updated_at?: Date | string | null
    updated_by?: number | null
    active?: boolean
    registrations?: registrationsUncheckedCreateNestedManyWithoutStudentsInput
  }

  export type studentsCreateOrConnectWithoutRecords_of_studentsInput = {
    where: studentsWhereUniqueInput
    create: XOR<studentsCreateWithoutRecords_of_studentsInput, studentsUncheckedCreateWithoutRecords_of_studentsInput>
  }

  export type studentsUpsertWithoutRecords_of_studentsInput = {
    update: XOR<studentsUpdateWithoutRecords_of_studentsInput, studentsUncheckedUpdateWithoutRecords_of_studentsInput>
    create: XOR<studentsCreateWithoutRecords_of_studentsInput, studentsUncheckedCreateWithoutRecords_of_studentsInput>
    where?: studentsWhereInput
  }

  export type studentsUpdateToOneWithWhereWithoutRecords_of_studentsInput = {
    where?: studentsWhereInput
    data: XOR<studentsUpdateWithoutRecords_of_studentsInput, studentsUncheckedUpdateWithoutRecords_of_studentsInput>
  }

  export type studentsUpdateWithoutRecords_of_studentsInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    user?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    active?: BoolFieldUpdateOperationsInput | boolean
    registrations?: registrationsUpdateManyWithoutStudentsNestedInput
    adresses?: adressesUpdateOneRequiredWithoutStudentsNestedInput
  }

  export type studentsUncheckedUpdateWithoutRecords_of_studentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    adresses_id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    user?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    active?: BoolFieldUpdateOperationsInput | boolean
    registrations?: registrationsUncheckedUpdateManyWithoutStudentsNestedInput
  }

  export type monthly_feeCreateWithoutRegistrationsInput = {
    due_date?: Date | string | null
    amount_to_be_paid?: number | null
    amount_paid?: number | null
    date_of_paid?: Date | string | null
    payment_method?: string | null
    paid?: boolean | null
  }

  export type monthly_feeUncheckedCreateWithoutRegistrationsInput = {
    id?: number
    due_date?: Date | string | null
    amount_to_be_paid?: number | null
    amount_paid?: number | null
    date_of_paid?: Date | string | null
    payment_method?: string | null
    paid?: boolean | null
  }

  export type monthly_feeCreateOrConnectWithoutRegistrationsInput = {
    where: monthly_feeWhereUniqueInput
    create: XOR<monthly_feeCreateWithoutRegistrationsInput, monthly_feeUncheckedCreateWithoutRegistrationsInput>
  }

  export type monthly_feeCreateManyRegistrationsInputEnvelope = {
    data: monthly_feeCreateManyRegistrationsInput | monthly_feeCreateManyRegistrationsInput[]
    skipDuplicates?: boolean
  }

  export type coursesCreateWithoutRegistrationsInput = {
    name: string
    price: number
    created_at?: Date | string
    books?: booksCreateNestedManyWithoutCoursesInput
  }

  export type coursesUncheckedCreateWithoutRegistrationsInput = {
    id?: number
    name: string
    price: number
    created_at?: Date | string
    books?: booksUncheckedCreateNestedManyWithoutCoursesInput
  }

  export type coursesCreateOrConnectWithoutRegistrationsInput = {
    where: coursesWhereUniqueInput
    create: XOR<coursesCreateWithoutRegistrationsInput, coursesUncheckedCreateWithoutRegistrationsInput>
  }

  export type studentsCreateWithoutRegistrationsInput = {
    email: string
    name?: string | null
    first_name: string
    last_name: string
    cpf: string
    phone: string
    gender: string
    date_of_birth: Date | string
    password: string
    user: string
    created_at?: Date | string | null
    created_by?: number | null
    avatar_url?: string | null
    updated_at?: Date | string | null
    updated_by?: number | null
    active?: boolean
    records_of_students?: records_of_studentsCreateNestedManyWithoutStudentsInput
    adresses: adressesCreateNestedOneWithoutStudentsInput
  }

  export type studentsUncheckedCreateWithoutRegistrationsInput = {
    id?: number
    adresses_id: number
    email: string
    name?: string | null
    first_name: string
    last_name: string
    cpf: string
    phone: string
    gender: string
    date_of_birth: Date | string
    password: string
    user: string
    created_at?: Date | string | null
    created_by?: number | null
    avatar_url?: string | null
    updated_at?: Date | string | null
    updated_by?: number | null
    active?: boolean
    records_of_students?: records_of_studentsUncheckedCreateNestedManyWithoutStudentsInput
  }

  export type studentsCreateOrConnectWithoutRegistrationsInput = {
    where: studentsWhereUniqueInput
    create: XOR<studentsCreateWithoutRegistrationsInput, studentsUncheckedCreateWithoutRegistrationsInput>
  }

  export type students_has_classroomsCreateWithoutRegistrationsInput = {
    classrooms: classroomsCreateNestedOneWithoutStudents_has_classroomsInput
  }

  export type students_has_classroomsUncheckedCreateWithoutRegistrationsInput = {
    id?: number
    classrooms_id: number
  }

  export type students_has_classroomsCreateOrConnectWithoutRegistrationsInput = {
    where: students_has_classroomsWhereUniqueInput
    create: XOR<students_has_classroomsCreateWithoutRegistrationsInput, students_has_classroomsUncheckedCreateWithoutRegistrationsInput>
  }

  export type tasksCreateWithoutRegistrationsInput = {
    scores_id: number
    date?: Date | string
    response?: string | null
    score_obtained?: number | null
    question?: string | null
    total_score?: number | null
    lessons: lessonsCreateNestedOneWithoutTasksInput
  }

  export type tasksUncheckedCreateWithoutRegistrationsInput = {
    scores_id: number
    lessons_id: number
    date?: Date | string
    response?: string | null
    score_obtained?: number | null
    question?: string | null
    total_score?: number | null
  }

  export type tasksCreateOrConnectWithoutRegistrationsInput = {
    where: tasksWhereUniqueInput
    create: XOR<tasksCreateWithoutRegistrationsInput, tasksUncheckedCreateWithoutRegistrationsInput>
  }

  export type tasksCreateManyRegistrationsInputEnvelope = {
    data: tasksCreateManyRegistrationsInput | tasksCreateManyRegistrationsInput[]
    skipDuplicates?: boolean
  }

  export type monthly_feeUpsertWithWhereUniqueWithoutRegistrationsInput = {
    where: monthly_feeWhereUniqueInput
    update: XOR<monthly_feeUpdateWithoutRegistrationsInput, monthly_feeUncheckedUpdateWithoutRegistrationsInput>
    create: XOR<monthly_feeCreateWithoutRegistrationsInput, monthly_feeUncheckedCreateWithoutRegistrationsInput>
  }

  export type monthly_feeUpdateWithWhereUniqueWithoutRegistrationsInput = {
    where: monthly_feeWhereUniqueInput
    data: XOR<monthly_feeUpdateWithoutRegistrationsInput, monthly_feeUncheckedUpdateWithoutRegistrationsInput>
  }

  export type monthly_feeUpdateManyWithWhereWithoutRegistrationsInput = {
    where: monthly_feeScalarWhereInput
    data: XOR<monthly_feeUpdateManyMutationInput, monthly_feeUncheckedUpdateManyWithoutRegistrationsInput>
  }

  export type monthly_feeScalarWhereInput = {
    AND?: monthly_feeScalarWhereInput | monthly_feeScalarWhereInput[]
    OR?: monthly_feeScalarWhereInput[]
    NOT?: monthly_feeScalarWhereInput | monthly_feeScalarWhereInput[]
    id?: IntFilter<"monthly_fee"> | number
    registrations_id?: IntFilter<"monthly_fee"> | number
    due_date?: DateTimeNullableFilter<"monthly_fee"> | Date | string | null
    amount_to_be_paid?: FloatNullableFilter<"monthly_fee"> | number | null
    amount_paid?: FloatNullableFilter<"monthly_fee"> | number | null
    date_of_paid?: DateTimeNullableFilter<"monthly_fee"> | Date | string | null
    payment_method?: StringNullableFilter<"monthly_fee"> | string | null
    paid?: BoolNullableFilter<"monthly_fee"> | boolean | null
  }

  export type coursesUpsertWithoutRegistrationsInput = {
    update: XOR<coursesUpdateWithoutRegistrationsInput, coursesUncheckedUpdateWithoutRegistrationsInput>
    create: XOR<coursesCreateWithoutRegistrationsInput, coursesUncheckedCreateWithoutRegistrationsInput>
    where?: coursesWhereInput
  }

  export type coursesUpdateToOneWithWhereWithoutRegistrationsInput = {
    where?: coursesWhereInput
    data: XOR<coursesUpdateWithoutRegistrationsInput, coursesUncheckedUpdateWithoutRegistrationsInput>
  }

  export type coursesUpdateWithoutRegistrationsInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    books?: booksUpdateManyWithoutCoursesNestedInput
  }

  export type coursesUncheckedUpdateWithoutRegistrationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    books?: booksUncheckedUpdateManyWithoutCoursesNestedInput
  }

  export type studentsUpsertWithoutRegistrationsInput = {
    update: XOR<studentsUpdateWithoutRegistrationsInput, studentsUncheckedUpdateWithoutRegistrationsInput>
    create: XOR<studentsCreateWithoutRegistrationsInput, studentsUncheckedCreateWithoutRegistrationsInput>
    where?: studentsWhereInput
  }

  export type studentsUpdateToOneWithWhereWithoutRegistrationsInput = {
    where?: studentsWhereInput
    data: XOR<studentsUpdateWithoutRegistrationsInput, studentsUncheckedUpdateWithoutRegistrationsInput>
  }

  export type studentsUpdateWithoutRegistrationsInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    user?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    active?: BoolFieldUpdateOperationsInput | boolean
    records_of_students?: records_of_studentsUpdateManyWithoutStudentsNestedInput
    adresses?: adressesUpdateOneRequiredWithoutStudentsNestedInput
  }

  export type studentsUncheckedUpdateWithoutRegistrationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    adresses_id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    user?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    active?: BoolFieldUpdateOperationsInput | boolean
    records_of_students?: records_of_studentsUncheckedUpdateManyWithoutStudentsNestedInput
  }

  export type students_has_classroomsUpsertWithoutRegistrationsInput = {
    update: XOR<students_has_classroomsUpdateWithoutRegistrationsInput, students_has_classroomsUncheckedUpdateWithoutRegistrationsInput>
    create: XOR<students_has_classroomsCreateWithoutRegistrationsInput, students_has_classroomsUncheckedCreateWithoutRegistrationsInput>
    where?: students_has_classroomsWhereInput
  }

  export type students_has_classroomsUpdateToOneWithWhereWithoutRegistrationsInput = {
    where?: students_has_classroomsWhereInput
    data: XOR<students_has_classroomsUpdateWithoutRegistrationsInput, students_has_classroomsUncheckedUpdateWithoutRegistrationsInput>
  }

  export type students_has_classroomsUpdateWithoutRegistrationsInput = {
    classrooms?: classroomsUpdateOneRequiredWithoutStudents_has_classroomsNestedInput
  }

  export type students_has_classroomsUncheckedUpdateWithoutRegistrationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    classrooms_id?: IntFieldUpdateOperationsInput | number
  }

  export type tasksUpsertWithWhereUniqueWithoutRegistrationsInput = {
    where: tasksWhereUniqueInput
    update: XOR<tasksUpdateWithoutRegistrationsInput, tasksUncheckedUpdateWithoutRegistrationsInput>
    create: XOR<tasksCreateWithoutRegistrationsInput, tasksUncheckedCreateWithoutRegistrationsInput>
  }

  export type tasksUpdateWithWhereUniqueWithoutRegistrationsInput = {
    where: tasksWhereUniqueInput
    data: XOR<tasksUpdateWithoutRegistrationsInput, tasksUncheckedUpdateWithoutRegistrationsInput>
  }

  export type tasksUpdateManyWithWhereWithoutRegistrationsInput = {
    where: tasksScalarWhereInput
    data: XOR<tasksUpdateManyMutationInput, tasksUncheckedUpdateManyWithoutRegistrationsInput>
  }

  export type professionalsCreateWithoutRoleInput = {
    cpf: string
    name?: string | null
    first_name: string
    last_name: string
    phone: string
    email: string
    gender: string
    date_of_birth: Date | string
    active?: boolean
    admin?: boolean
    avatar_url?: string | null
    password: string
    user: string
    hour_value?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    classes?: classesCreateNestedManyWithoutProfessionalsInput
    adresses: adressesCreateNestedOneWithoutProfessionalsInput
  }

  export type professionalsUncheckedCreateWithoutRoleInput = {
    id?: number
    adresses_id: number
    cpf: string
    name?: string | null
    first_name: string
    last_name: string
    phone: string
    email: string
    gender: string
    date_of_birth: Date | string
    active?: boolean
    admin?: boolean
    avatar_url?: string | null
    password: string
    user: string
    hour_value?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    classes?: classesUncheckedCreateNestedManyWithoutProfessionalsInput
  }

  export type professionalsCreateOrConnectWithoutRoleInput = {
    where: professionalsWhereUniqueInput
    create: XOR<professionalsCreateWithoutRoleInput, professionalsUncheckedCreateWithoutRoleInput>
  }

  export type professionalsCreateManyRoleInputEnvelope = {
    data: professionalsCreateManyRoleInput | professionalsCreateManyRoleInput[]
    skipDuplicates?: boolean
  }

  export type professionalsUpsertWithWhereUniqueWithoutRoleInput = {
    where: professionalsWhereUniqueInput
    update: XOR<professionalsUpdateWithoutRoleInput, professionalsUncheckedUpdateWithoutRoleInput>
    create: XOR<professionalsCreateWithoutRoleInput, professionalsUncheckedCreateWithoutRoleInput>
  }

  export type professionalsUpdateWithWhereUniqueWithoutRoleInput = {
    where: professionalsWhereUniqueInput
    data: XOR<professionalsUpdateWithoutRoleInput, professionalsUncheckedUpdateWithoutRoleInput>
  }

  export type professionalsUpdateManyWithWhereWithoutRoleInput = {
    where: professionalsScalarWhereInput
    data: XOR<professionalsUpdateManyMutationInput, professionalsUncheckedUpdateManyWithoutRoleInput>
  }

  export type records_of_studentsCreateWithoutStudentsInput = {
    description?: string | null
    title?: string | null
    date?: Date | string | null
  }

  export type records_of_studentsUncheckedCreateWithoutStudentsInput = {
    id?: number
    description?: string | null
    title?: string | null
    date?: Date | string | null
  }

  export type records_of_studentsCreateOrConnectWithoutStudentsInput = {
    where: records_of_studentsWhereUniqueInput
    create: XOR<records_of_studentsCreateWithoutStudentsInput, records_of_studentsUncheckedCreateWithoutStudentsInput>
  }

  export type records_of_studentsCreateManyStudentsInputEnvelope = {
    data: records_of_studentsCreateManyStudentsInput | records_of_studentsCreateManyStudentsInput[]
    skipDuplicates?: boolean
  }

  export type registrationsCreateWithoutStudentsInput = {
    start_date?: Date | string
    end_date: Date | string
    monthly_fee_amount?: number | null
    created_by?: number | null
    created_at?: Date | string | null
    locked?: boolean | null
    completed?: boolean | null
    monthly_fee?: monthly_feeCreateNestedManyWithoutRegistrationsInput
    courses: coursesCreateNestedOneWithoutRegistrationsInput
    students_has_classrooms?: students_has_classroomsCreateNestedOneWithoutRegistrationsInput
    tasks?: tasksCreateNestedManyWithoutRegistrationsInput
  }

  export type registrationsUncheckedCreateWithoutStudentsInput = {
    id?: number
    courses_id: number
    start_date?: Date | string
    end_date: Date | string
    monthly_fee_amount?: number | null
    created_by?: number | null
    created_at?: Date | string | null
    locked?: boolean | null
    completed?: boolean | null
    monthly_fee?: monthly_feeUncheckedCreateNestedManyWithoutRegistrationsInput
    students_has_classrooms?: students_has_classroomsUncheckedCreateNestedOneWithoutRegistrationsInput
    tasks?: tasksUncheckedCreateNestedManyWithoutRegistrationsInput
  }

  export type registrationsCreateOrConnectWithoutStudentsInput = {
    where: registrationsWhereUniqueInput
    create: XOR<registrationsCreateWithoutStudentsInput, registrationsUncheckedCreateWithoutStudentsInput>
  }

  export type registrationsCreateManyStudentsInputEnvelope = {
    data: registrationsCreateManyStudentsInput | registrationsCreateManyStudentsInput[]
    skipDuplicates?: boolean
  }

  export type adressesCreateWithoutStudentsInput = {
    street?: string | null
    zip_code?: string | null
    district?: string | null
    complement?: string | null
    city?: string | null
    state?: string | null
    number?: string | null
    active?: boolean
    professionals?: professionalsCreateNestedManyWithoutAdressesInput
  }

  export type adressesUncheckedCreateWithoutStudentsInput = {
    id?: number
    street?: string | null
    zip_code?: string | null
    district?: string | null
    complement?: string | null
    city?: string | null
    state?: string | null
    number?: string | null
    active?: boolean
    professionals?: professionalsUncheckedCreateNestedManyWithoutAdressesInput
  }

  export type adressesCreateOrConnectWithoutStudentsInput = {
    where: adressesWhereUniqueInput
    create: XOR<adressesCreateWithoutStudentsInput, adressesUncheckedCreateWithoutStudentsInput>
  }

  export type records_of_studentsUpsertWithWhereUniqueWithoutStudentsInput = {
    where: records_of_studentsWhereUniqueInput
    update: XOR<records_of_studentsUpdateWithoutStudentsInput, records_of_studentsUncheckedUpdateWithoutStudentsInput>
    create: XOR<records_of_studentsCreateWithoutStudentsInput, records_of_studentsUncheckedCreateWithoutStudentsInput>
  }

  export type records_of_studentsUpdateWithWhereUniqueWithoutStudentsInput = {
    where: records_of_studentsWhereUniqueInput
    data: XOR<records_of_studentsUpdateWithoutStudentsInput, records_of_studentsUncheckedUpdateWithoutStudentsInput>
  }

  export type records_of_studentsUpdateManyWithWhereWithoutStudentsInput = {
    where: records_of_studentsScalarWhereInput
    data: XOR<records_of_studentsUpdateManyMutationInput, records_of_studentsUncheckedUpdateManyWithoutStudentsInput>
  }

  export type records_of_studentsScalarWhereInput = {
    AND?: records_of_studentsScalarWhereInput | records_of_studentsScalarWhereInput[]
    OR?: records_of_studentsScalarWhereInput[]
    NOT?: records_of_studentsScalarWhereInput | records_of_studentsScalarWhereInput[]
    id?: IntFilter<"records_of_students"> | number
    students_id?: IntFilter<"records_of_students"> | number
    description?: StringNullableFilter<"records_of_students"> | string | null
    title?: StringNullableFilter<"records_of_students"> | string | null
    date?: DateTimeNullableFilter<"records_of_students"> | Date | string | null
  }

  export type registrationsUpsertWithWhereUniqueWithoutStudentsInput = {
    where: registrationsWhereUniqueInput
    update: XOR<registrationsUpdateWithoutStudentsInput, registrationsUncheckedUpdateWithoutStudentsInput>
    create: XOR<registrationsCreateWithoutStudentsInput, registrationsUncheckedCreateWithoutStudentsInput>
  }

  export type registrationsUpdateWithWhereUniqueWithoutStudentsInput = {
    where: registrationsWhereUniqueInput
    data: XOR<registrationsUpdateWithoutStudentsInput, registrationsUncheckedUpdateWithoutStudentsInput>
  }

  export type registrationsUpdateManyWithWhereWithoutStudentsInput = {
    where: registrationsScalarWhereInput
    data: XOR<registrationsUpdateManyMutationInput, registrationsUncheckedUpdateManyWithoutStudentsInput>
  }

  export type adressesUpsertWithoutStudentsInput = {
    update: XOR<adressesUpdateWithoutStudentsInput, adressesUncheckedUpdateWithoutStudentsInput>
    create: XOR<adressesCreateWithoutStudentsInput, adressesUncheckedCreateWithoutStudentsInput>
    where?: adressesWhereInput
  }

  export type adressesUpdateToOneWithWhereWithoutStudentsInput = {
    where?: adressesWhereInput
    data: XOR<adressesUpdateWithoutStudentsInput, adressesUncheckedUpdateWithoutStudentsInput>
  }

  export type adressesUpdateWithoutStudentsInput = {
    street?: NullableStringFieldUpdateOperationsInput | string | null
    zip_code?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    professionals?: professionalsUpdateManyWithoutAdressesNestedInput
  }

  export type adressesUncheckedUpdateWithoutStudentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    street?: NullableStringFieldUpdateOperationsInput | string | null
    zip_code?: NullableStringFieldUpdateOperationsInput | string | null
    district?: NullableStringFieldUpdateOperationsInput | string | null
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    professionals?: professionalsUncheckedUpdateManyWithoutAdressesNestedInput
  }

  export type classroomsCreateWithoutStudents_has_classroomsInput = {
    date: string
    hour: string
    created_at?: Date | string
    classes?: classesCreateNestedManyWithoutClassroomsInput
    books: booksCreateNestedOneWithoutClassroomsInput
  }

  export type classroomsUncheckedCreateWithoutStudents_has_classroomsInput = {
    id?: number
    date: string
    hour: string
    books_id: number
    created_at?: Date | string
    classes?: classesUncheckedCreateNestedManyWithoutClassroomsInput
  }

  export type classroomsCreateOrConnectWithoutStudents_has_classroomsInput = {
    where: classroomsWhereUniqueInput
    create: XOR<classroomsCreateWithoutStudents_has_classroomsInput, classroomsUncheckedCreateWithoutStudents_has_classroomsInput>
  }

  export type registrationsCreateWithoutStudents_has_classroomsInput = {
    start_date?: Date | string
    end_date: Date | string
    monthly_fee_amount?: number | null
    created_by?: number | null
    created_at?: Date | string | null
    locked?: boolean | null
    completed?: boolean | null
    monthly_fee?: monthly_feeCreateNestedManyWithoutRegistrationsInput
    courses: coursesCreateNestedOneWithoutRegistrationsInput
    students: studentsCreateNestedOneWithoutRegistrationsInput
    tasks?: tasksCreateNestedManyWithoutRegistrationsInput
  }

  export type registrationsUncheckedCreateWithoutStudents_has_classroomsInput = {
    id?: number
    students_id: number
    courses_id: number
    start_date?: Date | string
    end_date: Date | string
    monthly_fee_amount?: number | null
    created_by?: number | null
    created_at?: Date | string | null
    locked?: boolean | null
    completed?: boolean | null
    monthly_fee?: monthly_feeUncheckedCreateNestedManyWithoutRegistrationsInput
    tasks?: tasksUncheckedCreateNestedManyWithoutRegistrationsInput
  }

  export type registrationsCreateOrConnectWithoutStudents_has_classroomsInput = {
    where: registrationsWhereUniqueInput
    create: XOR<registrationsCreateWithoutStudents_has_classroomsInput, registrationsUncheckedCreateWithoutStudents_has_classroomsInput>
  }

  export type classroomsUpsertWithoutStudents_has_classroomsInput = {
    update: XOR<classroomsUpdateWithoutStudents_has_classroomsInput, classroomsUncheckedUpdateWithoutStudents_has_classroomsInput>
    create: XOR<classroomsCreateWithoutStudents_has_classroomsInput, classroomsUncheckedCreateWithoutStudents_has_classroomsInput>
    where?: classroomsWhereInput
  }

  export type classroomsUpdateToOneWithWhereWithoutStudents_has_classroomsInput = {
    where?: classroomsWhereInput
    data: XOR<classroomsUpdateWithoutStudents_has_classroomsInput, classroomsUncheckedUpdateWithoutStudents_has_classroomsInput>
  }

  export type classroomsUpdateWithoutStudents_has_classroomsInput = {
    date?: StringFieldUpdateOperationsInput | string
    hour?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    classes?: classesUpdateManyWithoutClassroomsNestedInput
    books?: booksUpdateOneRequiredWithoutClassroomsNestedInput
  }

  export type classroomsUncheckedUpdateWithoutStudents_has_classroomsInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: StringFieldUpdateOperationsInput | string
    hour?: StringFieldUpdateOperationsInput | string
    books_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    classes?: classesUncheckedUpdateManyWithoutClassroomsNestedInput
  }

  export type registrationsUpsertWithoutStudents_has_classroomsInput = {
    update: XOR<registrationsUpdateWithoutStudents_has_classroomsInput, registrationsUncheckedUpdateWithoutStudents_has_classroomsInput>
    create: XOR<registrationsCreateWithoutStudents_has_classroomsInput, registrationsUncheckedCreateWithoutStudents_has_classroomsInput>
    where?: registrationsWhereInput
  }

  export type registrationsUpdateToOneWithWhereWithoutStudents_has_classroomsInput = {
    where?: registrationsWhereInput
    data: XOR<registrationsUpdateWithoutStudents_has_classroomsInput, registrationsUncheckedUpdateWithoutStudents_has_classroomsInput>
  }

  export type registrationsUpdateWithoutStudents_has_classroomsInput = {
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthly_fee_amount?: NullableFloatFieldUpdateOperationsInput | number | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    locked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    completed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    monthly_fee?: monthly_feeUpdateManyWithoutRegistrationsNestedInput
    courses?: coursesUpdateOneRequiredWithoutRegistrationsNestedInput
    students?: studentsUpdateOneRequiredWithoutRegistrationsNestedInput
    tasks?: tasksUpdateManyWithoutRegistrationsNestedInput
  }

  export type registrationsUncheckedUpdateWithoutStudents_has_classroomsInput = {
    id?: IntFieldUpdateOperationsInput | number
    students_id?: IntFieldUpdateOperationsInput | number
    courses_id?: IntFieldUpdateOperationsInput | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthly_fee_amount?: NullableFloatFieldUpdateOperationsInput | number | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    locked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    completed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    monthly_fee?: monthly_feeUncheckedUpdateManyWithoutRegistrationsNestedInput
    tasks?: tasksUncheckedUpdateManyWithoutRegistrationsNestedInput
  }

  export type lessonsCreateWithoutTasksInput = {
    name?: string | null
    url?: string | null
    position?: number | null
    books: booksCreateNestedOneWithoutLessonsInput
  }

  export type lessonsUncheckedCreateWithoutTasksInput = {
    id?: number
    books_id: number
    name?: string | null
    url?: string | null
    position?: number | null
  }

  export type lessonsCreateOrConnectWithoutTasksInput = {
    where: lessonsWhereUniqueInput
    create: XOR<lessonsCreateWithoutTasksInput, lessonsUncheckedCreateWithoutTasksInput>
  }

  export type registrationsCreateWithoutTasksInput = {
    start_date?: Date | string
    end_date: Date | string
    monthly_fee_amount?: number | null
    created_by?: number | null
    created_at?: Date | string | null
    locked?: boolean | null
    completed?: boolean | null
    monthly_fee?: monthly_feeCreateNestedManyWithoutRegistrationsInput
    courses: coursesCreateNestedOneWithoutRegistrationsInput
    students: studentsCreateNestedOneWithoutRegistrationsInput
    students_has_classrooms?: students_has_classroomsCreateNestedOneWithoutRegistrationsInput
  }

  export type registrationsUncheckedCreateWithoutTasksInput = {
    id?: number
    students_id: number
    courses_id: number
    start_date?: Date | string
    end_date: Date | string
    monthly_fee_amount?: number | null
    created_by?: number | null
    created_at?: Date | string | null
    locked?: boolean | null
    completed?: boolean | null
    monthly_fee?: monthly_feeUncheckedCreateNestedManyWithoutRegistrationsInput
    students_has_classrooms?: students_has_classroomsUncheckedCreateNestedOneWithoutRegistrationsInput
  }

  export type registrationsCreateOrConnectWithoutTasksInput = {
    where: registrationsWhereUniqueInput
    create: XOR<registrationsCreateWithoutTasksInput, registrationsUncheckedCreateWithoutTasksInput>
  }

  export type lessonsUpsertWithoutTasksInput = {
    update: XOR<lessonsUpdateWithoutTasksInput, lessonsUncheckedUpdateWithoutTasksInput>
    create: XOR<lessonsCreateWithoutTasksInput, lessonsUncheckedCreateWithoutTasksInput>
    where?: lessonsWhereInput
  }

  export type lessonsUpdateToOneWithWhereWithoutTasksInput = {
    where?: lessonsWhereInput
    data: XOR<lessonsUpdateWithoutTasksInput, lessonsUncheckedUpdateWithoutTasksInput>
  }

  export type lessonsUpdateWithoutTasksInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableIntFieldUpdateOperationsInput | number | null
    books?: booksUpdateOneRequiredWithoutLessonsNestedInput
  }

  export type lessonsUncheckedUpdateWithoutTasksInput = {
    id?: IntFieldUpdateOperationsInput | number
    books_id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type registrationsUpsertWithoutTasksInput = {
    update: XOR<registrationsUpdateWithoutTasksInput, registrationsUncheckedUpdateWithoutTasksInput>
    create: XOR<registrationsCreateWithoutTasksInput, registrationsUncheckedCreateWithoutTasksInput>
    where?: registrationsWhereInput
  }

  export type registrationsUpdateToOneWithWhereWithoutTasksInput = {
    where?: registrationsWhereInput
    data: XOR<registrationsUpdateWithoutTasksInput, registrationsUncheckedUpdateWithoutTasksInput>
  }

  export type registrationsUpdateWithoutTasksInput = {
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthly_fee_amount?: NullableFloatFieldUpdateOperationsInput | number | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    locked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    completed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    monthly_fee?: monthly_feeUpdateManyWithoutRegistrationsNestedInput
    courses?: coursesUpdateOneRequiredWithoutRegistrationsNestedInput
    students?: studentsUpdateOneRequiredWithoutRegistrationsNestedInput
    students_has_classrooms?: students_has_classroomsUpdateOneWithoutRegistrationsNestedInput
  }

  export type registrationsUncheckedUpdateWithoutTasksInput = {
    id?: IntFieldUpdateOperationsInput | number
    students_id?: IntFieldUpdateOperationsInput | number
    courses_id?: IntFieldUpdateOperationsInput | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthly_fee_amount?: NullableFloatFieldUpdateOperationsInput | number | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    locked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    completed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    monthly_fee?: monthly_feeUncheckedUpdateManyWithoutRegistrationsNestedInput
    students_has_classrooms?: students_has_classroomsUncheckedUpdateOneWithoutRegistrationsNestedInput
  }

  export type professionalsCreateManyAdressesInput = {
    id?: number
    role_id: number
    cpf: string
    name?: string | null
    first_name: string
    last_name: string
    phone: string
    email: string
    gender: string
    date_of_birth: Date | string
    active?: boolean
    admin?: boolean
    avatar_url?: string | null
    password: string
    user: string
    hour_value?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type studentsCreateManyAdressesInput = {
    id?: number
    email: string
    name?: string | null
    first_name: string
    last_name: string
    cpf: string
    phone: string
    gender: string
    date_of_birth: Date | string
    password: string
    user: string
    created_at?: Date | string | null
    created_by?: number | null
    avatar_url?: string | null
    updated_at?: Date | string | null
    updated_by?: number | null
    active?: boolean
  }

  export type professionalsUpdateWithoutAdressesInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
    admin?: BoolFieldUpdateOperationsInput | boolean
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    user?: StringFieldUpdateOperationsInput | string
    hour_value?: NullableFloatFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    classes?: classesUpdateManyWithoutProfessionalsNestedInput
    role?: roleUpdateOneRequiredWithoutProfessionalsNestedInput
  }

  export type professionalsUncheckedUpdateWithoutAdressesInput = {
    id?: IntFieldUpdateOperationsInput | number
    role_id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
    admin?: BoolFieldUpdateOperationsInput | boolean
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    user?: StringFieldUpdateOperationsInput | string
    hour_value?: NullableFloatFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    classes?: classesUncheckedUpdateManyWithoutProfessionalsNestedInput
  }

  export type professionalsUncheckedUpdateManyWithoutAdressesInput = {
    id?: IntFieldUpdateOperationsInput | number
    role_id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
    admin?: BoolFieldUpdateOperationsInput | boolean
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    user?: StringFieldUpdateOperationsInput | string
    hour_value?: NullableFloatFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type studentsUpdateWithoutAdressesInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    user?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    active?: BoolFieldUpdateOperationsInput | boolean
    records_of_students?: records_of_studentsUpdateManyWithoutStudentsNestedInput
    registrations?: registrationsUpdateManyWithoutStudentsNestedInput
  }

  export type studentsUncheckedUpdateWithoutAdressesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    user?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    active?: BoolFieldUpdateOperationsInput | boolean
    records_of_students?: records_of_studentsUncheckedUpdateManyWithoutStudentsNestedInput
    registrations?: registrationsUncheckedUpdateManyWithoutStudentsNestedInput
  }

  export type studentsUncheckedUpdateManyWithoutAdressesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    password?: StringFieldUpdateOperationsInput | string
    user?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_by?: NullableIntFieldUpdateOperationsInput | number | null
    active?: BoolFieldUpdateOperationsInput | boolean
  }

  export type classroomsCreateManyBooksInput = {
    id?: number
    date: string
    hour: string
    created_at?: Date | string
  }

  export type lessonsCreateManyBooksInput = {
    id?: number
    name?: string | null
    url?: string | null
    position?: number | null
  }

  export type classroomsUpdateWithoutBooksInput = {
    date?: StringFieldUpdateOperationsInput | string
    hour?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    classes?: classesUpdateManyWithoutClassroomsNestedInput
    students_has_classrooms?: students_has_classroomsUpdateManyWithoutClassroomsNestedInput
  }

  export type classroomsUncheckedUpdateWithoutBooksInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: StringFieldUpdateOperationsInput | string
    hour?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    classes?: classesUncheckedUpdateManyWithoutClassroomsNestedInput
    students_has_classrooms?: students_has_classroomsUncheckedUpdateManyWithoutClassroomsNestedInput
  }

  export type classroomsUncheckedUpdateManyWithoutBooksInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: StringFieldUpdateOperationsInput | string
    hour?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type lessonsUpdateWithoutBooksInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableIntFieldUpdateOperationsInput | number | null
    tasks?: tasksUpdateManyWithoutLessonsNestedInput
  }

  export type lessonsUncheckedUpdateWithoutBooksInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableIntFieldUpdateOperationsInput | number | null
    tasks?: tasksUncheckedUpdateManyWithoutLessonsNestedInput
  }

  export type lessonsUncheckedUpdateManyWithoutBooksInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type classesCreateManyClassroomsInput = {
    id?: number
    theme: string
    start_date: Date | string
    end_date: Date | string
    professionals_id: number
    presence_list_id: number
  }

  export type students_has_classroomsCreateManyClassroomsInput = {
    id?: number
    registrations_id: number
  }

  export type classesUpdateWithoutClassroomsInput = {
    theme?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    presence_list?: presence_listUpdateOneRequiredWithoutClassesNestedInput
    professionals?: professionalsUpdateOneRequiredWithoutClassesNestedInput
  }

  export type classesUncheckedUpdateWithoutClassroomsInput = {
    id?: IntFieldUpdateOperationsInput | number
    theme?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    professionals_id?: IntFieldUpdateOperationsInput | number
    presence_list_id?: IntFieldUpdateOperationsInput | number
  }

  export type classesUncheckedUpdateManyWithoutClassroomsInput = {
    id?: IntFieldUpdateOperationsInput | number
    theme?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    professionals_id?: IntFieldUpdateOperationsInput | number
    presence_list_id?: IntFieldUpdateOperationsInput | number
  }

  export type students_has_classroomsUpdateWithoutClassroomsInput = {
    registrations?: registrationsUpdateOneRequiredWithoutStudents_has_classroomsNestedInput
  }

  export type students_has_classroomsUncheckedUpdateWithoutClassroomsInput = {
    id?: IntFieldUpdateOperationsInput | number
    registrations_id?: IntFieldUpdateOperationsInput | number
  }

  export type students_has_classroomsUncheckedUpdateManyWithoutClassroomsInput = {
    id?: IntFieldUpdateOperationsInput | number
    registrations_id?: IntFieldUpdateOperationsInput | number
  }

  export type booksCreateManyCoursesInput = {
    id?: number
    name: string
    position: number
  }

  export type registrationsCreateManyCoursesInput = {
    id?: number
    students_id: number
    start_date?: Date | string
    end_date: Date | string
    monthly_fee_amount?: number | null
    created_by?: number | null
    created_at?: Date | string | null
    locked?: boolean | null
    completed?: boolean | null
  }

  export type booksUpdateWithoutCoursesInput = {
    name?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    classrooms?: classroomsUpdateManyWithoutBooksNestedInput
    lessons?: lessonsUpdateManyWithoutBooksNestedInput
  }

  export type booksUncheckedUpdateWithoutCoursesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
    classrooms?: classroomsUncheckedUpdateManyWithoutBooksNestedInput
    lessons?: lessonsUncheckedUpdateManyWithoutBooksNestedInput
  }

  export type booksUncheckedUpdateManyWithoutCoursesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    position?: IntFieldUpdateOperationsInput | number
  }

  export type registrationsUpdateWithoutCoursesInput = {
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthly_fee_amount?: NullableFloatFieldUpdateOperationsInput | number | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    locked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    completed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    monthly_fee?: monthly_feeUpdateManyWithoutRegistrationsNestedInput
    students?: studentsUpdateOneRequiredWithoutRegistrationsNestedInput
    students_has_classrooms?: students_has_classroomsUpdateOneWithoutRegistrationsNestedInput
    tasks?: tasksUpdateManyWithoutRegistrationsNestedInput
  }

  export type registrationsUncheckedUpdateWithoutCoursesInput = {
    id?: IntFieldUpdateOperationsInput | number
    students_id?: IntFieldUpdateOperationsInput | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthly_fee_amount?: NullableFloatFieldUpdateOperationsInput | number | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    locked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    completed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    monthly_fee?: monthly_feeUncheckedUpdateManyWithoutRegistrationsNestedInput
    students_has_classrooms?: students_has_classroomsUncheckedUpdateOneWithoutRegistrationsNestedInput
    tasks?: tasksUncheckedUpdateManyWithoutRegistrationsNestedInput
  }

  export type registrationsUncheckedUpdateManyWithoutCoursesInput = {
    id?: IntFieldUpdateOperationsInput | number
    students_id?: IntFieldUpdateOperationsInput | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthly_fee_amount?: NullableFloatFieldUpdateOperationsInput | number | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    locked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    completed?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type tasksCreateManyLessonsInput = {
    scores_id: number
    registrations_id: number
    date?: Date | string
    response?: string | null
    score_obtained?: number | null
    question?: string | null
    total_score?: number | null
  }

  export type tasksUpdateWithoutLessonsInput = {
    scores_id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    response?: NullableStringFieldUpdateOperationsInput | string | null
    score_obtained?: NullableFloatFieldUpdateOperationsInput | number | null
    question?: NullableStringFieldUpdateOperationsInput | string | null
    total_score?: NullableFloatFieldUpdateOperationsInput | number | null
    registrations?: registrationsUpdateOneRequiredWithoutTasksNestedInput
  }

  export type tasksUncheckedUpdateWithoutLessonsInput = {
    scores_id?: IntFieldUpdateOperationsInput | number
    registrations_id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    response?: NullableStringFieldUpdateOperationsInput | string | null
    score_obtained?: NullableFloatFieldUpdateOperationsInput | number | null
    question?: NullableStringFieldUpdateOperationsInput | string | null
    total_score?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type tasksUncheckedUpdateManyWithoutLessonsInput = {
    scores_id?: IntFieldUpdateOperationsInput | number
    registrations_id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    response?: NullableStringFieldUpdateOperationsInput | string | null
    score_obtained?: NullableFloatFieldUpdateOperationsInput | number | null
    question?: NullableStringFieldUpdateOperationsInput | string | null
    total_score?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type classesCreateManyPresence_listInput = {
    id?: number
    theme: string
    start_date: Date | string
    end_date: Date | string
    professionals_id: number
    classrooms_id: number
  }

  export type classesUpdateWithoutPresence_listInput = {
    theme?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    classrooms?: classroomsUpdateOneRequiredWithoutClassesNestedInput
    professionals?: professionalsUpdateOneRequiredWithoutClassesNestedInput
  }

  export type classesUncheckedUpdateWithoutPresence_listInput = {
    id?: IntFieldUpdateOperationsInput | number
    theme?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    professionals_id?: IntFieldUpdateOperationsInput | number
    classrooms_id?: IntFieldUpdateOperationsInput | number
  }

  export type classesUncheckedUpdateManyWithoutPresence_listInput = {
    id?: IntFieldUpdateOperationsInput | number
    theme?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    professionals_id?: IntFieldUpdateOperationsInput | number
    classrooms_id?: IntFieldUpdateOperationsInput | number
  }

  export type classesCreateManyProfessionalsInput = {
    id?: number
    theme: string
    start_date: Date | string
    end_date: Date | string
    classrooms_id: number
    presence_list_id: number
  }

  export type classesUpdateWithoutProfessionalsInput = {
    theme?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    classrooms?: classroomsUpdateOneRequiredWithoutClassesNestedInput
    presence_list?: presence_listUpdateOneRequiredWithoutClassesNestedInput
  }

  export type classesUncheckedUpdateWithoutProfessionalsInput = {
    id?: IntFieldUpdateOperationsInput | number
    theme?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    classrooms_id?: IntFieldUpdateOperationsInput | number
    presence_list_id?: IntFieldUpdateOperationsInput | number
  }

  export type classesUncheckedUpdateManyWithoutProfessionalsInput = {
    id?: IntFieldUpdateOperationsInput | number
    theme?: StringFieldUpdateOperationsInput | string
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    classrooms_id?: IntFieldUpdateOperationsInput | number
    presence_list_id?: IntFieldUpdateOperationsInput | number
  }

  export type monthly_feeCreateManyRegistrationsInput = {
    id?: number
    due_date?: Date | string | null
    amount_to_be_paid?: number | null
    amount_paid?: number | null
    date_of_paid?: Date | string | null
    payment_method?: string | null
    paid?: boolean | null
  }

  export type tasksCreateManyRegistrationsInput = {
    scores_id: number
    lessons_id: number
    date?: Date | string
    response?: string | null
    score_obtained?: number | null
    question?: string | null
    total_score?: number | null
  }

  export type monthly_feeUpdateWithoutRegistrationsInput = {
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount_to_be_paid?: NullableFloatFieldUpdateOperationsInput | number | null
    amount_paid?: NullableFloatFieldUpdateOperationsInput | number | null
    date_of_paid?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_method?: NullableStringFieldUpdateOperationsInput | string | null
    paid?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type monthly_feeUncheckedUpdateWithoutRegistrationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount_to_be_paid?: NullableFloatFieldUpdateOperationsInput | number | null
    amount_paid?: NullableFloatFieldUpdateOperationsInput | number | null
    date_of_paid?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_method?: NullableStringFieldUpdateOperationsInput | string | null
    paid?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type monthly_feeUncheckedUpdateManyWithoutRegistrationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    due_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amount_to_be_paid?: NullableFloatFieldUpdateOperationsInput | number | null
    amount_paid?: NullableFloatFieldUpdateOperationsInput | number | null
    date_of_paid?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_method?: NullableStringFieldUpdateOperationsInput | string | null
    paid?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type tasksUpdateWithoutRegistrationsInput = {
    scores_id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    response?: NullableStringFieldUpdateOperationsInput | string | null
    score_obtained?: NullableFloatFieldUpdateOperationsInput | number | null
    question?: NullableStringFieldUpdateOperationsInput | string | null
    total_score?: NullableFloatFieldUpdateOperationsInput | number | null
    lessons?: lessonsUpdateOneRequiredWithoutTasksNestedInput
  }

  export type tasksUncheckedUpdateWithoutRegistrationsInput = {
    scores_id?: IntFieldUpdateOperationsInput | number
    lessons_id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    response?: NullableStringFieldUpdateOperationsInput | string | null
    score_obtained?: NullableFloatFieldUpdateOperationsInput | number | null
    question?: NullableStringFieldUpdateOperationsInput | string | null
    total_score?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type tasksUncheckedUpdateManyWithoutRegistrationsInput = {
    scores_id?: IntFieldUpdateOperationsInput | number
    lessons_id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    response?: NullableStringFieldUpdateOperationsInput | string | null
    score_obtained?: NullableFloatFieldUpdateOperationsInput | number | null
    question?: NullableStringFieldUpdateOperationsInput | string | null
    total_score?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type professionalsCreateManyRoleInput = {
    id?: number
    adresses_id: number
    cpf: string
    name?: string | null
    first_name: string
    last_name: string
    phone: string
    email: string
    gender: string
    date_of_birth: Date | string
    active?: boolean
    admin?: boolean
    avatar_url?: string | null
    password: string
    user: string
    hour_value?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type professionalsUpdateWithoutRoleInput = {
    cpf?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
    admin?: BoolFieldUpdateOperationsInput | boolean
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    user?: StringFieldUpdateOperationsInput | string
    hour_value?: NullableFloatFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    classes?: classesUpdateManyWithoutProfessionalsNestedInput
    adresses?: adressesUpdateOneRequiredWithoutProfessionalsNestedInput
  }

  export type professionalsUncheckedUpdateWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    adresses_id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
    admin?: BoolFieldUpdateOperationsInput | boolean
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    user?: StringFieldUpdateOperationsInput | string
    hour_value?: NullableFloatFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    classes?: classesUncheckedUpdateManyWithoutProfessionalsNestedInput
  }

  export type professionalsUncheckedUpdateManyWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    adresses_id?: IntFieldUpdateOperationsInput | number
    cpf?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    active?: BoolFieldUpdateOperationsInput | boolean
    admin?: BoolFieldUpdateOperationsInput | boolean
    avatar_url?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    user?: StringFieldUpdateOperationsInput | string
    hour_value?: NullableFloatFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type records_of_studentsCreateManyStudentsInput = {
    id?: number
    description?: string | null
    title?: string | null
    date?: Date | string | null
  }

  export type registrationsCreateManyStudentsInput = {
    id?: number
    courses_id: number
    start_date?: Date | string
    end_date: Date | string
    monthly_fee_amount?: number | null
    created_by?: number | null
    created_at?: Date | string | null
    locked?: boolean | null
    completed?: boolean | null
  }

  export type records_of_studentsUpdateWithoutStudentsInput = {
    description?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type records_of_studentsUncheckedUpdateWithoutStudentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type records_of_studentsUncheckedUpdateManyWithoutStudentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    title?: NullableStringFieldUpdateOperationsInput | string | null
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type registrationsUpdateWithoutStudentsInput = {
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthly_fee_amount?: NullableFloatFieldUpdateOperationsInput | number | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    locked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    completed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    monthly_fee?: monthly_feeUpdateManyWithoutRegistrationsNestedInput
    courses?: coursesUpdateOneRequiredWithoutRegistrationsNestedInput
    students_has_classrooms?: students_has_classroomsUpdateOneWithoutRegistrationsNestedInput
    tasks?: tasksUpdateManyWithoutRegistrationsNestedInput
  }

  export type registrationsUncheckedUpdateWithoutStudentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    courses_id?: IntFieldUpdateOperationsInput | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthly_fee_amount?: NullableFloatFieldUpdateOperationsInput | number | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    locked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    completed?: NullableBoolFieldUpdateOperationsInput | boolean | null
    monthly_fee?: monthly_feeUncheckedUpdateManyWithoutRegistrationsNestedInput
    students_has_classrooms?: students_has_classroomsUncheckedUpdateOneWithoutRegistrationsNestedInput
    tasks?: tasksUncheckedUpdateManyWithoutRegistrationsNestedInput
  }

  export type registrationsUncheckedUpdateManyWithoutStudentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    courses_id?: IntFieldUpdateOperationsInput | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    monthly_fee_amount?: NullableFloatFieldUpdateOperationsInput | number | null
    created_by?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    locked?: NullableBoolFieldUpdateOperationsInput | boolean | null
    completed?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}